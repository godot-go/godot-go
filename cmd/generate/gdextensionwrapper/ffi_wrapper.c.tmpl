{{ $view := . -}}
/*------------------------------------------------------------------------------
//   This code was generated by template ffi_wrapper.c.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_wrapper.h.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
#include <godot/gdextension_interface.h>
#include "ffi_wrapper.gen.h"
#include "stacktrace.h"

/* Go cannot call C function pointers directly, so we must generate C wrapper code to call the functions. */

{{ range $i, $f := $view.CollectFunctions -}}
	{{ $f.ReturnType.CStyleString }} cgo_callfn_{{ $f.Name }}(
		{{- "const" }} {{ $f.Name }} fn
		{{- range $j, $arg := $f.Arguments -}}
			, {{ $arg.CStyleString $j }}
		{{- end -}}
	) {
		printStacktrace();
		{{ if ne "void" $f.ReturnType.CStyleString -}} return {{- end }} fn(
			{{- range $j, $arg := $f.Arguments }}
				{{- if gt $j 0 }}, {{ end }}
				{{- $arg.ResolvedName $j }}
			{{- end -}}
		);
	}
{{ end -}}

{{ range $i, $t := $view.CollectStructs }}
	{{- $fns := $t.CollectFunctions -}}

	{{- if gt (len $fns) 0 -}}
		/* struct ({{ $i }}) {{ $t.Name }} */
		{{ range $j, $f := $fns -}}
			{{ $f.ReturnType.CStyleString }} cgo_callfn_{{ $t.Name }}_{{ $f.Name }}(
				{{- "const" }} {{ $t.Name }} * p_struct
				{{- range $k, $arg := $f.Arguments -}}
					, {{ if $arg.Type.Primative }}{{ $arg.Type.CStyleString }} {{ $arg.Name -}}{{ else }}{{ $arg.Type.Function.CStyleString }}{{ end }}
				{{- end -}}
			) {
				{{ if ne "void" $f.ReturnType.CStyleString -}} return {{- end }} p_struct->{{ $f.Name }}(
					{{- range $k, $arg := $f.Arguments }}
						{{- if gt $k 0 }}, {{ end }}
						{{ if $arg.Type.Primative }}{{- $arg.Name }}{{ else }}{{ $arg.Type.Function.Name}}{{ end }}
					{{- end -}}
				);
			}
		{{ end -}}
	{{ end -}}
{{ end -}}
