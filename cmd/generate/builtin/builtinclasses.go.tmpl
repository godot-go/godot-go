{{ $view := . -}}
package builtin

/*------------------------------------------------------------------------------
//   This code was generated by template builtinclasses.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "builtinclasses.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//revive:disable

// #include <godot/gdextension_interface.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
    "runtime"

	"github.com/godot-go/godot-go/pkg/log"
    "go.uber.org/zap"
	. "github.com/godot-go/godot-go/pkg/ffi"
)

{{ $sizes := $view.Float64BuiltinClassSize -}}

type GDBuiltInClass interface {
	NativeConstPtr() GDExtensionConstTypePtr
	NativePtr() GDExtensionTypePtr
}

type GDBuiltInDestroyableClass interface {
	GDBuiltInClass
	Destroy()
}

const (
{{ range $i, $c := $view.FilteredBuiltinClasses -}}
    {{ $c.Name }}Size = {{ $sizes.FindSize $c.Name }}
{{ end -}}
)

var (
{{ range $i, $c := $view.FilteredBuiltinClasses -}}
    {{ $c.Name }}Encoder      argumentEncoder[{{ $c.Name }}, {{ $c.Name }}]
{{ end -}}
)

func initBuiltinClassEncoders() {
{{ range $i, $c := $view.FilteredBuiltinClasses -}}
    {{ $c.Name }}Encoder = createBuiltinClassEncoder[{{ $c.Name }}](GDEXTENSION_VARIANT_TYPE_{{ upper (snakeCase $c.Name) }}, {{ $c.Name }}Size)
{{ end -}}
}

// built-in classes
{{ range $i, $c := $view.FilteredBuiltinClasses -}}
{{ $classSize := $sizes.FindSize $c.Name }}
{{ if $c.HasDestructor -}}
var _ GDBuiltInDestroyableClass = (*{{ $c.Name }})(nil)
{{ else -}}
var _ GDBuiltInClass = (*{{ $c.Name }})(nil)
{{ end -}}

/*
 * {{ $c.Name }}
 * indexingReturnType: {{ $c.IndexingReturnType }}
 * isKeyed: {{ $c.IsKeyed }}
 * hasDestructor: {{ $c.HasDestructor }}
 */
type {{ $c.Name }} [{{ $classSize }}]uint8

func (cx *{{ $c.Name }}) NativeConstPtr() GDExtensionConstTypePtr {
    return (GDExtensionConstTypePtr)(cx)
}

func (cx *{{ $c.Name }}) NativePtr() GDExtensionTypePtr {
    return (GDExtensionTypePtr)(cx)
}

// constructors
{{ range $j, $con := $c.FilteredConstructors -}}
// New{{ $c.Name }}, index: {{ $con.Index }}
func New{{ $c.Name }}{{ with $con.Arguments }}With{{- range $k, $arg := $con.Arguments -}}{{ upperFirstChar (goArgumentType $arg.Type) }}{{- end -}}{{- end -}}(
    {{- range $k, $arg := $con.Arguments -}}
		{{ goArgumentName $arg.Name }} {{ goArgumentType $arg.Type }},
	{{- end -}}
) {{ $c.Name }} {
    cx := {{ $c.Name }}{}
    ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
    pnr.Pin(ptr)
    {{ if $con.Arguments -}}
    var args [{{ len $con.Arguments }}]GDExtensionConstTypePtr
    {{ range $k, $arg := $con.Arguments -}}
        {{ $argName := goArgumentName $arg.Name -}}
        {{ $argType := goArgumentType $arg.Type -}}
        // {{ $arg.Type }}
        {{ if eq $argType "string" -}}
        cv{{ $k }} := NewStringWithUtf8Chars({{ $argName }})
        defer cv{{ $k }}.Destroy()
        args[{{ $k }}] = cv{{ $k }}.NativeConstPtr()
        {{ else -}}
        {{ if eq $argType "Variant" -}}
        args[{{ $k }}] = (GDExtensionConstTypePtr)(&{{ $argName }})
        {{ else if typeHasPtr $arg.Type -}}
        // {{ goEncoder $arg.Type }}
        args[{{ $k }}] = {{ $argName }}.NativeConstPtr()
        log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[{{ $k }}]", uintptr(args[{{ $k }}])), zap.Any("{{ $argName }}", {{ $argName }}))
        {{ else if eq $argType "Object" -}}
        arg{{ $k }} := {{ $argName }}.GetGodotObjectOwner()
        args[{{ $k }}] = (GDExtensionConstTypePtr)(&arg{{ $k }})
        {{ else -}}
        args[{{ $k }}] = (GDExtensionConstTypePtr)({{ goEncoder $argType }}.EncodeTypePtr({{ $argName }}))
        {{ end -}}
        pnr.Pin(args[{{ $k }}])
        {{ end -}}
	{{ end -}}
    {{ end -}}
    CallBuiltinConstructor(global{{ $c.Name }}MethodBindings.constructor_{{ $j }}, ptr, {{range $k, $arg := $con.Arguments -}}args[{{ $k }}],{{- end -}})
    log.Debug("CallBuiltinConstructor after", zap.String("name", "global{{ $c.Name }}MethodBindings.constructor_{{ $j }}"), zap.Any("cx", cx))
    return cx
}
{{ end }}

{{ if $c.HasDestructor -}}
func (cx *{{ $c.Name }}) Destroy() {
    md := (GDExtensionPtrDestructor)(global{{ $c.Name }}MethodBindings.destructor)
    bx := cx.NativePtr()
    pnr.Pin(bx)
    CallFunc_GDExtensionPtrDestructor(md, bx)
}
{{ end }}

// methods
{{ range $j, $m := $c.FilteredMethods -}}
{{ $fnReturnType := goReturnType $m.ReturnType }}
{{ $hasSomeArguments := (or $m.Arguments $m.IsVararg) }}
/* {{ goMethodName $m.Name }} : {{ $m.Name }}
 * is_vararg = {{ $m.IsVararg }}, is_static = {{ $m.IsStatic }}
 * goReturnType({{ $m.ReturnType }}) -> {{ $fnReturnType }}
 */
func (cx *{{ $c.Name }}) {{ goMethodName $m.Name }}(
    {{- range $k, $arg := $m.Arguments -}}
		{{ goArgumentName $arg.Name }} {{ goArgumentType $arg.Type }},
	{{- end -}}
    {{ if $m.IsVararg -}}
        varargs ...Variant
    {{- end -}}
) {{ $fnReturnType }} {
    mb := global{{ $c.Name }}MethodBindings.method_{{ $m.Name }}
    if mb == nil {
        log.Panic("method bind cannot be nil")
    }
    {{ if $m.IsStatic -}}
    bx := (GDExtensionTypePtr)(nullptr)
    {{ else -}}
    bx := cx.NativePtr()
    {{ end -}}
    pnr.Pin(bx)
    if bx == nil {
        log.Panic("object cannot be nil")
    }
    {{ if $hasSomeArguments -}}
    sz := {{ len $m.Arguments -}} {{ if $m.IsVararg -}} + len(varargs) + 1 {{- end }}
	args := make([]GDExtensionTypePtr, sz, sz)
    {{ end -}}

    {{ range $j, $arg := $m.Arguments -}}
    {{ if goHasArgumentTypeEncoder $arg.Type -}}
    {{ if eq $arg.Type "Object" -}}
    arg{{ $j }} := {{ goArgumentName $arg.Name }}.GetGodotObjectOwner()
    args[{{ $j }}] = (GDExtensionTypePtr)(&arg{{ $j }})
    {{ else if goEncodeIsReference $arg.Type -}}
    args[{{ $j }}] = (GDExtensionTypePtr)(&{{ goArgumentName $arg.Name }})
    {{ else -}}
    args[{{ $j }}] = {{ goEncoder (goArgumentType $arg.Type) }}.EncodeTypePtr({{ goArgumentName $arg.Name }})
    {{ end -}}
    {{ else -}}
    args[{{ $j }}] = (GDExtensionTypePtr)(&{{ goArgumentName $arg.Name }})
    {{ end }}
    pnr.Pin(args[{{ $j }}])
    {{ end -}}{{/* range $m.Arguments */}}

    {{ if $m.IsVararg -}}
    for i := range varargs {
        args[i + {{ len $m.Arguments }}] = (GDExtensionTypePtr)(&varargs[i])
        pnr.Pin(args[i + {{ len $m.Arguments }}])
    }
    {{ end -}}

    {{ if $fnReturnType -}}
    ret := CallBuiltinMethodPtrRet[{{ $fnReturnType }}](mb, bx, {{ if $hasSomeArguments -}}args...{{ else }}nil{{ end }})
    {{ if $hasSomeArguments -}}
    runtime.KeepAlive(args)
    {{ end -}}
    return ret
    {{- else -}}
    CallBuiltinMethodPtrNoRet(mb, bx, {{ if $hasSomeArguments -}}args...{{ else }}nil{{ end }})
    {{ if $hasSomeArguments -}}
    runtime.KeepAlive(args)
    {{ end -}}
    {{ end -}}{{/* if fnReturnType */}}
}
{{ end }}

{{ if $c.IsKeyed -}}
func (cx *{{ $c.Name }}) GetKeyed(key string) Variant {
    gdStrKey := NewStringWithUtf8Chars(key)
    defer gdStrKey.Destroy()
    vKey := NewVariantString(gdStrKey)
    defer vKey.Destroy()
    var ret Variant
    CallFunc_GDExtensionPtrKeyedGetter(
        global{{ $c.Name }}MethodBindings.keyed_getter,
        cx.NativeConstPtr(),
        vKey.AsGDExtensionConstTypePtr(),
        ret.AsGDExtensionTypePtr(),
    )
	return ret
}

func (cx *{{ $c.Name }}) SetKeyed(key string, value Variant) {
    gdStrKey := NewStringWithUtf8Chars(key)
    defer gdStrKey.Destroy()
    vKey := NewVariantString(gdStrKey)
    defer vKey.Destroy()
    CallFunc_GDExtensionPtrKeyedSetter(
        global{{ $c.Name }}MethodBindings.keyed_setter,
        cx.NativePtr(),
        vKey.AsGDExtensionConstTypePtr(),
        value.AsGDExtensionConstTypePtr(),
    )
}
{{ end -}}

{{ if gt (len $c.IndexingReturnType) 0 -}}
func (cx *{{ $c.Name }}) GetIndexed(i int64) {{ goReturnType $c.IndexingReturnType }} {
    var ret {{ goReturnType $c.IndexingReturnType }}
    CallFunc_GDExtensionPtrIndexedGetter(
        global{{ $c.Name }}MethodBindings.indexed_getter,
        cx.NativeConstPtr(),
        (GDExtensionInt)(i),
        (GDExtensionTypePtr)(&ret),
    )
	return ret
}

func (cx *{{ $c.Name }}) SetIndexed(i int64, value {{ goReturnType $c.IndexingReturnType }}) {
    CallFunc_GDExtensionPtrIndexedSetter(
        global{{ $c.Name }}MethodBindings.indexed_setter,
        cx.NativePtr(),
        (GDExtensionInt)(i),
        (GDExtensionConstTypePtr)(&value),
    )
}
{{ end -}}

// members
{{ range $j, $m := $c.Members -}}
{{ $returnType := goReturnType $m.Type }}
{{ $decodeType := goDecodeNumberType $returnType }}
func (cx *{{ $c.Name }}) {{ goMethodName (print "MemberGet" $m.Name) }}() {{ $returnType }} {
    bx := cx.NativeConstPtr()
    ret := CallBuiltinPtrGetter[{{ $decodeType }}](global{{ $c.Name }}MethodBindings.member_{{ $m.Name }}_getter, bx)
    {{ if (eq $decodeType $returnType) -}}
        return ret
    {{ else -}}
        return {{ goEncoder $returnType }}.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))
    {{ end }}
}

{{ end -}}

{{ range $j, $op := $c.Operators -}}
// {{ upperFirstChar (getOperatorIdName $op.Name) }}{{ with $op.RightType }}_{{ $op.RightType }}{{ end }} operator
func (cx *{{ $c.Name }}) {{ upperFirstChar (getOperatorIdName $op.Name) }}{{ with $op.RightType }}_{{ $op.RightType }}{{ end }}(
    {{- if $op.RightType -}}
		right {{ goArgumentType $op.RightType }}
	{{- end -}}
) {{ goReturnType $op.ReturnType }} {
    lt := cx.NativeConstPtr()
    {{ if gt (len $op.RightType) 0 -}}
    {{ $argType := goArgumentType $op.RightType -}}
    {{ if goEncodeIsReference $argType -}}
    {{ if eq (goArgumentType $op.RightType) "Variant" -}}
    rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
    {{ else if eq (goArgumentType $op.RightType) "Object" -}}
    rt := right.AsGDExtensionConstTypePtr()
    {{ else -}}
    rt := right.NativeConstPtr()
    {{ end -}}
    {{ else -}}
    eRight := {{ goEncoder $argType }}.EncodeTypePtr(right)
    rt := (GDExtensionConstTypePtr)(eRight)
    {{ end -}}

    return CallBuiltinOperatorPtr[{{ goReturnType $op.ReturnType }}](global{{ $c.Name }}MethodBindings.operator_{{ getOperatorIdName $op.Name }}_{{ $op.RightType }}, lt, rt)
    {{ else -}}
    rt := (GDExtensionConstTypePtr)(nullptr)
    return CallBuiltinOperatorPtr[{{ goReturnType $op.ReturnType }}](global{{ $c.Name }}MethodBindings.operator_{{ getOperatorIdName $op.Name }}, lt, rt)
    {{ end -}}
}
{{ end -}}
{{ end -}}
