package gdextension

/*------------------------------------------------------------------------------
//   This code was generated by template builtinclasses.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "builtinclasses.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//revive:disable

// #include <godot/gdextension_interface.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
	"runtime"
	"unsafe"

	"github.com/godot-go/godot-go/pkg/log"
	"go.uber.org/zap"

	. "github.com/godot-go/godot-go/pkg/gdextensionffi"
)

// built-in classes
/*
 * String
 * indexingReturnType: String
 * isKeyed: false
 * hasDestructor: true
 */
type String struct {
	opaque [8]uint8
}

type stringMethodBindings struct {
	constructor_0                      GDExtensionPtrConstructor
	constructor_1                      GDExtensionPtrConstructor
	constructor_2                      GDExtensionPtrConstructor
	constructor_3                      GDExtensionPtrConstructor
	destructor                         GDExtensionPtrDestructor
	method_casecmp_to                  GDExtensionPtrBuiltInMethod
	method_nocasecmp_to                GDExtensionPtrBuiltInMethod
	method_naturalnocasecmp_to         GDExtensionPtrBuiltInMethod
	method_length                      GDExtensionPtrBuiltInMethod
	method_substr                      GDExtensionPtrBuiltInMethod
	method_get_slice                   GDExtensionPtrBuiltInMethod
	method_get_slicec                  GDExtensionPtrBuiltInMethod
	method_get_slice_count             GDExtensionPtrBuiltInMethod
	method_find                        GDExtensionPtrBuiltInMethod
	method_count                       GDExtensionPtrBuiltInMethod
	method_countn                      GDExtensionPtrBuiltInMethod
	method_findn                       GDExtensionPtrBuiltInMethod
	method_rfind                       GDExtensionPtrBuiltInMethod
	method_rfindn                      GDExtensionPtrBuiltInMethod
	method_match                       GDExtensionPtrBuiltInMethod
	method_matchn                      GDExtensionPtrBuiltInMethod
	method_begins_with                 GDExtensionPtrBuiltInMethod
	method_ends_with                   GDExtensionPtrBuiltInMethod
	method_is_subsequence_of           GDExtensionPtrBuiltInMethod
	method_is_subsequence_ofn          GDExtensionPtrBuiltInMethod
	method_bigrams                     GDExtensionPtrBuiltInMethod
	method_similarity                  GDExtensionPtrBuiltInMethod
	method_format                      GDExtensionPtrBuiltInMethod
	method_replace                     GDExtensionPtrBuiltInMethod
	method_replacen                    GDExtensionPtrBuiltInMethod
	method_repeat                      GDExtensionPtrBuiltInMethod
	method_insert                      GDExtensionPtrBuiltInMethod
	method_capitalize                  GDExtensionPtrBuiltInMethod
	method_to_camel_case               GDExtensionPtrBuiltInMethod
	method_to_pascal_case              GDExtensionPtrBuiltInMethod
	method_to_snake_case               GDExtensionPtrBuiltInMethod
	method_split                       GDExtensionPtrBuiltInMethod
	method_rsplit                      GDExtensionPtrBuiltInMethod
	method_split_floats                GDExtensionPtrBuiltInMethod
	method_join                        GDExtensionPtrBuiltInMethod
	method_to_upper                    GDExtensionPtrBuiltInMethod
	method_to_lower                    GDExtensionPtrBuiltInMethod
	method_left                        GDExtensionPtrBuiltInMethod
	method_right                       GDExtensionPtrBuiltInMethod
	method_strip_edges                 GDExtensionPtrBuiltInMethod
	method_strip_escapes               GDExtensionPtrBuiltInMethod
	method_lstrip                      GDExtensionPtrBuiltInMethod
	method_rstrip                      GDExtensionPtrBuiltInMethod
	method_get_extension               GDExtensionPtrBuiltInMethod
	method_get_basename                GDExtensionPtrBuiltInMethod
	method_path_join                   GDExtensionPtrBuiltInMethod
	method_unicode_at                  GDExtensionPtrBuiltInMethod
	method_indent                      GDExtensionPtrBuiltInMethod
	method_dedent                      GDExtensionPtrBuiltInMethod
	method_hash                        GDExtensionPtrBuiltInMethod
	method_md5_text                    GDExtensionPtrBuiltInMethod
	method_sha1_text                   GDExtensionPtrBuiltInMethod
	method_sha256_text                 GDExtensionPtrBuiltInMethod
	method_md5_buffer                  GDExtensionPtrBuiltInMethod
	method_sha1_buffer                 GDExtensionPtrBuiltInMethod
	method_sha256_buffer               GDExtensionPtrBuiltInMethod
	method_is_empty                    GDExtensionPtrBuiltInMethod
	method_contains                    GDExtensionPtrBuiltInMethod
	method_is_absolute_path            GDExtensionPtrBuiltInMethod
	method_is_relative_path            GDExtensionPtrBuiltInMethod
	method_simplify_path               GDExtensionPtrBuiltInMethod
	method_get_base_dir                GDExtensionPtrBuiltInMethod
	method_get_file                    GDExtensionPtrBuiltInMethod
	method_xml_escape                  GDExtensionPtrBuiltInMethod
	method_xml_unescape                GDExtensionPtrBuiltInMethod
	method_uri_encode                  GDExtensionPtrBuiltInMethod
	method_uri_decode                  GDExtensionPtrBuiltInMethod
	method_c_escape                    GDExtensionPtrBuiltInMethod
	method_c_unescape                  GDExtensionPtrBuiltInMethod
	method_json_escape                 GDExtensionPtrBuiltInMethod
	method_validate_node_name          GDExtensionPtrBuiltInMethod
	method_validate_filename           GDExtensionPtrBuiltInMethod
	method_is_valid_identifier         GDExtensionPtrBuiltInMethod
	method_is_valid_int                GDExtensionPtrBuiltInMethod
	method_is_valid_float              GDExtensionPtrBuiltInMethod
	method_is_valid_hex_number         GDExtensionPtrBuiltInMethod
	method_is_valid_html_color         GDExtensionPtrBuiltInMethod
	method_is_valid_ip_address         GDExtensionPtrBuiltInMethod
	method_is_valid_filename           GDExtensionPtrBuiltInMethod
	method_to_int                      GDExtensionPtrBuiltInMethod
	method_to_float                    GDExtensionPtrBuiltInMethod
	method_hex_to_int                  GDExtensionPtrBuiltInMethod
	method_bin_to_int                  GDExtensionPtrBuiltInMethod
	method_lpad                        GDExtensionPtrBuiltInMethod
	method_rpad                        GDExtensionPtrBuiltInMethod
	method_pad_decimals                GDExtensionPtrBuiltInMethod
	method_pad_zeros                   GDExtensionPtrBuiltInMethod
	method_trim_prefix                 GDExtensionPtrBuiltInMethod
	method_trim_suffix                 GDExtensionPtrBuiltInMethod
	method_to_ascii_buffer             GDExtensionPtrBuiltInMethod
	method_to_utf8_buffer              GDExtensionPtrBuiltInMethod
	method_to_utf16_buffer             GDExtensionPtrBuiltInMethod
	method_to_utf32_buffer             GDExtensionPtrBuiltInMethod
	method_num_scientific              GDExtensionPtrBuiltInMethod
	method_num                         GDExtensionPtrBuiltInMethod
	method_num_int64                   GDExtensionPtrBuiltInMethod
	method_num_uint64                  GDExtensionPtrBuiltInMethod
	method_chr                         GDExtensionPtrBuiltInMethod
	method_humanize_size               GDExtensionPtrBuiltInMethod
	indexed_setter                     GDExtensionPtrIndexedSetter
	indexed_getter                     GDExtensionPtrIndexedGetter
	operator_equal_Variant             GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant         GDExtensionPtrOperatorEvaluator
	operator_module_Variant            GDExtensionPtrOperatorEvaluator
	operator_module_bool               GDExtensionPtrOperatorEvaluator
	operator_module_int                GDExtensionPtrOperatorEvaluator
	operator_module_float              GDExtensionPtrOperatorEvaluator
	operator_equal_String              GDExtensionPtrOperatorEvaluator
	operator_not_equal_String          GDExtensionPtrOperatorEvaluator
	operator_less_String               GDExtensionPtrOperatorEvaluator
	operator_less_equal_String         GDExtensionPtrOperatorEvaluator
	operator_greater_String            GDExtensionPtrOperatorEvaluator
	operator_greater_equal_String      GDExtensionPtrOperatorEvaluator
	operator_add_String                GDExtensionPtrOperatorEvaluator
	operator_module_String             GDExtensionPtrOperatorEvaluator
	operator_in_String                 GDExtensionPtrOperatorEvaluator
	operator_module_Vector2            GDExtensionPtrOperatorEvaluator
	operator_module_Vector2i           GDExtensionPtrOperatorEvaluator
	operator_module_Rect2              GDExtensionPtrOperatorEvaluator
	operator_module_Rect2i             GDExtensionPtrOperatorEvaluator
	operator_module_Vector3            GDExtensionPtrOperatorEvaluator
	operator_module_Vector3i           GDExtensionPtrOperatorEvaluator
	operator_module_Transform2D        GDExtensionPtrOperatorEvaluator
	operator_module_Vector4            GDExtensionPtrOperatorEvaluator
	operator_module_Vector4i           GDExtensionPtrOperatorEvaluator
	operator_module_Plane              GDExtensionPtrOperatorEvaluator
	operator_module_Quaternion         GDExtensionPtrOperatorEvaluator
	operator_module_AABB               GDExtensionPtrOperatorEvaluator
	operator_module_Basis              GDExtensionPtrOperatorEvaluator
	operator_module_Transform3D        GDExtensionPtrOperatorEvaluator
	operator_module_Projection         GDExtensionPtrOperatorEvaluator
	operator_module_Color              GDExtensionPtrOperatorEvaluator
	operator_equal_StringName          GDExtensionPtrOperatorEvaluator
	operator_not_equal_StringName      GDExtensionPtrOperatorEvaluator
	operator_add_StringName            GDExtensionPtrOperatorEvaluator
	operator_module_StringName         GDExtensionPtrOperatorEvaluator
	operator_in_StringName             GDExtensionPtrOperatorEvaluator
	operator_module_NodePath           GDExtensionPtrOperatorEvaluator
	operator_module_Object             GDExtensionPtrOperatorEvaluator
	operator_in_Object                 GDExtensionPtrOperatorEvaluator
	operator_module_Callable           GDExtensionPtrOperatorEvaluator
	operator_module_Signal             GDExtensionPtrOperatorEvaluator
	operator_module_Dictionary         GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary             GDExtensionPtrOperatorEvaluator
	operator_module_Array              GDExtensionPtrOperatorEvaluator
	operator_in_Array                  GDExtensionPtrOperatorEvaluator
	operator_module_PackedByteArray    GDExtensionPtrOperatorEvaluator
	operator_module_PackedInt32Array   GDExtensionPtrOperatorEvaluator
	operator_module_PackedInt64Array   GDExtensionPtrOperatorEvaluator
	operator_module_PackedFloat32Array GDExtensionPtrOperatorEvaluator
	operator_module_PackedFloat64Array GDExtensionPtrOperatorEvaluator
	operator_module_PackedStringArray  GDExtensionPtrOperatorEvaluator
	operator_in_PackedStringArray      GDExtensionPtrOperatorEvaluator
	operator_module_PackedVector2Array GDExtensionPtrOperatorEvaluator
	operator_module_PackedVector3Array GDExtensionPtrOperatorEvaluator
	operator_module_PackedColorArray   GDExtensionPtrOperatorEvaluator
}

var globalStringMethodBindings stringMethodBindings

func stringInitConstructorBindings() {
	log.Debug("stringInitConstructorBindings called")

	log.Debug("globalStringMethodBindings.constructor_0")
	globalStringMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, 0)
	log.Debug("globalStringMethodBindings.constructor_1")
	globalStringMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, 1)
	log.Debug("globalStringMethodBindings.constructor_2")
	globalStringMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, 2)
	log.Debug("globalStringMethodBindings.constructor_3")
	globalStringMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, 3)
	log.Debug("globalStringMethodBindings.destructor")
	globalStringMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING)
}

func stringInitMethodBindings() {
	log.Debug("stringInitMethodBindings called")

	missingMethods := make([]string, 0, 99)

	methodName0 := NewStringNameWithLatin1Chars("casecmp_to")
	defer methodName0.Destroy()
	log.Debug("globalStringMethodBindings.method_casecmp_to")
	globalStringMethodBindings.method_casecmp_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName0.AsGDExtensionStringNamePtr(), 2920860731)
	if globalStringMethodBindings.method_casecmp_to == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_casecmp_to")
	}
	methodName1 := NewStringNameWithLatin1Chars("nocasecmp_to")
	defer methodName1.Destroy()
	log.Debug("globalStringMethodBindings.method_nocasecmp_to")
	globalStringMethodBindings.method_nocasecmp_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName1.AsGDExtensionStringNamePtr(), 2920860731)
	if globalStringMethodBindings.method_nocasecmp_to == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_nocasecmp_to")
	}
	methodName2 := NewStringNameWithLatin1Chars("naturalnocasecmp_to")
	defer methodName2.Destroy()
	log.Debug("globalStringMethodBindings.method_naturalnocasecmp_to")
	globalStringMethodBindings.method_naturalnocasecmp_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName2.AsGDExtensionStringNamePtr(), 2920860731)
	if globalStringMethodBindings.method_naturalnocasecmp_to == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_naturalnocasecmp_to")
	}
	methodName3 := NewStringNameWithLatin1Chars("length")
	defer methodName3.Destroy()
	log.Debug("globalStringMethodBindings.method_length")
	globalStringMethodBindings.method_length = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName3.AsGDExtensionStringNamePtr(), 3173160232)
	if globalStringMethodBindings.method_length == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_length")
	}
	methodName4 := NewStringNameWithLatin1Chars("substr")
	defer methodName4.Destroy()
	log.Debug("globalStringMethodBindings.method_substr")
	globalStringMethodBindings.method_substr = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName4.AsGDExtensionStringNamePtr(), 787537301)
	if globalStringMethodBindings.method_substr == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_substr")
	}
	methodName5 := NewStringNameWithLatin1Chars("get_slice")
	defer methodName5.Destroy()
	log.Debug("globalStringMethodBindings.method_get_slice")
	globalStringMethodBindings.method_get_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName5.AsGDExtensionStringNamePtr(), 3535100402)
	if globalStringMethodBindings.method_get_slice == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_get_slice")
	}
	methodName6 := NewStringNameWithLatin1Chars("get_slicec")
	defer methodName6.Destroy()
	log.Debug("globalStringMethodBindings.method_get_slicec")
	globalStringMethodBindings.method_get_slicec = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName6.AsGDExtensionStringNamePtr(), 787537301)
	if globalStringMethodBindings.method_get_slicec == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_get_slicec")
	}
	methodName7 := NewStringNameWithLatin1Chars("get_slice_count")
	defer methodName7.Destroy()
	log.Debug("globalStringMethodBindings.method_get_slice_count")
	globalStringMethodBindings.method_get_slice_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName7.AsGDExtensionStringNamePtr(), 2920860731)
	if globalStringMethodBindings.method_get_slice_count == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_get_slice_count")
	}
	methodName8 := NewStringNameWithLatin1Chars("find")
	defer methodName8.Destroy()
	log.Debug("globalStringMethodBindings.method_find")
	globalStringMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName8.AsGDExtensionStringNamePtr(), 1760645412)
	if globalStringMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_find")
	}
	methodName9 := NewStringNameWithLatin1Chars("count")
	defer methodName9.Destroy()
	log.Debug("globalStringMethodBindings.method_count")
	globalStringMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName9.AsGDExtensionStringNamePtr(), 2343087891)
	if globalStringMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_count")
	}
	methodName10 := NewStringNameWithLatin1Chars("countn")
	defer methodName10.Destroy()
	log.Debug("globalStringMethodBindings.method_countn")
	globalStringMethodBindings.method_countn = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName10.AsGDExtensionStringNamePtr(), 2343087891)
	if globalStringMethodBindings.method_countn == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_countn")
	}
	methodName11 := NewStringNameWithLatin1Chars("findn")
	defer methodName11.Destroy()
	log.Debug("globalStringMethodBindings.method_findn")
	globalStringMethodBindings.method_findn = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName11.AsGDExtensionStringNamePtr(), 1760645412)
	if globalStringMethodBindings.method_findn == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_findn")
	}
	methodName12 := NewStringNameWithLatin1Chars("rfind")
	defer methodName12.Destroy()
	log.Debug("globalStringMethodBindings.method_rfind")
	globalStringMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName12.AsGDExtensionStringNamePtr(), 1760645412)
	if globalStringMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_rfind")
	}
	methodName13 := NewStringNameWithLatin1Chars("rfindn")
	defer methodName13.Destroy()
	log.Debug("globalStringMethodBindings.method_rfindn")
	globalStringMethodBindings.method_rfindn = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName13.AsGDExtensionStringNamePtr(), 1760645412)
	if globalStringMethodBindings.method_rfindn == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_rfindn")
	}
	methodName14 := NewStringNameWithLatin1Chars("match")
	defer methodName14.Destroy()
	log.Debug("globalStringMethodBindings.method_match")
	globalStringMethodBindings.method_match = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName14.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringMethodBindings.method_match == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_match")
	}
	methodName15 := NewStringNameWithLatin1Chars("matchn")
	defer methodName15.Destroy()
	log.Debug("globalStringMethodBindings.method_matchn")
	globalStringMethodBindings.method_matchn = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName15.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringMethodBindings.method_matchn == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_matchn")
	}
	methodName16 := NewStringNameWithLatin1Chars("begins_with")
	defer methodName16.Destroy()
	log.Debug("globalStringMethodBindings.method_begins_with")
	globalStringMethodBindings.method_begins_with = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName16.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringMethodBindings.method_begins_with == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_begins_with")
	}
	methodName17 := NewStringNameWithLatin1Chars("ends_with")
	defer methodName17.Destroy()
	log.Debug("globalStringMethodBindings.method_ends_with")
	globalStringMethodBindings.method_ends_with = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName17.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringMethodBindings.method_ends_with == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_ends_with")
	}
	methodName18 := NewStringNameWithLatin1Chars("is_subsequence_of")
	defer methodName18.Destroy()
	log.Debug("globalStringMethodBindings.method_is_subsequence_of")
	globalStringMethodBindings.method_is_subsequence_of = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName18.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringMethodBindings.method_is_subsequence_of == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_subsequence_of")
	}
	methodName19 := NewStringNameWithLatin1Chars("is_subsequence_ofn")
	defer methodName19.Destroy()
	log.Debug("globalStringMethodBindings.method_is_subsequence_ofn")
	globalStringMethodBindings.method_is_subsequence_ofn = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName19.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringMethodBindings.method_is_subsequence_ofn == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_subsequence_ofn")
	}
	methodName20 := NewStringNameWithLatin1Chars("bigrams")
	defer methodName20.Destroy()
	log.Debug("globalStringMethodBindings.method_bigrams")
	globalStringMethodBindings.method_bigrams = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName20.AsGDExtensionStringNamePtr(), 747180633)
	if globalStringMethodBindings.method_bigrams == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_bigrams")
	}
	methodName21 := NewStringNameWithLatin1Chars("similarity")
	defer methodName21.Destroy()
	log.Debug("globalStringMethodBindings.method_similarity")
	globalStringMethodBindings.method_similarity = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName21.AsGDExtensionStringNamePtr(), 2697460964)
	if globalStringMethodBindings.method_similarity == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_similarity")
	}
	methodName22 := NewStringNameWithLatin1Chars("format")
	defer methodName22.Destroy()
	log.Debug("globalStringMethodBindings.method_format")
	globalStringMethodBindings.method_format = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName22.AsGDExtensionStringNamePtr(), 3212199029)
	if globalStringMethodBindings.method_format == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_format")
	}
	methodName23 := NewStringNameWithLatin1Chars("replace")
	defer methodName23.Destroy()
	log.Debug("globalStringMethodBindings.method_replace")
	globalStringMethodBindings.method_replace = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName23.AsGDExtensionStringNamePtr(), 1340436205)
	if globalStringMethodBindings.method_replace == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_replace")
	}
	methodName24 := NewStringNameWithLatin1Chars("replacen")
	defer methodName24.Destroy()
	log.Debug("globalStringMethodBindings.method_replacen")
	globalStringMethodBindings.method_replacen = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName24.AsGDExtensionStringNamePtr(), 1340436205)
	if globalStringMethodBindings.method_replacen == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_replacen")
	}
	methodName25 := NewStringNameWithLatin1Chars("repeat")
	defer methodName25.Destroy()
	log.Debug("globalStringMethodBindings.method_repeat")
	globalStringMethodBindings.method_repeat = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName25.AsGDExtensionStringNamePtr(), 2162347432)
	if globalStringMethodBindings.method_repeat == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_repeat")
	}
	methodName26 := NewStringNameWithLatin1Chars("insert")
	defer methodName26.Destroy()
	log.Debug("globalStringMethodBindings.method_insert")
	globalStringMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName26.AsGDExtensionStringNamePtr(), 248737229)
	if globalStringMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_insert")
	}
	methodName27 := NewStringNameWithLatin1Chars("capitalize")
	defer methodName27.Destroy()
	log.Debug("globalStringMethodBindings.method_capitalize")
	globalStringMethodBindings.method_capitalize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName27.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_capitalize == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_capitalize")
	}
	methodName28 := NewStringNameWithLatin1Chars("to_camel_case")
	defer methodName28.Destroy()
	log.Debug("globalStringMethodBindings.method_to_camel_case")
	globalStringMethodBindings.method_to_camel_case = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName28.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_to_camel_case == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_to_camel_case")
	}
	methodName29 := NewStringNameWithLatin1Chars("to_pascal_case")
	defer methodName29.Destroy()
	log.Debug("globalStringMethodBindings.method_to_pascal_case")
	globalStringMethodBindings.method_to_pascal_case = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName29.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_to_pascal_case == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_to_pascal_case")
	}
	methodName30 := NewStringNameWithLatin1Chars("to_snake_case")
	defer methodName30.Destroy()
	log.Debug("globalStringMethodBindings.method_to_snake_case")
	globalStringMethodBindings.method_to_snake_case = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName30.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_to_snake_case == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_to_snake_case")
	}
	methodName31 := NewStringNameWithLatin1Chars("split")
	defer methodName31.Destroy()
	log.Debug("globalStringMethodBindings.method_split")
	globalStringMethodBindings.method_split = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName31.AsGDExtensionStringNamePtr(), 1252735785)
	if globalStringMethodBindings.method_split == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_split")
	}
	methodName32 := NewStringNameWithLatin1Chars("rsplit")
	defer methodName32.Destroy()
	log.Debug("globalStringMethodBindings.method_rsplit")
	globalStringMethodBindings.method_rsplit = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName32.AsGDExtensionStringNamePtr(), 1252735785)
	if globalStringMethodBindings.method_rsplit == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_rsplit")
	}
	methodName33 := NewStringNameWithLatin1Chars("split_floats")
	defer methodName33.Destroy()
	log.Debug("globalStringMethodBindings.method_split_floats")
	globalStringMethodBindings.method_split_floats = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName33.AsGDExtensionStringNamePtr(), 2092079095)
	if globalStringMethodBindings.method_split_floats == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_split_floats")
	}
	methodName34 := NewStringNameWithLatin1Chars("join")
	defer methodName34.Destroy()
	log.Debug("globalStringMethodBindings.method_join")
	globalStringMethodBindings.method_join = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName34.AsGDExtensionStringNamePtr(), 3595973238)
	if globalStringMethodBindings.method_join == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_join")
	}
	methodName35 := NewStringNameWithLatin1Chars("to_upper")
	defer methodName35.Destroy()
	log.Debug("globalStringMethodBindings.method_to_upper")
	globalStringMethodBindings.method_to_upper = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName35.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_to_upper == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_to_upper")
	}
	methodName36 := NewStringNameWithLatin1Chars("to_lower")
	defer methodName36.Destroy()
	log.Debug("globalStringMethodBindings.method_to_lower")
	globalStringMethodBindings.method_to_lower = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName36.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_to_lower == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_to_lower")
	}
	methodName37 := NewStringNameWithLatin1Chars("left")
	defer methodName37.Destroy()
	log.Debug("globalStringMethodBindings.method_left")
	globalStringMethodBindings.method_left = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName37.AsGDExtensionStringNamePtr(), 2162347432)
	if globalStringMethodBindings.method_left == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_left")
	}
	methodName38 := NewStringNameWithLatin1Chars("right")
	defer methodName38.Destroy()
	log.Debug("globalStringMethodBindings.method_right")
	globalStringMethodBindings.method_right = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName38.AsGDExtensionStringNamePtr(), 2162347432)
	if globalStringMethodBindings.method_right == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_right")
	}
	methodName39 := NewStringNameWithLatin1Chars("strip_edges")
	defer methodName39.Destroy()
	log.Debug("globalStringMethodBindings.method_strip_edges")
	globalStringMethodBindings.method_strip_edges = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName39.AsGDExtensionStringNamePtr(), 907855311)
	if globalStringMethodBindings.method_strip_edges == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_strip_edges")
	}
	methodName40 := NewStringNameWithLatin1Chars("strip_escapes")
	defer methodName40.Destroy()
	log.Debug("globalStringMethodBindings.method_strip_escapes")
	globalStringMethodBindings.method_strip_escapes = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName40.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_strip_escapes == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_strip_escapes")
	}
	methodName41 := NewStringNameWithLatin1Chars("lstrip")
	defer methodName41.Destroy()
	log.Debug("globalStringMethodBindings.method_lstrip")
	globalStringMethodBindings.method_lstrip = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName41.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringMethodBindings.method_lstrip == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_lstrip")
	}
	methodName42 := NewStringNameWithLatin1Chars("rstrip")
	defer methodName42.Destroy()
	log.Debug("globalStringMethodBindings.method_rstrip")
	globalStringMethodBindings.method_rstrip = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName42.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringMethodBindings.method_rstrip == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_rstrip")
	}
	methodName43 := NewStringNameWithLatin1Chars("get_extension")
	defer methodName43.Destroy()
	log.Debug("globalStringMethodBindings.method_get_extension")
	globalStringMethodBindings.method_get_extension = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName43.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_get_extension == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_get_extension")
	}
	methodName44 := NewStringNameWithLatin1Chars("get_basename")
	defer methodName44.Destroy()
	log.Debug("globalStringMethodBindings.method_get_basename")
	globalStringMethodBindings.method_get_basename = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName44.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_get_basename == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_get_basename")
	}
	methodName45 := NewStringNameWithLatin1Chars("path_join")
	defer methodName45.Destroy()
	log.Debug("globalStringMethodBindings.method_path_join")
	globalStringMethodBindings.method_path_join = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName45.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringMethodBindings.method_path_join == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_path_join")
	}
	methodName46 := NewStringNameWithLatin1Chars("unicode_at")
	defer methodName46.Destroy()
	log.Debug("globalStringMethodBindings.method_unicode_at")
	globalStringMethodBindings.method_unicode_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName46.AsGDExtensionStringNamePtr(), 4103005248)
	if globalStringMethodBindings.method_unicode_at == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_unicode_at")
	}
	methodName47 := NewStringNameWithLatin1Chars("indent")
	defer methodName47.Destroy()
	log.Debug("globalStringMethodBindings.method_indent")
	globalStringMethodBindings.method_indent = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName47.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringMethodBindings.method_indent == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_indent")
	}
	methodName48 := NewStringNameWithLatin1Chars("dedent")
	defer methodName48.Destroy()
	log.Debug("globalStringMethodBindings.method_dedent")
	globalStringMethodBindings.method_dedent = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName48.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_dedent == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_dedent")
	}
	methodName49 := NewStringNameWithLatin1Chars("hash")
	defer methodName49.Destroy()
	log.Debug("globalStringMethodBindings.method_hash")
	globalStringMethodBindings.method_hash = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName49.AsGDExtensionStringNamePtr(), 3173160232)
	if globalStringMethodBindings.method_hash == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_hash")
	}
	methodName50 := NewStringNameWithLatin1Chars("md5_text")
	defer methodName50.Destroy()
	log.Debug("globalStringMethodBindings.method_md5_text")
	globalStringMethodBindings.method_md5_text = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName50.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_md5_text == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_md5_text")
	}
	methodName51 := NewStringNameWithLatin1Chars("sha1_text")
	defer methodName51.Destroy()
	log.Debug("globalStringMethodBindings.method_sha1_text")
	globalStringMethodBindings.method_sha1_text = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName51.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_sha1_text == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_sha1_text")
	}
	methodName52 := NewStringNameWithLatin1Chars("sha256_text")
	defer methodName52.Destroy()
	log.Debug("globalStringMethodBindings.method_sha256_text")
	globalStringMethodBindings.method_sha256_text = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName52.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_sha256_text == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_sha256_text")
	}
	methodName53 := NewStringNameWithLatin1Chars("md5_buffer")
	defer methodName53.Destroy()
	log.Debug("globalStringMethodBindings.method_md5_buffer")
	globalStringMethodBindings.method_md5_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName53.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringMethodBindings.method_md5_buffer == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_md5_buffer")
	}
	methodName54 := NewStringNameWithLatin1Chars("sha1_buffer")
	defer methodName54.Destroy()
	log.Debug("globalStringMethodBindings.method_sha1_buffer")
	globalStringMethodBindings.method_sha1_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName54.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringMethodBindings.method_sha1_buffer == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_sha1_buffer")
	}
	methodName55 := NewStringNameWithLatin1Chars("sha256_buffer")
	defer methodName55.Destroy()
	log.Debug("globalStringMethodBindings.method_sha256_buffer")
	globalStringMethodBindings.method_sha256_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName55.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringMethodBindings.method_sha256_buffer == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_sha256_buffer")
	}
	methodName56 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName56.Destroy()
	log.Debug("globalStringMethodBindings.method_is_empty")
	globalStringMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName56.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_empty")
	}
	methodName57 := NewStringNameWithLatin1Chars("contains")
	defer methodName57.Destroy()
	log.Debug("globalStringMethodBindings.method_contains")
	globalStringMethodBindings.method_contains = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName57.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringMethodBindings.method_contains == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_contains")
	}
	methodName58 := NewStringNameWithLatin1Chars("is_absolute_path")
	defer methodName58.Destroy()
	log.Debug("globalStringMethodBindings.method_is_absolute_path")
	globalStringMethodBindings.method_is_absolute_path = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName58.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringMethodBindings.method_is_absolute_path == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_absolute_path")
	}
	methodName59 := NewStringNameWithLatin1Chars("is_relative_path")
	defer methodName59.Destroy()
	log.Debug("globalStringMethodBindings.method_is_relative_path")
	globalStringMethodBindings.method_is_relative_path = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName59.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringMethodBindings.method_is_relative_path == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_relative_path")
	}
	methodName60 := NewStringNameWithLatin1Chars("simplify_path")
	defer methodName60.Destroy()
	log.Debug("globalStringMethodBindings.method_simplify_path")
	globalStringMethodBindings.method_simplify_path = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName60.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_simplify_path == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_simplify_path")
	}
	methodName61 := NewStringNameWithLatin1Chars("get_base_dir")
	defer methodName61.Destroy()
	log.Debug("globalStringMethodBindings.method_get_base_dir")
	globalStringMethodBindings.method_get_base_dir = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName61.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_get_base_dir == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_get_base_dir")
	}
	methodName62 := NewStringNameWithLatin1Chars("get_file")
	defer methodName62.Destroy()
	log.Debug("globalStringMethodBindings.method_get_file")
	globalStringMethodBindings.method_get_file = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName62.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_get_file == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_get_file")
	}
	methodName63 := NewStringNameWithLatin1Chars("xml_escape")
	defer methodName63.Destroy()
	log.Debug("globalStringMethodBindings.method_xml_escape")
	globalStringMethodBindings.method_xml_escape = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName63.AsGDExtensionStringNamePtr(), 3429816538)
	if globalStringMethodBindings.method_xml_escape == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_xml_escape")
	}
	methodName64 := NewStringNameWithLatin1Chars("xml_unescape")
	defer methodName64.Destroy()
	log.Debug("globalStringMethodBindings.method_xml_unescape")
	globalStringMethodBindings.method_xml_unescape = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName64.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_xml_unescape == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_xml_unescape")
	}
	methodName65 := NewStringNameWithLatin1Chars("uri_encode")
	defer methodName65.Destroy()
	log.Debug("globalStringMethodBindings.method_uri_encode")
	globalStringMethodBindings.method_uri_encode = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName65.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_uri_encode == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_uri_encode")
	}
	methodName66 := NewStringNameWithLatin1Chars("uri_decode")
	defer methodName66.Destroy()
	log.Debug("globalStringMethodBindings.method_uri_decode")
	globalStringMethodBindings.method_uri_decode = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName66.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_uri_decode == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_uri_decode")
	}
	methodName67 := NewStringNameWithLatin1Chars("c_escape")
	defer methodName67.Destroy()
	log.Debug("globalStringMethodBindings.method_c_escape")
	globalStringMethodBindings.method_c_escape = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName67.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_c_escape == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_c_escape")
	}
	methodName68 := NewStringNameWithLatin1Chars("c_unescape")
	defer methodName68.Destroy()
	log.Debug("globalStringMethodBindings.method_c_unescape")
	globalStringMethodBindings.method_c_unescape = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName68.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_c_unescape == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_c_unescape")
	}
	methodName69 := NewStringNameWithLatin1Chars("json_escape")
	defer methodName69.Destroy()
	log.Debug("globalStringMethodBindings.method_json_escape")
	globalStringMethodBindings.method_json_escape = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName69.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_json_escape == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_json_escape")
	}
	methodName70 := NewStringNameWithLatin1Chars("validate_node_name")
	defer methodName70.Destroy()
	log.Debug("globalStringMethodBindings.method_validate_node_name")
	globalStringMethodBindings.method_validate_node_name = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName70.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_validate_node_name == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_validate_node_name")
	}
	methodName71 := NewStringNameWithLatin1Chars("validate_filename")
	defer methodName71.Destroy()
	log.Debug("globalStringMethodBindings.method_validate_filename")
	globalStringMethodBindings.method_validate_filename = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName71.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringMethodBindings.method_validate_filename == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_validate_filename")
	}
	methodName72 := NewStringNameWithLatin1Chars("is_valid_identifier")
	defer methodName72.Destroy()
	log.Debug("globalStringMethodBindings.method_is_valid_identifier")
	globalStringMethodBindings.method_is_valid_identifier = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName72.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringMethodBindings.method_is_valid_identifier == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_valid_identifier")
	}
	methodName73 := NewStringNameWithLatin1Chars("is_valid_int")
	defer methodName73.Destroy()
	log.Debug("globalStringMethodBindings.method_is_valid_int")
	globalStringMethodBindings.method_is_valid_int = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName73.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringMethodBindings.method_is_valid_int == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_valid_int")
	}
	methodName74 := NewStringNameWithLatin1Chars("is_valid_float")
	defer methodName74.Destroy()
	log.Debug("globalStringMethodBindings.method_is_valid_float")
	globalStringMethodBindings.method_is_valid_float = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName74.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringMethodBindings.method_is_valid_float == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_valid_float")
	}
	methodName75 := NewStringNameWithLatin1Chars("is_valid_hex_number")
	defer methodName75.Destroy()
	log.Debug("globalStringMethodBindings.method_is_valid_hex_number")
	globalStringMethodBindings.method_is_valid_hex_number = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName75.AsGDExtensionStringNamePtr(), 593672999)
	if globalStringMethodBindings.method_is_valid_hex_number == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_valid_hex_number")
	}
	methodName76 := NewStringNameWithLatin1Chars("is_valid_html_color")
	defer methodName76.Destroy()
	log.Debug("globalStringMethodBindings.method_is_valid_html_color")
	globalStringMethodBindings.method_is_valid_html_color = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName76.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringMethodBindings.method_is_valid_html_color == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_valid_html_color")
	}
	methodName77 := NewStringNameWithLatin1Chars("is_valid_ip_address")
	defer methodName77.Destroy()
	log.Debug("globalStringMethodBindings.method_is_valid_ip_address")
	globalStringMethodBindings.method_is_valid_ip_address = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName77.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringMethodBindings.method_is_valid_ip_address == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_valid_ip_address")
	}
	methodName78 := NewStringNameWithLatin1Chars("is_valid_filename")
	defer methodName78.Destroy()
	log.Debug("globalStringMethodBindings.method_is_valid_filename")
	globalStringMethodBindings.method_is_valid_filename = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName78.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringMethodBindings.method_is_valid_filename == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_is_valid_filename")
	}
	methodName79 := NewStringNameWithLatin1Chars("to_int")
	defer methodName79.Destroy()
	log.Debug("globalStringMethodBindings.method_to_int")
	globalStringMethodBindings.method_to_int = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName79.AsGDExtensionStringNamePtr(), 3173160232)
	if globalStringMethodBindings.method_to_int == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_to_int")
	}
	methodName80 := NewStringNameWithLatin1Chars("to_float")
	defer methodName80.Destroy()
	log.Debug("globalStringMethodBindings.method_to_float")
	globalStringMethodBindings.method_to_float = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName80.AsGDExtensionStringNamePtr(), 466405837)
	if globalStringMethodBindings.method_to_float == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_to_float")
	}
	methodName81 := NewStringNameWithLatin1Chars("hex_to_int")
	defer methodName81.Destroy()
	log.Debug("globalStringMethodBindings.method_hex_to_int")
	globalStringMethodBindings.method_hex_to_int = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName81.AsGDExtensionStringNamePtr(), 3173160232)
	if globalStringMethodBindings.method_hex_to_int == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_hex_to_int")
	}
	methodName82 := NewStringNameWithLatin1Chars("bin_to_int")
	defer methodName82.Destroy()
	log.Debug("globalStringMethodBindings.method_bin_to_int")
	globalStringMethodBindings.method_bin_to_int = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName82.AsGDExtensionStringNamePtr(), 3173160232)
	if globalStringMethodBindings.method_bin_to_int == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_bin_to_int")
	}
	methodName83 := NewStringNameWithLatin1Chars("lpad")
	defer methodName83.Destroy()
	log.Debug("globalStringMethodBindings.method_lpad")
	globalStringMethodBindings.method_lpad = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName83.AsGDExtensionStringNamePtr(), 248737229)
	if globalStringMethodBindings.method_lpad == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_lpad")
	}
	methodName84 := NewStringNameWithLatin1Chars("rpad")
	defer methodName84.Destroy()
	log.Debug("globalStringMethodBindings.method_rpad")
	globalStringMethodBindings.method_rpad = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName84.AsGDExtensionStringNamePtr(), 248737229)
	if globalStringMethodBindings.method_rpad == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_rpad")
	}
	methodName85 := NewStringNameWithLatin1Chars("pad_decimals")
	defer methodName85.Destroy()
	log.Debug("globalStringMethodBindings.method_pad_decimals")
	globalStringMethodBindings.method_pad_decimals = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName85.AsGDExtensionStringNamePtr(), 2162347432)
	if globalStringMethodBindings.method_pad_decimals == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_pad_decimals")
	}
	methodName86 := NewStringNameWithLatin1Chars("pad_zeros")
	defer methodName86.Destroy()
	log.Debug("globalStringMethodBindings.method_pad_zeros")
	globalStringMethodBindings.method_pad_zeros = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName86.AsGDExtensionStringNamePtr(), 2162347432)
	if globalStringMethodBindings.method_pad_zeros == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_pad_zeros")
	}
	methodName87 := NewStringNameWithLatin1Chars("trim_prefix")
	defer methodName87.Destroy()
	log.Debug("globalStringMethodBindings.method_trim_prefix")
	globalStringMethodBindings.method_trim_prefix = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName87.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringMethodBindings.method_trim_prefix == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_trim_prefix")
	}
	methodName88 := NewStringNameWithLatin1Chars("trim_suffix")
	defer methodName88.Destroy()
	log.Debug("globalStringMethodBindings.method_trim_suffix")
	globalStringMethodBindings.method_trim_suffix = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName88.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringMethodBindings.method_trim_suffix == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_trim_suffix")
	}
	methodName89 := NewStringNameWithLatin1Chars("to_ascii_buffer")
	defer methodName89.Destroy()
	log.Debug("globalStringMethodBindings.method_to_ascii_buffer")
	globalStringMethodBindings.method_to_ascii_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName89.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringMethodBindings.method_to_ascii_buffer == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_to_ascii_buffer")
	}
	methodName90 := NewStringNameWithLatin1Chars("to_utf8_buffer")
	defer methodName90.Destroy()
	log.Debug("globalStringMethodBindings.method_to_utf8_buffer")
	globalStringMethodBindings.method_to_utf8_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName90.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringMethodBindings.method_to_utf8_buffer == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_to_utf8_buffer")
	}
	methodName91 := NewStringNameWithLatin1Chars("to_utf16_buffer")
	defer methodName91.Destroy()
	log.Debug("globalStringMethodBindings.method_to_utf16_buffer")
	globalStringMethodBindings.method_to_utf16_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName91.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringMethodBindings.method_to_utf16_buffer == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_to_utf16_buffer")
	}
	methodName92 := NewStringNameWithLatin1Chars("to_utf32_buffer")
	defer methodName92.Destroy()
	log.Debug("globalStringMethodBindings.method_to_utf32_buffer")
	globalStringMethodBindings.method_to_utf32_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName92.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringMethodBindings.method_to_utf32_buffer == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_to_utf32_buffer")
	}
	methodName93 := NewStringNameWithLatin1Chars("num_scientific")
	defer methodName93.Destroy()
	log.Debug("globalStringMethodBindings.method_num_scientific")
	globalStringMethodBindings.method_num_scientific = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName93.AsGDExtensionStringNamePtr(), 2710373411)
	if globalStringMethodBindings.method_num_scientific == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_num_scientific")
	}
	methodName94 := NewStringNameWithLatin1Chars("num")
	defer methodName94.Destroy()
	log.Debug("globalStringMethodBindings.method_num")
	globalStringMethodBindings.method_num = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName94.AsGDExtensionStringNamePtr(), 1555901022)
	if globalStringMethodBindings.method_num == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_num")
	}
	methodName95 := NewStringNameWithLatin1Chars("num_int64")
	defer methodName95.Destroy()
	log.Debug("globalStringMethodBindings.method_num_int64")
	globalStringMethodBindings.method_num_int64 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName95.AsGDExtensionStringNamePtr(), 2111271071)
	if globalStringMethodBindings.method_num_int64 == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_num_int64")
	}
	methodName96 := NewStringNameWithLatin1Chars("num_uint64")
	defer methodName96.Destroy()
	log.Debug("globalStringMethodBindings.method_num_uint64")
	globalStringMethodBindings.method_num_uint64 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName96.AsGDExtensionStringNamePtr(), 2111271071)
	if globalStringMethodBindings.method_num_uint64 == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_num_uint64")
	}
	methodName97 := NewStringNameWithLatin1Chars("chr")
	defer methodName97.Destroy()
	log.Debug("globalStringMethodBindings.method_chr")
	globalStringMethodBindings.method_chr = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName97.AsGDExtensionStringNamePtr(), 897497541)
	if globalStringMethodBindings.method_chr == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_chr")
	}
	methodName98 := NewStringNameWithLatin1Chars("humanize_size")
	defer methodName98.Destroy()
	log.Debug("globalStringMethodBindings.method_humanize_size")
	globalStringMethodBindings.method_humanize_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING, methodName98.AsGDExtensionStringNamePtr(), 897497541)
	if globalStringMethodBindings.method_humanize_size == nil {
		missingMethods = append(missingMethods, "globalStringMethodBindings.method_humanize_size")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalStringMethodBindings.indexed_setter")
	globalStringMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringMethodBindings.indexed_getter")
	globalStringMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringMethodBindings.operator: equal Variant")
	globalStringMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalStringMethodBindings.operator: not_equal Variant")
	globalStringMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalStringMethodBindings.operator: module Variant")
	globalStringMethodBindings.operator_module_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalStringMethodBindings.operator: module bool")
	globalStringMethodBindings.operator_module_bool = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_BOOL)
	log.Debug("globalStringMethodBindings.operator: module int")
	globalStringMethodBindings.operator_module_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalStringMethodBindings.operator: module float")
	globalStringMethodBindings.operator_module_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalStringMethodBindings.operator: equal String")
	globalStringMethodBindings.operator_equal_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringMethodBindings.operator: not_equal String")
	globalStringMethodBindings.operator_not_equal_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringMethodBindings.operator: less String")
	globalStringMethodBindings.operator_less_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringMethodBindings.operator: less_equal String")
	globalStringMethodBindings.operator_less_equal_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringMethodBindings.operator: greater String")
	globalStringMethodBindings.operator_greater_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringMethodBindings.operator: greater_equal String")
	globalStringMethodBindings.operator_greater_equal_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringMethodBindings.operator: add String")
	globalStringMethodBindings.operator_add_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringMethodBindings.operator: module String")
	globalStringMethodBindings.operator_module_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringMethodBindings.operator: in String")
	globalStringMethodBindings.operator_in_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringMethodBindings.operator: module Vector2")
	globalStringMethodBindings.operator_module_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalStringMethodBindings.operator: module Vector2i")
	globalStringMethodBindings.operator_module_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalStringMethodBindings.operator: module Rect2")
	globalStringMethodBindings.operator_module_Rect2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_RECT2)
	log.Debug("globalStringMethodBindings.operator: module Rect2i")
	globalStringMethodBindings.operator_module_Rect2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_RECT2I)
	log.Debug("globalStringMethodBindings.operator: module Vector3")
	globalStringMethodBindings.operator_module_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalStringMethodBindings.operator: module Vector3i")
	globalStringMethodBindings.operator_module_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalStringMethodBindings.operator: module Transform2D")
	globalStringMethodBindings.operator_module_Transform2D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)
	log.Debug("globalStringMethodBindings.operator: module Vector4")
	globalStringMethodBindings.operator_module_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalStringMethodBindings.operator: module Vector4i")
	globalStringMethodBindings.operator_module_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalStringMethodBindings.operator: module Plane")
	globalStringMethodBindings.operator_module_Plane = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PLANE)
	log.Debug("globalStringMethodBindings.operator: module Quaternion")
	globalStringMethodBindings.operator_module_Quaternion = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_QUATERNION)
	log.Debug("globalStringMethodBindings.operator: module AABB")
	globalStringMethodBindings.operator_module_AABB = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_AABB)
	log.Debug("globalStringMethodBindings.operator: module Basis")
	globalStringMethodBindings.operator_module_Basis = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_BASIS)
	log.Debug("globalStringMethodBindings.operator: module Transform3D")
	globalStringMethodBindings.operator_module_Transform3D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D)
	log.Debug("globalStringMethodBindings.operator: module Projection")
	globalStringMethodBindings.operator_module_Projection = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PROJECTION)
	log.Debug("globalStringMethodBindings.operator: module Color")
	globalStringMethodBindings.operator_module_Color = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_COLOR)
	log.Debug("globalStringMethodBindings.operator: equal StringName")
	globalStringMethodBindings.operator_equal_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringMethodBindings.operator: not_equal StringName")
	globalStringMethodBindings.operator_not_equal_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringMethodBindings.operator: add StringName")
	globalStringMethodBindings.operator_add_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringMethodBindings.operator: module StringName")
	globalStringMethodBindings.operator_module_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringMethodBindings.operator: in StringName")
	globalStringMethodBindings.operator_in_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringMethodBindings.operator: module NodePath")
	globalStringMethodBindings.operator_module_NodePath = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_NODE_PATH)
	log.Debug("globalStringMethodBindings.operator: module Object")
	globalStringMethodBindings.operator_module_Object = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_OBJECT)
	log.Debug("globalStringMethodBindings.operator: in Object")
	globalStringMethodBindings.operator_in_Object = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_OBJECT)
	log.Debug("globalStringMethodBindings.operator: module Callable")
	globalStringMethodBindings.operator_module_Callable = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_CALLABLE)
	log.Debug("globalStringMethodBindings.operator: module Signal")
	globalStringMethodBindings.operator_module_Signal = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_SIGNAL)
	log.Debug("globalStringMethodBindings.operator: module Dictionary")
	globalStringMethodBindings.operator_module_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalStringMethodBindings.operator: in Dictionary")
	globalStringMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalStringMethodBindings.operator: module Array")
	globalStringMethodBindings.operator_module_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalStringMethodBindings.operator: in Array")
	globalStringMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalStringMethodBindings.operator: module PackedByteArray")
	globalStringMethodBindings.operator_module_PackedByteArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)
	log.Debug("globalStringMethodBindings.operator: module PackedInt32Array")
	globalStringMethodBindings.operator_module_PackedInt32Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY)
	log.Debug("globalStringMethodBindings.operator: module PackedInt64Array")
	globalStringMethodBindings.operator_module_PackedInt64Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY)
	log.Debug("globalStringMethodBindings.operator: module PackedFloat32Array")
	globalStringMethodBindings.operator_module_PackedFloat32Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
	log.Debug("globalStringMethodBindings.operator: module PackedFloat64Array")
	globalStringMethodBindings.operator_module_PackedFloat64Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
	log.Debug("globalStringMethodBindings.operator: module PackedStringArray")
	globalStringMethodBindings.operator_module_PackedStringArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)
	log.Debug("globalStringMethodBindings.operator: in PackedStringArray")
	globalStringMethodBindings.operator_in_PackedStringArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)
	log.Debug("globalStringMethodBindings.operator: module PackedVector2Array")
	globalStringMethodBindings.operator_module_PackedVector2Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
	log.Debug("globalStringMethodBindings.operator: module PackedVector3Array")
	globalStringMethodBindings.operator_module_PackedVector3Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
	log.Debug("globalStringMethodBindings.operator: module PackedColorArray")
	globalStringMethodBindings.operator_module_PackedColorArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY)
	log.Debug("stringInitBindings end")
}

func (c *String) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewString, index: 0
func NewString() String {
	cx := String{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalStringMethodBindings.constructor_0, ptr)

	return cx
}

// NewString, index: 2
func NewStringWithStringName(from StringName) String {
	cx := String{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// StringName
	// StringNameEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalStringMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewString, index: 3
func NewStringWithNodePath(from NodePath) String {
	cx := String{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// NodePath
	// NodePathEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalStringMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *String) Destroy() {
	md := (GDExtensionPtrDestructor)(globalStringMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* CasecmpTo : casecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) CasecmpTo(to String) int32 {
	mb := globalStringMethodBindings.method_casecmp_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* NocasecmpTo : nocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) NocasecmpTo(to String) int32 {
	mb := globalStringMethodBindings.method_nocasecmp_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* NaturalnocasecmpTo : naturalnocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) NaturalnocasecmpTo(to String) int32 {
	mb := globalStringMethodBindings.method_naturalnocasecmp_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) Length() int32 {
	mb := globalStringMethodBindings.method_length

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Substr : substr
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Substr(from int32, len int32) String {
	mb := globalStringMethodBindings.method_substr

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(from)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(len)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetSlice : get_slice
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetSlice(delimiter String, slice int32) String {
	mb := globalStringMethodBindings.method_get_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(slice)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetSlicec : get_slicec
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetSlicec(delimiter int32, slice int32) String {
	mb := globalStringMethodBindings.method_get_slicec

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(slice)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetSliceCount : get_slice_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) GetSliceCount(delimiter String) int32 {
	mb := globalStringMethodBindings.method_get_slice_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) Find(what String, from int32) int32 {
	mb := globalStringMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) Count(what String, from int32, to int32) int32 {
	mb := globalStringMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Int32Encoder.EncodeArg(to)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Countn : countn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) Countn(what String, from int32, to int32) int32 {
	mb := globalStringMethodBindings.method_countn

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Int32Encoder.EncodeArg(to)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Findn : findn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) Findn(what String, from int32) int32 {
	mb := globalStringMethodBindings.method_findn

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) Rfind(what String, from int32) int32 {
	mb := globalStringMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfindn : rfindn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) Rfindn(what String, from int32) int32 {
	mb := globalStringMethodBindings.method_rfindn

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Match : match
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) Match(expr String) bool {
	mb := globalStringMethodBindings.method_match

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(expr)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Matchn : matchn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) Matchn(expr String) bool {
	mb := globalStringMethodBindings.method_matchn

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(expr)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* BeginsWith : begins_with
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) BeginsWith(text String) bool {
	mb := globalStringMethodBindings.method_begins_with

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(text)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* EndsWith : ends_with
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) EndsWith(text String) bool {
	mb := globalStringMethodBindings.method_ends_with

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(text)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsSubsequenceOf : is_subsequence_of
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsSubsequenceOf(text String) bool {
	mb := globalStringMethodBindings.method_is_subsequence_of

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(text)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsSubsequenceOfn : is_subsequence_ofn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsSubsequenceOfn(text String) bool {
	mb := globalStringMethodBindings.method_is_subsequence_ofn

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(text)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Bigrams : bigrams
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *String) Bigrams() PackedStringArray {
	mb := globalStringMethodBindings.method_bigrams

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, nil)
	return ret

}

/* Similarity : similarity
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *String) Similarity(text String) float32 {
	mb := globalStringMethodBindings.method_similarity

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(text)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Format : format
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Format(values Variant, placeholder String) String {
	mb := globalStringMethodBindings.method_format

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&values))

	eArg1 := StringEncoder.EncodeArg(placeholder)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Replace : replace
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Replace(what String, forwhat String) String {
	mb := globalStringMethodBindings.method_replace

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(forwhat)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Replacen : replacen
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Replacen(what String, forwhat String) String {
	mb := globalStringMethodBindings.method_replacen

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(forwhat)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Repeat : repeat
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Repeat(count int32) String {
	mb := globalStringMethodBindings.method_repeat

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(count)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Insert(position int32, what String) String {
	mb := globalStringMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(position)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(what)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Capitalize : capitalize
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Capitalize() String {
	mb := globalStringMethodBindings.method_capitalize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ToCamelCase : to_camel_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToCamelCase() String {
	mb := globalStringMethodBindings.method_to_camel_case

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ToPascalCase : to_pascal_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToPascalCase() String {
	mb := globalStringMethodBindings.method_to_pascal_case

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ToSnakeCase : to_snake_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToSnakeCase() String {
	mb := globalStringMethodBindings.method_to_snake_case

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Split : split
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *String) Split(delimiter String, allow_empty bool, maxsplit int32) PackedStringArray {
	mb := globalStringMethodBindings.method_split

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(allow_empty)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Int32Encoder.EncodeArg(maxsplit)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rsplit : rsplit
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *String) Rsplit(delimiter String, allow_empty bool, maxsplit int32) PackedStringArray {
	mb := globalStringMethodBindings.method_rsplit

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(allow_empty)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Int32Encoder.EncodeArg(maxsplit)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* SplitFloats : split_floats
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *String) SplitFloats(delimiter String, allow_empty bool) PackedFloat64Array {
	mb := globalStringMethodBindings.method_split_floats

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(allow_empty)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Join : join
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Join(parts PackedStringArray) String {
	mb := globalStringMethodBindings.method_join

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&parts))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToUpper : to_upper
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToUpper() String {
	mb := globalStringMethodBindings.method_to_upper

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ToLower : to_lower
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToLower() String {
	mb := globalStringMethodBindings.method_to_lower

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Left : left
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Left(length int32) String {
	mb := globalStringMethodBindings.method_left

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(length)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Right : right
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Right(length int32) String {
	mb := globalStringMethodBindings.method_right

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(length)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* StripEdges : strip_edges
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) StripEdges(left bool, right bool) String {
	mb := globalStringMethodBindings.method_strip_edges

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := BoolEncoder.EncodeArg(left)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(right)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* StripEscapes : strip_escapes
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) StripEscapes() String {
	mb := globalStringMethodBindings.method_strip_escapes

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Lstrip : lstrip
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Lstrip(chars String) String {
	mb := globalStringMethodBindings.method_lstrip

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(chars)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rstrip : rstrip
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Rstrip(chars String) String {
	mb := globalStringMethodBindings.method_rstrip

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(chars)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetExtension : get_extension
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetExtension() String {
	mb := globalStringMethodBindings.method_get_extension

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* GetBasename : get_basename
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetBasename() String {
	mb := globalStringMethodBindings.method_get_basename

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* PathJoin : path_join
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) PathJoin(file String) String {
	mb := globalStringMethodBindings.method_path_join

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(file)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* UnicodeAt : unicode_at
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) UnicodeAt(at int32) int32 {
	mb := globalStringMethodBindings.method_unicode_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(at)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Indent : indent
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Indent(prefix String) String {
	mb := globalStringMethodBindings.method_indent

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(prefix)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Dedent : dedent
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Dedent() String {
	mb := globalStringMethodBindings.method_dedent

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) Hash() int32 {
	mb := globalStringMethodBindings.method_hash

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Md5Text : md5_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Md5Text() String {
	mb := globalStringMethodBindings.method_md5_text

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Sha1Text : sha1_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Sha1Text() String {
	mb := globalStringMethodBindings.method_sha1_text

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Sha256Text : sha256_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Sha256Text() String {
	mb := globalStringMethodBindings.method_sha256_text

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Md5Buffer : md5_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) Md5Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_md5_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sha1Buffer : sha1_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) Sha1Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_sha1_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sha256Buffer : sha256_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) Sha256Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_sha256_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsEmpty() bool {
	mb := globalStringMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Contains : contains
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) Contains(what String) bool {
	mb := globalStringMethodBindings.method_contains

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsAbsolutePath : is_absolute_path
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsAbsolutePath() bool {
	mb := globalStringMethodBindings.method_is_absolute_path

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsRelativePath : is_relative_path
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsRelativePath() bool {
	mb := globalStringMethodBindings.method_is_relative_path

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* SimplifyPath : simplify_path
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) SimplifyPath() String {
	mb := globalStringMethodBindings.method_simplify_path

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* GetBaseDir : get_base_dir
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetBaseDir() String {
	mb := globalStringMethodBindings.method_get_base_dir

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* GetFile : get_file
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetFile() String {
	mb := globalStringMethodBindings.method_get_file

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* XmlEscape : xml_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) XmlEscape(escape_quotes bool) String {
	mb := globalStringMethodBindings.method_xml_escape

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := BoolEncoder.EncodeArg(escape_quotes)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* XmlUnescape : xml_unescape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) XmlUnescape() String {
	mb := globalStringMethodBindings.method_xml_unescape

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* UriEncode : uri_encode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) UriEncode() String {
	mb := globalStringMethodBindings.method_uri_encode

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* UriDecode : uri_decode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) UriDecode() String {
	mb := globalStringMethodBindings.method_uri_decode

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* CEscape : c_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) CEscape() String {
	mb := globalStringMethodBindings.method_c_escape

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* CUnescape : c_unescape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) CUnescape() String {
	mb := globalStringMethodBindings.method_c_unescape

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* JsonEscape : json_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) JsonEscape() String {
	mb := globalStringMethodBindings.method_json_escape

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ValidateNodeName : validate_node_name
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ValidateNodeName() String {
	mb := globalStringMethodBindings.method_validate_node_name

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ValidateFilename : validate_filename
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ValidateFilename() String {
	mb := globalStringMethodBindings.method_validate_filename

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* IsValidIdentifier : is_valid_identifier
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidIdentifier() bool {
	mb := globalStringMethodBindings.method_is_valid_identifier

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsValidInt : is_valid_int
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidInt() bool {
	mb := globalStringMethodBindings.method_is_valid_int

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsValidFloat : is_valid_float
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidFloat() bool {
	mb := globalStringMethodBindings.method_is_valid_float

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsValidHexNumber : is_valid_hex_number
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidHexNumber(with_prefix bool) bool {
	mb := globalStringMethodBindings.method_is_valid_hex_number

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := BoolEncoder.EncodeArg(with_prefix)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsValidHtmlColor : is_valid_html_color
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidHtmlColor() bool {
	mb := globalStringMethodBindings.method_is_valid_html_color

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsValidIpAddress : is_valid_ip_address
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidIpAddress() bool {
	mb := globalStringMethodBindings.method_is_valid_ip_address

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsValidFilename : is_valid_filename
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidFilename() bool {
	mb := globalStringMethodBindings.method_is_valid_filename

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* ToInt : to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) ToInt() int32 {
	mb := globalStringMethodBindings.method_to_int

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* ToFloat : to_float
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *String) ToFloat() float32 {
	mb := globalStringMethodBindings.method_to_float

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* HexToInt : hex_to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) HexToInt() int32 {
	mb := globalStringMethodBindings.method_hex_to_int

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* BinToInt : bin_to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *String) BinToInt() int32 {
	mb := globalStringMethodBindings.method_bin_to_int

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Lpad : lpad
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Lpad(min_length int32, character String) String {
	mb := globalStringMethodBindings.method_lpad

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(min_length)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(character)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rpad : rpad
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Rpad(min_length int32, character String) String {
	mb := globalStringMethodBindings.method_rpad

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(min_length)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(character)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* PadDecimals : pad_decimals
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) PadDecimals(digits int32) String {
	mb := globalStringMethodBindings.method_pad_decimals

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(digits)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* PadZeros : pad_zeros
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) PadZeros(digits int32) String {
	mb := globalStringMethodBindings.method_pad_zeros

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(digits)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* TrimPrefix : trim_prefix
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) TrimPrefix(prefix String) String {
	mb := globalStringMethodBindings.method_trim_prefix

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(prefix)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* TrimSuffix : trim_suffix
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) TrimSuffix(suffix String) String {
	mb := globalStringMethodBindings.method_trim_suffix

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(suffix)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToAsciiBuffer : to_ascii_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToAsciiBuffer() PackedByteArray {
	mb := globalStringMethodBindings.method_to_ascii_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* ToUtf8Buffer : to_utf8_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToUtf8Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_to_utf8_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* ToUtf16Buffer : to_utf16_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToUtf16Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_to_utf16_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* ToUtf32Buffer : to_utf32_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToUtf32Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_to_utf32_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* NumScientific : num_scientific
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) NumScientific(number float32) String {
	mb := globalStringMethodBindings.method_num_scientific

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(number)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Num : num
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) Num(number float32, decimals int32) String {
	mb := globalStringMethodBindings.method_num

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(number)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(decimals)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* NumInt64 : num_int64
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) NumInt64(number int32, base int32, capitalize_hex bool) String {
	mb := globalStringMethodBindings.method_num_int64

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(number)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(base)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := BoolEncoder.EncodeArg(capitalize_hex)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* NumUint64 : num_uint64
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) NumUint64(number int32, base int32, capitalize_hex bool) String {
	mb := globalStringMethodBindings.method_num_uint64

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(number)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(base)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := BoolEncoder.EncodeArg(capitalize_hex)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Chr : chr
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) Chr(char int32) String {
	mb := globalStringMethodBindings.method_chr

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(char)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* HumanizeSize : humanize_size
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) HumanizeSize(size int32) String {
	mb := globalStringMethodBindings.method_humanize_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

// Equal_Variant operator
func (cx *String) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *String) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Module_Variant operator
func (cx *String) Module_Variant(right Variant) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Variant, lt, rt)
}

// Module_bool operator
func (cx *String) Module_bool(right bool) String {
	lt := cx.ptr()

	eRight := BoolEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_bool, lt, rt)
}

// Module_int operator
func (cx *String) Module_int(right int32) String {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_int, lt, rt)
}

// Module_float operator
func (cx *String) Module_float(right float32) String {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_float, lt, rt)
}

// Equal_String operator
func (cx *String) Equal_String(right String) bool {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_equal_String, lt, rt)
}

// Not_equal_String operator
func (cx *String) Not_equal_String(right String) bool {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_not_equal_String, lt, rt)
}

// Less_String operator
func (cx *String) Less_String(right String) bool {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_less_String, lt, rt)
}

// Less_equal_String operator
func (cx *String) Less_equal_String(right String) bool {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_less_equal_String, lt, rt)
}

// Greater_String operator
func (cx *String) Greater_String(right String) bool {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_greater_String, lt, rt)
}

// Greater_equal_String operator
func (cx *String) Greater_equal_String(right String) bool {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_greater_equal_String, lt, rt)
}

// Add_String operator
func (cx *String) Add_String(right String) String {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_add_String, lt, rt)
}

// Module_String operator
func (cx *String) Module_String(right String) String {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_String, lt, rt)
}

// In_String operator
func (cx *String) In_String(right String) bool {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_String, lt, rt)
}

// Module_Vector2 operator
func (cx *String) Module_Vector2(right Vector2) String {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector2, lt, rt)
}

// Module_Vector2i operator
func (cx *String) Module_Vector2i(right Vector2i) String {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector2i, lt, rt)
}

// Module_Rect2 operator
func (cx *String) Module_Rect2(right Rect2) String {
	lt := cx.ptr()

	eRight := Rect2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Rect2, lt, rt)
}

// Module_Rect2i operator
func (cx *String) Module_Rect2i(right Rect2i) String {
	lt := cx.ptr()

	eRight := Rect2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Rect2i, lt, rt)
}

// Module_Vector3 operator
func (cx *String) Module_Vector3(right Vector3) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector3, lt, rt)
}

// Module_Vector3i operator
func (cx *String) Module_Vector3i(right Vector3i) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector3i, lt, rt)
}

// Module_Transform2D operator
func (cx *String) Module_Transform2D(right Transform2D) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Transform2D, lt, rt)
}

// Module_Vector4 operator
func (cx *String) Module_Vector4(right Vector4) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector4, lt, rt)
}

// Module_Vector4i operator
func (cx *String) Module_Vector4i(right Vector4i) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector4i, lt, rt)
}

// Module_Plane operator
func (cx *String) Module_Plane(right Plane) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Plane, lt, rt)
}

// Module_Quaternion operator
func (cx *String) Module_Quaternion(right Quaternion) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Quaternion, lt, rt)
}

// Module_AABB operator
func (cx *String) Module_AABB(right AABB) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_AABB, lt, rt)
}

// Module_Basis operator
func (cx *String) Module_Basis(right Basis) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Basis, lt, rt)
}

// Module_Transform3D operator
func (cx *String) Module_Transform3D(right Transform3D) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Transform3D, lt, rt)
}

// Module_Projection operator
func (cx *String) Module_Projection(right Projection) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Projection, lt, rt)
}

// Module_Color operator
func (cx *String) Module_Color(right Color) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Color, lt, rt)
}

// Equal_StringName operator
func (cx *String) Equal_StringName(right StringName) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_equal_StringName, lt, rt)
}

// Not_equal_StringName operator
func (cx *String) Not_equal_StringName(right StringName) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_not_equal_StringName, lt, rt)
}

// Add_StringName operator
func (cx *String) Add_StringName(right StringName) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_add_StringName, lt, rt)
}

// Module_StringName operator
func (cx *String) Module_StringName(right StringName) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_StringName, lt, rt)
}

// In_StringName operator
func (cx *String) In_StringName(right StringName) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_StringName, lt, rt)
}

// Module_NodePath operator
func (cx *String) Module_NodePath(right NodePath) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_NodePath, lt, rt)
}

// Module_Object operator
func (cx *String) Module_Object(right Object) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Object, lt, rt)
}

// In_Object operator
func (cx *String) In_Object(right Object) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_Object, lt, rt)
}

// Module_Callable operator
func (cx *String) Module_Callable(right Callable) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Callable, lt, rt)
}

// Module_Signal operator
func (cx *String) Module_Signal(right Signal) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Signal, lt, rt)
}

// Module_Dictionary operator
func (cx *String) Module_Dictionary(right Dictionary) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Dictionary, lt, rt)
}

// In_Dictionary operator
func (cx *String) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_Dictionary, lt, rt)
}

// Module_Array operator
func (cx *String) Module_Array(right Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Array, lt, rt)
}

// In_Array operator
func (cx *String) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_Array, lt, rt)
}

// Module_PackedByteArray operator
func (cx *String) Module_PackedByteArray(right PackedByteArray) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedByteArray, lt, rt)
}

// Module_PackedInt32Array operator
func (cx *String) Module_PackedInt32Array(right PackedInt32Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedInt32Array, lt, rt)
}

// Module_PackedInt64Array operator
func (cx *String) Module_PackedInt64Array(right PackedInt64Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedInt64Array, lt, rt)
}

// Module_PackedFloat32Array operator
func (cx *String) Module_PackedFloat32Array(right PackedFloat32Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedFloat32Array, lt, rt)
}

// Module_PackedFloat64Array operator
func (cx *String) Module_PackedFloat64Array(right PackedFloat64Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedFloat64Array, lt, rt)
}

// Module_PackedStringArray operator
func (cx *String) Module_PackedStringArray(right PackedStringArray) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedStringArray, lt, rt)
}

// In_PackedStringArray operator
func (cx *String) In_PackedStringArray(right PackedStringArray) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_PackedStringArray, lt, rt)
}

// Module_PackedVector2Array operator
func (cx *String) Module_PackedVector2Array(right PackedVector2Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedVector2Array, lt, rt)
}

// Module_PackedVector3Array operator
func (cx *String) Module_PackedVector3Array(right PackedVector3Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedVector3Array, lt, rt)
}

// Module_PackedColorArray operator
func (cx *String) Module_PackedColorArray(right PackedColorArray) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedColorArray, lt, rt)
}

/*
 * Vector2
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: false
 */
type Vector2 struct {
	opaque [8]uint8
}

type vector2MethodBindings struct {
	constructor_0                    GDExtensionPtrConstructor
	constructor_1                    GDExtensionPtrConstructor
	constructor_2                    GDExtensionPtrConstructor
	constructor_3                    GDExtensionPtrConstructor
	method_angle                     GDExtensionPtrBuiltInMethod
	method_angle_to                  GDExtensionPtrBuiltInMethod
	method_angle_to_point            GDExtensionPtrBuiltInMethod
	method_direction_to              GDExtensionPtrBuiltInMethod
	method_distance_to               GDExtensionPtrBuiltInMethod
	method_distance_squared_to       GDExtensionPtrBuiltInMethod
	method_length                    GDExtensionPtrBuiltInMethod
	method_length_squared            GDExtensionPtrBuiltInMethod
	method_limit_length              GDExtensionPtrBuiltInMethod
	method_normalized                GDExtensionPtrBuiltInMethod
	method_is_normalized             GDExtensionPtrBuiltInMethod
	method_is_equal_approx           GDExtensionPtrBuiltInMethod
	method_is_zero_approx            GDExtensionPtrBuiltInMethod
	method_is_finite                 GDExtensionPtrBuiltInMethod
	method_posmod                    GDExtensionPtrBuiltInMethod
	method_posmodv                   GDExtensionPtrBuiltInMethod
	method_project                   GDExtensionPtrBuiltInMethod
	method_lerp                      GDExtensionPtrBuiltInMethod
	method_slerp                     GDExtensionPtrBuiltInMethod
	method_cubic_interpolate         GDExtensionPtrBuiltInMethod
	method_cubic_interpolate_in_time GDExtensionPtrBuiltInMethod
	method_bezier_interpolate        GDExtensionPtrBuiltInMethod
	method_bezier_derivative         GDExtensionPtrBuiltInMethod
	method_max_axis_index            GDExtensionPtrBuiltInMethod
	method_min_axis_index            GDExtensionPtrBuiltInMethod
	method_move_toward               GDExtensionPtrBuiltInMethod
	method_rotated                   GDExtensionPtrBuiltInMethod
	method_orthogonal                GDExtensionPtrBuiltInMethod
	method_floor                     GDExtensionPtrBuiltInMethod
	method_ceil                      GDExtensionPtrBuiltInMethod
	method_round                     GDExtensionPtrBuiltInMethod
	method_aspect                    GDExtensionPtrBuiltInMethod
	method_dot                       GDExtensionPtrBuiltInMethod
	method_slide                     GDExtensionPtrBuiltInMethod
	method_bounce                    GDExtensionPtrBuiltInMethod
	method_reflect                   GDExtensionPtrBuiltInMethod
	method_cross                     GDExtensionPtrBuiltInMethod
	method_abs                       GDExtensionPtrBuiltInMethod
	method_sign                      GDExtensionPtrBuiltInMethod
	method_clamp                     GDExtensionPtrBuiltInMethod
	method_snapped                   GDExtensionPtrBuiltInMethod
	method_from_angle                GDExtensionPtrBuiltInMethod
	member_x_setter                  GDExtensionPtrSetter
	member_x_getter                  GDExtensionPtrGetter
	member_y_setter                  GDExtensionPtrSetter
	member_y_getter                  GDExtensionPtrGetter
	indexed_setter                   GDExtensionPtrIndexedSetter
	indexed_getter                   GDExtensionPtrIndexedGetter
	operator_equal_Variant           GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant       GDExtensionPtrOperatorEvaluator
	operator_negate                  GDExtensionPtrOperatorEvaluator
	operator_positive                GDExtensionPtrOperatorEvaluator
	operator_multiply_int            GDExtensionPtrOperatorEvaluator
	operator_divide_int              GDExtensionPtrOperatorEvaluator
	operator_multiply_float          GDExtensionPtrOperatorEvaluator
	operator_divide_float            GDExtensionPtrOperatorEvaluator
	operator_equal_Vector2           GDExtensionPtrOperatorEvaluator
	operator_not_equal_Vector2       GDExtensionPtrOperatorEvaluator
	operator_less_Vector2            GDExtensionPtrOperatorEvaluator
	operator_less_equal_Vector2      GDExtensionPtrOperatorEvaluator
	operator_greater_Vector2         GDExtensionPtrOperatorEvaluator
	operator_greater_equal_Vector2   GDExtensionPtrOperatorEvaluator
	operator_add_Vector2             GDExtensionPtrOperatorEvaluator
	operator_subtract_Vector2        GDExtensionPtrOperatorEvaluator
	operator_multiply_Vector2        GDExtensionPtrOperatorEvaluator
	operator_divide_Vector2          GDExtensionPtrOperatorEvaluator
	operator_multiply_Transform2D    GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary           GDExtensionPtrOperatorEvaluator
	operator_in_Array                GDExtensionPtrOperatorEvaluator
	operator_in_PackedVector2Array   GDExtensionPtrOperatorEvaluator
}

var globalVector2MethodBindings vector2MethodBindings

func vector2InitConstructorBindings() {
	log.Debug("vector2InitConstructorBindings called")

	log.Debug("globalVector2MethodBindings.constructor_0")
	globalVector2MethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, 0)
	log.Debug("globalVector2MethodBindings.constructor_1")
	globalVector2MethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, 1)
	log.Debug("globalVector2MethodBindings.constructor_2")
	globalVector2MethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, 2)
	log.Debug("globalVector2MethodBindings.constructor_3")
	globalVector2MethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, 3)
}

func vector2InitMethodBindings() {
	log.Debug("vector2InitMethodBindings called")

	missingMethods := make([]string, 0, 42)

	methodName0 := NewStringNameWithLatin1Chars("angle")
	defer methodName0.Destroy()
	log.Debug("globalVector2MethodBindings.method_angle")
	globalVector2MethodBindings.method_angle = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName0.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector2MethodBindings.method_angle == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_angle")
	}
	methodName1 := NewStringNameWithLatin1Chars("angle_to")
	defer methodName1.Destroy()
	log.Debug("globalVector2MethodBindings.method_angle_to")
	globalVector2MethodBindings.method_angle_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName1.AsGDExtensionStringNamePtr(), 3819070308)
	if globalVector2MethodBindings.method_angle_to == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_angle_to")
	}
	methodName2 := NewStringNameWithLatin1Chars("angle_to_point")
	defer methodName2.Destroy()
	log.Debug("globalVector2MethodBindings.method_angle_to_point")
	globalVector2MethodBindings.method_angle_to_point = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName2.AsGDExtensionStringNamePtr(), 3819070308)
	if globalVector2MethodBindings.method_angle_to_point == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_angle_to_point")
	}
	methodName3 := NewStringNameWithLatin1Chars("direction_to")
	defer methodName3.Destroy()
	log.Debug("globalVector2MethodBindings.method_direction_to")
	globalVector2MethodBindings.method_direction_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName3.AsGDExtensionStringNamePtr(), 2026743667)
	if globalVector2MethodBindings.method_direction_to == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_direction_to")
	}
	methodName4 := NewStringNameWithLatin1Chars("distance_to")
	defer methodName4.Destroy()
	log.Debug("globalVector2MethodBindings.method_distance_to")
	globalVector2MethodBindings.method_distance_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName4.AsGDExtensionStringNamePtr(), 3819070308)
	if globalVector2MethodBindings.method_distance_to == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_distance_to")
	}
	methodName5 := NewStringNameWithLatin1Chars("distance_squared_to")
	defer methodName5.Destroy()
	log.Debug("globalVector2MethodBindings.method_distance_squared_to")
	globalVector2MethodBindings.method_distance_squared_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName5.AsGDExtensionStringNamePtr(), 3819070308)
	if globalVector2MethodBindings.method_distance_squared_to == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_distance_squared_to")
	}
	methodName6 := NewStringNameWithLatin1Chars("length")
	defer methodName6.Destroy()
	log.Debug("globalVector2MethodBindings.method_length")
	globalVector2MethodBindings.method_length = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName6.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector2MethodBindings.method_length == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_length")
	}
	methodName7 := NewStringNameWithLatin1Chars("length_squared")
	defer methodName7.Destroy()
	log.Debug("globalVector2MethodBindings.method_length_squared")
	globalVector2MethodBindings.method_length_squared = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName7.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector2MethodBindings.method_length_squared == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_length_squared")
	}
	methodName8 := NewStringNameWithLatin1Chars("limit_length")
	defer methodName8.Destroy()
	log.Debug("globalVector2MethodBindings.method_limit_length")
	globalVector2MethodBindings.method_limit_length = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName8.AsGDExtensionStringNamePtr(), 2544004089)
	if globalVector2MethodBindings.method_limit_length == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_limit_length")
	}
	methodName9 := NewStringNameWithLatin1Chars("normalized")
	defer methodName9.Destroy()
	log.Debug("globalVector2MethodBindings.method_normalized")
	globalVector2MethodBindings.method_normalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName9.AsGDExtensionStringNamePtr(), 2428350749)
	if globalVector2MethodBindings.method_normalized == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_normalized")
	}
	methodName10 := NewStringNameWithLatin1Chars("is_normalized")
	defer methodName10.Destroy()
	log.Debug("globalVector2MethodBindings.method_is_normalized")
	globalVector2MethodBindings.method_is_normalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName10.AsGDExtensionStringNamePtr(), 3918633141)
	if globalVector2MethodBindings.method_is_normalized == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_is_normalized")
	}
	methodName11 := NewStringNameWithLatin1Chars("is_equal_approx")
	defer methodName11.Destroy()
	log.Debug("globalVector2MethodBindings.method_is_equal_approx")
	globalVector2MethodBindings.method_is_equal_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName11.AsGDExtensionStringNamePtr(), 3190634762)
	if globalVector2MethodBindings.method_is_equal_approx == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_is_equal_approx")
	}
	methodName12 := NewStringNameWithLatin1Chars("is_zero_approx")
	defer methodName12.Destroy()
	log.Debug("globalVector2MethodBindings.method_is_zero_approx")
	globalVector2MethodBindings.method_is_zero_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName12.AsGDExtensionStringNamePtr(), 3918633141)
	if globalVector2MethodBindings.method_is_zero_approx == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_is_zero_approx")
	}
	methodName13 := NewStringNameWithLatin1Chars("is_finite")
	defer methodName13.Destroy()
	log.Debug("globalVector2MethodBindings.method_is_finite")
	globalVector2MethodBindings.method_is_finite = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName13.AsGDExtensionStringNamePtr(), 3918633141)
	if globalVector2MethodBindings.method_is_finite == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_is_finite")
	}
	methodName14 := NewStringNameWithLatin1Chars("posmod")
	defer methodName14.Destroy()
	log.Debug("globalVector2MethodBindings.method_posmod")
	globalVector2MethodBindings.method_posmod = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName14.AsGDExtensionStringNamePtr(), 2544004089)
	if globalVector2MethodBindings.method_posmod == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_posmod")
	}
	methodName15 := NewStringNameWithLatin1Chars("posmodv")
	defer methodName15.Destroy()
	log.Debug("globalVector2MethodBindings.method_posmodv")
	globalVector2MethodBindings.method_posmodv = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName15.AsGDExtensionStringNamePtr(), 2026743667)
	if globalVector2MethodBindings.method_posmodv == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_posmodv")
	}
	methodName16 := NewStringNameWithLatin1Chars("project")
	defer methodName16.Destroy()
	log.Debug("globalVector2MethodBindings.method_project")
	globalVector2MethodBindings.method_project = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName16.AsGDExtensionStringNamePtr(), 2026743667)
	if globalVector2MethodBindings.method_project == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_project")
	}
	methodName17 := NewStringNameWithLatin1Chars("lerp")
	defer methodName17.Destroy()
	log.Debug("globalVector2MethodBindings.method_lerp")
	globalVector2MethodBindings.method_lerp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName17.AsGDExtensionStringNamePtr(), 4250033116)
	if globalVector2MethodBindings.method_lerp == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_lerp")
	}
	methodName18 := NewStringNameWithLatin1Chars("slerp")
	defer methodName18.Destroy()
	log.Debug("globalVector2MethodBindings.method_slerp")
	globalVector2MethodBindings.method_slerp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName18.AsGDExtensionStringNamePtr(), 4250033116)
	if globalVector2MethodBindings.method_slerp == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_slerp")
	}
	methodName19 := NewStringNameWithLatin1Chars("cubic_interpolate")
	defer methodName19.Destroy()
	log.Debug("globalVector2MethodBindings.method_cubic_interpolate")
	globalVector2MethodBindings.method_cubic_interpolate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName19.AsGDExtensionStringNamePtr(), 193522989)
	if globalVector2MethodBindings.method_cubic_interpolate == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_cubic_interpolate")
	}
	methodName20 := NewStringNameWithLatin1Chars("cubic_interpolate_in_time")
	defer methodName20.Destroy()
	log.Debug("globalVector2MethodBindings.method_cubic_interpolate_in_time")
	globalVector2MethodBindings.method_cubic_interpolate_in_time = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName20.AsGDExtensionStringNamePtr(), 1957055074)
	if globalVector2MethodBindings.method_cubic_interpolate_in_time == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_cubic_interpolate_in_time")
	}
	methodName21 := NewStringNameWithLatin1Chars("bezier_interpolate")
	defer methodName21.Destroy()
	log.Debug("globalVector2MethodBindings.method_bezier_interpolate")
	globalVector2MethodBindings.method_bezier_interpolate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName21.AsGDExtensionStringNamePtr(), 193522989)
	if globalVector2MethodBindings.method_bezier_interpolate == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_bezier_interpolate")
	}
	methodName22 := NewStringNameWithLatin1Chars("bezier_derivative")
	defer methodName22.Destroy()
	log.Debug("globalVector2MethodBindings.method_bezier_derivative")
	globalVector2MethodBindings.method_bezier_derivative = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName22.AsGDExtensionStringNamePtr(), 193522989)
	if globalVector2MethodBindings.method_bezier_derivative == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_bezier_derivative")
	}
	methodName23 := NewStringNameWithLatin1Chars("max_axis_index")
	defer methodName23.Destroy()
	log.Debug("globalVector2MethodBindings.method_max_axis_index")
	globalVector2MethodBindings.method_max_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName23.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector2MethodBindings.method_max_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_max_axis_index")
	}
	methodName24 := NewStringNameWithLatin1Chars("min_axis_index")
	defer methodName24.Destroy()
	log.Debug("globalVector2MethodBindings.method_min_axis_index")
	globalVector2MethodBindings.method_min_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName24.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector2MethodBindings.method_min_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_min_axis_index")
	}
	methodName25 := NewStringNameWithLatin1Chars("move_toward")
	defer methodName25.Destroy()
	log.Debug("globalVector2MethodBindings.method_move_toward")
	globalVector2MethodBindings.method_move_toward = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName25.AsGDExtensionStringNamePtr(), 4250033116)
	if globalVector2MethodBindings.method_move_toward == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_move_toward")
	}
	methodName26 := NewStringNameWithLatin1Chars("rotated")
	defer methodName26.Destroy()
	log.Debug("globalVector2MethodBindings.method_rotated")
	globalVector2MethodBindings.method_rotated = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName26.AsGDExtensionStringNamePtr(), 2544004089)
	if globalVector2MethodBindings.method_rotated == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_rotated")
	}
	methodName27 := NewStringNameWithLatin1Chars("orthogonal")
	defer methodName27.Destroy()
	log.Debug("globalVector2MethodBindings.method_orthogonal")
	globalVector2MethodBindings.method_orthogonal = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName27.AsGDExtensionStringNamePtr(), 2428350749)
	if globalVector2MethodBindings.method_orthogonal == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_orthogonal")
	}
	methodName28 := NewStringNameWithLatin1Chars("floor")
	defer methodName28.Destroy()
	log.Debug("globalVector2MethodBindings.method_floor")
	globalVector2MethodBindings.method_floor = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName28.AsGDExtensionStringNamePtr(), 2428350749)
	if globalVector2MethodBindings.method_floor == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_floor")
	}
	methodName29 := NewStringNameWithLatin1Chars("ceil")
	defer methodName29.Destroy()
	log.Debug("globalVector2MethodBindings.method_ceil")
	globalVector2MethodBindings.method_ceil = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName29.AsGDExtensionStringNamePtr(), 2428350749)
	if globalVector2MethodBindings.method_ceil == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_ceil")
	}
	methodName30 := NewStringNameWithLatin1Chars("round")
	defer methodName30.Destroy()
	log.Debug("globalVector2MethodBindings.method_round")
	globalVector2MethodBindings.method_round = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName30.AsGDExtensionStringNamePtr(), 2428350749)
	if globalVector2MethodBindings.method_round == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_round")
	}
	methodName31 := NewStringNameWithLatin1Chars("aspect")
	defer methodName31.Destroy()
	log.Debug("globalVector2MethodBindings.method_aspect")
	globalVector2MethodBindings.method_aspect = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName31.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector2MethodBindings.method_aspect == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_aspect")
	}
	methodName32 := NewStringNameWithLatin1Chars("dot")
	defer methodName32.Destroy()
	log.Debug("globalVector2MethodBindings.method_dot")
	globalVector2MethodBindings.method_dot = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName32.AsGDExtensionStringNamePtr(), 3819070308)
	if globalVector2MethodBindings.method_dot == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_dot")
	}
	methodName33 := NewStringNameWithLatin1Chars("slide")
	defer methodName33.Destroy()
	log.Debug("globalVector2MethodBindings.method_slide")
	globalVector2MethodBindings.method_slide = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName33.AsGDExtensionStringNamePtr(), 2026743667)
	if globalVector2MethodBindings.method_slide == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_slide")
	}
	methodName34 := NewStringNameWithLatin1Chars("bounce")
	defer methodName34.Destroy()
	log.Debug("globalVector2MethodBindings.method_bounce")
	globalVector2MethodBindings.method_bounce = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName34.AsGDExtensionStringNamePtr(), 2026743667)
	if globalVector2MethodBindings.method_bounce == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_bounce")
	}
	methodName35 := NewStringNameWithLatin1Chars("reflect")
	defer methodName35.Destroy()
	log.Debug("globalVector2MethodBindings.method_reflect")
	globalVector2MethodBindings.method_reflect = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName35.AsGDExtensionStringNamePtr(), 2026743667)
	if globalVector2MethodBindings.method_reflect == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_reflect")
	}
	methodName36 := NewStringNameWithLatin1Chars("cross")
	defer methodName36.Destroy()
	log.Debug("globalVector2MethodBindings.method_cross")
	globalVector2MethodBindings.method_cross = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName36.AsGDExtensionStringNamePtr(), 3819070308)
	if globalVector2MethodBindings.method_cross == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_cross")
	}
	methodName37 := NewStringNameWithLatin1Chars("abs")
	defer methodName37.Destroy()
	log.Debug("globalVector2MethodBindings.method_abs")
	globalVector2MethodBindings.method_abs = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName37.AsGDExtensionStringNamePtr(), 2428350749)
	if globalVector2MethodBindings.method_abs == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_abs")
	}
	methodName38 := NewStringNameWithLatin1Chars("sign")
	defer methodName38.Destroy()
	log.Debug("globalVector2MethodBindings.method_sign")
	globalVector2MethodBindings.method_sign = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName38.AsGDExtensionStringNamePtr(), 2428350749)
	if globalVector2MethodBindings.method_sign == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_sign")
	}
	methodName39 := NewStringNameWithLatin1Chars("clamp")
	defer methodName39.Destroy()
	log.Debug("globalVector2MethodBindings.method_clamp")
	globalVector2MethodBindings.method_clamp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName39.AsGDExtensionStringNamePtr(), 318031021)
	if globalVector2MethodBindings.method_clamp == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_clamp")
	}
	methodName40 := NewStringNameWithLatin1Chars("snapped")
	defer methodName40.Destroy()
	log.Debug("globalVector2MethodBindings.method_snapped")
	globalVector2MethodBindings.method_snapped = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName40.AsGDExtensionStringNamePtr(), 2026743667)
	if globalVector2MethodBindings.method_snapped == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_snapped")
	}
	methodName41 := NewStringNameWithLatin1Chars("from_angle")
	defer methodName41.Destroy()
	log.Debug("globalVector2MethodBindings.method_from_angle")
	globalVector2MethodBindings.method_from_angle = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, methodName41.AsGDExtensionStringNamePtr(), 889263119)
	if globalVector2MethodBindings.method_from_angle == nil {
		missingMethods = append(missingMethods, "globalVector2MethodBindings.method_from_angle")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("x")
	defer memberName0.Destroy()
	log.Debug("globalVector2MethodBindings.member_x_setter")
	globalVector2MethodBindings.member_x_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalVector2MethodBindings.member_x_getter")
	globalVector2MethodBindings.member_x_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("y")
	defer memberName1.Destroy()
	log.Debug("globalVector2MethodBindings.member_y_setter")
	globalVector2MethodBindings.member_y_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalVector2MethodBindings.member_y_getter")
	globalVector2MethodBindings.member_y_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalVector2MethodBindings.indexed_setter")
	globalVector2MethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.indexed_getter")
	globalVector2MethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.operator: equal Variant")
	globalVector2MethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector2MethodBindings.operator: not_equal Variant")
	globalVector2MethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector2MethodBindings.operator: negate ")
	globalVector2MethodBindings.operator_negate = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NEGATE, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector2MethodBindings.operator: positive ")
	globalVector2MethodBindings.operator_positive = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_POSITIVE, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector2MethodBindings.operator: multiply int")
	globalVector2MethodBindings.operator_multiply_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector2MethodBindings.operator: divide int")
	globalVector2MethodBindings.operator_divide_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector2MethodBindings.operator: multiply float")
	globalVector2MethodBindings.operator_multiply_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector2MethodBindings.operator: divide float")
	globalVector2MethodBindings.operator_divide_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector2MethodBindings.operator: equal Vector2")
	globalVector2MethodBindings.operator_equal_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.operator: not_equal Vector2")
	globalVector2MethodBindings.operator_not_equal_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.operator: less Vector2")
	globalVector2MethodBindings.operator_less_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.operator: less_equal Vector2")
	globalVector2MethodBindings.operator_less_equal_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.operator: greater Vector2")
	globalVector2MethodBindings.operator_greater_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.operator: greater_equal Vector2")
	globalVector2MethodBindings.operator_greater_equal_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.operator: add Vector2")
	globalVector2MethodBindings.operator_add_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.operator: subtract Vector2")
	globalVector2MethodBindings.operator_subtract_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_SUBTRACT, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.operator: multiply Vector2")
	globalVector2MethodBindings.operator_multiply_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.operator: divide Vector2")
	globalVector2MethodBindings.operator_divide_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalVector2MethodBindings.operator: multiply Transform2D")
	globalVector2MethodBindings.operator_multiply_Transform2D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)
	log.Debug("globalVector2MethodBindings.operator: in Dictionary")
	globalVector2MethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalVector2MethodBindings.operator: in Array")
	globalVector2MethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalVector2MethodBindings.operator: in PackedVector2Array")
	globalVector2MethodBindings.operator_in_PackedVector2Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR2, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
	log.Debug("vector2InitBindings end")
}

func (c *Vector2) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector2, index: 0
func NewVector2() Vector2 {
	cx := Vector2{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalVector2MethodBindings.constructor_0, ptr)

	return cx
}

// NewVector2, index: 1
func NewVector2WithVector2(from Vector2) Vector2 {
	cx := Vector2{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector2
	// Vector2Encoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector2MethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewVector2, index: 2
func NewVector2WithVector2i(from Vector2i) Vector2 {
	cx := Vector2{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector2i
	// Vector2iEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector2MethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewVector2, index: 3
func NewVector2WithFloat32Float32(x float32, y float32) Vector2 {
	cx := Vector2{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// float
	eArg0 := Float32Encoder.EncodeArg(x)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// float
	eArg1 := Float32Encoder.EncodeArg(y)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))
	callBuiltinConstructor(globalVector2MethodBindings.constructor_3, ptr, args[0], args[1])

	return cx
}

// methods

/* Angle : angle
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Angle() float32 {
	mb := globalVector2MethodBindings.method_angle

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* AngleTo : angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) AngleTo(to Vector2) float32 {
	mb := globalVector2MethodBindings.method_angle_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* AngleToPoint : angle_to_point
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) AngleToPoint(to Vector2) float32 {
	mb := globalVector2MethodBindings.method_angle_to_point

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DirectionTo : direction_to
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) DirectionTo(to Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_direction_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) DistanceTo(to Vector2) float32 {
	mb := globalVector2MethodBindings.method_distance_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) DistanceSquaredTo(to Vector2) float32 {
	mb := globalVector2MethodBindings.method_distance_squared_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Length() float32 {
	mb := globalVector2MethodBindings.method_length

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) LengthSquared() float32 {
	mb := globalVector2MethodBindings.method_length_squared

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* LimitLength : limit_length
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) LimitLength(length float32) Vector2 {
	mb := globalVector2MethodBindings.method_limit_length

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(length)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Normalized() Vector2 {
	mb := globalVector2MethodBindings.method_normalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector2) IsNormalized() bool {
	mb := globalVector2MethodBindings.method_is_normalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector2) IsEqualApprox(to Vector2) bool {
	mb := globalVector2MethodBindings.method_is_equal_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsZeroApprox : is_zero_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector2) IsZeroApprox() bool {
	mb := globalVector2MethodBindings.method_is_zero_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector2) IsFinite() bool {
	mb := globalVector2MethodBindings.method_is_finite

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Posmod : posmod
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Posmod(mod float32) Vector2 {
	mb := globalVector2MethodBindings.method_posmod

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(mod)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Posmodv : posmodv
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Posmodv(modv Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_posmodv

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(modv)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Project : project
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Project(b Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_project

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(b)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Lerp(to Vector2, weight float32) Vector2 {
	mb := globalVector2MethodBindings.method_lerp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(weight)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Slerp(to Vector2, weight float32) Vector2 {
	mb := globalVector2MethodBindings.method_slerp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(weight)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CubicInterpolate : cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) CubicInterpolate(b Vector2, pre_a Vector2, post_b Vector2, weight float32) Vector2 {
	mb := globalVector2MethodBindings.method_cubic_interpolate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(b)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Vector2Encoder.EncodeArg(pre_a)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Vector2Encoder.EncodeArg(post_b)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(weight)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CubicInterpolateInTime : cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) CubicInterpolateInTime(b Vector2, pre_a Vector2, post_b Vector2, weight float32, b_t float32, pre_a_t float32, post_b_t float32) Vector2 {
	mb := globalVector2MethodBindings.method_cubic_interpolate_in_time

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 7
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(b)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Vector2Encoder.EncodeArg(pre_a)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Vector2Encoder.EncodeArg(post_b)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(weight)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	eArg4 := Float32Encoder.EncodeArg(b_t)
	args[4] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg4))

	eArg5 := Float32Encoder.EncodeArg(pre_a_t)
	args[5] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg5))

	eArg6 := Float32Encoder.EncodeArg(post_b_t)
	args[6] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg6))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* BezierInterpolate : bezier_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) BezierInterpolate(control_1 Vector2, control_2 Vector2, end Vector2, t float32) Vector2 {
	mb := globalVector2MethodBindings.method_bezier_interpolate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(control_1)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Vector2Encoder.EncodeArg(control_2)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Vector2Encoder.EncodeArg(end)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(t)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* BezierDerivative : bezier_derivative
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) BezierDerivative(control_1 Vector2, control_2 Vector2, end Vector2, t float32) Vector2 {
	mb := globalVector2MethodBindings.method_bezier_derivative

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(control_1)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Vector2Encoder.EncodeArg(control_2)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Vector2Encoder.EncodeArg(end)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(t)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector2) MaxAxisIndex() int32 {
	mb := globalVector2MethodBindings.method_max_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector2) MinAxisIndex() int32 {
	mb := globalVector2MethodBindings.method_min_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* MoveToward : move_toward
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) MoveToward(to Vector2, delta float32) Vector2 {
	mb := globalVector2MethodBindings.method_move_toward

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(delta)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Rotated(angle float32) Vector2 {
	mb := globalVector2MethodBindings.method_rotated

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(angle)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Orthogonal : orthogonal
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Orthogonal() Vector2 {
	mb := globalVector2MethodBindings.method_orthogonal

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* Floor : floor
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Floor() Vector2 {
	mb := globalVector2MethodBindings.method_floor

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* Ceil : ceil
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Ceil() Vector2 {
	mb := globalVector2MethodBindings.method_ceil

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* Round : round
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Round() Vector2 {
	mb := globalVector2MethodBindings.method_round

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* Aspect : aspect
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Aspect() float32 {
	mb := globalVector2MethodBindings.method_aspect

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Dot(with Vector2) float32 {
	mb := globalVector2MethodBindings.method_dot

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(with)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Slide : slide
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Slide(n Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_slide

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(n)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Bounce : bounce
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Bounce(n Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_bounce

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(n)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reflect : reflect
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Reflect(n Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_reflect

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(n)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Cross : cross
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Cross(with Vector2) float32 {
	mb := globalVector2MethodBindings.method_cross

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(with)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Abs() Vector2 {
	mb := globalVector2MethodBindings.method_abs

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Sign() Vector2 {
	mb := globalVector2MethodBindings.method_sign

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Clamp(min Vector2, max Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_clamp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(min)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Vector2Encoder.EncodeArg(max)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Snapped(step Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_snapped

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(step)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* FromAngle : from_angle
 * is_vararg = false, is_static = true
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) FromAngle(angle float32) Vector2 {
	mb := globalVector2MethodBindings.method_from_angle

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(angle)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

func (cx *Vector2) MemberGetx() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalVector2MethodBindings.member_x_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Vector2) MemberGety() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalVector2MethodBindings.member_y_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

// Equal_Variant operator
func (cx *Vector2) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector2) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector2) Negate() Vector2 {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector2) Positive() Vector2 {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_positive, lt, rt)
}

// Multiply_int operator
func (cx *Vector2) Multiply_int(right int32) Vector2 {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector2) Divide_int(right int32) Vector2 {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector2) Multiply_float(right float32) Vector2 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector2) Divide_float(right float32) Vector2 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector2 operator
func (cx *Vector2) Equal_Vector2(right Vector2) bool {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_equal_Vector2, lt, rt)
}

// Not_equal_Vector2 operator
func (cx *Vector2) Not_equal_Vector2(right Vector2) bool {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_not_equal_Vector2, lt, rt)
}

// Less_Vector2 operator
func (cx *Vector2) Less_Vector2(right Vector2) bool {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_less_Vector2, lt, rt)
}

// Less_equal_Vector2 operator
func (cx *Vector2) Less_equal_Vector2(right Vector2) bool {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_less_equal_Vector2, lt, rt)
}

// Greater_Vector2 operator
func (cx *Vector2) Greater_Vector2(right Vector2) bool {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_greater_Vector2, lt, rt)
}

// Greater_equal_Vector2 operator
func (cx *Vector2) Greater_equal_Vector2(right Vector2) bool {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_greater_equal_Vector2, lt, rt)
}

// Add_Vector2 operator
func (cx *Vector2) Add_Vector2(right Vector2) Vector2 {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_add_Vector2, lt, rt)
}

// Subtract_Vector2 operator
func (cx *Vector2) Subtract_Vector2(right Vector2) Vector2 {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_subtract_Vector2, lt, rt)
}

// Multiply_Vector2 operator
func (cx *Vector2) Multiply_Vector2(right Vector2) Vector2 {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_Vector2, lt, rt)
}

// Divide_Vector2 operator
func (cx *Vector2) Divide_Vector2(right Vector2) Vector2 {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_divide_Vector2, lt, rt)
}

// Multiply_Transform2D operator
func (cx *Vector2) Multiply_Transform2D(right Transform2D) Vector2 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_Transform2D, lt, rt)
}

// In_Dictionary operator
func (cx *Vector2) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector2) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_in_Array, lt, rt)
}

// In_PackedVector2Array operator
func (cx *Vector2) In_PackedVector2Array(right PackedVector2Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_in_PackedVector2Array, lt, rt)
}

/*
 * Vector2i
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: false
 */
type Vector2i struct {
	opaque [8]uint8
}

type vector2iMethodBindings struct {
	constructor_0                   GDExtensionPtrConstructor
	constructor_1                   GDExtensionPtrConstructor
	constructor_2                   GDExtensionPtrConstructor
	constructor_3                   GDExtensionPtrConstructor
	method_aspect                   GDExtensionPtrBuiltInMethod
	method_max_axis_index           GDExtensionPtrBuiltInMethod
	method_min_axis_index           GDExtensionPtrBuiltInMethod
	method_length                   GDExtensionPtrBuiltInMethod
	method_length_squared           GDExtensionPtrBuiltInMethod
	method_sign                     GDExtensionPtrBuiltInMethod
	method_abs                      GDExtensionPtrBuiltInMethod
	method_clamp                    GDExtensionPtrBuiltInMethod
	method_snapped                  GDExtensionPtrBuiltInMethod
	member_x_setter                 GDExtensionPtrSetter
	member_x_getter                 GDExtensionPtrGetter
	member_y_setter                 GDExtensionPtrSetter
	member_y_getter                 GDExtensionPtrGetter
	indexed_setter                  GDExtensionPtrIndexedSetter
	indexed_getter                  GDExtensionPtrIndexedGetter
	operator_equal_Variant          GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant      GDExtensionPtrOperatorEvaluator
	operator_negate                 GDExtensionPtrOperatorEvaluator
	operator_positive               GDExtensionPtrOperatorEvaluator
	operator_multiply_int           GDExtensionPtrOperatorEvaluator
	operator_divide_int             GDExtensionPtrOperatorEvaluator
	operator_module_int             GDExtensionPtrOperatorEvaluator
	operator_multiply_float         GDExtensionPtrOperatorEvaluator
	operator_divide_float           GDExtensionPtrOperatorEvaluator
	operator_equal_Vector2i         GDExtensionPtrOperatorEvaluator
	operator_not_equal_Vector2i     GDExtensionPtrOperatorEvaluator
	operator_less_Vector2i          GDExtensionPtrOperatorEvaluator
	operator_less_equal_Vector2i    GDExtensionPtrOperatorEvaluator
	operator_greater_Vector2i       GDExtensionPtrOperatorEvaluator
	operator_greater_equal_Vector2i GDExtensionPtrOperatorEvaluator
	operator_add_Vector2i           GDExtensionPtrOperatorEvaluator
	operator_subtract_Vector2i      GDExtensionPtrOperatorEvaluator
	operator_multiply_Vector2i      GDExtensionPtrOperatorEvaluator
	operator_divide_Vector2i        GDExtensionPtrOperatorEvaluator
	operator_module_Vector2i        GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary          GDExtensionPtrOperatorEvaluator
	operator_in_Array               GDExtensionPtrOperatorEvaluator
}

var globalVector2iMethodBindings vector2iMethodBindings

func vector2iInitConstructorBindings() {
	log.Debug("vector2iInitConstructorBindings called")

	log.Debug("globalVector2iMethodBindings.constructor_0")
	globalVector2iMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, 0)
	log.Debug("globalVector2iMethodBindings.constructor_1")
	globalVector2iMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, 1)
	log.Debug("globalVector2iMethodBindings.constructor_2")
	globalVector2iMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, 2)
	log.Debug("globalVector2iMethodBindings.constructor_3")
	globalVector2iMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, 3)
}

func vector2iInitMethodBindings() {
	log.Debug("vector2iInitMethodBindings called")

	missingMethods := make([]string, 0, 9)

	methodName0 := NewStringNameWithLatin1Chars("aspect")
	defer methodName0.Destroy()
	log.Debug("globalVector2iMethodBindings.method_aspect")
	globalVector2iMethodBindings.method_aspect = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, methodName0.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector2iMethodBindings.method_aspect == nil {
		missingMethods = append(missingMethods, "globalVector2iMethodBindings.method_aspect")
	}
	methodName1 := NewStringNameWithLatin1Chars("max_axis_index")
	defer methodName1.Destroy()
	log.Debug("globalVector2iMethodBindings.method_max_axis_index")
	globalVector2iMethodBindings.method_max_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, methodName1.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector2iMethodBindings.method_max_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector2iMethodBindings.method_max_axis_index")
	}
	methodName2 := NewStringNameWithLatin1Chars("min_axis_index")
	defer methodName2.Destroy()
	log.Debug("globalVector2iMethodBindings.method_min_axis_index")
	globalVector2iMethodBindings.method_min_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, methodName2.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector2iMethodBindings.method_min_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector2iMethodBindings.method_min_axis_index")
	}
	methodName3 := NewStringNameWithLatin1Chars("length")
	defer methodName3.Destroy()
	log.Debug("globalVector2iMethodBindings.method_length")
	globalVector2iMethodBindings.method_length = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, methodName3.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector2iMethodBindings.method_length == nil {
		missingMethods = append(missingMethods, "globalVector2iMethodBindings.method_length")
	}
	methodName4 := NewStringNameWithLatin1Chars("length_squared")
	defer methodName4.Destroy()
	log.Debug("globalVector2iMethodBindings.method_length_squared")
	globalVector2iMethodBindings.method_length_squared = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, methodName4.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector2iMethodBindings.method_length_squared == nil {
		missingMethods = append(missingMethods, "globalVector2iMethodBindings.method_length_squared")
	}
	methodName5 := NewStringNameWithLatin1Chars("sign")
	defer methodName5.Destroy()
	log.Debug("globalVector2iMethodBindings.method_sign")
	globalVector2iMethodBindings.method_sign = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, methodName5.AsGDExtensionStringNamePtr(), 3444277866)
	if globalVector2iMethodBindings.method_sign == nil {
		missingMethods = append(missingMethods, "globalVector2iMethodBindings.method_sign")
	}
	methodName6 := NewStringNameWithLatin1Chars("abs")
	defer methodName6.Destroy()
	log.Debug("globalVector2iMethodBindings.method_abs")
	globalVector2iMethodBindings.method_abs = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, methodName6.AsGDExtensionStringNamePtr(), 3444277866)
	if globalVector2iMethodBindings.method_abs == nil {
		missingMethods = append(missingMethods, "globalVector2iMethodBindings.method_abs")
	}
	methodName7 := NewStringNameWithLatin1Chars("clamp")
	defer methodName7.Destroy()
	log.Debug("globalVector2iMethodBindings.method_clamp")
	globalVector2iMethodBindings.method_clamp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, methodName7.AsGDExtensionStringNamePtr(), 186568249)
	if globalVector2iMethodBindings.method_clamp == nil {
		missingMethods = append(missingMethods, "globalVector2iMethodBindings.method_clamp")
	}
	methodName8 := NewStringNameWithLatin1Chars("snapped")
	defer methodName8.Destroy()
	log.Debug("globalVector2iMethodBindings.method_snapped")
	globalVector2iMethodBindings.method_snapped = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, methodName8.AsGDExtensionStringNamePtr(), 1735278196)
	if globalVector2iMethodBindings.method_snapped == nil {
		missingMethods = append(missingMethods, "globalVector2iMethodBindings.method_snapped")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("x")
	defer memberName0.Destroy()
	log.Debug("globalVector2iMethodBindings.member_x_setter")
	globalVector2iMethodBindings.member_x_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalVector2iMethodBindings.member_x_getter")
	globalVector2iMethodBindings.member_x_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("y")
	defer memberName1.Destroy()
	log.Debug("globalVector2iMethodBindings.member_y_setter")
	globalVector2iMethodBindings.member_y_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalVector2iMethodBindings.member_y_getter")
	globalVector2iMethodBindings.member_y_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalVector2iMethodBindings.indexed_setter")
	globalVector2iMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.indexed_getter")
	globalVector2iMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: equal Variant")
	globalVector2iMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector2iMethodBindings.operator: not_equal Variant")
	globalVector2iMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector2iMethodBindings.operator: negate ")
	globalVector2iMethodBindings.operator_negate = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NEGATE, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector2iMethodBindings.operator: positive ")
	globalVector2iMethodBindings.operator_positive = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_POSITIVE, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector2iMethodBindings.operator: multiply int")
	globalVector2iMethodBindings.operator_multiply_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector2iMethodBindings.operator: divide int")
	globalVector2iMethodBindings.operator_divide_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector2iMethodBindings.operator: module int")
	globalVector2iMethodBindings.operator_module_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector2iMethodBindings.operator: multiply float")
	globalVector2iMethodBindings.operator_multiply_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector2iMethodBindings.operator: divide float")
	globalVector2iMethodBindings.operator_divide_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector2iMethodBindings.operator: equal Vector2i")
	globalVector2iMethodBindings.operator_equal_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: not_equal Vector2i")
	globalVector2iMethodBindings.operator_not_equal_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: less Vector2i")
	globalVector2iMethodBindings.operator_less_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: less_equal Vector2i")
	globalVector2iMethodBindings.operator_less_equal_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: greater Vector2i")
	globalVector2iMethodBindings.operator_greater_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: greater_equal Vector2i")
	globalVector2iMethodBindings.operator_greater_equal_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: add Vector2i")
	globalVector2iMethodBindings.operator_add_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: subtract Vector2i")
	globalVector2iMethodBindings.operator_subtract_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_SUBTRACT, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: multiply Vector2i")
	globalVector2iMethodBindings.operator_multiply_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: divide Vector2i")
	globalVector2iMethodBindings.operator_divide_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: module Vector2i")
	globalVector2iMethodBindings.operator_module_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalVector2iMethodBindings.operator: in Dictionary")
	globalVector2iMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalVector2iMethodBindings.operator: in Array")
	globalVector2iMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR2I, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("vector2iInitBindings end")
}

func (c *Vector2i) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector2i, index: 0
func NewVector2i() Vector2i {
	cx := Vector2i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalVector2iMethodBindings.constructor_0, ptr)

	return cx
}

// NewVector2i, index: 1
func NewVector2iWithVector2i(from Vector2i) Vector2i {
	cx := Vector2i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector2i
	// Vector2iEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector2iMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewVector2i, index: 2
func NewVector2iWithVector2(from Vector2) Vector2i {
	cx := Vector2i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector2
	// Vector2Encoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector2iMethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewVector2i, index: 3
func NewVector2iWithInt32Int32(x int32, y int32) Vector2i {
	cx := Vector2i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// int
	eArg0 := Int32Encoder.EncodeArg(x)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// int
	eArg1 := Int32Encoder.EncodeArg(y)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))
	callBuiltinConstructor(globalVector2iMethodBindings.constructor_3, ptr, args[0], args[1])

	return cx
}

// methods

/* Aspect : aspect
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2i) Aspect() float32 {
	mb := globalVector2iMethodBindings.method_aspect

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector2i) MaxAxisIndex() int32 {
	mb := globalVector2iMethodBindings.method_max_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector2i) MinAxisIndex() int32 {
	mb := globalVector2iMethodBindings.method_min_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2i) Length() float32 {
	mb := globalVector2iMethodBindings.method_length

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector2i) LengthSquared() int32 {
	mb := globalVector2iMethodBindings.method_length_squared

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Sign() Vector2i {
	mb := globalVector2iMethodBindings.method_sign

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2i](mb, bx, nil)
	return ret

}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Abs() Vector2i {
	mb := globalVector2iMethodBindings.method_abs

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2i](mb, bx, nil)
	return ret

}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Clamp(min Vector2i, max Vector2i) Vector2i {
	mb := globalVector2iMethodBindings.method_clamp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2iEncoder.EncodeArg(min)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Vector2iEncoder.EncodeArg(max)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Vector2i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Snapped(step Vector2i) Vector2i {
	mb := globalVector2iMethodBindings.method_snapped

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2iEncoder.EncodeArg(step)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

func (cx *Vector2i) MemberGetx() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalVector2iMethodBindings.member_x_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

func (cx *Vector2i) MemberGety() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalVector2iMethodBindings.member_y_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

// Equal_Variant operator
func (cx *Vector2i) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector2i) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector2i) Negate() Vector2i {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector2i) Positive() Vector2i {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_positive, lt, rt)
}

// Multiply_int operator
func (cx *Vector2i) Multiply_int(right int32) Vector2i {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector2i) Divide_int(right int32) Vector2i {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_divide_int, lt, rt)
}

// Module_int operator
func (cx *Vector2i) Module_int(right int32) Vector2i {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_module_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector2i) Multiply_float(right float32) Vector2 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2](globalVector2iMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector2i) Divide_float(right float32) Vector2 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2](globalVector2iMethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector2i operator
func (cx *Vector2i) Equal_Vector2i(right Vector2i) bool {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_equal_Vector2i, lt, rt)
}

// Not_equal_Vector2i operator
func (cx *Vector2i) Not_equal_Vector2i(right Vector2i) bool {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_not_equal_Vector2i, lt, rt)
}

// Less_Vector2i operator
func (cx *Vector2i) Less_Vector2i(right Vector2i) bool {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_less_Vector2i, lt, rt)
}

// Less_equal_Vector2i operator
func (cx *Vector2i) Less_equal_Vector2i(right Vector2i) bool {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_less_equal_Vector2i, lt, rt)
}

// Greater_Vector2i operator
func (cx *Vector2i) Greater_Vector2i(right Vector2i) bool {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_greater_Vector2i, lt, rt)
}

// Greater_equal_Vector2i operator
func (cx *Vector2i) Greater_equal_Vector2i(right Vector2i) bool {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_greater_equal_Vector2i, lt, rt)
}

// Add_Vector2i operator
func (cx *Vector2i) Add_Vector2i(right Vector2i) Vector2i {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_add_Vector2i, lt, rt)
}

// Subtract_Vector2i operator
func (cx *Vector2i) Subtract_Vector2i(right Vector2i) Vector2i {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_subtract_Vector2i, lt, rt)
}

// Multiply_Vector2i operator
func (cx *Vector2i) Multiply_Vector2i(right Vector2i) Vector2i {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_multiply_Vector2i, lt, rt)
}

// Divide_Vector2i operator
func (cx *Vector2i) Divide_Vector2i(right Vector2i) Vector2i {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_divide_Vector2i, lt, rt)
}

// Module_Vector2i operator
func (cx *Vector2i) Module_Vector2i(right Vector2i) Vector2i {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_module_Vector2i, lt, rt)
}

// In_Dictionary operator
func (cx *Vector2i) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector2i) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_in_Array, lt, rt)
}

/*
 * Rect2
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type Rect2 struct {
	opaque [16]uint8
}

type rect2MethodBindings struct {
	constructor_0                 GDExtensionPtrConstructor
	constructor_1                 GDExtensionPtrConstructor
	constructor_2                 GDExtensionPtrConstructor
	constructor_3                 GDExtensionPtrConstructor
	constructor_4                 GDExtensionPtrConstructor
	method_get_center             GDExtensionPtrBuiltInMethod
	method_get_area               GDExtensionPtrBuiltInMethod
	method_has_area               GDExtensionPtrBuiltInMethod
	method_has_point              GDExtensionPtrBuiltInMethod
	method_is_equal_approx        GDExtensionPtrBuiltInMethod
	method_is_finite              GDExtensionPtrBuiltInMethod
	method_intersects             GDExtensionPtrBuiltInMethod
	method_encloses               GDExtensionPtrBuiltInMethod
	method_intersection           GDExtensionPtrBuiltInMethod
	method_merge                  GDExtensionPtrBuiltInMethod
	method_expand                 GDExtensionPtrBuiltInMethod
	method_grow                   GDExtensionPtrBuiltInMethod
	method_grow_side              GDExtensionPtrBuiltInMethod
	method_grow_individual        GDExtensionPtrBuiltInMethod
	method_abs                    GDExtensionPtrBuiltInMethod
	member_position_setter        GDExtensionPtrSetter
	member_position_getter        GDExtensionPtrGetter
	member_size_setter            GDExtensionPtrSetter
	member_size_getter            GDExtensionPtrGetter
	member_end_setter             GDExtensionPtrSetter
	member_end_getter             GDExtensionPtrGetter
	operator_equal_Variant        GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant    GDExtensionPtrOperatorEvaluator
	operator_equal_Rect2          GDExtensionPtrOperatorEvaluator
	operator_not_equal_Rect2      GDExtensionPtrOperatorEvaluator
	operator_multiply_Transform2D GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary        GDExtensionPtrOperatorEvaluator
	operator_in_Array             GDExtensionPtrOperatorEvaluator
}

var globalRect2MethodBindings rect2MethodBindings

func rect2InitConstructorBindings() {
	log.Debug("rect2InitConstructorBindings called")

	log.Debug("globalRect2MethodBindings.constructor_0")
	globalRect2MethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, 0)
	log.Debug("globalRect2MethodBindings.constructor_1")
	globalRect2MethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, 1)
	log.Debug("globalRect2MethodBindings.constructor_2")
	globalRect2MethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, 2)
	log.Debug("globalRect2MethodBindings.constructor_3")
	globalRect2MethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, 3)
	log.Debug("globalRect2MethodBindings.constructor_4")
	globalRect2MethodBindings.constructor_4 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, 4)
}

func rect2InitMethodBindings() {
	log.Debug("rect2InitMethodBindings called")

	missingMethods := make([]string, 0, 15)

	methodName0 := NewStringNameWithLatin1Chars("get_center")
	defer methodName0.Destroy()
	log.Debug("globalRect2MethodBindings.method_get_center")
	globalRect2MethodBindings.method_get_center = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName0.AsGDExtensionStringNamePtr(), 2428350749)
	if globalRect2MethodBindings.method_get_center == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_get_center")
	}
	methodName1 := NewStringNameWithLatin1Chars("get_area")
	defer methodName1.Destroy()
	log.Debug("globalRect2MethodBindings.method_get_area")
	globalRect2MethodBindings.method_get_area = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName1.AsGDExtensionStringNamePtr(), 466405837)
	if globalRect2MethodBindings.method_get_area == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_get_area")
	}
	methodName2 := NewStringNameWithLatin1Chars("has_area")
	defer methodName2.Destroy()
	log.Debug("globalRect2MethodBindings.method_has_area")
	globalRect2MethodBindings.method_has_area = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName2.AsGDExtensionStringNamePtr(), 3918633141)
	if globalRect2MethodBindings.method_has_area == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_has_area")
	}
	methodName3 := NewStringNameWithLatin1Chars("has_point")
	defer methodName3.Destroy()
	log.Debug("globalRect2MethodBindings.method_has_point")
	globalRect2MethodBindings.method_has_point = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName3.AsGDExtensionStringNamePtr(), 3190634762)
	if globalRect2MethodBindings.method_has_point == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_has_point")
	}
	methodName4 := NewStringNameWithLatin1Chars("is_equal_approx")
	defer methodName4.Destroy()
	log.Debug("globalRect2MethodBindings.method_is_equal_approx")
	globalRect2MethodBindings.method_is_equal_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName4.AsGDExtensionStringNamePtr(), 1908192260)
	if globalRect2MethodBindings.method_is_equal_approx == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_is_equal_approx")
	}
	methodName5 := NewStringNameWithLatin1Chars("is_finite")
	defer methodName5.Destroy()
	log.Debug("globalRect2MethodBindings.method_is_finite")
	globalRect2MethodBindings.method_is_finite = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName5.AsGDExtensionStringNamePtr(), 3918633141)
	if globalRect2MethodBindings.method_is_finite == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_is_finite")
	}
	methodName6 := NewStringNameWithLatin1Chars("intersects")
	defer methodName6.Destroy()
	log.Debug("globalRect2MethodBindings.method_intersects")
	globalRect2MethodBindings.method_intersects = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName6.AsGDExtensionStringNamePtr(), 819294880)
	if globalRect2MethodBindings.method_intersects == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_intersects")
	}
	methodName7 := NewStringNameWithLatin1Chars("encloses")
	defer methodName7.Destroy()
	log.Debug("globalRect2MethodBindings.method_encloses")
	globalRect2MethodBindings.method_encloses = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName7.AsGDExtensionStringNamePtr(), 1908192260)
	if globalRect2MethodBindings.method_encloses == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_encloses")
	}
	methodName8 := NewStringNameWithLatin1Chars("intersection")
	defer methodName8.Destroy()
	log.Debug("globalRect2MethodBindings.method_intersection")
	globalRect2MethodBindings.method_intersection = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName8.AsGDExtensionStringNamePtr(), 2282977743)
	if globalRect2MethodBindings.method_intersection == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_intersection")
	}
	methodName9 := NewStringNameWithLatin1Chars("merge")
	defer methodName9.Destroy()
	log.Debug("globalRect2MethodBindings.method_merge")
	globalRect2MethodBindings.method_merge = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName9.AsGDExtensionStringNamePtr(), 2282977743)
	if globalRect2MethodBindings.method_merge == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_merge")
	}
	methodName10 := NewStringNameWithLatin1Chars("expand")
	defer methodName10.Destroy()
	log.Debug("globalRect2MethodBindings.method_expand")
	globalRect2MethodBindings.method_expand = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName10.AsGDExtensionStringNamePtr(), 293272265)
	if globalRect2MethodBindings.method_expand == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_expand")
	}
	methodName11 := NewStringNameWithLatin1Chars("grow")
	defer methodName11.Destroy()
	log.Debug("globalRect2MethodBindings.method_grow")
	globalRect2MethodBindings.method_grow = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName11.AsGDExtensionStringNamePtr(), 39664498)
	if globalRect2MethodBindings.method_grow == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_grow")
	}
	methodName12 := NewStringNameWithLatin1Chars("grow_side")
	defer methodName12.Destroy()
	log.Debug("globalRect2MethodBindings.method_grow_side")
	globalRect2MethodBindings.method_grow_side = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName12.AsGDExtensionStringNamePtr(), 4177736158)
	if globalRect2MethodBindings.method_grow_side == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_grow_side")
	}
	methodName13 := NewStringNameWithLatin1Chars("grow_individual")
	defer methodName13.Destroy()
	log.Debug("globalRect2MethodBindings.method_grow_individual")
	globalRect2MethodBindings.method_grow_individual = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName13.AsGDExtensionStringNamePtr(), 3203390369)
	if globalRect2MethodBindings.method_grow_individual == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_grow_individual")
	}
	methodName14 := NewStringNameWithLatin1Chars("abs")
	defer methodName14.Destroy()
	log.Debug("globalRect2MethodBindings.method_abs")
	globalRect2MethodBindings.method_abs = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, methodName14.AsGDExtensionStringNamePtr(), 3107653634)
	if globalRect2MethodBindings.method_abs == nil {
		missingMethods = append(missingMethods, "globalRect2MethodBindings.method_abs")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("position")
	defer memberName0.Destroy()
	log.Debug("globalRect2MethodBindings.member_position_setter")
	globalRect2MethodBindings.member_position_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalRect2MethodBindings.member_position_getter")
	globalRect2MethodBindings.member_position_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("size")
	defer memberName1.Destroy()
	log.Debug("globalRect2MethodBindings.member_size_setter")
	globalRect2MethodBindings.member_size_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalRect2MethodBindings.member_size_getter")
	globalRect2MethodBindings.member_size_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("end")
	defer memberName2.Destroy()
	log.Debug("globalRect2MethodBindings.member_end_setter")
	globalRect2MethodBindings.member_end_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalRect2MethodBindings.member_end_getter")
	globalRect2MethodBindings.member_end_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalRect2MethodBindings.operator: equal Variant")
	globalRect2MethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_RECT2, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalRect2MethodBindings.operator: not_equal Variant")
	globalRect2MethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_RECT2, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalRect2MethodBindings.operator: equal Rect2")
	globalRect2MethodBindings.operator_equal_Rect2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_RECT2, GDEXTENSION_VARIANT_TYPE_RECT2)
	log.Debug("globalRect2MethodBindings.operator: not_equal Rect2")
	globalRect2MethodBindings.operator_not_equal_Rect2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_RECT2, GDEXTENSION_VARIANT_TYPE_RECT2)
	log.Debug("globalRect2MethodBindings.operator: multiply Transform2D")
	globalRect2MethodBindings.operator_multiply_Transform2D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_RECT2, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)
	log.Debug("globalRect2MethodBindings.operator: in Dictionary")
	globalRect2MethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_RECT2, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalRect2MethodBindings.operator: in Array")
	globalRect2MethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_RECT2, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("rect2InitBindings end")
}

func (c *Rect2) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewRect2, index: 0
func NewRect2() Rect2 {
	cx := Rect2{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalRect2MethodBindings.constructor_0, ptr)

	return cx
}

// NewRect2, index: 1
func NewRect2WithRect2(from Rect2) Rect2 {
	cx := Rect2{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Rect2
	// Rect2Encoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalRect2MethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewRect2, index: 2
func NewRect2WithRect2i(from Rect2i) Rect2 {
	cx := Rect2{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Rect2i
	// Rect2iEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalRect2MethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewRect2, index: 3
func NewRect2WithVector2Vector2(position Vector2, size Vector2) Rect2 {
	cx := Rect2{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Vector2
	// Vector2Encoder
	args[0] = (GDExtensionConstTypePtr)(position.ptr())

	// Vector2
	// Vector2Encoder
	args[1] = (GDExtensionConstTypePtr)(size.ptr())
	callBuiltinConstructor(globalRect2MethodBindings.constructor_3, ptr, args[0], args[1])

	return cx
}

// NewRect2, index: 4
func NewRect2WithFloat32Float32Float32Float32(x float32, y float32, width float32, height float32) Rect2 {
	cx := Rect2{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [4]GDExtensionConstTypePtr

	// float
	eArg0 := Float32Encoder.EncodeArg(x)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// float
	eArg1 := Float32Encoder.EncodeArg(y)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))

	// float
	eArg2 := Float32Encoder.EncodeArg(width)
	args[2] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg2))

	// float
	eArg3 := Float32Encoder.EncodeArg(height)
	args[3] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg3))
	callBuiltinConstructor(globalRect2MethodBindings.constructor_4, ptr, args[0], args[1], args[2], args[3])

	return cx
}

// methods

/* GetCenter : get_center
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Rect2) GetCenter() Vector2 {
	mb := globalRect2MethodBindings.method_get_center

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* GetArea : get_area
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Rect2) GetArea() float32 {
	mb := globalRect2MethodBindings.method_get_area

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* HasArea : has_area
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) HasArea() bool {
	mb := globalRect2MethodBindings.method_has_area

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) HasPoint(point Vector2) bool {
	mb := globalRect2MethodBindings.method_has_point

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(point)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) IsEqualApprox(rect Rect2) bool {
	mb := globalRect2MethodBindings.method_is_equal_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Rect2Encoder.EncodeArg(rect)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) IsFinite() bool {
	mb := globalRect2MethodBindings.method_is_finite

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Intersects : intersects
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) Intersects(b Rect2, include_borders bool) bool {
	mb := globalRect2MethodBindings.method_intersects

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Rect2Encoder.EncodeArg(b)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(include_borders)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Encloses : encloses
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) Encloses(b Rect2) bool {
	mb := globalRect2MethodBindings.method_encloses

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Rect2Encoder.EncodeArg(b)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Intersection : intersection
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Intersection(b Rect2) Rect2 {
	mb := globalRect2MethodBindings.method_intersection

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Rect2Encoder.EncodeArg(b)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Merge(b Rect2) Rect2 {
	mb := globalRect2MethodBindings.method_merge

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Rect2Encoder.EncodeArg(b)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Expand : expand
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Expand(to Vector2) Rect2 {
	mb := globalRect2MethodBindings.method_expand

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Grow : grow
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Grow(amount float32) Rect2 {
	mb := globalRect2MethodBindings.method_grow

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(amount)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GrowSide : grow_side
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) GrowSide(side int32, amount float32) Rect2 {
	mb := globalRect2MethodBindings.method_grow_side

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(side)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(amount)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GrowIndividual : grow_individual
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) GrowIndividual(left float32, top float32, right float32, bottom float32) Rect2 {
	mb := globalRect2MethodBindings.method_grow_individual

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(left)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(top)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Float32Encoder.EncodeArg(right)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(bottom)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Abs() Rect2 {
	mb := globalRect2MethodBindings.method_abs

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Rect2](mb, bx, nil)
	return ret

}

// members

func (cx *Rect2) MemberGetposition() Vector2 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector2](globalRect2MethodBindings.member_position_getter, bx)
	return ret

}

func (cx *Rect2) MemberGetsize() Vector2 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector2](globalRect2MethodBindings.member_size_getter, bx)
	return ret

}

func (cx *Rect2) MemberGetend() Vector2 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector2](globalRect2MethodBindings.member_end_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Rect2) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Rect2) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_not_equal_Variant, lt, rt)
}

// Equal_Rect2 operator
func (cx *Rect2) Equal_Rect2(right Rect2) bool {
	lt := cx.ptr()

	eRight := Rect2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_equal_Rect2, lt, rt)
}

// Not_equal_Rect2 operator
func (cx *Rect2) Not_equal_Rect2(right Rect2) bool {
	lt := cx.ptr()

	eRight := Rect2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_not_equal_Rect2, lt, rt)
}

// Multiply_Transform2D operator
func (cx *Rect2) Multiply_Transform2D(right Transform2D) Rect2 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Rect2](globalRect2MethodBindings.operator_multiply_Transform2D, lt, rt)
}

// In_Dictionary operator
func (cx *Rect2) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Rect2) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_in_Array, lt, rt)
}

/*
 * Rect2i
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type Rect2i struct {
	opaque [16]uint8
}

type rect2iMethodBindings struct {
	constructor_0              GDExtensionPtrConstructor
	constructor_1              GDExtensionPtrConstructor
	constructor_2              GDExtensionPtrConstructor
	constructor_3              GDExtensionPtrConstructor
	constructor_4              GDExtensionPtrConstructor
	method_get_center          GDExtensionPtrBuiltInMethod
	method_get_area            GDExtensionPtrBuiltInMethod
	method_has_area            GDExtensionPtrBuiltInMethod
	method_has_point           GDExtensionPtrBuiltInMethod
	method_intersects          GDExtensionPtrBuiltInMethod
	method_encloses            GDExtensionPtrBuiltInMethod
	method_intersection        GDExtensionPtrBuiltInMethod
	method_merge               GDExtensionPtrBuiltInMethod
	method_expand              GDExtensionPtrBuiltInMethod
	method_grow                GDExtensionPtrBuiltInMethod
	method_grow_side           GDExtensionPtrBuiltInMethod
	method_grow_individual     GDExtensionPtrBuiltInMethod
	method_abs                 GDExtensionPtrBuiltInMethod
	member_position_setter     GDExtensionPtrSetter
	member_position_getter     GDExtensionPtrGetter
	member_size_setter         GDExtensionPtrSetter
	member_size_getter         GDExtensionPtrGetter
	member_end_setter          GDExtensionPtrSetter
	member_end_getter          GDExtensionPtrGetter
	operator_equal_Variant     GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant GDExtensionPtrOperatorEvaluator
	operator_equal_Rect2i      GDExtensionPtrOperatorEvaluator
	operator_not_equal_Rect2i  GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary     GDExtensionPtrOperatorEvaluator
	operator_in_Array          GDExtensionPtrOperatorEvaluator
}

var globalRect2iMethodBindings rect2iMethodBindings

func rect2iInitConstructorBindings() {
	log.Debug("rect2iInitConstructorBindings called")

	log.Debug("globalRect2iMethodBindings.constructor_0")
	globalRect2iMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, 0)
	log.Debug("globalRect2iMethodBindings.constructor_1")
	globalRect2iMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, 1)
	log.Debug("globalRect2iMethodBindings.constructor_2")
	globalRect2iMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, 2)
	log.Debug("globalRect2iMethodBindings.constructor_3")
	globalRect2iMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, 3)
	log.Debug("globalRect2iMethodBindings.constructor_4")
	globalRect2iMethodBindings.constructor_4 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, 4)
}

func rect2iInitMethodBindings() {
	log.Debug("rect2iInitMethodBindings called")

	missingMethods := make([]string, 0, 13)

	methodName0 := NewStringNameWithLatin1Chars("get_center")
	defer methodName0.Destroy()
	log.Debug("globalRect2iMethodBindings.method_get_center")
	globalRect2iMethodBindings.method_get_center = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName0.AsGDExtensionStringNamePtr(), 3444277866)
	if globalRect2iMethodBindings.method_get_center == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_get_center")
	}
	methodName1 := NewStringNameWithLatin1Chars("get_area")
	defer methodName1.Destroy()
	log.Debug("globalRect2iMethodBindings.method_get_area")
	globalRect2iMethodBindings.method_get_area = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName1.AsGDExtensionStringNamePtr(), 3173160232)
	if globalRect2iMethodBindings.method_get_area == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_get_area")
	}
	methodName2 := NewStringNameWithLatin1Chars("has_area")
	defer methodName2.Destroy()
	log.Debug("globalRect2iMethodBindings.method_has_area")
	globalRect2iMethodBindings.method_has_area = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName2.AsGDExtensionStringNamePtr(), 3918633141)
	if globalRect2iMethodBindings.method_has_area == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_has_area")
	}
	methodName3 := NewStringNameWithLatin1Chars("has_point")
	defer methodName3.Destroy()
	log.Debug("globalRect2iMethodBindings.method_has_point")
	globalRect2iMethodBindings.method_has_point = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName3.AsGDExtensionStringNamePtr(), 328189994)
	if globalRect2iMethodBindings.method_has_point == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_has_point")
	}
	methodName4 := NewStringNameWithLatin1Chars("intersects")
	defer methodName4.Destroy()
	log.Debug("globalRect2iMethodBindings.method_intersects")
	globalRect2iMethodBindings.method_intersects = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName4.AsGDExtensionStringNamePtr(), 3434691493)
	if globalRect2iMethodBindings.method_intersects == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_intersects")
	}
	methodName5 := NewStringNameWithLatin1Chars("encloses")
	defer methodName5.Destroy()
	log.Debug("globalRect2iMethodBindings.method_encloses")
	globalRect2iMethodBindings.method_encloses = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName5.AsGDExtensionStringNamePtr(), 3434691493)
	if globalRect2iMethodBindings.method_encloses == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_encloses")
	}
	methodName6 := NewStringNameWithLatin1Chars("intersection")
	defer methodName6.Destroy()
	log.Debug("globalRect2iMethodBindings.method_intersection")
	globalRect2iMethodBindings.method_intersection = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName6.AsGDExtensionStringNamePtr(), 717431873)
	if globalRect2iMethodBindings.method_intersection == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_intersection")
	}
	methodName7 := NewStringNameWithLatin1Chars("merge")
	defer methodName7.Destroy()
	log.Debug("globalRect2iMethodBindings.method_merge")
	globalRect2iMethodBindings.method_merge = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName7.AsGDExtensionStringNamePtr(), 717431873)
	if globalRect2iMethodBindings.method_merge == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_merge")
	}
	methodName8 := NewStringNameWithLatin1Chars("expand")
	defer methodName8.Destroy()
	log.Debug("globalRect2iMethodBindings.method_expand")
	globalRect2iMethodBindings.method_expand = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName8.AsGDExtensionStringNamePtr(), 1355196872)
	if globalRect2iMethodBindings.method_expand == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_expand")
	}
	methodName9 := NewStringNameWithLatin1Chars("grow")
	defer methodName9.Destroy()
	log.Debug("globalRect2iMethodBindings.method_grow")
	globalRect2iMethodBindings.method_grow = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName9.AsGDExtensionStringNamePtr(), 1578070074)
	if globalRect2iMethodBindings.method_grow == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_grow")
	}
	methodName10 := NewStringNameWithLatin1Chars("grow_side")
	defer methodName10.Destroy()
	log.Debug("globalRect2iMethodBindings.method_grow_side")
	globalRect2iMethodBindings.method_grow_side = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName10.AsGDExtensionStringNamePtr(), 3191154199)
	if globalRect2iMethodBindings.method_grow_side == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_grow_side")
	}
	methodName11 := NewStringNameWithLatin1Chars("grow_individual")
	defer methodName11.Destroy()
	log.Debug("globalRect2iMethodBindings.method_grow_individual")
	globalRect2iMethodBindings.method_grow_individual = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName11.AsGDExtensionStringNamePtr(), 1893743416)
	if globalRect2iMethodBindings.method_grow_individual == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_grow_individual")
	}
	methodName12 := NewStringNameWithLatin1Chars("abs")
	defer methodName12.Destroy()
	log.Debug("globalRect2iMethodBindings.method_abs")
	globalRect2iMethodBindings.method_abs = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, methodName12.AsGDExtensionStringNamePtr(), 1469025700)
	if globalRect2iMethodBindings.method_abs == nil {
		missingMethods = append(missingMethods, "globalRect2iMethodBindings.method_abs")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("position")
	defer memberName0.Destroy()
	log.Debug("globalRect2iMethodBindings.member_position_setter")
	globalRect2iMethodBindings.member_position_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalRect2iMethodBindings.member_position_getter")
	globalRect2iMethodBindings.member_position_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("size")
	defer memberName1.Destroy()
	log.Debug("globalRect2iMethodBindings.member_size_setter")
	globalRect2iMethodBindings.member_size_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalRect2iMethodBindings.member_size_getter")
	globalRect2iMethodBindings.member_size_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("end")
	defer memberName2.Destroy()
	log.Debug("globalRect2iMethodBindings.member_end_setter")
	globalRect2iMethodBindings.member_end_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalRect2iMethodBindings.member_end_getter")
	globalRect2iMethodBindings.member_end_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RECT2I, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalRect2iMethodBindings.operator: equal Variant")
	globalRect2iMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_RECT2I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalRect2iMethodBindings.operator: not_equal Variant")
	globalRect2iMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_RECT2I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalRect2iMethodBindings.operator: equal Rect2i")
	globalRect2iMethodBindings.operator_equal_Rect2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_RECT2I, GDEXTENSION_VARIANT_TYPE_RECT2I)
	log.Debug("globalRect2iMethodBindings.operator: not_equal Rect2i")
	globalRect2iMethodBindings.operator_not_equal_Rect2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_RECT2I, GDEXTENSION_VARIANT_TYPE_RECT2I)
	log.Debug("globalRect2iMethodBindings.operator: in Dictionary")
	globalRect2iMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_RECT2I, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalRect2iMethodBindings.operator: in Array")
	globalRect2iMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_RECT2I, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("rect2iInitBindings end")
}

func (c *Rect2i) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewRect2i, index: 0
func NewRect2i() Rect2i {
	cx := Rect2i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalRect2iMethodBindings.constructor_0, ptr)

	return cx
}

// NewRect2i, index: 1
func NewRect2iWithRect2i(from Rect2i) Rect2i {
	cx := Rect2i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Rect2i
	// Rect2iEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalRect2iMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewRect2i, index: 2
func NewRect2iWithRect2(from Rect2) Rect2i {
	cx := Rect2i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Rect2
	// Rect2Encoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalRect2iMethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewRect2i, index: 3
func NewRect2iWithVector2iVector2i(position Vector2i, size Vector2i) Rect2i {
	cx := Rect2i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Vector2i
	// Vector2iEncoder
	args[0] = (GDExtensionConstTypePtr)(position.ptr())

	// Vector2i
	// Vector2iEncoder
	args[1] = (GDExtensionConstTypePtr)(size.ptr())
	callBuiltinConstructor(globalRect2iMethodBindings.constructor_3, ptr, args[0], args[1])

	return cx
}

// NewRect2i, index: 4
func NewRect2iWithInt32Int32Int32Int32(x int32, y int32, width int32, height int32) Rect2i {
	cx := Rect2i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [4]GDExtensionConstTypePtr

	// int
	eArg0 := Int32Encoder.EncodeArg(x)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// int
	eArg1 := Int32Encoder.EncodeArg(y)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))

	// int
	eArg2 := Int32Encoder.EncodeArg(width)
	args[2] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg2))

	// int
	eArg3 := Int32Encoder.EncodeArg(height)
	args[3] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg3))
	callBuiltinConstructor(globalRect2iMethodBindings.constructor_4, ptr, args[0], args[1], args[2], args[3])

	return cx
}

// methods

/* GetCenter : get_center
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Rect2i) GetCenter() Vector2i {
	mb := globalRect2iMethodBindings.method_get_center

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2i](mb, bx, nil)
	return ret

}

/* GetArea : get_area
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Rect2i) GetArea() int32 {
	mb := globalRect2iMethodBindings.method_get_area

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* HasArea : has_area
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) HasArea() bool {
	mb := globalRect2iMethodBindings.method_has_area

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) HasPoint(point Vector2i) bool {
	mb := globalRect2iMethodBindings.method_has_point

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2iEncoder.EncodeArg(point)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Intersects : intersects
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) Intersects(b Rect2i) bool {
	mb := globalRect2iMethodBindings.method_intersects

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Rect2iEncoder.EncodeArg(b)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Encloses : encloses
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) Encloses(b Rect2i) bool {
	mb := globalRect2iMethodBindings.method_encloses

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Rect2iEncoder.EncodeArg(b)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Intersection : intersection
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Intersection(b Rect2i) Rect2i {
	mb := globalRect2iMethodBindings.method_intersection

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Rect2iEncoder.EncodeArg(b)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Merge(b Rect2i) Rect2i {
	mb := globalRect2iMethodBindings.method_merge

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Rect2iEncoder.EncodeArg(b)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Expand : expand
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Expand(to Vector2i) Rect2i {
	mb := globalRect2iMethodBindings.method_expand

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2iEncoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Grow : grow
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Grow(amount int32) Rect2i {
	mb := globalRect2iMethodBindings.method_grow

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(amount)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GrowSide : grow_side
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) GrowSide(side int32, amount int32) Rect2i {
	mb := globalRect2iMethodBindings.method_grow_side

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(side)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(amount)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GrowIndividual : grow_individual
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) GrowIndividual(left int32, top int32, right int32, bottom int32) Rect2i {
	mb := globalRect2iMethodBindings.method_grow_individual

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(left)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(top)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Int32Encoder.EncodeArg(right)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Int32Encoder.EncodeArg(bottom)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Abs() Rect2i {
	mb := globalRect2iMethodBindings.method_abs

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, nil)
	return ret

}

// members

func (cx *Rect2i) MemberGetposition() Vector2i {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector2i](globalRect2iMethodBindings.member_position_getter, bx)
	return ret

}

func (cx *Rect2i) MemberGetsize() Vector2i {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector2i](globalRect2iMethodBindings.member_size_getter, bx)
	return ret

}

func (cx *Rect2i) MemberGetend() Vector2i {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector2i](globalRect2iMethodBindings.member_end_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Rect2i) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Rect2i) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Equal_Rect2i operator
func (cx *Rect2i) Equal_Rect2i(right Rect2i) bool {
	lt := cx.ptr()

	eRight := Rect2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_equal_Rect2i, lt, rt)
}

// Not_equal_Rect2i operator
func (cx *Rect2i) Not_equal_Rect2i(right Rect2i) bool {
	lt := cx.ptr()

	eRight := Rect2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_not_equal_Rect2i, lt, rt)
}

// In_Dictionary operator
func (cx *Rect2i) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Rect2i) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_in_Array, lt, rt)
}

/*
 * Vector3
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: false
 */
type Vector3 struct {
	opaque [12]uint8
}

type vector3MethodBindings struct {
	constructor_0                    GDExtensionPtrConstructor
	constructor_1                    GDExtensionPtrConstructor
	constructor_2                    GDExtensionPtrConstructor
	constructor_3                    GDExtensionPtrConstructor
	method_min_axis_index            GDExtensionPtrBuiltInMethod
	method_max_axis_index            GDExtensionPtrBuiltInMethod
	method_angle_to                  GDExtensionPtrBuiltInMethod
	method_signed_angle_to           GDExtensionPtrBuiltInMethod
	method_direction_to              GDExtensionPtrBuiltInMethod
	method_distance_to               GDExtensionPtrBuiltInMethod
	method_distance_squared_to       GDExtensionPtrBuiltInMethod
	method_length                    GDExtensionPtrBuiltInMethod
	method_length_squared            GDExtensionPtrBuiltInMethod
	method_limit_length              GDExtensionPtrBuiltInMethod
	method_normalized                GDExtensionPtrBuiltInMethod
	method_is_normalized             GDExtensionPtrBuiltInMethod
	method_is_equal_approx           GDExtensionPtrBuiltInMethod
	method_is_zero_approx            GDExtensionPtrBuiltInMethod
	method_is_finite                 GDExtensionPtrBuiltInMethod
	method_inverse                   GDExtensionPtrBuiltInMethod
	method_clamp                     GDExtensionPtrBuiltInMethod
	method_snapped                   GDExtensionPtrBuiltInMethod
	method_rotated                   GDExtensionPtrBuiltInMethod
	method_lerp                      GDExtensionPtrBuiltInMethod
	method_slerp                     GDExtensionPtrBuiltInMethod
	method_cubic_interpolate         GDExtensionPtrBuiltInMethod
	method_cubic_interpolate_in_time GDExtensionPtrBuiltInMethod
	method_bezier_interpolate        GDExtensionPtrBuiltInMethod
	method_bezier_derivative         GDExtensionPtrBuiltInMethod
	method_move_toward               GDExtensionPtrBuiltInMethod
	method_dot                       GDExtensionPtrBuiltInMethod
	method_cross                     GDExtensionPtrBuiltInMethod
	method_outer                     GDExtensionPtrBuiltInMethod
	method_abs                       GDExtensionPtrBuiltInMethod
	method_floor                     GDExtensionPtrBuiltInMethod
	method_ceil                      GDExtensionPtrBuiltInMethod
	method_round                     GDExtensionPtrBuiltInMethod
	method_posmod                    GDExtensionPtrBuiltInMethod
	method_posmodv                   GDExtensionPtrBuiltInMethod
	method_project                   GDExtensionPtrBuiltInMethod
	method_slide                     GDExtensionPtrBuiltInMethod
	method_bounce                    GDExtensionPtrBuiltInMethod
	method_reflect                   GDExtensionPtrBuiltInMethod
	method_sign                      GDExtensionPtrBuiltInMethod
	method_octahedron_encode         GDExtensionPtrBuiltInMethod
	method_octahedron_decode         GDExtensionPtrBuiltInMethod
	member_x_setter                  GDExtensionPtrSetter
	member_x_getter                  GDExtensionPtrGetter
	member_y_setter                  GDExtensionPtrSetter
	member_y_getter                  GDExtensionPtrGetter
	member_z_setter                  GDExtensionPtrSetter
	member_z_getter                  GDExtensionPtrGetter
	indexed_setter                   GDExtensionPtrIndexedSetter
	indexed_getter                   GDExtensionPtrIndexedGetter
	operator_equal_Variant           GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant       GDExtensionPtrOperatorEvaluator
	operator_negate                  GDExtensionPtrOperatorEvaluator
	operator_positive                GDExtensionPtrOperatorEvaluator
	operator_multiply_int            GDExtensionPtrOperatorEvaluator
	operator_divide_int              GDExtensionPtrOperatorEvaluator
	operator_multiply_float          GDExtensionPtrOperatorEvaluator
	operator_divide_float            GDExtensionPtrOperatorEvaluator
	operator_equal_Vector3           GDExtensionPtrOperatorEvaluator
	operator_not_equal_Vector3       GDExtensionPtrOperatorEvaluator
	operator_less_Vector3            GDExtensionPtrOperatorEvaluator
	operator_less_equal_Vector3      GDExtensionPtrOperatorEvaluator
	operator_greater_Vector3         GDExtensionPtrOperatorEvaluator
	operator_greater_equal_Vector3   GDExtensionPtrOperatorEvaluator
	operator_add_Vector3             GDExtensionPtrOperatorEvaluator
	operator_subtract_Vector3        GDExtensionPtrOperatorEvaluator
	operator_multiply_Vector3        GDExtensionPtrOperatorEvaluator
	operator_divide_Vector3          GDExtensionPtrOperatorEvaluator
	operator_multiply_Quaternion     GDExtensionPtrOperatorEvaluator
	operator_multiply_Basis          GDExtensionPtrOperatorEvaluator
	operator_multiply_Transform3D    GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary           GDExtensionPtrOperatorEvaluator
	operator_in_Array                GDExtensionPtrOperatorEvaluator
	operator_in_PackedVector3Array   GDExtensionPtrOperatorEvaluator
}

var globalVector3MethodBindings vector3MethodBindings

func vector3InitConstructorBindings() {
	log.Debug("vector3InitConstructorBindings called")

	log.Debug("globalVector3MethodBindings.constructor_0")
	globalVector3MethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, 0)
	log.Debug("globalVector3MethodBindings.constructor_1")
	globalVector3MethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, 1)
	log.Debug("globalVector3MethodBindings.constructor_2")
	globalVector3MethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, 2)
	log.Debug("globalVector3MethodBindings.constructor_3")
	globalVector3MethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, 3)
}

func vector3InitMethodBindings() {
	log.Debug("vector3InitMethodBindings called")

	missingMethods := make([]string, 0, 42)

	methodName0 := NewStringNameWithLatin1Chars("min_axis_index")
	defer methodName0.Destroy()
	log.Debug("globalVector3MethodBindings.method_min_axis_index")
	globalVector3MethodBindings.method_min_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector3MethodBindings.method_min_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_min_axis_index")
	}
	methodName1 := NewStringNameWithLatin1Chars("max_axis_index")
	defer methodName1.Destroy()
	log.Debug("globalVector3MethodBindings.method_max_axis_index")
	globalVector3MethodBindings.method_max_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName1.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector3MethodBindings.method_max_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_max_axis_index")
	}
	methodName2 := NewStringNameWithLatin1Chars("angle_to")
	defer methodName2.Destroy()
	log.Debug("globalVector3MethodBindings.method_angle_to")
	globalVector3MethodBindings.method_angle_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName2.AsGDExtensionStringNamePtr(), 1047977935)
	if globalVector3MethodBindings.method_angle_to == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_angle_to")
	}
	methodName3 := NewStringNameWithLatin1Chars("signed_angle_to")
	defer methodName3.Destroy()
	log.Debug("globalVector3MethodBindings.method_signed_angle_to")
	globalVector3MethodBindings.method_signed_angle_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName3.AsGDExtensionStringNamePtr(), 2781412522)
	if globalVector3MethodBindings.method_signed_angle_to == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_signed_angle_to")
	}
	methodName4 := NewStringNameWithLatin1Chars("direction_to")
	defer methodName4.Destroy()
	log.Debug("globalVector3MethodBindings.method_direction_to")
	globalVector3MethodBindings.method_direction_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName4.AsGDExtensionStringNamePtr(), 2923479887)
	if globalVector3MethodBindings.method_direction_to == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_direction_to")
	}
	methodName5 := NewStringNameWithLatin1Chars("distance_to")
	defer methodName5.Destroy()
	log.Debug("globalVector3MethodBindings.method_distance_to")
	globalVector3MethodBindings.method_distance_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName5.AsGDExtensionStringNamePtr(), 1047977935)
	if globalVector3MethodBindings.method_distance_to == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_distance_to")
	}
	methodName6 := NewStringNameWithLatin1Chars("distance_squared_to")
	defer methodName6.Destroy()
	log.Debug("globalVector3MethodBindings.method_distance_squared_to")
	globalVector3MethodBindings.method_distance_squared_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName6.AsGDExtensionStringNamePtr(), 1047977935)
	if globalVector3MethodBindings.method_distance_squared_to == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_distance_squared_to")
	}
	methodName7 := NewStringNameWithLatin1Chars("length")
	defer methodName7.Destroy()
	log.Debug("globalVector3MethodBindings.method_length")
	globalVector3MethodBindings.method_length = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName7.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector3MethodBindings.method_length == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_length")
	}
	methodName8 := NewStringNameWithLatin1Chars("length_squared")
	defer methodName8.Destroy()
	log.Debug("globalVector3MethodBindings.method_length_squared")
	globalVector3MethodBindings.method_length_squared = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName8.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector3MethodBindings.method_length_squared == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_length_squared")
	}
	methodName9 := NewStringNameWithLatin1Chars("limit_length")
	defer methodName9.Destroy()
	log.Debug("globalVector3MethodBindings.method_limit_length")
	globalVector3MethodBindings.method_limit_length = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName9.AsGDExtensionStringNamePtr(), 514930144)
	if globalVector3MethodBindings.method_limit_length == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_limit_length")
	}
	methodName10 := NewStringNameWithLatin1Chars("normalized")
	defer methodName10.Destroy()
	log.Debug("globalVector3MethodBindings.method_normalized")
	globalVector3MethodBindings.method_normalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName10.AsGDExtensionStringNamePtr(), 1776574132)
	if globalVector3MethodBindings.method_normalized == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_normalized")
	}
	methodName11 := NewStringNameWithLatin1Chars("is_normalized")
	defer methodName11.Destroy()
	log.Debug("globalVector3MethodBindings.method_is_normalized")
	globalVector3MethodBindings.method_is_normalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName11.AsGDExtensionStringNamePtr(), 3918633141)
	if globalVector3MethodBindings.method_is_normalized == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_is_normalized")
	}
	methodName12 := NewStringNameWithLatin1Chars("is_equal_approx")
	defer methodName12.Destroy()
	log.Debug("globalVector3MethodBindings.method_is_equal_approx")
	globalVector3MethodBindings.method_is_equal_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName12.AsGDExtensionStringNamePtr(), 1749054343)
	if globalVector3MethodBindings.method_is_equal_approx == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_is_equal_approx")
	}
	methodName13 := NewStringNameWithLatin1Chars("is_zero_approx")
	defer methodName13.Destroy()
	log.Debug("globalVector3MethodBindings.method_is_zero_approx")
	globalVector3MethodBindings.method_is_zero_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName13.AsGDExtensionStringNamePtr(), 3918633141)
	if globalVector3MethodBindings.method_is_zero_approx == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_is_zero_approx")
	}
	methodName14 := NewStringNameWithLatin1Chars("is_finite")
	defer methodName14.Destroy()
	log.Debug("globalVector3MethodBindings.method_is_finite")
	globalVector3MethodBindings.method_is_finite = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName14.AsGDExtensionStringNamePtr(), 3918633141)
	if globalVector3MethodBindings.method_is_finite == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_is_finite")
	}
	methodName15 := NewStringNameWithLatin1Chars("inverse")
	defer methodName15.Destroy()
	log.Debug("globalVector3MethodBindings.method_inverse")
	globalVector3MethodBindings.method_inverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName15.AsGDExtensionStringNamePtr(), 1776574132)
	if globalVector3MethodBindings.method_inverse == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_inverse")
	}
	methodName16 := NewStringNameWithLatin1Chars("clamp")
	defer methodName16.Destroy()
	log.Debug("globalVector3MethodBindings.method_clamp")
	globalVector3MethodBindings.method_clamp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName16.AsGDExtensionStringNamePtr(), 4145107892)
	if globalVector3MethodBindings.method_clamp == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_clamp")
	}
	methodName17 := NewStringNameWithLatin1Chars("snapped")
	defer methodName17.Destroy()
	log.Debug("globalVector3MethodBindings.method_snapped")
	globalVector3MethodBindings.method_snapped = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName17.AsGDExtensionStringNamePtr(), 2923479887)
	if globalVector3MethodBindings.method_snapped == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_snapped")
	}
	methodName18 := NewStringNameWithLatin1Chars("rotated")
	defer methodName18.Destroy()
	log.Debug("globalVector3MethodBindings.method_rotated")
	globalVector3MethodBindings.method_rotated = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName18.AsGDExtensionStringNamePtr(), 1682608829)
	if globalVector3MethodBindings.method_rotated == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_rotated")
	}
	methodName19 := NewStringNameWithLatin1Chars("lerp")
	defer methodName19.Destroy()
	log.Debug("globalVector3MethodBindings.method_lerp")
	globalVector3MethodBindings.method_lerp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName19.AsGDExtensionStringNamePtr(), 1682608829)
	if globalVector3MethodBindings.method_lerp == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_lerp")
	}
	methodName20 := NewStringNameWithLatin1Chars("slerp")
	defer methodName20.Destroy()
	log.Debug("globalVector3MethodBindings.method_slerp")
	globalVector3MethodBindings.method_slerp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName20.AsGDExtensionStringNamePtr(), 1682608829)
	if globalVector3MethodBindings.method_slerp == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_slerp")
	}
	methodName21 := NewStringNameWithLatin1Chars("cubic_interpolate")
	defer methodName21.Destroy()
	log.Debug("globalVector3MethodBindings.method_cubic_interpolate")
	globalVector3MethodBindings.method_cubic_interpolate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName21.AsGDExtensionStringNamePtr(), 2597922253)
	if globalVector3MethodBindings.method_cubic_interpolate == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_cubic_interpolate")
	}
	methodName22 := NewStringNameWithLatin1Chars("cubic_interpolate_in_time")
	defer methodName22.Destroy()
	log.Debug("globalVector3MethodBindings.method_cubic_interpolate_in_time")
	globalVector3MethodBindings.method_cubic_interpolate_in_time = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName22.AsGDExtensionStringNamePtr(), 3256682901)
	if globalVector3MethodBindings.method_cubic_interpolate_in_time == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_cubic_interpolate_in_time")
	}
	methodName23 := NewStringNameWithLatin1Chars("bezier_interpolate")
	defer methodName23.Destroy()
	log.Debug("globalVector3MethodBindings.method_bezier_interpolate")
	globalVector3MethodBindings.method_bezier_interpolate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName23.AsGDExtensionStringNamePtr(), 2597922253)
	if globalVector3MethodBindings.method_bezier_interpolate == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_bezier_interpolate")
	}
	methodName24 := NewStringNameWithLatin1Chars("bezier_derivative")
	defer methodName24.Destroy()
	log.Debug("globalVector3MethodBindings.method_bezier_derivative")
	globalVector3MethodBindings.method_bezier_derivative = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName24.AsGDExtensionStringNamePtr(), 2597922253)
	if globalVector3MethodBindings.method_bezier_derivative == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_bezier_derivative")
	}
	methodName25 := NewStringNameWithLatin1Chars("move_toward")
	defer methodName25.Destroy()
	log.Debug("globalVector3MethodBindings.method_move_toward")
	globalVector3MethodBindings.method_move_toward = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName25.AsGDExtensionStringNamePtr(), 1682608829)
	if globalVector3MethodBindings.method_move_toward == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_move_toward")
	}
	methodName26 := NewStringNameWithLatin1Chars("dot")
	defer methodName26.Destroy()
	log.Debug("globalVector3MethodBindings.method_dot")
	globalVector3MethodBindings.method_dot = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName26.AsGDExtensionStringNamePtr(), 1047977935)
	if globalVector3MethodBindings.method_dot == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_dot")
	}
	methodName27 := NewStringNameWithLatin1Chars("cross")
	defer methodName27.Destroy()
	log.Debug("globalVector3MethodBindings.method_cross")
	globalVector3MethodBindings.method_cross = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName27.AsGDExtensionStringNamePtr(), 2923479887)
	if globalVector3MethodBindings.method_cross == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_cross")
	}
	methodName28 := NewStringNameWithLatin1Chars("outer")
	defer methodName28.Destroy()
	log.Debug("globalVector3MethodBindings.method_outer")
	globalVector3MethodBindings.method_outer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName28.AsGDExtensionStringNamePtr(), 3934786792)
	if globalVector3MethodBindings.method_outer == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_outer")
	}
	methodName29 := NewStringNameWithLatin1Chars("abs")
	defer methodName29.Destroy()
	log.Debug("globalVector3MethodBindings.method_abs")
	globalVector3MethodBindings.method_abs = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName29.AsGDExtensionStringNamePtr(), 1776574132)
	if globalVector3MethodBindings.method_abs == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_abs")
	}
	methodName30 := NewStringNameWithLatin1Chars("floor")
	defer methodName30.Destroy()
	log.Debug("globalVector3MethodBindings.method_floor")
	globalVector3MethodBindings.method_floor = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName30.AsGDExtensionStringNamePtr(), 1776574132)
	if globalVector3MethodBindings.method_floor == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_floor")
	}
	methodName31 := NewStringNameWithLatin1Chars("ceil")
	defer methodName31.Destroy()
	log.Debug("globalVector3MethodBindings.method_ceil")
	globalVector3MethodBindings.method_ceil = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName31.AsGDExtensionStringNamePtr(), 1776574132)
	if globalVector3MethodBindings.method_ceil == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_ceil")
	}
	methodName32 := NewStringNameWithLatin1Chars("round")
	defer methodName32.Destroy()
	log.Debug("globalVector3MethodBindings.method_round")
	globalVector3MethodBindings.method_round = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName32.AsGDExtensionStringNamePtr(), 1776574132)
	if globalVector3MethodBindings.method_round == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_round")
	}
	methodName33 := NewStringNameWithLatin1Chars("posmod")
	defer methodName33.Destroy()
	log.Debug("globalVector3MethodBindings.method_posmod")
	globalVector3MethodBindings.method_posmod = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName33.AsGDExtensionStringNamePtr(), 514930144)
	if globalVector3MethodBindings.method_posmod == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_posmod")
	}
	methodName34 := NewStringNameWithLatin1Chars("posmodv")
	defer methodName34.Destroy()
	log.Debug("globalVector3MethodBindings.method_posmodv")
	globalVector3MethodBindings.method_posmodv = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName34.AsGDExtensionStringNamePtr(), 2923479887)
	if globalVector3MethodBindings.method_posmodv == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_posmodv")
	}
	methodName35 := NewStringNameWithLatin1Chars("project")
	defer methodName35.Destroy()
	log.Debug("globalVector3MethodBindings.method_project")
	globalVector3MethodBindings.method_project = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName35.AsGDExtensionStringNamePtr(), 2923479887)
	if globalVector3MethodBindings.method_project == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_project")
	}
	methodName36 := NewStringNameWithLatin1Chars("slide")
	defer methodName36.Destroy()
	log.Debug("globalVector3MethodBindings.method_slide")
	globalVector3MethodBindings.method_slide = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName36.AsGDExtensionStringNamePtr(), 2923479887)
	if globalVector3MethodBindings.method_slide == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_slide")
	}
	methodName37 := NewStringNameWithLatin1Chars("bounce")
	defer methodName37.Destroy()
	log.Debug("globalVector3MethodBindings.method_bounce")
	globalVector3MethodBindings.method_bounce = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName37.AsGDExtensionStringNamePtr(), 2923479887)
	if globalVector3MethodBindings.method_bounce == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_bounce")
	}
	methodName38 := NewStringNameWithLatin1Chars("reflect")
	defer methodName38.Destroy()
	log.Debug("globalVector3MethodBindings.method_reflect")
	globalVector3MethodBindings.method_reflect = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName38.AsGDExtensionStringNamePtr(), 2923479887)
	if globalVector3MethodBindings.method_reflect == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_reflect")
	}
	methodName39 := NewStringNameWithLatin1Chars("sign")
	defer methodName39.Destroy()
	log.Debug("globalVector3MethodBindings.method_sign")
	globalVector3MethodBindings.method_sign = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName39.AsGDExtensionStringNamePtr(), 1776574132)
	if globalVector3MethodBindings.method_sign == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_sign")
	}
	methodName40 := NewStringNameWithLatin1Chars("octahedron_encode")
	defer methodName40.Destroy()
	log.Debug("globalVector3MethodBindings.method_octahedron_encode")
	globalVector3MethodBindings.method_octahedron_encode = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName40.AsGDExtensionStringNamePtr(), 2428350749)
	if globalVector3MethodBindings.method_octahedron_encode == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_octahedron_encode")
	}
	methodName41 := NewStringNameWithLatin1Chars("octahedron_decode")
	defer methodName41.Destroy()
	log.Debug("globalVector3MethodBindings.method_octahedron_decode")
	globalVector3MethodBindings.method_octahedron_decode = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, methodName41.AsGDExtensionStringNamePtr(), 3991820552)
	if globalVector3MethodBindings.method_octahedron_decode == nil {
		missingMethods = append(missingMethods, "globalVector3MethodBindings.method_octahedron_decode")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("x")
	defer memberName0.Destroy()
	log.Debug("globalVector3MethodBindings.member_x_setter")
	globalVector3MethodBindings.member_x_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalVector3MethodBindings.member_x_getter")
	globalVector3MethodBindings.member_x_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("y")
	defer memberName1.Destroy()
	log.Debug("globalVector3MethodBindings.member_y_setter")
	globalVector3MethodBindings.member_y_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalVector3MethodBindings.member_y_getter")
	globalVector3MethodBindings.member_y_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("z")
	defer memberName2.Destroy()
	log.Debug("globalVector3MethodBindings.member_z_setter")
	globalVector3MethodBindings.member_z_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalVector3MethodBindings.member_z_getter")
	globalVector3MethodBindings.member_z_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalVector3MethodBindings.indexed_setter")
	globalVector3MethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.indexed_getter")
	globalVector3MethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.operator: equal Variant")
	globalVector3MethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector3MethodBindings.operator: not_equal Variant")
	globalVector3MethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector3MethodBindings.operator: negate ")
	globalVector3MethodBindings.operator_negate = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NEGATE, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector3MethodBindings.operator: positive ")
	globalVector3MethodBindings.operator_positive = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_POSITIVE, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector3MethodBindings.operator: multiply int")
	globalVector3MethodBindings.operator_multiply_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector3MethodBindings.operator: divide int")
	globalVector3MethodBindings.operator_divide_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector3MethodBindings.operator: multiply float")
	globalVector3MethodBindings.operator_multiply_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector3MethodBindings.operator: divide float")
	globalVector3MethodBindings.operator_divide_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector3MethodBindings.operator: equal Vector3")
	globalVector3MethodBindings.operator_equal_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.operator: not_equal Vector3")
	globalVector3MethodBindings.operator_not_equal_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.operator: less Vector3")
	globalVector3MethodBindings.operator_less_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.operator: less_equal Vector3")
	globalVector3MethodBindings.operator_less_equal_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.operator: greater Vector3")
	globalVector3MethodBindings.operator_greater_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.operator: greater_equal Vector3")
	globalVector3MethodBindings.operator_greater_equal_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.operator: add Vector3")
	globalVector3MethodBindings.operator_add_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.operator: subtract Vector3")
	globalVector3MethodBindings.operator_subtract_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_SUBTRACT, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.operator: multiply Vector3")
	globalVector3MethodBindings.operator_multiply_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.operator: divide Vector3")
	globalVector3MethodBindings.operator_divide_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalVector3MethodBindings.operator: multiply Quaternion")
	globalVector3MethodBindings.operator_multiply_Quaternion = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_QUATERNION)
	log.Debug("globalVector3MethodBindings.operator: multiply Basis")
	globalVector3MethodBindings.operator_multiply_Basis = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_BASIS)
	log.Debug("globalVector3MethodBindings.operator: multiply Transform3D")
	globalVector3MethodBindings.operator_multiply_Transform3D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D)
	log.Debug("globalVector3MethodBindings.operator: in Dictionary")
	globalVector3MethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalVector3MethodBindings.operator: in Array")
	globalVector3MethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalVector3MethodBindings.operator: in PackedVector3Array")
	globalVector3MethodBindings.operator_in_PackedVector3Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR3, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
	log.Debug("vector3InitBindings end")
}

func (c *Vector3) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector3, index: 0
func NewVector3() Vector3 {
	cx := Vector3{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalVector3MethodBindings.constructor_0, ptr)

	return cx
}

// NewVector3, index: 1
func NewVector3WithVector3(from Vector3) Vector3 {
	cx := Vector3{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector3MethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewVector3, index: 2
func NewVector3WithVector3i(from Vector3i) Vector3 {
	cx := Vector3{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector3i
	// Vector3iEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector3MethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewVector3, index: 3
func NewVector3WithFloat32Float32Float32(x float32, y float32, z float32) Vector3 {
	cx := Vector3{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [3]GDExtensionConstTypePtr

	// float
	eArg0 := Float32Encoder.EncodeArg(x)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// float
	eArg1 := Float32Encoder.EncodeArg(y)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))

	// float
	eArg2 := Float32Encoder.EncodeArg(z)
	args[2] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg2))
	callBuiltinConstructor(globalVector3MethodBindings.constructor_3, ptr, args[0], args[1], args[2])

	return cx
}

// methods

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector3) MinAxisIndex() int32 {
	mb := globalVector3MethodBindings.method_min_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector3) MaxAxisIndex() int32 {
	mb := globalVector3MethodBindings.method_max_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* AngleTo : angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) AngleTo(to Vector3) float32 {
	mb := globalVector3MethodBindings.method_angle_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* SignedAngleTo : signed_angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) SignedAngleTo(to Vector3, axis Vector3) float32 {
	mb := globalVector3MethodBindings.method_signed_angle_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&axis))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DirectionTo : direction_to
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) DirectionTo(to Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_direction_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) DistanceTo(to Vector3) float32 {
	mb := globalVector3MethodBindings.method_distance_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) DistanceSquaredTo(to Vector3) float32 {
	mb := globalVector3MethodBindings.method_distance_squared_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) Length() float32 {
	mb := globalVector3MethodBindings.method_length

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) LengthSquared() float32 {
	mb := globalVector3MethodBindings.method_length_squared

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* LimitLength : limit_length
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) LimitLength(length float32) Vector3 {
	mb := globalVector3MethodBindings.method_limit_length

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(length)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Normalized() Vector3 {
	mb := globalVector3MethodBindings.method_normalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector3) IsNormalized() bool {
	mb := globalVector3MethodBindings.method_is_normalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector3) IsEqualApprox(to Vector3) bool {
	mb := globalVector3MethodBindings.method_is_equal_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsZeroApprox : is_zero_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector3) IsZeroApprox() bool {
	mb := globalVector3MethodBindings.method_is_zero_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector3) IsFinite() bool {
	mb := globalVector3MethodBindings.method_is_finite

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Inverse() Vector3 {
	mb := globalVector3MethodBindings.method_inverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Clamp(min Vector3, max Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_clamp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&min))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&max))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Snapped(step Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_snapped

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&step))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Rotated(axis Vector3, angle float32) Vector3 {
	mb := globalVector3MethodBindings.method_rotated

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&axis))

	eArg1 := Float32Encoder.EncodeArg(angle)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Lerp(to Vector3, weight float32) Vector3 {
	mb := globalVector3MethodBindings.method_lerp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	eArg1 := Float32Encoder.EncodeArg(weight)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Slerp(to Vector3, weight float32) Vector3 {
	mb := globalVector3MethodBindings.method_slerp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	eArg1 := Float32Encoder.EncodeArg(weight)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CubicInterpolate : cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) CubicInterpolate(b Vector3, pre_a Vector3, post_b Vector3, weight float32) Vector3 {
	mb := globalVector3MethodBindings.method_cubic_interpolate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&b))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&pre_a))

	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&post_b))

	eArg3 := Float32Encoder.EncodeArg(weight)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CubicInterpolateInTime : cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) CubicInterpolateInTime(b Vector3, pre_a Vector3, post_b Vector3, weight float32, b_t float32, pre_a_t float32, post_b_t float32) Vector3 {
	mb := globalVector3MethodBindings.method_cubic_interpolate_in_time

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 7
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&b))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&pre_a))

	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&post_b))

	eArg3 := Float32Encoder.EncodeArg(weight)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	eArg4 := Float32Encoder.EncodeArg(b_t)
	args[4] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg4))

	eArg5 := Float32Encoder.EncodeArg(pre_a_t)
	args[5] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg5))

	eArg6 := Float32Encoder.EncodeArg(post_b_t)
	args[6] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg6))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* BezierInterpolate : bezier_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) BezierInterpolate(control_1 Vector3, control_2 Vector3, end Vector3, t float32) Vector3 {
	mb := globalVector3MethodBindings.method_bezier_interpolate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&control_1))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&control_2))

	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&end))

	eArg3 := Float32Encoder.EncodeArg(t)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* BezierDerivative : bezier_derivative
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) BezierDerivative(control_1 Vector3, control_2 Vector3, end Vector3, t float32) Vector3 {
	mb := globalVector3MethodBindings.method_bezier_derivative

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&control_1))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&control_2))

	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&end))

	eArg3 := Float32Encoder.EncodeArg(t)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* MoveToward : move_toward
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) MoveToward(to Vector3, delta float32) Vector3 {
	mb := globalVector3MethodBindings.method_move_toward

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	eArg1 := Float32Encoder.EncodeArg(delta)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) Dot(with Vector3) float32 {
	mb := globalVector3MethodBindings.method_dot

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Cross : cross
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Cross(with Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_cross

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Outer : outer
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Vector3) Outer(with Vector3) Basis {
	mb := globalVector3MethodBindings.method_outer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Abs() Vector3 {
	mb := globalVector3MethodBindings.method_abs

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* Floor : floor
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Floor() Vector3 {
	mb := globalVector3MethodBindings.method_floor

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* Ceil : ceil
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Ceil() Vector3 {
	mb := globalVector3MethodBindings.method_ceil

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* Round : round
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Round() Vector3 {
	mb := globalVector3MethodBindings.method_round

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* Posmod : posmod
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Posmod(mod float32) Vector3 {
	mb := globalVector3MethodBindings.method_posmod

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(mod)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Posmodv : posmodv
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Posmodv(modv Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_posmodv

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&modv))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Project : project
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Project(b Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_project

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&b))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Slide : slide
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Slide(n Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_slide

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&n))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Bounce : bounce
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Bounce(n Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_bounce

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&n))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reflect : reflect
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Reflect(n Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_reflect

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&n))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Sign() Vector3 {
	mb := globalVector3MethodBindings.method_sign

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* OctahedronEncode : octahedron_encode
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector3) OctahedronEncode() Vector2 {
	mb := globalVector3MethodBindings.method_octahedron_encode

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* OctahedronDecode : octahedron_decode
 * is_vararg = false, is_static = true
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) OctahedronDecode(uv Vector2) Vector3 {
	mb := globalVector3MethodBindings.method_octahedron_decode

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(uv)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

func (cx *Vector3) MemberGetx() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalVector3MethodBindings.member_x_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Vector3) MemberGety() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalVector3MethodBindings.member_y_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Vector3) MemberGetz() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalVector3MethodBindings.member_z_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

// Equal_Variant operator
func (cx *Vector3) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector3) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector3) Negate() Vector3 {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector3) Positive() Vector3 {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_positive, lt, rt)
}

// Multiply_int operator
func (cx *Vector3) Multiply_int(right int32) Vector3 {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector3) Divide_int(right int32) Vector3 {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector3) Multiply_float(right float32) Vector3 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector3) Divide_float(right float32) Vector3 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector3 operator
func (cx *Vector3) Equal_Vector3(right Vector3) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_equal_Vector3, lt, rt)
}

// Not_equal_Vector3 operator
func (cx *Vector3) Not_equal_Vector3(right Vector3) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_not_equal_Vector3, lt, rt)
}

// Less_Vector3 operator
func (cx *Vector3) Less_Vector3(right Vector3) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_less_Vector3, lt, rt)
}

// Less_equal_Vector3 operator
func (cx *Vector3) Less_equal_Vector3(right Vector3) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_less_equal_Vector3, lt, rt)
}

// Greater_Vector3 operator
func (cx *Vector3) Greater_Vector3(right Vector3) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_greater_Vector3, lt, rt)
}

// Greater_equal_Vector3 operator
func (cx *Vector3) Greater_equal_Vector3(right Vector3) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_greater_equal_Vector3, lt, rt)
}

// Add_Vector3 operator
func (cx *Vector3) Add_Vector3(right Vector3) Vector3 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_add_Vector3, lt, rt)
}

// Subtract_Vector3 operator
func (cx *Vector3) Subtract_Vector3(right Vector3) Vector3 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_subtract_Vector3, lt, rt)
}

// Multiply_Vector3 operator
func (cx *Vector3) Multiply_Vector3(right Vector3) Vector3 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Vector3, lt, rt)
}

// Divide_Vector3 operator
func (cx *Vector3) Divide_Vector3(right Vector3) Vector3 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_divide_Vector3, lt, rt)
}

// Multiply_Quaternion operator
func (cx *Vector3) Multiply_Quaternion(right Quaternion) Vector3 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Quaternion, lt, rt)
}

// Multiply_Basis operator
func (cx *Vector3) Multiply_Basis(right Basis) Vector3 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Basis, lt, rt)
}

// Multiply_Transform3D operator
func (cx *Vector3) Multiply_Transform3D(right Transform3D) Vector3 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Transform3D, lt, rt)
}

// In_Dictionary operator
func (cx *Vector3) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector3) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_in_Array, lt, rt)
}

// In_PackedVector3Array operator
func (cx *Vector3) In_PackedVector3Array(right PackedVector3Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_in_PackedVector3Array, lt, rt)
}

/*
 * Vector3i
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: false
 */
type Vector3i struct {
	opaque [12]uint8
}

type vector3iMethodBindings struct {
	constructor_0                   GDExtensionPtrConstructor
	constructor_1                   GDExtensionPtrConstructor
	constructor_2                   GDExtensionPtrConstructor
	constructor_3                   GDExtensionPtrConstructor
	method_min_axis_index           GDExtensionPtrBuiltInMethod
	method_max_axis_index           GDExtensionPtrBuiltInMethod
	method_length                   GDExtensionPtrBuiltInMethod
	method_length_squared           GDExtensionPtrBuiltInMethod
	method_sign                     GDExtensionPtrBuiltInMethod
	method_abs                      GDExtensionPtrBuiltInMethod
	method_clamp                    GDExtensionPtrBuiltInMethod
	method_snapped                  GDExtensionPtrBuiltInMethod
	member_x_setter                 GDExtensionPtrSetter
	member_x_getter                 GDExtensionPtrGetter
	member_y_setter                 GDExtensionPtrSetter
	member_y_getter                 GDExtensionPtrGetter
	member_z_setter                 GDExtensionPtrSetter
	member_z_getter                 GDExtensionPtrGetter
	indexed_setter                  GDExtensionPtrIndexedSetter
	indexed_getter                  GDExtensionPtrIndexedGetter
	operator_equal_Variant          GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant      GDExtensionPtrOperatorEvaluator
	operator_negate                 GDExtensionPtrOperatorEvaluator
	operator_positive               GDExtensionPtrOperatorEvaluator
	operator_multiply_int           GDExtensionPtrOperatorEvaluator
	operator_divide_int             GDExtensionPtrOperatorEvaluator
	operator_module_int             GDExtensionPtrOperatorEvaluator
	operator_multiply_float         GDExtensionPtrOperatorEvaluator
	operator_divide_float           GDExtensionPtrOperatorEvaluator
	operator_equal_Vector3i         GDExtensionPtrOperatorEvaluator
	operator_not_equal_Vector3i     GDExtensionPtrOperatorEvaluator
	operator_less_Vector3i          GDExtensionPtrOperatorEvaluator
	operator_less_equal_Vector3i    GDExtensionPtrOperatorEvaluator
	operator_greater_Vector3i       GDExtensionPtrOperatorEvaluator
	operator_greater_equal_Vector3i GDExtensionPtrOperatorEvaluator
	operator_add_Vector3i           GDExtensionPtrOperatorEvaluator
	operator_subtract_Vector3i      GDExtensionPtrOperatorEvaluator
	operator_multiply_Vector3i      GDExtensionPtrOperatorEvaluator
	operator_divide_Vector3i        GDExtensionPtrOperatorEvaluator
	operator_module_Vector3i        GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary          GDExtensionPtrOperatorEvaluator
	operator_in_Array               GDExtensionPtrOperatorEvaluator
}

var globalVector3iMethodBindings vector3iMethodBindings

func vector3iInitConstructorBindings() {
	log.Debug("vector3iInitConstructorBindings called")

	log.Debug("globalVector3iMethodBindings.constructor_0")
	globalVector3iMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, 0)
	log.Debug("globalVector3iMethodBindings.constructor_1")
	globalVector3iMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, 1)
	log.Debug("globalVector3iMethodBindings.constructor_2")
	globalVector3iMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, 2)
	log.Debug("globalVector3iMethodBindings.constructor_3")
	globalVector3iMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, 3)
}

func vector3iInitMethodBindings() {
	log.Debug("vector3iInitMethodBindings called")

	missingMethods := make([]string, 0, 8)

	methodName0 := NewStringNameWithLatin1Chars("min_axis_index")
	defer methodName0.Destroy()
	log.Debug("globalVector3iMethodBindings.method_min_axis_index")
	globalVector3iMethodBindings.method_min_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector3iMethodBindings.method_min_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector3iMethodBindings.method_min_axis_index")
	}
	methodName1 := NewStringNameWithLatin1Chars("max_axis_index")
	defer methodName1.Destroy()
	log.Debug("globalVector3iMethodBindings.method_max_axis_index")
	globalVector3iMethodBindings.method_max_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, methodName1.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector3iMethodBindings.method_max_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector3iMethodBindings.method_max_axis_index")
	}
	methodName2 := NewStringNameWithLatin1Chars("length")
	defer methodName2.Destroy()
	log.Debug("globalVector3iMethodBindings.method_length")
	globalVector3iMethodBindings.method_length = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, methodName2.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector3iMethodBindings.method_length == nil {
		missingMethods = append(missingMethods, "globalVector3iMethodBindings.method_length")
	}
	methodName3 := NewStringNameWithLatin1Chars("length_squared")
	defer methodName3.Destroy()
	log.Debug("globalVector3iMethodBindings.method_length_squared")
	globalVector3iMethodBindings.method_length_squared = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, methodName3.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector3iMethodBindings.method_length_squared == nil {
		missingMethods = append(missingMethods, "globalVector3iMethodBindings.method_length_squared")
	}
	methodName4 := NewStringNameWithLatin1Chars("sign")
	defer methodName4.Destroy()
	log.Debug("globalVector3iMethodBindings.method_sign")
	globalVector3iMethodBindings.method_sign = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, methodName4.AsGDExtensionStringNamePtr(), 3729604559)
	if globalVector3iMethodBindings.method_sign == nil {
		missingMethods = append(missingMethods, "globalVector3iMethodBindings.method_sign")
	}
	methodName5 := NewStringNameWithLatin1Chars("abs")
	defer methodName5.Destroy()
	log.Debug("globalVector3iMethodBindings.method_abs")
	globalVector3iMethodBindings.method_abs = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, methodName5.AsGDExtensionStringNamePtr(), 3729604559)
	if globalVector3iMethodBindings.method_abs == nil {
		missingMethods = append(missingMethods, "globalVector3iMethodBindings.method_abs")
	}
	methodName6 := NewStringNameWithLatin1Chars("clamp")
	defer methodName6.Destroy()
	log.Debug("globalVector3iMethodBindings.method_clamp")
	globalVector3iMethodBindings.method_clamp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, methodName6.AsGDExtensionStringNamePtr(), 1086892323)
	if globalVector3iMethodBindings.method_clamp == nil {
		missingMethods = append(missingMethods, "globalVector3iMethodBindings.method_clamp")
	}
	methodName7 := NewStringNameWithLatin1Chars("snapped")
	defer methodName7.Destroy()
	log.Debug("globalVector3iMethodBindings.method_snapped")
	globalVector3iMethodBindings.method_snapped = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, methodName7.AsGDExtensionStringNamePtr(), 1989319750)
	if globalVector3iMethodBindings.method_snapped == nil {
		missingMethods = append(missingMethods, "globalVector3iMethodBindings.method_snapped")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("x")
	defer memberName0.Destroy()
	log.Debug("globalVector3iMethodBindings.member_x_setter")
	globalVector3iMethodBindings.member_x_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalVector3iMethodBindings.member_x_getter")
	globalVector3iMethodBindings.member_x_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("y")
	defer memberName1.Destroy()
	log.Debug("globalVector3iMethodBindings.member_y_setter")
	globalVector3iMethodBindings.member_y_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalVector3iMethodBindings.member_y_getter")
	globalVector3iMethodBindings.member_y_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("z")
	defer memberName2.Destroy()
	log.Debug("globalVector3iMethodBindings.member_z_setter")
	globalVector3iMethodBindings.member_z_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalVector3iMethodBindings.member_z_getter")
	globalVector3iMethodBindings.member_z_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalVector3iMethodBindings.indexed_setter")
	globalVector3iMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.indexed_getter")
	globalVector3iMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: equal Variant")
	globalVector3iMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector3iMethodBindings.operator: not_equal Variant")
	globalVector3iMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector3iMethodBindings.operator: negate ")
	globalVector3iMethodBindings.operator_negate = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NEGATE, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector3iMethodBindings.operator: positive ")
	globalVector3iMethodBindings.operator_positive = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_POSITIVE, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector3iMethodBindings.operator: multiply int")
	globalVector3iMethodBindings.operator_multiply_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector3iMethodBindings.operator: divide int")
	globalVector3iMethodBindings.operator_divide_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector3iMethodBindings.operator: module int")
	globalVector3iMethodBindings.operator_module_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector3iMethodBindings.operator: multiply float")
	globalVector3iMethodBindings.operator_multiply_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector3iMethodBindings.operator: divide float")
	globalVector3iMethodBindings.operator_divide_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector3iMethodBindings.operator: equal Vector3i")
	globalVector3iMethodBindings.operator_equal_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: not_equal Vector3i")
	globalVector3iMethodBindings.operator_not_equal_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: less Vector3i")
	globalVector3iMethodBindings.operator_less_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: less_equal Vector3i")
	globalVector3iMethodBindings.operator_less_equal_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: greater Vector3i")
	globalVector3iMethodBindings.operator_greater_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: greater_equal Vector3i")
	globalVector3iMethodBindings.operator_greater_equal_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: add Vector3i")
	globalVector3iMethodBindings.operator_add_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: subtract Vector3i")
	globalVector3iMethodBindings.operator_subtract_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_SUBTRACT, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: multiply Vector3i")
	globalVector3iMethodBindings.operator_multiply_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: divide Vector3i")
	globalVector3iMethodBindings.operator_divide_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: module Vector3i")
	globalVector3iMethodBindings.operator_module_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalVector3iMethodBindings.operator: in Dictionary")
	globalVector3iMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalVector3iMethodBindings.operator: in Array")
	globalVector3iMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR3I, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("vector3iInitBindings end")
}

func (c *Vector3i) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector3i, index: 0
func NewVector3i() Vector3i {
	cx := Vector3i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalVector3iMethodBindings.constructor_0, ptr)

	return cx
}

// NewVector3i, index: 1
func NewVector3iWithVector3i(from Vector3i) Vector3i {
	cx := Vector3i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector3i
	// Vector3iEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector3iMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewVector3i, index: 2
func NewVector3iWithVector3(from Vector3) Vector3i {
	cx := Vector3i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector3iMethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewVector3i, index: 3
func NewVector3iWithInt32Int32Int32(x int32, y int32, z int32) Vector3i {
	cx := Vector3i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [3]GDExtensionConstTypePtr

	// int
	eArg0 := Int32Encoder.EncodeArg(x)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// int
	eArg1 := Int32Encoder.EncodeArg(y)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))

	// int
	eArg2 := Int32Encoder.EncodeArg(z)
	args[2] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg2))
	callBuiltinConstructor(globalVector3iMethodBindings.constructor_3, ptr, args[0], args[1], args[2])

	return cx
}

// methods

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector3i) MinAxisIndex() int32 {
	mb := globalVector3iMethodBindings.method_min_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector3i) MaxAxisIndex() int32 {
	mb := globalVector3iMethodBindings.method_max_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3i) Length() float32 {
	mb := globalVector3iMethodBindings.method_length

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector3i) LengthSquared() int32 {
	mb := globalVector3iMethodBindings.method_length_squared

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Sign() Vector3i {
	mb := globalVector3iMethodBindings.method_sign

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3i](mb, bx, nil)
	return ret

}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Abs() Vector3i {
	mb := globalVector3iMethodBindings.method_abs

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3i](mb, bx, nil)
	return ret

}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Clamp(min Vector3i, max Vector3i) Vector3i {
	mb := globalVector3iMethodBindings.method_clamp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&min))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&max))

	ret := callBuiltinMethodPtrRet[Vector3i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Snapped(step Vector3i) Vector3i {
	mb := globalVector3iMethodBindings.method_snapped

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&step))

	ret := callBuiltinMethodPtrRet[Vector3i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

func (cx *Vector3i) MemberGetx() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalVector3iMethodBindings.member_x_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

func (cx *Vector3i) MemberGety() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalVector3iMethodBindings.member_y_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

func (cx *Vector3i) MemberGetz() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalVector3iMethodBindings.member_z_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

// Equal_Variant operator
func (cx *Vector3i) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector3i) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector3i) Negate() Vector3i {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector3i) Positive() Vector3i {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_positive, lt, rt)
}

// Multiply_int operator
func (cx *Vector3i) Multiply_int(right int32) Vector3i {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector3i) Divide_int(right int32) Vector3i {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_divide_int, lt, rt)
}

// Module_int operator
func (cx *Vector3i) Module_int(right int32) Vector3i {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_module_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector3i) Multiply_float(right float32) Vector3 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector3](globalVector3iMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector3i) Divide_float(right float32) Vector3 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector3](globalVector3iMethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector3i operator
func (cx *Vector3i) Equal_Vector3i(right Vector3i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_equal_Vector3i, lt, rt)
}

// Not_equal_Vector3i operator
func (cx *Vector3i) Not_equal_Vector3i(right Vector3i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_not_equal_Vector3i, lt, rt)
}

// Less_Vector3i operator
func (cx *Vector3i) Less_Vector3i(right Vector3i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_less_Vector3i, lt, rt)
}

// Less_equal_Vector3i operator
func (cx *Vector3i) Less_equal_Vector3i(right Vector3i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_less_equal_Vector3i, lt, rt)
}

// Greater_Vector3i operator
func (cx *Vector3i) Greater_Vector3i(right Vector3i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_greater_Vector3i, lt, rt)
}

// Greater_equal_Vector3i operator
func (cx *Vector3i) Greater_equal_Vector3i(right Vector3i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_greater_equal_Vector3i, lt, rt)
}

// Add_Vector3i operator
func (cx *Vector3i) Add_Vector3i(right Vector3i) Vector3i {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_add_Vector3i, lt, rt)
}

// Subtract_Vector3i operator
func (cx *Vector3i) Subtract_Vector3i(right Vector3i) Vector3i {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_subtract_Vector3i, lt, rt)
}

// Multiply_Vector3i operator
func (cx *Vector3i) Multiply_Vector3i(right Vector3i) Vector3i {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_multiply_Vector3i, lt, rt)
}

// Divide_Vector3i operator
func (cx *Vector3i) Divide_Vector3i(right Vector3i) Vector3i {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_divide_Vector3i, lt, rt)
}

// Module_Vector3i operator
func (cx *Vector3i) Module_Vector3i(right Vector3i) Vector3i {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_module_Vector3i, lt, rt)
}

// In_Dictionary operator
func (cx *Vector3i) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector3i) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_in_Array, lt, rt)
}

/*
 * Transform2D
 * indexingReturnType: Vector2
 * isKeyed: false
 * hasDestructor: false
 */
type Transform2D struct {
	opaque [24]uint8
}

type transform2DMethodBindings struct {
	constructor_0                        GDExtensionPtrConstructor
	constructor_1                        GDExtensionPtrConstructor
	constructor_2                        GDExtensionPtrConstructor
	constructor_3                        GDExtensionPtrConstructor
	constructor_4                        GDExtensionPtrConstructor
	method_inverse                       GDExtensionPtrBuiltInMethod
	method_affine_inverse                GDExtensionPtrBuiltInMethod
	method_get_rotation                  GDExtensionPtrBuiltInMethod
	method_get_origin                    GDExtensionPtrBuiltInMethod
	method_get_scale                     GDExtensionPtrBuiltInMethod
	method_get_skew                      GDExtensionPtrBuiltInMethod
	method_orthonormalized               GDExtensionPtrBuiltInMethod
	method_rotated                       GDExtensionPtrBuiltInMethod
	method_rotated_local                 GDExtensionPtrBuiltInMethod
	method_scaled                        GDExtensionPtrBuiltInMethod
	method_scaled_local                  GDExtensionPtrBuiltInMethod
	method_translated                    GDExtensionPtrBuiltInMethod
	method_translated_local              GDExtensionPtrBuiltInMethod
	method_basis_xform                   GDExtensionPtrBuiltInMethod
	method_basis_xform_inv               GDExtensionPtrBuiltInMethod
	method_interpolate_with              GDExtensionPtrBuiltInMethod
	method_is_equal_approx               GDExtensionPtrBuiltInMethod
	method_is_finite                     GDExtensionPtrBuiltInMethod
	method_looking_at                    GDExtensionPtrBuiltInMethod
	member_x_setter                      GDExtensionPtrSetter
	member_x_getter                      GDExtensionPtrGetter
	member_y_setter                      GDExtensionPtrSetter
	member_y_getter                      GDExtensionPtrGetter
	member_origin_setter                 GDExtensionPtrSetter
	member_origin_getter                 GDExtensionPtrGetter
	indexed_setter                       GDExtensionPtrIndexedSetter
	indexed_getter                       GDExtensionPtrIndexedGetter
	operator_equal_Variant               GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant           GDExtensionPtrOperatorEvaluator
	operator_multiply_int                GDExtensionPtrOperatorEvaluator
	operator_multiply_float              GDExtensionPtrOperatorEvaluator
	operator_multiply_Vector2            GDExtensionPtrOperatorEvaluator
	operator_multiply_Rect2              GDExtensionPtrOperatorEvaluator
	operator_equal_Transform2D           GDExtensionPtrOperatorEvaluator
	operator_not_equal_Transform2D       GDExtensionPtrOperatorEvaluator
	operator_multiply_Transform2D        GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary               GDExtensionPtrOperatorEvaluator
	operator_in_Array                    GDExtensionPtrOperatorEvaluator
	operator_multiply_PackedVector2Array GDExtensionPtrOperatorEvaluator
}

var globalTransform2DMethodBindings transform2DMethodBindings

func transform2DInitConstructorBindings() {
	log.Debug("transform2DInitConstructorBindings called")

	log.Debug("globalTransform2DMethodBindings.constructor_0")
	globalTransform2DMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, 0)
	log.Debug("globalTransform2DMethodBindings.constructor_1")
	globalTransform2DMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, 1)
	log.Debug("globalTransform2DMethodBindings.constructor_2")
	globalTransform2DMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, 2)
	log.Debug("globalTransform2DMethodBindings.constructor_3")
	globalTransform2DMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, 3)
	log.Debug("globalTransform2DMethodBindings.constructor_4")
	globalTransform2DMethodBindings.constructor_4 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, 4)
}

func transform2DInitMethodBindings() {
	log.Debug("transform2DInitMethodBindings called")

	missingMethods := make([]string, 0, 19)

	methodName0 := NewStringNameWithLatin1Chars("inverse")
	defer methodName0.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_inverse")
	globalTransform2DMethodBindings.method_inverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName0.AsGDExtensionStringNamePtr(), 1420440541)
	if globalTransform2DMethodBindings.method_inverse == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_inverse")
	}
	methodName1 := NewStringNameWithLatin1Chars("affine_inverse")
	defer methodName1.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_affine_inverse")
	globalTransform2DMethodBindings.method_affine_inverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName1.AsGDExtensionStringNamePtr(), 1420440541)
	if globalTransform2DMethodBindings.method_affine_inverse == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_affine_inverse")
	}
	methodName2 := NewStringNameWithLatin1Chars("get_rotation")
	defer methodName2.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_get_rotation")
	globalTransform2DMethodBindings.method_get_rotation = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName2.AsGDExtensionStringNamePtr(), 466405837)
	if globalTransform2DMethodBindings.method_get_rotation == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_get_rotation")
	}
	methodName3 := NewStringNameWithLatin1Chars("get_origin")
	defer methodName3.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_get_origin")
	globalTransform2DMethodBindings.method_get_origin = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName3.AsGDExtensionStringNamePtr(), 2428350749)
	if globalTransform2DMethodBindings.method_get_origin == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_get_origin")
	}
	methodName4 := NewStringNameWithLatin1Chars("get_scale")
	defer methodName4.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_get_scale")
	globalTransform2DMethodBindings.method_get_scale = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName4.AsGDExtensionStringNamePtr(), 2428350749)
	if globalTransform2DMethodBindings.method_get_scale == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_get_scale")
	}
	methodName5 := NewStringNameWithLatin1Chars("get_skew")
	defer methodName5.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_get_skew")
	globalTransform2DMethodBindings.method_get_skew = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName5.AsGDExtensionStringNamePtr(), 466405837)
	if globalTransform2DMethodBindings.method_get_skew == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_get_skew")
	}
	methodName6 := NewStringNameWithLatin1Chars("orthonormalized")
	defer methodName6.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_orthonormalized")
	globalTransform2DMethodBindings.method_orthonormalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName6.AsGDExtensionStringNamePtr(), 1420440541)
	if globalTransform2DMethodBindings.method_orthonormalized == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_orthonormalized")
	}
	methodName7 := NewStringNameWithLatin1Chars("rotated")
	defer methodName7.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_rotated")
	globalTransform2DMethodBindings.method_rotated = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName7.AsGDExtensionStringNamePtr(), 729597514)
	if globalTransform2DMethodBindings.method_rotated == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_rotated")
	}
	methodName8 := NewStringNameWithLatin1Chars("rotated_local")
	defer methodName8.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_rotated_local")
	globalTransform2DMethodBindings.method_rotated_local = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName8.AsGDExtensionStringNamePtr(), 729597514)
	if globalTransform2DMethodBindings.method_rotated_local == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_rotated_local")
	}
	methodName9 := NewStringNameWithLatin1Chars("scaled")
	defer methodName9.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_scaled")
	globalTransform2DMethodBindings.method_scaled = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName9.AsGDExtensionStringNamePtr(), 1446323263)
	if globalTransform2DMethodBindings.method_scaled == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_scaled")
	}
	methodName10 := NewStringNameWithLatin1Chars("scaled_local")
	defer methodName10.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_scaled_local")
	globalTransform2DMethodBindings.method_scaled_local = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName10.AsGDExtensionStringNamePtr(), 1446323263)
	if globalTransform2DMethodBindings.method_scaled_local == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_scaled_local")
	}
	methodName11 := NewStringNameWithLatin1Chars("translated")
	defer methodName11.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_translated")
	globalTransform2DMethodBindings.method_translated = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName11.AsGDExtensionStringNamePtr(), 1446323263)
	if globalTransform2DMethodBindings.method_translated == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_translated")
	}
	methodName12 := NewStringNameWithLatin1Chars("translated_local")
	defer methodName12.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_translated_local")
	globalTransform2DMethodBindings.method_translated_local = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName12.AsGDExtensionStringNamePtr(), 1446323263)
	if globalTransform2DMethodBindings.method_translated_local == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_translated_local")
	}
	methodName13 := NewStringNameWithLatin1Chars("basis_xform")
	defer methodName13.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_basis_xform")
	globalTransform2DMethodBindings.method_basis_xform = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName13.AsGDExtensionStringNamePtr(), 2026743667)
	if globalTransform2DMethodBindings.method_basis_xform == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_basis_xform")
	}
	methodName14 := NewStringNameWithLatin1Chars("basis_xform_inv")
	defer methodName14.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_basis_xform_inv")
	globalTransform2DMethodBindings.method_basis_xform_inv = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName14.AsGDExtensionStringNamePtr(), 2026743667)
	if globalTransform2DMethodBindings.method_basis_xform_inv == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_basis_xform_inv")
	}
	methodName15 := NewStringNameWithLatin1Chars("interpolate_with")
	defer methodName15.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_interpolate_with")
	globalTransform2DMethodBindings.method_interpolate_with = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName15.AsGDExtensionStringNamePtr(), 359399686)
	if globalTransform2DMethodBindings.method_interpolate_with == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_interpolate_with")
	}
	methodName16 := NewStringNameWithLatin1Chars("is_equal_approx")
	defer methodName16.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_is_equal_approx")
	globalTransform2DMethodBindings.method_is_equal_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName16.AsGDExtensionStringNamePtr(), 3837431929)
	if globalTransform2DMethodBindings.method_is_equal_approx == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_is_equal_approx")
	}
	methodName17 := NewStringNameWithLatin1Chars("is_finite")
	defer methodName17.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_is_finite")
	globalTransform2DMethodBindings.method_is_finite = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName17.AsGDExtensionStringNamePtr(), 3918633141)
	if globalTransform2DMethodBindings.method_is_finite == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_is_finite")
	}
	methodName18 := NewStringNameWithLatin1Chars("looking_at")
	defer methodName18.Destroy()
	log.Debug("globalTransform2DMethodBindings.method_looking_at")
	globalTransform2DMethodBindings.method_looking_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, methodName18.AsGDExtensionStringNamePtr(), 1446323263)
	if globalTransform2DMethodBindings.method_looking_at == nil {
		missingMethods = append(missingMethods, "globalTransform2DMethodBindings.method_looking_at")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("x")
	defer memberName0.Destroy()
	log.Debug("globalTransform2DMethodBindings.member_x_setter")
	globalTransform2DMethodBindings.member_x_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalTransform2DMethodBindings.member_x_getter")
	globalTransform2DMethodBindings.member_x_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("y")
	defer memberName1.Destroy()
	log.Debug("globalTransform2DMethodBindings.member_y_setter")
	globalTransform2DMethodBindings.member_y_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalTransform2DMethodBindings.member_y_getter")
	globalTransform2DMethodBindings.member_y_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("origin")
	defer memberName2.Destroy()
	log.Debug("globalTransform2DMethodBindings.member_origin_setter")
	globalTransform2DMethodBindings.member_origin_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalTransform2DMethodBindings.member_origin_getter")
	globalTransform2DMethodBindings.member_origin_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalTransform2DMethodBindings.indexed_setter")
	globalTransform2DMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)
	log.Debug("globalTransform2DMethodBindings.indexed_getter")
	globalTransform2DMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)
	log.Debug("globalTransform2DMethodBindings.operator: equal Variant")
	globalTransform2DMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalTransform2DMethodBindings.operator: not_equal Variant")
	globalTransform2DMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalTransform2DMethodBindings.operator: multiply int")
	globalTransform2DMethodBindings.operator_multiply_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalTransform2DMethodBindings.operator: multiply float")
	globalTransform2DMethodBindings.operator_multiply_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalTransform2DMethodBindings.operator: multiply Vector2")
	globalTransform2DMethodBindings.operator_multiply_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalTransform2DMethodBindings.operator: multiply Rect2")
	globalTransform2DMethodBindings.operator_multiply_Rect2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_RECT2)
	log.Debug("globalTransform2DMethodBindings.operator: equal Transform2D")
	globalTransform2DMethodBindings.operator_equal_Transform2D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)
	log.Debug("globalTransform2DMethodBindings.operator: not_equal Transform2D")
	globalTransform2DMethodBindings.operator_not_equal_Transform2D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)
	log.Debug("globalTransform2DMethodBindings.operator: multiply Transform2D")
	globalTransform2DMethodBindings.operator_multiply_Transform2D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)
	log.Debug("globalTransform2DMethodBindings.operator: in Dictionary")
	globalTransform2DMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalTransform2DMethodBindings.operator: in Array")
	globalTransform2DMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalTransform2DMethodBindings.operator: multiply PackedVector2Array")
	globalTransform2DMethodBindings.operator_multiply_PackedVector2Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
	log.Debug("transform2DInitBindings end")
}

func (c *Transform2D) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewTransform2D, index: 0
func NewTransform2D() Transform2D {
	cx := Transform2D{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalTransform2DMethodBindings.constructor_0, ptr)

	return cx
}

// NewTransform2D, index: 1
func NewTransform2DWithTransform2D(from Transform2D) Transform2D {
	cx := Transform2D{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Transform2D
	// Transform2DEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalTransform2DMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewTransform2D, index: 2
func NewTransform2DWithFloat32Vector2(rotation float32, position Vector2) Transform2D {
	cx := Transform2D{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// float
	eArg0 := Float32Encoder.EncodeArg(rotation)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// Vector2
	// Vector2Encoder
	args[1] = (GDExtensionConstTypePtr)(position.ptr())
	callBuiltinConstructor(globalTransform2DMethodBindings.constructor_2, ptr, args[0], args[1])

	return cx
}

// NewTransform2D, index: 3
func NewTransform2DWithFloat32Vector2Float32Vector2(rotation float32, scale Vector2, skew float32, position Vector2) Transform2D {
	cx := Transform2D{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [4]GDExtensionConstTypePtr

	// float
	eArg0 := Float32Encoder.EncodeArg(rotation)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// Vector2
	// Vector2Encoder
	args[1] = (GDExtensionConstTypePtr)(scale.ptr())

	// float
	eArg2 := Float32Encoder.EncodeArg(skew)
	args[2] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg2))

	// Vector2
	// Vector2Encoder
	args[3] = (GDExtensionConstTypePtr)(position.ptr())
	callBuiltinConstructor(globalTransform2DMethodBindings.constructor_3, ptr, args[0], args[1], args[2], args[3])

	return cx
}

// NewTransform2D, index: 4
func NewTransform2DWithVector2Vector2Vector2(x_axis Vector2, y_axis Vector2, origin Vector2) Transform2D {
	cx := Transform2D{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [3]GDExtensionConstTypePtr

	// Vector2
	// Vector2Encoder
	args[0] = (GDExtensionConstTypePtr)(x_axis.ptr())

	// Vector2
	// Vector2Encoder
	args[1] = (GDExtensionConstTypePtr)(y_axis.ptr())

	// Vector2
	// Vector2Encoder
	args[2] = (GDExtensionConstTypePtr)(origin.ptr())
	callBuiltinConstructor(globalTransform2DMethodBindings.constructor_4, ptr, args[0], args[1], args[2])

	return cx
}

// methods

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Inverse() Transform2D {
	mb := globalTransform2DMethodBindings.method_inverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, nil)
	return ret

}

/* AffineInverse : affine_inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) AffineInverse() Transform2D {
	mb := globalTransform2DMethodBindings.method_affine_inverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, nil)
	return ret

}

/* GetRotation : get_rotation
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Transform2D) GetRotation() float32 {
	mb := globalTransform2DMethodBindings.method_get_rotation

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* GetOrigin : get_origin
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) GetOrigin() Vector2 {
	mb := globalTransform2DMethodBindings.method_get_origin

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* GetScale : get_scale
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) GetScale() Vector2 {
	mb := globalTransform2DMethodBindings.method_get_scale

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* GetSkew : get_skew
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Transform2D) GetSkew() float32 {
	mb := globalTransform2DMethodBindings.method_get_skew

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* Orthonormalized : orthonormalized
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Orthonormalized() Transform2D {
	mb := globalTransform2DMethodBindings.method_orthonormalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, nil)
	return ret

}

/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Rotated(angle float32) Transform2D {
	mb := globalTransform2DMethodBindings.method_rotated

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(angle)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* RotatedLocal : rotated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) RotatedLocal(angle float32) Transform2D {
	mb := globalTransform2DMethodBindings.method_rotated_local

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(angle)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Scaled : scaled
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Scaled(scale Vector2) Transform2D {
	mb := globalTransform2DMethodBindings.method_scaled

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(scale)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ScaledLocal : scaled_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) ScaledLocal(scale Vector2) Transform2D {
	mb := globalTransform2DMethodBindings.method_scaled_local

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(scale)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Translated : translated
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Translated(offset Vector2) Transform2D {
	mb := globalTransform2DMethodBindings.method_translated

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* TranslatedLocal : translated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) TranslatedLocal(offset Vector2) Transform2D {
	mb := globalTransform2DMethodBindings.method_translated_local

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* BasisXform : basis_xform
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) BasisXform(v Vector2) Vector2 {
	mb := globalTransform2DMethodBindings.method_basis_xform

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(v)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* BasisXformInv : basis_xform_inv
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) BasisXformInv(v Vector2) Vector2 {
	mb := globalTransform2DMethodBindings.method_basis_xform_inv

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(v)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* InterpolateWith : interpolate_with
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) InterpolateWith(xform Transform2D, weight float32) Transform2D {
	mb := globalTransform2DMethodBindings.method_interpolate_with

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&xform))

	eArg1 := Float32Encoder.EncodeArg(weight)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Transform2D) IsEqualApprox(xform Transform2D) bool {
	mb := globalTransform2DMethodBindings.method_is_equal_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&xform))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Transform2D) IsFinite() bool {
	mb := globalTransform2DMethodBindings.method_is_finite

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* LookingAt : looking_at
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) LookingAt(target Vector2) Transform2D {
	mb := globalTransform2DMethodBindings.method_looking_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(target)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

func (cx *Transform2D) MemberGetx() Vector2 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector2](globalTransform2DMethodBindings.member_x_getter, bx)
	return ret

}

func (cx *Transform2D) MemberGety() Vector2 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector2](globalTransform2DMethodBindings.member_y_getter, bx)
	return ret

}

func (cx *Transform2D) MemberGetorigin() Vector2 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector2](globalTransform2DMethodBindings.member_origin_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Transform2D) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Transform2D) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Multiply_int operator
func (cx *Transform2D) Multiply_int(right int32) Transform2D {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Transform2D](globalTransform2DMethodBindings.operator_multiply_int, lt, rt)
}

// Multiply_float operator
func (cx *Transform2D) Multiply_float(right float32) Transform2D {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Transform2D](globalTransform2DMethodBindings.operator_multiply_float, lt, rt)
}

// Multiply_Vector2 operator
func (cx *Transform2D) Multiply_Vector2(right Vector2) Vector2 {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector2](globalTransform2DMethodBindings.operator_multiply_Vector2, lt, rt)
}

// Multiply_Rect2 operator
func (cx *Transform2D) Multiply_Rect2(right Rect2) Rect2 {
	lt := cx.ptr()

	eRight := Rect2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Rect2](globalTransform2DMethodBindings.operator_multiply_Rect2, lt, rt)
}

// Equal_Transform2D operator
func (cx *Transform2D) Equal_Transform2D(right Transform2D) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_equal_Transform2D, lt, rt)
}

// Not_equal_Transform2D operator
func (cx *Transform2D) Not_equal_Transform2D(right Transform2D) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_not_equal_Transform2D, lt, rt)
}

// Multiply_Transform2D operator
func (cx *Transform2D) Multiply_Transform2D(right Transform2D) Transform2D {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Transform2D](globalTransform2DMethodBindings.operator_multiply_Transform2D, lt, rt)
}

// In_Dictionary operator
func (cx *Transform2D) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Transform2D) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_in_Array, lt, rt)
}

// Multiply_PackedVector2Array operator
func (cx *Transform2D) Multiply_PackedVector2Array(right PackedVector2Array) PackedVector2Array {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedVector2Array](globalTransform2DMethodBindings.operator_multiply_PackedVector2Array, lt, rt)
}

/*
 * Vector4
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: false
 */
type Vector4 struct {
	opaque [16]uint8
}

type vector4MethodBindings struct {
	constructor_0                    GDExtensionPtrConstructor
	constructor_1                    GDExtensionPtrConstructor
	constructor_2                    GDExtensionPtrConstructor
	constructor_3                    GDExtensionPtrConstructor
	method_min_axis_index            GDExtensionPtrBuiltInMethod
	method_max_axis_index            GDExtensionPtrBuiltInMethod
	method_length                    GDExtensionPtrBuiltInMethod
	method_length_squared            GDExtensionPtrBuiltInMethod
	method_abs                       GDExtensionPtrBuiltInMethod
	method_sign                      GDExtensionPtrBuiltInMethod
	method_floor                     GDExtensionPtrBuiltInMethod
	method_ceil                      GDExtensionPtrBuiltInMethod
	method_round                     GDExtensionPtrBuiltInMethod
	method_lerp                      GDExtensionPtrBuiltInMethod
	method_cubic_interpolate         GDExtensionPtrBuiltInMethod
	method_cubic_interpolate_in_time GDExtensionPtrBuiltInMethod
	method_posmod                    GDExtensionPtrBuiltInMethod
	method_posmodv                   GDExtensionPtrBuiltInMethod
	method_snapped                   GDExtensionPtrBuiltInMethod
	method_clamp                     GDExtensionPtrBuiltInMethod
	method_normalized                GDExtensionPtrBuiltInMethod
	method_is_normalized             GDExtensionPtrBuiltInMethod
	method_direction_to              GDExtensionPtrBuiltInMethod
	method_distance_to               GDExtensionPtrBuiltInMethod
	method_distance_squared_to       GDExtensionPtrBuiltInMethod
	method_dot                       GDExtensionPtrBuiltInMethod
	method_inverse                   GDExtensionPtrBuiltInMethod
	method_is_equal_approx           GDExtensionPtrBuiltInMethod
	method_is_zero_approx            GDExtensionPtrBuiltInMethod
	method_is_finite                 GDExtensionPtrBuiltInMethod
	member_x_setter                  GDExtensionPtrSetter
	member_x_getter                  GDExtensionPtrGetter
	member_y_setter                  GDExtensionPtrSetter
	member_y_getter                  GDExtensionPtrGetter
	member_z_setter                  GDExtensionPtrSetter
	member_z_getter                  GDExtensionPtrGetter
	member_w_setter                  GDExtensionPtrSetter
	member_w_getter                  GDExtensionPtrGetter
	indexed_setter                   GDExtensionPtrIndexedSetter
	indexed_getter                   GDExtensionPtrIndexedGetter
	operator_equal_Variant           GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant       GDExtensionPtrOperatorEvaluator
	operator_negate                  GDExtensionPtrOperatorEvaluator
	operator_positive                GDExtensionPtrOperatorEvaluator
	operator_multiply_int            GDExtensionPtrOperatorEvaluator
	operator_divide_int              GDExtensionPtrOperatorEvaluator
	operator_multiply_float          GDExtensionPtrOperatorEvaluator
	operator_divide_float            GDExtensionPtrOperatorEvaluator
	operator_equal_Vector4           GDExtensionPtrOperatorEvaluator
	operator_not_equal_Vector4       GDExtensionPtrOperatorEvaluator
	operator_less_Vector4            GDExtensionPtrOperatorEvaluator
	operator_less_equal_Vector4      GDExtensionPtrOperatorEvaluator
	operator_greater_Vector4         GDExtensionPtrOperatorEvaluator
	operator_greater_equal_Vector4   GDExtensionPtrOperatorEvaluator
	operator_add_Vector4             GDExtensionPtrOperatorEvaluator
	operator_subtract_Vector4        GDExtensionPtrOperatorEvaluator
	operator_multiply_Vector4        GDExtensionPtrOperatorEvaluator
	operator_divide_Vector4          GDExtensionPtrOperatorEvaluator
	operator_multiply_Projection     GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary           GDExtensionPtrOperatorEvaluator
	operator_in_Array                GDExtensionPtrOperatorEvaluator
}

var globalVector4MethodBindings vector4MethodBindings

func vector4InitConstructorBindings() {
	log.Debug("vector4InitConstructorBindings called")

	log.Debug("globalVector4MethodBindings.constructor_0")
	globalVector4MethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, 0)
	log.Debug("globalVector4MethodBindings.constructor_1")
	globalVector4MethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, 1)
	log.Debug("globalVector4MethodBindings.constructor_2")
	globalVector4MethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, 2)
	log.Debug("globalVector4MethodBindings.constructor_3")
	globalVector4MethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, 3)
}

func vector4InitMethodBindings() {
	log.Debug("vector4InitMethodBindings called")

	missingMethods := make([]string, 0, 26)

	methodName0 := NewStringNameWithLatin1Chars("min_axis_index")
	defer methodName0.Destroy()
	log.Debug("globalVector4MethodBindings.method_min_axis_index")
	globalVector4MethodBindings.method_min_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector4MethodBindings.method_min_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_min_axis_index")
	}
	methodName1 := NewStringNameWithLatin1Chars("max_axis_index")
	defer methodName1.Destroy()
	log.Debug("globalVector4MethodBindings.method_max_axis_index")
	globalVector4MethodBindings.method_max_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName1.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector4MethodBindings.method_max_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_max_axis_index")
	}
	methodName2 := NewStringNameWithLatin1Chars("length")
	defer methodName2.Destroy()
	log.Debug("globalVector4MethodBindings.method_length")
	globalVector4MethodBindings.method_length = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName2.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector4MethodBindings.method_length == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_length")
	}
	methodName3 := NewStringNameWithLatin1Chars("length_squared")
	defer methodName3.Destroy()
	log.Debug("globalVector4MethodBindings.method_length_squared")
	globalVector4MethodBindings.method_length_squared = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName3.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector4MethodBindings.method_length_squared == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_length_squared")
	}
	methodName4 := NewStringNameWithLatin1Chars("abs")
	defer methodName4.Destroy()
	log.Debug("globalVector4MethodBindings.method_abs")
	globalVector4MethodBindings.method_abs = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName4.AsGDExtensionStringNamePtr(), 80860099)
	if globalVector4MethodBindings.method_abs == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_abs")
	}
	methodName5 := NewStringNameWithLatin1Chars("sign")
	defer methodName5.Destroy()
	log.Debug("globalVector4MethodBindings.method_sign")
	globalVector4MethodBindings.method_sign = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName5.AsGDExtensionStringNamePtr(), 80860099)
	if globalVector4MethodBindings.method_sign == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_sign")
	}
	methodName6 := NewStringNameWithLatin1Chars("floor")
	defer methodName6.Destroy()
	log.Debug("globalVector4MethodBindings.method_floor")
	globalVector4MethodBindings.method_floor = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName6.AsGDExtensionStringNamePtr(), 80860099)
	if globalVector4MethodBindings.method_floor == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_floor")
	}
	methodName7 := NewStringNameWithLatin1Chars("ceil")
	defer methodName7.Destroy()
	log.Debug("globalVector4MethodBindings.method_ceil")
	globalVector4MethodBindings.method_ceil = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName7.AsGDExtensionStringNamePtr(), 80860099)
	if globalVector4MethodBindings.method_ceil == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_ceil")
	}
	methodName8 := NewStringNameWithLatin1Chars("round")
	defer methodName8.Destroy()
	log.Debug("globalVector4MethodBindings.method_round")
	globalVector4MethodBindings.method_round = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName8.AsGDExtensionStringNamePtr(), 80860099)
	if globalVector4MethodBindings.method_round == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_round")
	}
	methodName9 := NewStringNameWithLatin1Chars("lerp")
	defer methodName9.Destroy()
	log.Debug("globalVector4MethodBindings.method_lerp")
	globalVector4MethodBindings.method_lerp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName9.AsGDExtensionStringNamePtr(), 2329757942)
	if globalVector4MethodBindings.method_lerp == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_lerp")
	}
	methodName10 := NewStringNameWithLatin1Chars("cubic_interpolate")
	defer methodName10.Destroy()
	log.Debug("globalVector4MethodBindings.method_cubic_interpolate")
	globalVector4MethodBindings.method_cubic_interpolate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName10.AsGDExtensionStringNamePtr(), 726768410)
	if globalVector4MethodBindings.method_cubic_interpolate == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_cubic_interpolate")
	}
	methodName11 := NewStringNameWithLatin1Chars("cubic_interpolate_in_time")
	defer methodName11.Destroy()
	log.Debug("globalVector4MethodBindings.method_cubic_interpolate_in_time")
	globalVector4MethodBindings.method_cubic_interpolate_in_time = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName11.AsGDExtensionStringNamePtr(), 681631873)
	if globalVector4MethodBindings.method_cubic_interpolate_in_time == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_cubic_interpolate_in_time")
	}
	methodName12 := NewStringNameWithLatin1Chars("posmod")
	defer methodName12.Destroy()
	log.Debug("globalVector4MethodBindings.method_posmod")
	globalVector4MethodBindings.method_posmod = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName12.AsGDExtensionStringNamePtr(), 3129671720)
	if globalVector4MethodBindings.method_posmod == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_posmod")
	}
	methodName13 := NewStringNameWithLatin1Chars("posmodv")
	defer methodName13.Destroy()
	log.Debug("globalVector4MethodBindings.method_posmodv")
	globalVector4MethodBindings.method_posmodv = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName13.AsGDExtensionStringNamePtr(), 2031281584)
	if globalVector4MethodBindings.method_posmodv == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_posmodv")
	}
	methodName14 := NewStringNameWithLatin1Chars("snapped")
	defer methodName14.Destroy()
	log.Debug("globalVector4MethodBindings.method_snapped")
	globalVector4MethodBindings.method_snapped = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName14.AsGDExtensionStringNamePtr(), 2031281584)
	if globalVector4MethodBindings.method_snapped == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_snapped")
	}
	methodName15 := NewStringNameWithLatin1Chars("clamp")
	defer methodName15.Destroy()
	log.Debug("globalVector4MethodBindings.method_clamp")
	globalVector4MethodBindings.method_clamp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName15.AsGDExtensionStringNamePtr(), 823915692)
	if globalVector4MethodBindings.method_clamp == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_clamp")
	}
	methodName16 := NewStringNameWithLatin1Chars("normalized")
	defer methodName16.Destroy()
	log.Debug("globalVector4MethodBindings.method_normalized")
	globalVector4MethodBindings.method_normalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName16.AsGDExtensionStringNamePtr(), 80860099)
	if globalVector4MethodBindings.method_normalized == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_normalized")
	}
	methodName17 := NewStringNameWithLatin1Chars("is_normalized")
	defer methodName17.Destroy()
	log.Debug("globalVector4MethodBindings.method_is_normalized")
	globalVector4MethodBindings.method_is_normalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName17.AsGDExtensionStringNamePtr(), 3918633141)
	if globalVector4MethodBindings.method_is_normalized == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_is_normalized")
	}
	methodName18 := NewStringNameWithLatin1Chars("direction_to")
	defer methodName18.Destroy()
	log.Debug("globalVector4MethodBindings.method_direction_to")
	globalVector4MethodBindings.method_direction_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName18.AsGDExtensionStringNamePtr(), 2031281584)
	if globalVector4MethodBindings.method_direction_to == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_direction_to")
	}
	methodName19 := NewStringNameWithLatin1Chars("distance_to")
	defer methodName19.Destroy()
	log.Debug("globalVector4MethodBindings.method_distance_to")
	globalVector4MethodBindings.method_distance_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName19.AsGDExtensionStringNamePtr(), 3770801042)
	if globalVector4MethodBindings.method_distance_to == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_distance_to")
	}
	methodName20 := NewStringNameWithLatin1Chars("distance_squared_to")
	defer methodName20.Destroy()
	log.Debug("globalVector4MethodBindings.method_distance_squared_to")
	globalVector4MethodBindings.method_distance_squared_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName20.AsGDExtensionStringNamePtr(), 3770801042)
	if globalVector4MethodBindings.method_distance_squared_to == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_distance_squared_to")
	}
	methodName21 := NewStringNameWithLatin1Chars("dot")
	defer methodName21.Destroy()
	log.Debug("globalVector4MethodBindings.method_dot")
	globalVector4MethodBindings.method_dot = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName21.AsGDExtensionStringNamePtr(), 3770801042)
	if globalVector4MethodBindings.method_dot == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_dot")
	}
	methodName22 := NewStringNameWithLatin1Chars("inverse")
	defer methodName22.Destroy()
	log.Debug("globalVector4MethodBindings.method_inverse")
	globalVector4MethodBindings.method_inverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName22.AsGDExtensionStringNamePtr(), 80860099)
	if globalVector4MethodBindings.method_inverse == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_inverse")
	}
	methodName23 := NewStringNameWithLatin1Chars("is_equal_approx")
	defer methodName23.Destroy()
	log.Debug("globalVector4MethodBindings.method_is_equal_approx")
	globalVector4MethodBindings.method_is_equal_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName23.AsGDExtensionStringNamePtr(), 88913544)
	if globalVector4MethodBindings.method_is_equal_approx == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_is_equal_approx")
	}
	methodName24 := NewStringNameWithLatin1Chars("is_zero_approx")
	defer methodName24.Destroy()
	log.Debug("globalVector4MethodBindings.method_is_zero_approx")
	globalVector4MethodBindings.method_is_zero_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName24.AsGDExtensionStringNamePtr(), 3918633141)
	if globalVector4MethodBindings.method_is_zero_approx == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_is_zero_approx")
	}
	methodName25 := NewStringNameWithLatin1Chars("is_finite")
	defer methodName25.Destroy()
	log.Debug("globalVector4MethodBindings.method_is_finite")
	globalVector4MethodBindings.method_is_finite = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, methodName25.AsGDExtensionStringNamePtr(), 3918633141)
	if globalVector4MethodBindings.method_is_finite == nil {
		missingMethods = append(missingMethods, "globalVector4MethodBindings.method_is_finite")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("x")
	defer memberName0.Destroy()
	log.Debug("globalVector4MethodBindings.member_x_setter")
	globalVector4MethodBindings.member_x_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalVector4MethodBindings.member_x_getter")
	globalVector4MethodBindings.member_x_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("y")
	defer memberName1.Destroy()
	log.Debug("globalVector4MethodBindings.member_y_setter")
	globalVector4MethodBindings.member_y_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalVector4MethodBindings.member_y_getter")
	globalVector4MethodBindings.member_y_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("z")
	defer memberName2.Destroy()
	log.Debug("globalVector4MethodBindings.member_z_setter")
	globalVector4MethodBindings.member_z_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalVector4MethodBindings.member_z_getter")
	globalVector4MethodBindings.member_z_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, memberName2.AsGDExtensionStringNamePtr())
	memberName3 := NewStringNameWithLatin1Chars("w")
	defer memberName3.Destroy()
	log.Debug("globalVector4MethodBindings.member_w_setter")
	globalVector4MethodBindings.member_w_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, memberName3.AsGDExtensionStringNamePtr())
	log.Debug("globalVector4MethodBindings.member_w_getter")
	globalVector4MethodBindings.member_w_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4, memberName3.AsGDExtensionStringNamePtr())
	log.Debug("globalVector4MethodBindings.indexed_setter")
	globalVector4MethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.indexed_getter")
	globalVector4MethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.operator: equal Variant")
	globalVector4MethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector4MethodBindings.operator: not_equal Variant")
	globalVector4MethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector4MethodBindings.operator: negate ")
	globalVector4MethodBindings.operator_negate = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NEGATE, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector4MethodBindings.operator: positive ")
	globalVector4MethodBindings.operator_positive = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_POSITIVE, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector4MethodBindings.operator: multiply int")
	globalVector4MethodBindings.operator_multiply_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector4MethodBindings.operator: divide int")
	globalVector4MethodBindings.operator_divide_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector4MethodBindings.operator: multiply float")
	globalVector4MethodBindings.operator_multiply_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector4MethodBindings.operator: divide float")
	globalVector4MethodBindings.operator_divide_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector4MethodBindings.operator: equal Vector4")
	globalVector4MethodBindings.operator_equal_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.operator: not_equal Vector4")
	globalVector4MethodBindings.operator_not_equal_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.operator: less Vector4")
	globalVector4MethodBindings.operator_less_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.operator: less_equal Vector4")
	globalVector4MethodBindings.operator_less_equal_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.operator: greater Vector4")
	globalVector4MethodBindings.operator_greater_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.operator: greater_equal Vector4")
	globalVector4MethodBindings.operator_greater_equal_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.operator: add Vector4")
	globalVector4MethodBindings.operator_add_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.operator: subtract Vector4")
	globalVector4MethodBindings.operator_subtract_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_SUBTRACT, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.operator: multiply Vector4")
	globalVector4MethodBindings.operator_multiply_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.operator: divide Vector4")
	globalVector4MethodBindings.operator_divide_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalVector4MethodBindings.operator: multiply Projection")
	globalVector4MethodBindings.operator_multiply_Projection = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_PROJECTION)
	log.Debug("globalVector4MethodBindings.operator: in Dictionary")
	globalVector4MethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalVector4MethodBindings.operator: in Array")
	globalVector4MethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR4, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("vector4InitBindings end")
}

func (c *Vector4) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector4, index: 0
func NewVector4() Vector4 {
	cx := Vector4{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalVector4MethodBindings.constructor_0, ptr)

	return cx
}

// NewVector4, index: 1
func NewVector4WithVector4(from Vector4) Vector4 {
	cx := Vector4{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector4
	// Vector4Encoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector4MethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewVector4, index: 2
func NewVector4WithVector4i(from Vector4i) Vector4 {
	cx := Vector4{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector4i
	// Vector4iEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector4MethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewVector4, index: 3
func NewVector4WithFloat32Float32Float32Float32(x float32, y float32, z float32, w float32) Vector4 {
	cx := Vector4{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [4]GDExtensionConstTypePtr

	// float
	eArg0 := Float32Encoder.EncodeArg(x)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// float
	eArg1 := Float32Encoder.EncodeArg(y)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))

	// float
	eArg2 := Float32Encoder.EncodeArg(z)
	args[2] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg2))

	// float
	eArg3 := Float32Encoder.EncodeArg(w)
	args[3] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg3))
	callBuiltinConstructor(globalVector4MethodBindings.constructor_3, ptr, args[0], args[1], args[2], args[3])

	return cx
}

// methods

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector4) MinAxisIndex() int32 {
	mb := globalVector4MethodBindings.method_min_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector4) MaxAxisIndex() int32 {
	mb := globalVector4MethodBindings.method_max_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) Length() float32 {
	mb := globalVector4MethodBindings.method_length

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) LengthSquared() float32 {
	mb := globalVector4MethodBindings.method_length_squared

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Abs() Vector4 {
	mb := globalVector4MethodBindings.method_abs

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret

}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Sign() Vector4 {
	mb := globalVector4MethodBindings.method_sign

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret

}

/* Floor : floor
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Floor() Vector4 {
	mb := globalVector4MethodBindings.method_floor

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret

}

/* Ceil : ceil
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Ceil() Vector4 {
	mb := globalVector4MethodBindings.method_ceil

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret

}

/* Round : round
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Round() Vector4 {
	mb := globalVector4MethodBindings.method_round

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret

}

/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Lerp(to Vector4, weight float32) Vector4 {
	mb := globalVector4MethodBindings.method_lerp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	eArg1 := Float32Encoder.EncodeArg(weight)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CubicInterpolate : cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) CubicInterpolate(b Vector4, pre_a Vector4, post_b Vector4, weight float32) Vector4 {
	mb := globalVector4MethodBindings.method_cubic_interpolate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&b))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&pre_a))

	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&post_b))

	eArg3 := Float32Encoder.EncodeArg(weight)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CubicInterpolateInTime : cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) CubicInterpolateInTime(b Vector4, pre_a Vector4, post_b Vector4, weight float32, b_t float32, pre_a_t float32, post_b_t float32) Vector4 {
	mb := globalVector4MethodBindings.method_cubic_interpolate_in_time

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 7
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&b))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&pre_a))

	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&post_b))

	eArg3 := Float32Encoder.EncodeArg(weight)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	eArg4 := Float32Encoder.EncodeArg(b_t)
	args[4] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg4))

	eArg5 := Float32Encoder.EncodeArg(pre_a_t)
	args[5] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg5))

	eArg6 := Float32Encoder.EncodeArg(post_b_t)
	args[6] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg6))

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Posmod : posmod
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Posmod(mod float32) Vector4 {
	mb := globalVector4MethodBindings.method_posmod

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(mod)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Posmodv : posmodv
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Posmodv(modv Vector4) Vector4 {
	mb := globalVector4MethodBindings.method_posmodv

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&modv))

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Snapped(step Vector4) Vector4 {
	mb := globalVector4MethodBindings.method_snapped

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&step))

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Clamp(min Vector4, max Vector4) Vector4 {
	mb := globalVector4MethodBindings.method_clamp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&min))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&max))

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Normalized() Vector4 {
	mb := globalVector4MethodBindings.method_normalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret

}

/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector4) IsNormalized() bool {
	mb := globalVector4MethodBindings.method_is_normalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* DirectionTo : direction_to
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) DirectionTo(to Vector4) Vector4 {
	mb := globalVector4MethodBindings.method_direction_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) DistanceTo(to Vector4) float32 {
	mb := globalVector4MethodBindings.method_distance_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) DistanceSquaredTo(to Vector4) float32 {
	mb := globalVector4MethodBindings.method_distance_squared_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) Dot(with Vector4) float32 {
	mb := globalVector4MethodBindings.method_dot

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Inverse() Vector4 {
	mb := globalVector4MethodBindings.method_inverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret

}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector4) IsEqualApprox(with Vector4) bool {
	mb := globalVector4MethodBindings.method_is_equal_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsZeroApprox : is_zero_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector4) IsZeroApprox() bool {
	mb := globalVector4MethodBindings.method_is_zero_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector4) IsFinite() bool {
	mb := globalVector4MethodBindings.method_is_finite

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

// members

func (cx *Vector4) MemberGetx() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalVector4MethodBindings.member_x_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Vector4) MemberGety() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalVector4MethodBindings.member_y_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Vector4) MemberGetz() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalVector4MethodBindings.member_z_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Vector4) MemberGetw() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalVector4MethodBindings.member_w_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

// Equal_Variant operator
func (cx *Vector4) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector4) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector4) Negate() Vector4 {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector4) Positive() Vector4 {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_positive, lt, rt)
}

// Multiply_int operator
func (cx *Vector4) Multiply_int(right int32) Vector4 {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector4) Divide_int(right int32) Vector4 {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector4) Multiply_float(right float32) Vector4 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector4) Divide_float(right float32) Vector4 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector4 operator
func (cx *Vector4) Equal_Vector4(right Vector4) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_equal_Vector4, lt, rt)
}

// Not_equal_Vector4 operator
func (cx *Vector4) Not_equal_Vector4(right Vector4) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_not_equal_Vector4, lt, rt)
}

// Less_Vector4 operator
func (cx *Vector4) Less_Vector4(right Vector4) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_less_Vector4, lt, rt)
}

// Less_equal_Vector4 operator
func (cx *Vector4) Less_equal_Vector4(right Vector4) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_less_equal_Vector4, lt, rt)
}

// Greater_Vector4 operator
func (cx *Vector4) Greater_Vector4(right Vector4) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_greater_Vector4, lt, rt)
}

// Greater_equal_Vector4 operator
func (cx *Vector4) Greater_equal_Vector4(right Vector4) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_greater_equal_Vector4, lt, rt)
}

// Add_Vector4 operator
func (cx *Vector4) Add_Vector4(right Vector4) Vector4 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_add_Vector4, lt, rt)
}

// Subtract_Vector4 operator
func (cx *Vector4) Subtract_Vector4(right Vector4) Vector4 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_subtract_Vector4, lt, rt)
}

// Multiply_Vector4 operator
func (cx *Vector4) Multiply_Vector4(right Vector4) Vector4 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_Vector4, lt, rt)
}

// Divide_Vector4 operator
func (cx *Vector4) Divide_Vector4(right Vector4) Vector4 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_divide_Vector4, lt, rt)
}

// Multiply_Projection operator
func (cx *Vector4) Multiply_Projection(right Projection) Vector4 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_Projection, lt, rt)
}

// In_Dictionary operator
func (cx *Vector4) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector4) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_in_Array, lt, rt)
}

/*
 * Vector4i
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: false
 */
type Vector4i struct {
	opaque [16]uint8
}

type vector4iMethodBindings struct {
	constructor_0                   GDExtensionPtrConstructor
	constructor_1                   GDExtensionPtrConstructor
	constructor_2                   GDExtensionPtrConstructor
	constructor_3                   GDExtensionPtrConstructor
	method_min_axis_index           GDExtensionPtrBuiltInMethod
	method_max_axis_index           GDExtensionPtrBuiltInMethod
	method_length                   GDExtensionPtrBuiltInMethod
	method_length_squared           GDExtensionPtrBuiltInMethod
	method_sign                     GDExtensionPtrBuiltInMethod
	method_abs                      GDExtensionPtrBuiltInMethod
	method_clamp                    GDExtensionPtrBuiltInMethod
	method_snapped                  GDExtensionPtrBuiltInMethod
	member_x_setter                 GDExtensionPtrSetter
	member_x_getter                 GDExtensionPtrGetter
	member_y_setter                 GDExtensionPtrSetter
	member_y_getter                 GDExtensionPtrGetter
	member_z_setter                 GDExtensionPtrSetter
	member_z_getter                 GDExtensionPtrGetter
	member_w_setter                 GDExtensionPtrSetter
	member_w_getter                 GDExtensionPtrGetter
	indexed_setter                  GDExtensionPtrIndexedSetter
	indexed_getter                  GDExtensionPtrIndexedGetter
	operator_equal_Variant          GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant      GDExtensionPtrOperatorEvaluator
	operator_negate                 GDExtensionPtrOperatorEvaluator
	operator_positive               GDExtensionPtrOperatorEvaluator
	operator_multiply_int           GDExtensionPtrOperatorEvaluator
	operator_divide_int             GDExtensionPtrOperatorEvaluator
	operator_module_int             GDExtensionPtrOperatorEvaluator
	operator_multiply_float         GDExtensionPtrOperatorEvaluator
	operator_divide_float           GDExtensionPtrOperatorEvaluator
	operator_equal_Vector4i         GDExtensionPtrOperatorEvaluator
	operator_not_equal_Vector4i     GDExtensionPtrOperatorEvaluator
	operator_less_Vector4i          GDExtensionPtrOperatorEvaluator
	operator_less_equal_Vector4i    GDExtensionPtrOperatorEvaluator
	operator_greater_Vector4i       GDExtensionPtrOperatorEvaluator
	operator_greater_equal_Vector4i GDExtensionPtrOperatorEvaluator
	operator_add_Vector4i           GDExtensionPtrOperatorEvaluator
	operator_subtract_Vector4i      GDExtensionPtrOperatorEvaluator
	operator_multiply_Vector4i      GDExtensionPtrOperatorEvaluator
	operator_divide_Vector4i        GDExtensionPtrOperatorEvaluator
	operator_module_Vector4i        GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary          GDExtensionPtrOperatorEvaluator
	operator_in_Array               GDExtensionPtrOperatorEvaluator
}

var globalVector4iMethodBindings vector4iMethodBindings

func vector4iInitConstructorBindings() {
	log.Debug("vector4iInitConstructorBindings called")

	log.Debug("globalVector4iMethodBindings.constructor_0")
	globalVector4iMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, 0)
	log.Debug("globalVector4iMethodBindings.constructor_1")
	globalVector4iMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, 1)
	log.Debug("globalVector4iMethodBindings.constructor_2")
	globalVector4iMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, 2)
	log.Debug("globalVector4iMethodBindings.constructor_3")
	globalVector4iMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, 3)
}

func vector4iInitMethodBindings() {
	log.Debug("vector4iInitMethodBindings called")

	missingMethods := make([]string, 0, 8)

	methodName0 := NewStringNameWithLatin1Chars("min_axis_index")
	defer methodName0.Destroy()
	log.Debug("globalVector4iMethodBindings.method_min_axis_index")
	globalVector4iMethodBindings.method_min_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector4iMethodBindings.method_min_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector4iMethodBindings.method_min_axis_index")
	}
	methodName1 := NewStringNameWithLatin1Chars("max_axis_index")
	defer methodName1.Destroy()
	log.Debug("globalVector4iMethodBindings.method_max_axis_index")
	globalVector4iMethodBindings.method_max_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, methodName1.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector4iMethodBindings.method_max_axis_index == nil {
		missingMethods = append(missingMethods, "globalVector4iMethodBindings.method_max_axis_index")
	}
	methodName2 := NewStringNameWithLatin1Chars("length")
	defer methodName2.Destroy()
	log.Debug("globalVector4iMethodBindings.method_length")
	globalVector4iMethodBindings.method_length = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, methodName2.AsGDExtensionStringNamePtr(), 466405837)
	if globalVector4iMethodBindings.method_length == nil {
		missingMethods = append(missingMethods, "globalVector4iMethodBindings.method_length")
	}
	methodName3 := NewStringNameWithLatin1Chars("length_squared")
	defer methodName3.Destroy()
	log.Debug("globalVector4iMethodBindings.method_length_squared")
	globalVector4iMethodBindings.method_length_squared = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, methodName3.AsGDExtensionStringNamePtr(), 3173160232)
	if globalVector4iMethodBindings.method_length_squared == nil {
		missingMethods = append(missingMethods, "globalVector4iMethodBindings.method_length_squared")
	}
	methodName4 := NewStringNameWithLatin1Chars("sign")
	defer methodName4.Destroy()
	log.Debug("globalVector4iMethodBindings.method_sign")
	globalVector4iMethodBindings.method_sign = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, methodName4.AsGDExtensionStringNamePtr(), 4134919947)
	if globalVector4iMethodBindings.method_sign == nil {
		missingMethods = append(missingMethods, "globalVector4iMethodBindings.method_sign")
	}
	methodName5 := NewStringNameWithLatin1Chars("abs")
	defer methodName5.Destroy()
	log.Debug("globalVector4iMethodBindings.method_abs")
	globalVector4iMethodBindings.method_abs = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, methodName5.AsGDExtensionStringNamePtr(), 4134919947)
	if globalVector4iMethodBindings.method_abs == nil {
		missingMethods = append(missingMethods, "globalVector4iMethodBindings.method_abs")
	}
	methodName6 := NewStringNameWithLatin1Chars("clamp")
	defer methodName6.Destroy()
	log.Debug("globalVector4iMethodBindings.method_clamp")
	globalVector4iMethodBindings.method_clamp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, methodName6.AsGDExtensionStringNamePtr(), 3046490913)
	if globalVector4iMethodBindings.method_clamp == nil {
		missingMethods = append(missingMethods, "globalVector4iMethodBindings.method_clamp")
	}
	methodName7 := NewStringNameWithLatin1Chars("snapped")
	defer methodName7.Destroy()
	log.Debug("globalVector4iMethodBindings.method_snapped")
	globalVector4iMethodBindings.method_snapped = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, methodName7.AsGDExtensionStringNamePtr(), 1181693102)
	if globalVector4iMethodBindings.method_snapped == nil {
		missingMethods = append(missingMethods, "globalVector4iMethodBindings.method_snapped")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("x")
	defer memberName0.Destroy()
	log.Debug("globalVector4iMethodBindings.member_x_setter")
	globalVector4iMethodBindings.member_x_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalVector4iMethodBindings.member_x_getter")
	globalVector4iMethodBindings.member_x_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("y")
	defer memberName1.Destroy()
	log.Debug("globalVector4iMethodBindings.member_y_setter")
	globalVector4iMethodBindings.member_y_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalVector4iMethodBindings.member_y_getter")
	globalVector4iMethodBindings.member_y_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("z")
	defer memberName2.Destroy()
	log.Debug("globalVector4iMethodBindings.member_z_setter")
	globalVector4iMethodBindings.member_z_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalVector4iMethodBindings.member_z_getter")
	globalVector4iMethodBindings.member_z_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, memberName2.AsGDExtensionStringNamePtr())
	memberName3 := NewStringNameWithLatin1Chars("w")
	defer memberName3.Destroy()
	log.Debug("globalVector4iMethodBindings.member_w_setter")
	globalVector4iMethodBindings.member_w_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, memberName3.AsGDExtensionStringNamePtr())
	log.Debug("globalVector4iMethodBindings.member_w_getter")
	globalVector4iMethodBindings.member_w_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I, memberName3.AsGDExtensionStringNamePtr())
	log.Debug("globalVector4iMethodBindings.indexed_setter")
	globalVector4iMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.indexed_getter")
	globalVector4iMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: equal Variant")
	globalVector4iMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector4iMethodBindings.operator: not_equal Variant")
	globalVector4iMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector4iMethodBindings.operator: negate ")
	globalVector4iMethodBindings.operator_negate = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NEGATE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector4iMethodBindings.operator: positive ")
	globalVector4iMethodBindings.operator_positive = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_POSITIVE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalVector4iMethodBindings.operator: multiply int")
	globalVector4iMethodBindings.operator_multiply_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector4iMethodBindings.operator: divide int")
	globalVector4iMethodBindings.operator_divide_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector4iMethodBindings.operator: module int")
	globalVector4iMethodBindings.operator_module_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalVector4iMethodBindings.operator: multiply float")
	globalVector4iMethodBindings.operator_multiply_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector4iMethodBindings.operator: divide float")
	globalVector4iMethodBindings.operator_divide_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalVector4iMethodBindings.operator: equal Vector4i")
	globalVector4iMethodBindings.operator_equal_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: not_equal Vector4i")
	globalVector4iMethodBindings.operator_not_equal_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: less Vector4i")
	globalVector4iMethodBindings.operator_less_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: less_equal Vector4i")
	globalVector4iMethodBindings.operator_less_equal_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: greater Vector4i")
	globalVector4iMethodBindings.operator_greater_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: greater_equal Vector4i")
	globalVector4iMethodBindings.operator_greater_equal_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: add Vector4i")
	globalVector4iMethodBindings.operator_add_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: subtract Vector4i")
	globalVector4iMethodBindings.operator_subtract_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_SUBTRACT, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: multiply Vector4i")
	globalVector4iMethodBindings.operator_multiply_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: divide Vector4i")
	globalVector4iMethodBindings.operator_divide_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: module Vector4i")
	globalVector4iMethodBindings.operator_module_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalVector4iMethodBindings.operator: in Dictionary")
	globalVector4iMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalVector4iMethodBindings.operator: in Array")
	globalVector4iMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("vector4iInitBindings end")
}

func (c *Vector4i) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector4i, index: 0
func NewVector4i() Vector4i {
	cx := Vector4i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalVector4iMethodBindings.constructor_0, ptr)

	return cx
}

// NewVector4i, index: 1
func NewVector4iWithVector4i(from Vector4i) Vector4i {
	cx := Vector4i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector4i
	// Vector4iEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector4iMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewVector4i, index: 2
func NewVector4iWithVector4(from Vector4) Vector4i {
	cx := Vector4i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector4
	// Vector4Encoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalVector4iMethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewVector4i, index: 3
func NewVector4iWithInt32Int32Int32Int32(x int32, y int32, z int32, w int32) Vector4i {
	cx := Vector4i{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [4]GDExtensionConstTypePtr

	// int
	eArg0 := Int32Encoder.EncodeArg(x)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// int
	eArg1 := Int32Encoder.EncodeArg(y)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))

	// int
	eArg2 := Int32Encoder.EncodeArg(z)
	args[2] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg2))

	// int
	eArg3 := Int32Encoder.EncodeArg(w)
	args[3] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg3))
	callBuiltinConstructor(globalVector4iMethodBindings.constructor_3, ptr, args[0], args[1], args[2], args[3])

	return cx
}

// methods

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector4i) MinAxisIndex() int32 {
	mb := globalVector4iMethodBindings.method_min_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector4i) MaxAxisIndex() int32 {
	mb := globalVector4iMethodBindings.method_max_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4i) Length() float32 {
	mb := globalVector4iMethodBindings.method_length

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Vector4i) LengthSquared() int32 {
	mb := globalVector4iMethodBindings.method_length_squared

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Sign() Vector4i {
	mb := globalVector4iMethodBindings.method_sign

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector4i](mb, bx, nil)
	return ret

}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Abs() Vector4i {
	mb := globalVector4iMethodBindings.method_abs

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector4i](mb, bx, nil)
	return ret

}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Clamp(min Vector4i, max Vector4i) Vector4i {
	mb := globalVector4iMethodBindings.method_clamp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&min))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&max))

	ret := callBuiltinMethodPtrRet[Vector4i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Snapped(step Vector4i) Vector4i {
	mb := globalVector4iMethodBindings.method_snapped

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&step))

	ret := callBuiltinMethodPtrRet[Vector4i](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

func (cx *Vector4i) MemberGetx() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_x_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

func (cx *Vector4i) MemberGety() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_y_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

func (cx *Vector4i) MemberGetz() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_z_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

func (cx *Vector4i) MemberGetw() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_w_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

// Equal_Variant operator
func (cx *Vector4i) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector4i) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector4i) Negate() Vector4i {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector4i) Positive() Vector4i {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_positive, lt, rt)
}

// Multiply_int operator
func (cx *Vector4i) Multiply_int(right int32) Vector4i {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector4i) Divide_int(right int32) Vector4i {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_divide_int, lt, rt)
}

// Module_int operator
func (cx *Vector4i) Module_int(right int32) Vector4i {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_module_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector4i) Multiply_float(right float32) Vector4 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector4](globalVector4iMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector4i) Divide_float(right float32) Vector4 {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Vector4](globalVector4iMethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector4i operator
func (cx *Vector4i) Equal_Vector4i(right Vector4i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_equal_Vector4i, lt, rt)
}

// Not_equal_Vector4i operator
func (cx *Vector4i) Not_equal_Vector4i(right Vector4i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_not_equal_Vector4i, lt, rt)
}

// Less_Vector4i operator
func (cx *Vector4i) Less_Vector4i(right Vector4i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_less_Vector4i, lt, rt)
}

// Less_equal_Vector4i operator
func (cx *Vector4i) Less_equal_Vector4i(right Vector4i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_less_equal_Vector4i, lt, rt)
}

// Greater_Vector4i operator
func (cx *Vector4i) Greater_Vector4i(right Vector4i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_greater_Vector4i, lt, rt)
}

// Greater_equal_Vector4i operator
func (cx *Vector4i) Greater_equal_Vector4i(right Vector4i) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_greater_equal_Vector4i, lt, rt)
}

// Add_Vector4i operator
func (cx *Vector4i) Add_Vector4i(right Vector4i) Vector4i {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_add_Vector4i, lt, rt)
}

// Subtract_Vector4i operator
func (cx *Vector4i) Subtract_Vector4i(right Vector4i) Vector4i {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_subtract_Vector4i, lt, rt)
}

// Multiply_Vector4i operator
func (cx *Vector4i) Multiply_Vector4i(right Vector4i) Vector4i {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_multiply_Vector4i, lt, rt)
}

// Divide_Vector4i operator
func (cx *Vector4i) Divide_Vector4i(right Vector4i) Vector4i {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_divide_Vector4i, lt, rt)
}

// Module_Vector4i operator
func (cx *Vector4i) Module_Vector4i(right Vector4i) Vector4i {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_module_Vector4i, lt, rt)
}

// In_Dictionary operator
func (cx *Vector4i) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector4i) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_in_Array, lt, rt)
}

/*
 * Plane
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type Plane struct {
	opaque [16]uint8
}

type planeMethodBindings struct {
	constructor_0                 GDExtensionPtrConstructor
	constructor_1                 GDExtensionPtrConstructor
	constructor_2                 GDExtensionPtrConstructor
	constructor_3                 GDExtensionPtrConstructor
	constructor_4                 GDExtensionPtrConstructor
	constructor_5                 GDExtensionPtrConstructor
	constructor_6                 GDExtensionPtrConstructor
	method_normalized             GDExtensionPtrBuiltInMethod
	method_get_center             GDExtensionPtrBuiltInMethod
	method_is_equal_approx        GDExtensionPtrBuiltInMethod
	method_is_finite              GDExtensionPtrBuiltInMethod
	method_is_point_over          GDExtensionPtrBuiltInMethod
	method_distance_to            GDExtensionPtrBuiltInMethod
	method_has_point              GDExtensionPtrBuiltInMethod
	method_project                GDExtensionPtrBuiltInMethod
	method_intersect_3            GDExtensionPtrBuiltInMethod
	method_intersects_ray         GDExtensionPtrBuiltInMethod
	method_intersects_segment     GDExtensionPtrBuiltInMethod
	member_x_setter               GDExtensionPtrSetter
	member_x_getter               GDExtensionPtrGetter
	member_y_setter               GDExtensionPtrSetter
	member_y_getter               GDExtensionPtrGetter
	member_z_setter               GDExtensionPtrSetter
	member_z_getter               GDExtensionPtrGetter
	member_d_setter               GDExtensionPtrSetter
	member_d_getter               GDExtensionPtrGetter
	member_normal_setter          GDExtensionPtrSetter
	member_normal_getter          GDExtensionPtrGetter
	operator_equal_Variant        GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant    GDExtensionPtrOperatorEvaluator
	operator_negate               GDExtensionPtrOperatorEvaluator
	operator_positive             GDExtensionPtrOperatorEvaluator
	operator_equal_Plane          GDExtensionPtrOperatorEvaluator
	operator_not_equal_Plane      GDExtensionPtrOperatorEvaluator
	operator_multiply_Transform3D GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary        GDExtensionPtrOperatorEvaluator
	operator_in_Array             GDExtensionPtrOperatorEvaluator
}

var globalPlaneMethodBindings planeMethodBindings

func planeInitConstructorBindings() {
	log.Debug("planeInitConstructorBindings called")

	log.Debug("globalPlaneMethodBindings.constructor_0")
	globalPlaneMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, 0)
	log.Debug("globalPlaneMethodBindings.constructor_1")
	globalPlaneMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, 1)
	log.Debug("globalPlaneMethodBindings.constructor_2")
	globalPlaneMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, 2)
	log.Debug("globalPlaneMethodBindings.constructor_3")
	globalPlaneMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, 3)
	log.Debug("globalPlaneMethodBindings.constructor_4")
	globalPlaneMethodBindings.constructor_4 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, 4)
	log.Debug("globalPlaneMethodBindings.constructor_5")
	globalPlaneMethodBindings.constructor_5 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, 5)
	log.Debug("globalPlaneMethodBindings.constructor_6")
	globalPlaneMethodBindings.constructor_6 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, 6)
}

func planeInitMethodBindings() {
	log.Debug("planeInitMethodBindings called")

	missingMethods := make([]string, 0, 11)

	methodName0 := NewStringNameWithLatin1Chars("normalized")
	defer methodName0.Destroy()
	log.Debug("globalPlaneMethodBindings.method_normalized")
	globalPlaneMethodBindings.method_normalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, methodName0.AsGDExtensionStringNamePtr(), 1051796340)
	if globalPlaneMethodBindings.method_normalized == nil {
		missingMethods = append(missingMethods, "globalPlaneMethodBindings.method_normalized")
	}
	methodName1 := NewStringNameWithLatin1Chars("get_center")
	defer methodName1.Destroy()
	log.Debug("globalPlaneMethodBindings.method_get_center")
	globalPlaneMethodBindings.method_get_center = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, methodName1.AsGDExtensionStringNamePtr(), 1776574132)
	if globalPlaneMethodBindings.method_get_center == nil {
		missingMethods = append(missingMethods, "globalPlaneMethodBindings.method_get_center")
	}
	methodName2 := NewStringNameWithLatin1Chars("is_equal_approx")
	defer methodName2.Destroy()
	log.Debug("globalPlaneMethodBindings.method_is_equal_approx")
	globalPlaneMethodBindings.method_is_equal_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, methodName2.AsGDExtensionStringNamePtr(), 1150170233)
	if globalPlaneMethodBindings.method_is_equal_approx == nil {
		missingMethods = append(missingMethods, "globalPlaneMethodBindings.method_is_equal_approx")
	}
	methodName3 := NewStringNameWithLatin1Chars("is_finite")
	defer methodName3.Destroy()
	log.Debug("globalPlaneMethodBindings.method_is_finite")
	globalPlaneMethodBindings.method_is_finite = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, methodName3.AsGDExtensionStringNamePtr(), 3918633141)
	if globalPlaneMethodBindings.method_is_finite == nil {
		missingMethods = append(missingMethods, "globalPlaneMethodBindings.method_is_finite")
	}
	methodName4 := NewStringNameWithLatin1Chars("is_point_over")
	defer methodName4.Destroy()
	log.Debug("globalPlaneMethodBindings.method_is_point_over")
	globalPlaneMethodBindings.method_is_point_over = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, methodName4.AsGDExtensionStringNamePtr(), 1749054343)
	if globalPlaneMethodBindings.method_is_point_over == nil {
		missingMethods = append(missingMethods, "globalPlaneMethodBindings.method_is_point_over")
	}
	methodName5 := NewStringNameWithLatin1Chars("distance_to")
	defer methodName5.Destroy()
	log.Debug("globalPlaneMethodBindings.method_distance_to")
	globalPlaneMethodBindings.method_distance_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, methodName5.AsGDExtensionStringNamePtr(), 1047977935)
	if globalPlaneMethodBindings.method_distance_to == nil {
		missingMethods = append(missingMethods, "globalPlaneMethodBindings.method_distance_to")
	}
	methodName6 := NewStringNameWithLatin1Chars("has_point")
	defer methodName6.Destroy()
	log.Debug("globalPlaneMethodBindings.method_has_point")
	globalPlaneMethodBindings.method_has_point = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, methodName6.AsGDExtensionStringNamePtr(), 1258189072)
	if globalPlaneMethodBindings.method_has_point == nil {
		missingMethods = append(missingMethods, "globalPlaneMethodBindings.method_has_point")
	}
	methodName7 := NewStringNameWithLatin1Chars("project")
	defer methodName7.Destroy()
	log.Debug("globalPlaneMethodBindings.method_project")
	globalPlaneMethodBindings.method_project = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, methodName7.AsGDExtensionStringNamePtr(), 2923479887)
	if globalPlaneMethodBindings.method_project == nil {
		missingMethods = append(missingMethods, "globalPlaneMethodBindings.method_project")
	}
	methodName8 := NewStringNameWithLatin1Chars("intersect_3")
	defer methodName8.Destroy()
	log.Debug("globalPlaneMethodBindings.method_intersect_3")
	globalPlaneMethodBindings.method_intersect_3 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, methodName8.AsGDExtensionStringNamePtr(), 2012052692)
	if globalPlaneMethodBindings.method_intersect_3 == nil {
		missingMethods = append(missingMethods, "globalPlaneMethodBindings.method_intersect_3")
	}
	methodName9 := NewStringNameWithLatin1Chars("intersects_ray")
	defer methodName9.Destroy()
	log.Debug("globalPlaneMethodBindings.method_intersects_ray")
	globalPlaneMethodBindings.method_intersects_ray = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, methodName9.AsGDExtensionStringNamePtr(), 2048133369)
	if globalPlaneMethodBindings.method_intersects_ray == nil {
		missingMethods = append(missingMethods, "globalPlaneMethodBindings.method_intersects_ray")
	}
	methodName10 := NewStringNameWithLatin1Chars("intersects_segment")
	defer methodName10.Destroy()
	log.Debug("globalPlaneMethodBindings.method_intersects_segment")
	globalPlaneMethodBindings.method_intersects_segment = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, methodName10.AsGDExtensionStringNamePtr(), 2048133369)
	if globalPlaneMethodBindings.method_intersects_segment == nil {
		missingMethods = append(missingMethods, "globalPlaneMethodBindings.method_intersects_segment")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("x")
	defer memberName0.Destroy()
	log.Debug("globalPlaneMethodBindings.member_x_setter")
	globalPlaneMethodBindings.member_x_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalPlaneMethodBindings.member_x_getter")
	globalPlaneMethodBindings.member_x_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("y")
	defer memberName1.Destroy()
	log.Debug("globalPlaneMethodBindings.member_y_setter")
	globalPlaneMethodBindings.member_y_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalPlaneMethodBindings.member_y_getter")
	globalPlaneMethodBindings.member_y_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("z")
	defer memberName2.Destroy()
	log.Debug("globalPlaneMethodBindings.member_z_setter")
	globalPlaneMethodBindings.member_z_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalPlaneMethodBindings.member_z_getter")
	globalPlaneMethodBindings.member_z_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, memberName2.AsGDExtensionStringNamePtr())
	memberName3 := NewStringNameWithLatin1Chars("d")
	defer memberName3.Destroy()
	log.Debug("globalPlaneMethodBindings.member_d_setter")
	globalPlaneMethodBindings.member_d_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, memberName3.AsGDExtensionStringNamePtr())
	log.Debug("globalPlaneMethodBindings.member_d_getter")
	globalPlaneMethodBindings.member_d_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, memberName3.AsGDExtensionStringNamePtr())
	memberName4 := NewStringNameWithLatin1Chars("normal")
	defer memberName4.Destroy()
	log.Debug("globalPlaneMethodBindings.member_normal_setter")
	globalPlaneMethodBindings.member_normal_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, memberName4.AsGDExtensionStringNamePtr())
	log.Debug("globalPlaneMethodBindings.member_normal_getter")
	globalPlaneMethodBindings.member_normal_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PLANE, memberName4.AsGDExtensionStringNamePtr())
	log.Debug("globalPlaneMethodBindings.operator: equal Variant")
	globalPlaneMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PLANE, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPlaneMethodBindings.operator: not_equal Variant")
	globalPlaneMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PLANE, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPlaneMethodBindings.operator: negate ")
	globalPlaneMethodBindings.operator_negate = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NEGATE, GDEXTENSION_VARIANT_TYPE_PLANE, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPlaneMethodBindings.operator: positive ")
	globalPlaneMethodBindings.operator_positive = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_POSITIVE, GDEXTENSION_VARIANT_TYPE_PLANE, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPlaneMethodBindings.operator: equal Plane")
	globalPlaneMethodBindings.operator_equal_Plane = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PLANE, GDEXTENSION_VARIANT_TYPE_PLANE)
	log.Debug("globalPlaneMethodBindings.operator: not_equal Plane")
	globalPlaneMethodBindings.operator_not_equal_Plane = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PLANE, GDEXTENSION_VARIANT_TYPE_PLANE)
	log.Debug("globalPlaneMethodBindings.operator: multiply Transform3D")
	globalPlaneMethodBindings.operator_multiply_Transform3D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_PLANE, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D)
	log.Debug("globalPlaneMethodBindings.operator: in Dictionary")
	globalPlaneMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PLANE, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalPlaneMethodBindings.operator: in Array")
	globalPlaneMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PLANE, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("planeInitBindings end")
}

func (c *Plane) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPlane, index: 0
func NewPlane() Plane {
	cx := Plane{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalPlaneMethodBindings.constructor_0, ptr)

	return cx
}

// NewPlane, index: 1
func NewPlaneWithPlane(from Plane) Plane {
	cx := Plane{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Plane
	// PlaneEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPlaneMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewPlane, index: 2
func NewPlaneWithVector3(normal Vector3) Plane {
	cx := Plane{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(normal.ptr())
	callBuiltinConstructor(globalPlaneMethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewPlane, index: 3
func NewPlaneWithVector3Float32(normal Vector3, d float32) Plane {
	cx := Plane{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(normal.ptr())

	// float
	eArg1 := Float32Encoder.EncodeArg(d)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))
	callBuiltinConstructor(globalPlaneMethodBindings.constructor_3, ptr, args[0], args[1])

	return cx
}

// NewPlane, index: 4
func NewPlaneWithVector3Vector3(normal Vector3, point Vector3) Plane {
	cx := Plane{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(normal.ptr())

	// Vector3
	// Vector3Encoder
	args[1] = (GDExtensionConstTypePtr)(point.ptr())
	callBuiltinConstructor(globalPlaneMethodBindings.constructor_4, ptr, args[0], args[1])

	return cx
}

// NewPlane, index: 5
func NewPlaneWithVector3Vector3Vector3(point1 Vector3, point2 Vector3, point3 Vector3) Plane {
	cx := Plane{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [3]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(point1.ptr())

	// Vector3
	// Vector3Encoder
	args[1] = (GDExtensionConstTypePtr)(point2.ptr())

	// Vector3
	// Vector3Encoder
	args[2] = (GDExtensionConstTypePtr)(point3.ptr())
	callBuiltinConstructor(globalPlaneMethodBindings.constructor_5, ptr, args[0], args[1], args[2])

	return cx
}

// NewPlane, index: 6
func NewPlaneWithFloat32Float32Float32Float32(a float32, b float32, c float32, d float32) Plane {
	cx := Plane{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [4]GDExtensionConstTypePtr

	// float
	eArg0 := Float32Encoder.EncodeArg(a)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// float
	eArg1 := Float32Encoder.EncodeArg(b)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))

	// float
	eArg2 := Float32Encoder.EncodeArg(c)
	args[2] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg2))

	// float
	eArg3 := Float32Encoder.EncodeArg(d)
	args[3] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg3))
	callBuiltinConstructor(globalPlaneMethodBindings.constructor_6, ptr, args[0], args[1], args[2], args[3])

	return cx
}

// methods

/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Plane) -> Plane
 */
func (cx *Plane) Normalized() Plane {
	mb := globalPlaneMethodBindings.method_normalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Plane](mb, bx, nil)
	return ret

}

/* GetCenter : get_center
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Plane) GetCenter() Vector3 {
	mb := globalPlaneMethodBindings.method_get_center

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Plane) IsEqualApprox(to_plane Plane) bool {
	mb := globalPlaneMethodBindings.method_is_equal_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to_plane))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Plane) IsFinite() bool {
	mb := globalPlaneMethodBindings.method_is_finite

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsPointOver : is_point_over
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Plane) IsPointOver(point Vector3) bool {
	mb := globalPlaneMethodBindings.method_is_point_over

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&point))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Plane) DistanceTo(point Vector3) float32 {
	mb := globalPlaneMethodBindings.method_distance_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&point))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Plane) HasPoint(point Vector3, tolerance float32) bool {
	mb := globalPlaneMethodBindings.method_has_point

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&point))

	eArg1 := Float32Encoder.EncodeArg(tolerance)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Project : project
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Plane) Project(point Vector3) Vector3 {
	mb := globalPlaneMethodBindings.method_project

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&point))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Intersect3 : intersect_3
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Plane) Intersect3(b Plane, c Plane) Variant {
	mb := globalPlaneMethodBindings.method_intersect_3

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&b))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&c))

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IntersectsRay : intersects_ray
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Plane) IntersectsRay(from Vector3, dir Vector3) Variant {
	mb := globalPlaneMethodBindings.method_intersects_ray

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&from))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&dir))

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IntersectsSegment : intersects_segment
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Plane) IntersectsSegment(from Vector3, to Vector3) Variant {
	mb := globalPlaneMethodBindings.method_intersects_segment

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&from))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

func (cx *Plane) MemberGetx() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalPlaneMethodBindings.member_x_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Plane) MemberGety() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalPlaneMethodBindings.member_y_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Plane) MemberGetz() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalPlaneMethodBindings.member_z_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Plane) MemberGetd() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalPlaneMethodBindings.member_d_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Plane) MemberGetnormal() Vector3 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector3](globalPlaneMethodBindings.member_normal_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Plane) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Plane) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Plane) Negate() Plane {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Plane](globalPlaneMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Plane) Positive() Plane {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Plane](globalPlaneMethodBindings.operator_positive, lt, rt)
}

// Equal_Plane operator
func (cx *Plane) Equal_Plane(right Plane) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_equal_Plane, lt, rt)
}

// Not_equal_Plane operator
func (cx *Plane) Not_equal_Plane(right Plane) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_not_equal_Plane, lt, rt)
}

// Multiply_Transform3D operator
func (cx *Plane) Multiply_Transform3D(right Transform3D) Plane {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Plane](globalPlaneMethodBindings.operator_multiply_Transform3D, lt, rt)
}

// In_Dictionary operator
func (cx *Plane) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Plane) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_in_Array, lt, rt)
}

/*
 * Quaternion
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: false
 */
type Quaternion struct {
	opaque [16]uint8
}

type quaternionMethodBindings struct {
	constructor_0                              GDExtensionPtrConstructor
	constructor_1                              GDExtensionPtrConstructor
	constructor_2                              GDExtensionPtrConstructor
	constructor_3                              GDExtensionPtrConstructor
	constructor_4                              GDExtensionPtrConstructor
	constructor_5                              GDExtensionPtrConstructor
	method_length                              GDExtensionPtrBuiltInMethod
	method_length_squared                      GDExtensionPtrBuiltInMethod
	method_normalized                          GDExtensionPtrBuiltInMethod
	method_is_normalized                       GDExtensionPtrBuiltInMethod
	method_is_equal_approx                     GDExtensionPtrBuiltInMethod
	method_is_finite                           GDExtensionPtrBuiltInMethod
	method_inverse                             GDExtensionPtrBuiltInMethod
	method_log                                 GDExtensionPtrBuiltInMethod
	method_exp                                 GDExtensionPtrBuiltInMethod
	method_angle_to                            GDExtensionPtrBuiltInMethod
	method_dot                                 GDExtensionPtrBuiltInMethod
	method_slerp                               GDExtensionPtrBuiltInMethod
	method_slerpni                             GDExtensionPtrBuiltInMethod
	method_spherical_cubic_interpolate         GDExtensionPtrBuiltInMethod
	method_spherical_cubic_interpolate_in_time GDExtensionPtrBuiltInMethod
	method_get_euler                           GDExtensionPtrBuiltInMethod
	method_from_euler                          GDExtensionPtrBuiltInMethod
	method_get_axis                            GDExtensionPtrBuiltInMethod
	method_get_angle                           GDExtensionPtrBuiltInMethod
	member_x_setter                            GDExtensionPtrSetter
	member_x_getter                            GDExtensionPtrGetter
	member_y_setter                            GDExtensionPtrSetter
	member_y_getter                            GDExtensionPtrGetter
	member_z_setter                            GDExtensionPtrSetter
	member_z_getter                            GDExtensionPtrGetter
	member_w_setter                            GDExtensionPtrSetter
	member_w_getter                            GDExtensionPtrGetter
	indexed_setter                             GDExtensionPtrIndexedSetter
	indexed_getter                             GDExtensionPtrIndexedGetter
	operator_equal_Variant                     GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant                 GDExtensionPtrOperatorEvaluator
	operator_negate                            GDExtensionPtrOperatorEvaluator
	operator_positive                          GDExtensionPtrOperatorEvaluator
	operator_multiply_int                      GDExtensionPtrOperatorEvaluator
	operator_divide_int                        GDExtensionPtrOperatorEvaluator
	operator_multiply_float                    GDExtensionPtrOperatorEvaluator
	operator_divide_float                      GDExtensionPtrOperatorEvaluator
	operator_multiply_Vector3                  GDExtensionPtrOperatorEvaluator
	operator_equal_Quaternion                  GDExtensionPtrOperatorEvaluator
	operator_not_equal_Quaternion              GDExtensionPtrOperatorEvaluator
	operator_add_Quaternion                    GDExtensionPtrOperatorEvaluator
	operator_subtract_Quaternion               GDExtensionPtrOperatorEvaluator
	operator_multiply_Quaternion               GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary                     GDExtensionPtrOperatorEvaluator
	operator_in_Array                          GDExtensionPtrOperatorEvaluator
}

var globalQuaternionMethodBindings quaternionMethodBindings

func quaternionInitConstructorBindings() {
	log.Debug("quaternionInitConstructorBindings called")

	log.Debug("globalQuaternionMethodBindings.constructor_0")
	globalQuaternionMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, 0)
	log.Debug("globalQuaternionMethodBindings.constructor_1")
	globalQuaternionMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, 1)
	log.Debug("globalQuaternionMethodBindings.constructor_2")
	globalQuaternionMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, 2)
	log.Debug("globalQuaternionMethodBindings.constructor_3")
	globalQuaternionMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, 3)
	log.Debug("globalQuaternionMethodBindings.constructor_4")
	globalQuaternionMethodBindings.constructor_4 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, 4)
	log.Debug("globalQuaternionMethodBindings.constructor_5")
	globalQuaternionMethodBindings.constructor_5 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, 5)
}

func quaternionInitMethodBindings() {
	log.Debug("quaternionInitMethodBindings called")

	missingMethods := make([]string, 0, 19)

	methodName0 := NewStringNameWithLatin1Chars("length")
	defer methodName0.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_length")
	globalQuaternionMethodBindings.method_length = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName0.AsGDExtensionStringNamePtr(), 466405837)
	if globalQuaternionMethodBindings.method_length == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_length")
	}
	methodName1 := NewStringNameWithLatin1Chars("length_squared")
	defer methodName1.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_length_squared")
	globalQuaternionMethodBindings.method_length_squared = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName1.AsGDExtensionStringNamePtr(), 466405837)
	if globalQuaternionMethodBindings.method_length_squared == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_length_squared")
	}
	methodName2 := NewStringNameWithLatin1Chars("normalized")
	defer methodName2.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_normalized")
	globalQuaternionMethodBindings.method_normalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName2.AsGDExtensionStringNamePtr(), 4274879941)
	if globalQuaternionMethodBindings.method_normalized == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_normalized")
	}
	methodName3 := NewStringNameWithLatin1Chars("is_normalized")
	defer methodName3.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_is_normalized")
	globalQuaternionMethodBindings.method_is_normalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName3.AsGDExtensionStringNamePtr(), 3918633141)
	if globalQuaternionMethodBindings.method_is_normalized == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_is_normalized")
	}
	methodName4 := NewStringNameWithLatin1Chars("is_equal_approx")
	defer methodName4.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_is_equal_approx")
	globalQuaternionMethodBindings.method_is_equal_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName4.AsGDExtensionStringNamePtr(), 1682156903)
	if globalQuaternionMethodBindings.method_is_equal_approx == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_is_equal_approx")
	}
	methodName5 := NewStringNameWithLatin1Chars("is_finite")
	defer methodName5.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_is_finite")
	globalQuaternionMethodBindings.method_is_finite = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName5.AsGDExtensionStringNamePtr(), 3918633141)
	if globalQuaternionMethodBindings.method_is_finite == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_is_finite")
	}
	methodName6 := NewStringNameWithLatin1Chars("inverse")
	defer methodName6.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_inverse")
	globalQuaternionMethodBindings.method_inverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName6.AsGDExtensionStringNamePtr(), 4274879941)
	if globalQuaternionMethodBindings.method_inverse == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_inverse")
	}
	methodName7 := NewStringNameWithLatin1Chars("log")
	defer methodName7.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_log")
	globalQuaternionMethodBindings.method_log = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName7.AsGDExtensionStringNamePtr(), 4274879941)
	if globalQuaternionMethodBindings.method_log == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_log")
	}
	methodName8 := NewStringNameWithLatin1Chars("exp")
	defer methodName8.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_exp")
	globalQuaternionMethodBindings.method_exp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName8.AsGDExtensionStringNamePtr(), 4274879941)
	if globalQuaternionMethodBindings.method_exp == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_exp")
	}
	methodName9 := NewStringNameWithLatin1Chars("angle_to")
	defer methodName9.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_angle_to")
	globalQuaternionMethodBindings.method_angle_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName9.AsGDExtensionStringNamePtr(), 3244682419)
	if globalQuaternionMethodBindings.method_angle_to == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_angle_to")
	}
	methodName10 := NewStringNameWithLatin1Chars("dot")
	defer methodName10.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_dot")
	globalQuaternionMethodBindings.method_dot = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName10.AsGDExtensionStringNamePtr(), 3244682419)
	if globalQuaternionMethodBindings.method_dot == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_dot")
	}
	methodName11 := NewStringNameWithLatin1Chars("slerp")
	defer methodName11.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_slerp")
	globalQuaternionMethodBindings.method_slerp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName11.AsGDExtensionStringNamePtr(), 1773590316)
	if globalQuaternionMethodBindings.method_slerp == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_slerp")
	}
	methodName12 := NewStringNameWithLatin1Chars("slerpni")
	defer methodName12.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_slerpni")
	globalQuaternionMethodBindings.method_slerpni = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName12.AsGDExtensionStringNamePtr(), 1773590316)
	if globalQuaternionMethodBindings.method_slerpni == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_slerpni")
	}
	methodName13 := NewStringNameWithLatin1Chars("spherical_cubic_interpolate")
	defer methodName13.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_spherical_cubic_interpolate")
	globalQuaternionMethodBindings.method_spherical_cubic_interpolate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName13.AsGDExtensionStringNamePtr(), 2150967576)
	if globalQuaternionMethodBindings.method_spherical_cubic_interpolate == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_spherical_cubic_interpolate")
	}
	methodName14 := NewStringNameWithLatin1Chars("spherical_cubic_interpolate_in_time")
	defer methodName14.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_spherical_cubic_interpolate_in_time")
	globalQuaternionMethodBindings.method_spherical_cubic_interpolate_in_time = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName14.AsGDExtensionStringNamePtr(), 1436023539)
	if globalQuaternionMethodBindings.method_spherical_cubic_interpolate_in_time == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_spherical_cubic_interpolate_in_time")
	}
	methodName15 := NewStringNameWithLatin1Chars("get_euler")
	defer methodName15.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_get_euler")
	globalQuaternionMethodBindings.method_get_euler = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName15.AsGDExtensionStringNamePtr(), 1394941017)
	if globalQuaternionMethodBindings.method_get_euler == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_get_euler")
	}
	methodName16 := NewStringNameWithLatin1Chars("from_euler")
	defer methodName16.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_from_euler")
	globalQuaternionMethodBindings.method_from_euler = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName16.AsGDExtensionStringNamePtr(), 4053467903)
	if globalQuaternionMethodBindings.method_from_euler == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_from_euler")
	}
	methodName17 := NewStringNameWithLatin1Chars("get_axis")
	defer methodName17.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_get_axis")
	globalQuaternionMethodBindings.method_get_axis = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName17.AsGDExtensionStringNamePtr(), 1776574132)
	if globalQuaternionMethodBindings.method_get_axis == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_get_axis")
	}
	methodName18 := NewStringNameWithLatin1Chars("get_angle")
	defer methodName18.Destroy()
	log.Debug("globalQuaternionMethodBindings.method_get_angle")
	globalQuaternionMethodBindings.method_get_angle = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, methodName18.AsGDExtensionStringNamePtr(), 466405837)
	if globalQuaternionMethodBindings.method_get_angle == nil {
		missingMethods = append(missingMethods, "globalQuaternionMethodBindings.method_get_angle")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("x")
	defer memberName0.Destroy()
	log.Debug("globalQuaternionMethodBindings.member_x_setter")
	globalQuaternionMethodBindings.member_x_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalQuaternionMethodBindings.member_x_getter")
	globalQuaternionMethodBindings.member_x_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("y")
	defer memberName1.Destroy()
	log.Debug("globalQuaternionMethodBindings.member_y_setter")
	globalQuaternionMethodBindings.member_y_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalQuaternionMethodBindings.member_y_getter")
	globalQuaternionMethodBindings.member_y_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("z")
	defer memberName2.Destroy()
	log.Debug("globalQuaternionMethodBindings.member_z_setter")
	globalQuaternionMethodBindings.member_z_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalQuaternionMethodBindings.member_z_getter")
	globalQuaternionMethodBindings.member_z_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, memberName2.AsGDExtensionStringNamePtr())
	memberName3 := NewStringNameWithLatin1Chars("w")
	defer memberName3.Destroy()
	log.Debug("globalQuaternionMethodBindings.member_w_setter")
	globalQuaternionMethodBindings.member_w_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, memberName3.AsGDExtensionStringNamePtr())
	log.Debug("globalQuaternionMethodBindings.member_w_getter")
	globalQuaternionMethodBindings.member_w_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION, memberName3.AsGDExtensionStringNamePtr())
	log.Debug("globalQuaternionMethodBindings.indexed_setter")
	globalQuaternionMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION)
	log.Debug("globalQuaternionMethodBindings.indexed_getter")
	globalQuaternionMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_QUATERNION)
	log.Debug("globalQuaternionMethodBindings.operator: equal Variant")
	globalQuaternionMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalQuaternionMethodBindings.operator: not_equal Variant")
	globalQuaternionMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalQuaternionMethodBindings.operator: negate ")
	globalQuaternionMethodBindings.operator_negate = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NEGATE, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalQuaternionMethodBindings.operator: positive ")
	globalQuaternionMethodBindings.operator_positive = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_POSITIVE, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalQuaternionMethodBindings.operator: multiply int")
	globalQuaternionMethodBindings.operator_multiply_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalQuaternionMethodBindings.operator: divide int")
	globalQuaternionMethodBindings.operator_divide_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalQuaternionMethodBindings.operator: multiply float")
	globalQuaternionMethodBindings.operator_multiply_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalQuaternionMethodBindings.operator: divide float")
	globalQuaternionMethodBindings.operator_divide_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalQuaternionMethodBindings.operator: multiply Vector3")
	globalQuaternionMethodBindings.operator_multiply_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalQuaternionMethodBindings.operator: equal Quaternion")
	globalQuaternionMethodBindings.operator_equal_Quaternion = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_QUATERNION)
	log.Debug("globalQuaternionMethodBindings.operator: not_equal Quaternion")
	globalQuaternionMethodBindings.operator_not_equal_Quaternion = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_QUATERNION)
	log.Debug("globalQuaternionMethodBindings.operator: add Quaternion")
	globalQuaternionMethodBindings.operator_add_Quaternion = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_QUATERNION)
	log.Debug("globalQuaternionMethodBindings.operator: subtract Quaternion")
	globalQuaternionMethodBindings.operator_subtract_Quaternion = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_SUBTRACT, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_QUATERNION)
	log.Debug("globalQuaternionMethodBindings.operator: multiply Quaternion")
	globalQuaternionMethodBindings.operator_multiply_Quaternion = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_QUATERNION)
	log.Debug("globalQuaternionMethodBindings.operator: in Dictionary")
	globalQuaternionMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalQuaternionMethodBindings.operator: in Array")
	globalQuaternionMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_QUATERNION, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("quaternionInitBindings end")
}

func (c *Quaternion) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewQuaternion, index: 0
func NewQuaternion() Quaternion {
	cx := Quaternion{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalQuaternionMethodBindings.constructor_0, ptr)

	return cx
}

// NewQuaternion, index: 1
func NewQuaternionWithQuaternion(from Quaternion) Quaternion {
	cx := Quaternion{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Quaternion
	// QuaternionEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalQuaternionMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewQuaternion, index: 2
func NewQuaternionWithBasis(from Basis) Quaternion {
	cx := Quaternion{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Basis
	// BasisEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalQuaternionMethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewQuaternion, index: 3
func NewQuaternionWithVector3Float32(axis Vector3, angle float32) Quaternion {
	cx := Quaternion{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(axis.ptr())

	// float
	eArg1 := Float32Encoder.EncodeArg(angle)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))
	callBuiltinConstructor(globalQuaternionMethodBindings.constructor_3, ptr, args[0], args[1])

	return cx
}

// NewQuaternion, index: 4
func NewQuaternionWithVector3Vector3(arc_from Vector3, arc_to Vector3) Quaternion {
	cx := Quaternion{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(arc_from.ptr())

	// Vector3
	// Vector3Encoder
	args[1] = (GDExtensionConstTypePtr)(arc_to.ptr())
	callBuiltinConstructor(globalQuaternionMethodBindings.constructor_4, ptr, args[0], args[1])

	return cx
}

// NewQuaternion, index: 5
func NewQuaternionWithFloat32Float32Float32Float32(x float32, y float32, z float32, w float32) Quaternion {
	cx := Quaternion{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [4]GDExtensionConstTypePtr

	// float
	eArg0 := Float32Encoder.EncodeArg(x)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// float
	eArg1 := Float32Encoder.EncodeArg(y)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))

	// float
	eArg2 := Float32Encoder.EncodeArg(z)
	args[2] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg2))

	// float
	eArg3 := Float32Encoder.EncodeArg(w)
	args[3] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg3))
	callBuiltinConstructor(globalQuaternionMethodBindings.constructor_5, ptr, args[0], args[1], args[2], args[3])

	return cx
}

// methods

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) Length() float32 {
	mb := globalQuaternionMethodBindings.method_length

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) LengthSquared() float32 {
	mb := globalQuaternionMethodBindings.method_length_squared

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Normalized() Quaternion {
	mb := globalQuaternionMethodBindings.method_normalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, nil)
	return ret

}

/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Quaternion) IsNormalized() bool {
	mb := globalQuaternionMethodBindings.method_is_normalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Quaternion) IsEqualApprox(to Quaternion) bool {
	mb := globalQuaternionMethodBindings.method_is_equal_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Quaternion) IsFinite() bool {
	mb := globalQuaternionMethodBindings.method_is_finite

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Inverse() Quaternion {
	mb := globalQuaternionMethodBindings.method_inverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, nil)
	return ret

}

/* Log : log
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Log() Quaternion {
	mb := globalQuaternionMethodBindings.method_log

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, nil)
	return ret

}

/* Exp : exp
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Exp() Quaternion {
	mb := globalQuaternionMethodBindings.method_exp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, nil)
	return ret

}

/* AngleTo : angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) AngleTo(to Quaternion) float32 {
	mb := globalQuaternionMethodBindings.method_angle_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) Dot(with Quaternion) float32 {
	mb := globalQuaternionMethodBindings.method_dot

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Slerp(to Quaternion, weight float32) Quaternion {
	mb := globalQuaternionMethodBindings.method_slerp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	eArg1 := Float32Encoder.EncodeArg(weight)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Slerpni : slerpni
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Slerpni(to Quaternion, weight float32) Quaternion {
	mb := globalQuaternionMethodBindings.method_slerpni

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	eArg1 := Float32Encoder.EncodeArg(weight)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* SphericalCubicInterpolate : spherical_cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) SphericalCubicInterpolate(b Quaternion, pre_a Quaternion, post_b Quaternion, weight float32) Quaternion {
	mb := globalQuaternionMethodBindings.method_spherical_cubic_interpolate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&b))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&pre_a))

	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&post_b))

	eArg3 := Float32Encoder.EncodeArg(weight)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* SphericalCubicInterpolateInTime : spherical_cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) SphericalCubicInterpolateInTime(b Quaternion, pre_a Quaternion, post_b Quaternion, weight float32, b_t float32, pre_a_t float32, post_b_t float32) Quaternion {
	mb := globalQuaternionMethodBindings.method_spherical_cubic_interpolate_in_time

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 7
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&b))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&pre_a))

	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&post_b))

	eArg3 := Float32Encoder.EncodeArg(weight)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	eArg4 := Float32Encoder.EncodeArg(b_t)
	args[4] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg4))

	eArg5 := Float32Encoder.EncodeArg(pre_a_t)
	args[5] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg5))

	eArg6 := Float32Encoder.EncodeArg(post_b_t)
	args[6] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg6))

	ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetEuler : get_euler
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Quaternion) GetEuler(order int32) Vector3 {
	mb := globalQuaternionMethodBindings.method_get_euler

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(order)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* FromEuler : from_euler
 * is_vararg = false, is_static = true
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) FromEuler(euler Vector3) Quaternion {
	mb := globalQuaternionMethodBindings.method_from_euler

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&euler))

	ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetAxis : get_axis
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Quaternion) GetAxis() Vector3 {
	mb := globalQuaternionMethodBindings.method_get_axis

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* GetAngle : get_angle
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) GetAngle() float32 {
	mb := globalQuaternionMethodBindings.method_get_angle

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

// members

func (cx *Quaternion) MemberGetx() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalQuaternionMethodBindings.member_x_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Quaternion) MemberGety() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalQuaternionMethodBindings.member_y_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Quaternion) MemberGetz() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalQuaternionMethodBindings.member_z_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Quaternion) MemberGetw() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalQuaternionMethodBindings.member_w_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

// Equal_Variant operator
func (cx *Quaternion) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Quaternion) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Quaternion) Negate() Quaternion {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Quaternion) Positive() Quaternion {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_positive, lt, rt)
}

// Multiply_int operator
func (cx *Quaternion) Multiply_int(right int32) Quaternion {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Quaternion) Divide_int(right int32) Quaternion {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Quaternion) Multiply_float(right float32) Quaternion {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Quaternion) Divide_float(right float32) Quaternion {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_divide_float, lt, rt)
}

// Multiply_Vector3 operator
func (cx *Quaternion) Multiply_Vector3(right Vector3) Vector3 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3](globalQuaternionMethodBindings.operator_multiply_Vector3, lt, rt)
}

// Equal_Quaternion operator
func (cx *Quaternion) Equal_Quaternion(right Quaternion) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_equal_Quaternion, lt, rt)
}

// Not_equal_Quaternion operator
func (cx *Quaternion) Not_equal_Quaternion(right Quaternion) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_not_equal_Quaternion, lt, rt)
}

// Add_Quaternion operator
func (cx *Quaternion) Add_Quaternion(right Quaternion) Quaternion {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_add_Quaternion, lt, rt)
}

// Subtract_Quaternion operator
func (cx *Quaternion) Subtract_Quaternion(right Quaternion) Quaternion {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_subtract_Quaternion, lt, rt)
}

// Multiply_Quaternion operator
func (cx *Quaternion) Multiply_Quaternion(right Quaternion) Quaternion {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_multiply_Quaternion, lt, rt)
}

// In_Dictionary operator
func (cx *Quaternion) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Quaternion) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_in_Array, lt, rt)
}

/*
 * AABB
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type AABB struct {
	opaque [24]uint8
}

type aABBMethodBindings struct {
	constructor_0                  GDExtensionPtrConstructor
	constructor_1                  GDExtensionPtrConstructor
	constructor_2                  GDExtensionPtrConstructor
	method_abs                     GDExtensionPtrBuiltInMethod
	method_get_center              GDExtensionPtrBuiltInMethod
	method_get_volume              GDExtensionPtrBuiltInMethod
	method_has_volume              GDExtensionPtrBuiltInMethod
	method_has_surface             GDExtensionPtrBuiltInMethod
	method_has_point               GDExtensionPtrBuiltInMethod
	method_is_equal_approx         GDExtensionPtrBuiltInMethod
	method_is_finite               GDExtensionPtrBuiltInMethod
	method_intersects              GDExtensionPtrBuiltInMethod
	method_encloses                GDExtensionPtrBuiltInMethod
	method_intersects_plane        GDExtensionPtrBuiltInMethod
	method_intersection            GDExtensionPtrBuiltInMethod
	method_merge                   GDExtensionPtrBuiltInMethod
	method_expand                  GDExtensionPtrBuiltInMethod
	method_grow                    GDExtensionPtrBuiltInMethod
	method_get_support             GDExtensionPtrBuiltInMethod
	method_get_longest_axis        GDExtensionPtrBuiltInMethod
	method_get_longest_axis_index  GDExtensionPtrBuiltInMethod
	method_get_longest_axis_size   GDExtensionPtrBuiltInMethod
	method_get_shortest_axis       GDExtensionPtrBuiltInMethod
	method_get_shortest_axis_index GDExtensionPtrBuiltInMethod
	method_get_shortest_axis_size  GDExtensionPtrBuiltInMethod
	method_get_endpoint            GDExtensionPtrBuiltInMethod
	method_intersects_segment      GDExtensionPtrBuiltInMethod
	method_intersects_ray          GDExtensionPtrBuiltInMethod
	member_position_setter         GDExtensionPtrSetter
	member_position_getter         GDExtensionPtrGetter
	member_size_setter             GDExtensionPtrSetter
	member_size_getter             GDExtensionPtrGetter
	member_end_setter              GDExtensionPtrSetter
	member_end_getter              GDExtensionPtrGetter
	operator_equal_Variant         GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant     GDExtensionPtrOperatorEvaluator
	operator_equal_AABB            GDExtensionPtrOperatorEvaluator
	operator_not_equal_AABB        GDExtensionPtrOperatorEvaluator
	operator_multiply_Transform3D  GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary         GDExtensionPtrOperatorEvaluator
	operator_in_Array              GDExtensionPtrOperatorEvaluator
}

var globalAABBMethodBindings aABBMethodBindings

func aABBInitConstructorBindings() {
	log.Debug("aABBInitConstructorBindings called")

	log.Debug("globalAABBMethodBindings.constructor_0")
	globalAABBMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, 0)
	log.Debug("globalAABBMethodBindings.constructor_1")
	globalAABBMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, 1)
	log.Debug("globalAABBMethodBindings.constructor_2")
	globalAABBMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, 2)
}

func aABBInitMethodBindings() {
	log.Debug("aABBInitMethodBindings called")

	missingMethods := make([]string, 0, 25)

	methodName0 := NewStringNameWithLatin1Chars("abs")
	defer methodName0.Destroy()
	log.Debug("globalAABBMethodBindings.method_abs")
	globalAABBMethodBindings.method_abs = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName0.AsGDExtensionStringNamePtr(), 1576868580)
	if globalAABBMethodBindings.method_abs == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_abs")
	}
	methodName1 := NewStringNameWithLatin1Chars("get_center")
	defer methodName1.Destroy()
	log.Debug("globalAABBMethodBindings.method_get_center")
	globalAABBMethodBindings.method_get_center = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName1.AsGDExtensionStringNamePtr(), 1776574132)
	if globalAABBMethodBindings.method_get_center == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_get_center")
	}
	methodName2 := NewStringNameWithLatin1Chars("get_volume")
	defer methodName2.Destroy()
	log.Debug("globalAABBMethodBindings.method_get_volume")
	globalAABBMethodBindings.method_get_volume = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName2.AsGDExtensionStringNamePtr(), 466405837)
	if globalAABBMethodBindings.method_get_volume == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_get_volume")
	}
	methodName3 := NewStringNameWithLatin1Chars("has_volume")
	defer methodName3.Destroy()
	log.Debug("globalAABBMethodBindings.method_has_volume")
	globalAABBMethodBindings.method_has_volume = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName3.AsGDExtensionStringNamePtr(), 3918633141)
	if globalAABBMethodBindings.method_has_volume == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_has_volume")
	}
	methodName4 := NewStringNameWithLatin1Chars("has_surface")
	defer methodName4.Destroy()
	log.Debug("globalAABBMethodBindings.method_has_surface")
	globalAABBMethodBindings.method_has_surface = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName4.AsGDExtensionStringNamePtr(), 3918633141)
	if globalAABBMethodBindings.method_has_surface == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_has_surface")
	}
	methodName5 := NewStringNameWithLatin1Chars("has_point")
	defer methodName5.Destroy()
	log.Debug("globalAABBMethodBindings.method_has_point")
	globalAABBMethodBindings.method_has_point = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName5.AsGDExtensionStringNamePtr(), 1749054343)
	if globalAABBMethodBindings.method_has_point == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_has_point")
	}
	methodName6 := NewStringNameWithLatin1Chars("is_equal_approx")
	defer methodName6.Destroy()
	log.Debug("globalAABBMethodBindings.method_is_equal_approx")
	globalAABBMethodBindings.method_is_equal_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName6.AsGDExtensionStringNamePtr(), 299946684)
	if globalAABBMethodBindings.method_is_equal_approx == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_is_equal_approx")
	}
	methodName7 := NewStringNameWithLatin1Chars("is_finite")
	defer methodName7.Destroy()
	log.Debug("globalAABBMethodBindings.method_is_finite")
	globalAABBMethodBindings.method_is_finite = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName7.AsGDExtensionStringNamePtr(), 3918633141)
	if globalAABBMethodBindings.method_is_finite == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_is_finite")
	}
	methodName8 := NewStringNameWithLatin1Chars("intersects")
	defer methodName8.Destroy()
	log.Debug("globalAABBMethodBindings.method_intersects")
	globalAABBMethodBindings.method_intersects = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName8.AsGDExtensionStringNamePtr(), 299946684)
	if globalAABBMethodBindings.method_intersects == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_intersects")
	}
	methodName9 := NewStringNameWithLatin1Chars("encloses")
	defer methodName9.Destroy()
	log.Debug("globalAABBMethodBindings.method_encloses")
	globalAABBMethodBindings.method_encloses = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName9.AsGDExtensionStringNamePtr(), 299946684)
	if globalAABBMethodBindings.method_encloses == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_encloses")
	}
	methodName10 := NewStringNameWithLatin1Chars("intersects_plane")
	defer methodName10.Destroy()
	log.Debug("globalAABBMethodBindings.method_intersects_plane")
	globalAABBMethodBindings.method_intersects_plane = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName10.AsGDExtensionStringNamePtr(), 1150170233)
	if globalAABBMethodBindings.method_intersects_plane == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_intersects_plane")
	}
	methodName11 := NewStringNameWithLatin1Chars("intersection")
	defer methodName11.Destroy()
	log.Debug("globalAABBMethodBindings.method_intersection")
	globalAABBMethodBindings.method_intersection = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName11.AsGDExtensionStringNamePtr(), 1271470306)
	if globalAABBMethodBindings.method_intersection == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_intersection")
	}
	methodName12 := NewStringNameWithLatin1Chars("merge")
	defer methodName12.Destroy()
	log.Debug("globalAABBMethodBindings.method_merge")
	globalAABBMethodBindings.method_merge = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName12.AsGDExtensionStringNamePtr(), 1271470306)
	if globalAABBMethodBindings.method_merge == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_merge")
	}
	methodName13 := NewStringNameWithLatin1Chars("expand")
	defer methodName13.Destroy()
	log.Debug("globalAABBMethodBindings.method_expand")
	globalAABBMethodBindings.method_expand = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName13.AsGDExtensionStringNamePtr(), 2851643018)
	if globalAABBMethodBindings.method_expand == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_expand")
	}
	methodName14 := NewStringNameWithLatin1Chars("grow")
	defer methodName14.Destroy()
	log.Debug("globalAABBMethodBindings.method_grow")
	globalAABBMethodBindings.method_grow = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName14.AsGDExtensionStringNamePtr(), 239217291)
	if globalAABBMethodBindings.method_grow == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_grow")
	}
	methodName15 := NewStringNameWithLatin1Chars("get_support")
	defer methodName15.Destroy()
	log.Debug("globalAABBMethodBindings.method_get_support")
	globalAABBMethodBindings.method_get_support = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName15.AsGDExtensionStringNamePtr(), 2923479887)
	if globalAABBMethodBindings.method_get_support == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_get_support")
	}
	methodName16 := NewStringNameWithLatin1Chars("get_longest_axis")
	defer methodName16.Destroy()
	log.Debug("globalAABBMethodBindings.method_get_longest_axis")
	globalAABBMethodBindings.method_get_longest_axis = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName16.AsGDExtensionStringNamePtr(), 1776574132)
	if globalAABBMethodBindings.method_get_longest_axis == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_get_longest_axis")
	}
	methodName17 := NewStringNameWithLatin1Chars("get_longest_axis_index")
	defer methodName17.Destroy()
	log.Debug("globalAABBMethodBindings.method_get_longest_axis_index")
	globalAABBMethodBindings.method_get_longest_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName17.AsGDExtensionStringNamePtr(), 3173160232)
	if globalAABBMethodBindings.method_get_longest_axis_index == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_get_longest_axis_index")
	}
	methodName18 := NewStringNameWithLatin1Chars("get_longest_axis_size")
	defer methodName18.Destroy()
	log.Debug("globalAABBMethodBindings.method_get_longest_axis_size")
	globalAABBMethodBindings.method_get_longest_axis_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName18.AsGDExtensionStringNamePtr(), 466405837)
	if globalAABBMethodBindings.method_get_longest_axis_size == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_get_longest_axis_size")
	}
	methodName19 := NewStringNameWithLatin1Chars("get_shortest_axis")
	defer methodName19.Destroy()
	log.Debug("globalAABBMethodBindings.method_get_shortest_axis")
	globalAABBMethodBindings.method_get_shortest_axis = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName19.AsGDExtensionStringNamePtr(), 1776574132)
	if globalAABBMethodBindings.method_get_shortest_axis == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_get_shortest_axis")
	}
	methodName20 := NewStringNameWithLatin1Chars("get_shortest_axis_index")
	defer methodName20.Destroy()
	log.Debug("globalAABBMethodBindings.method_get_shortest_axis_index")
	globalAABBMethodBindings.method_get_shortest_axis_index = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName20.AsGDExtensionStringNamePtr(), 3173160232)
	if globalAABBMethodBindings.method_get_shortest_axis_index == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_get_shortest_axis_index")
	}
	methodName21 := NewStringNameWithLatin1Chars("get_shortest_axis_size")
	defer methodName21.Destroy()
	log.Debug("globalAABBMethodBindings.method_get_shortest_axis_size")
	globalAABBMethodBindings.method_get_shortest_axis_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName21.AsGDExtensionStringNamePtr(), 466405837)
	if globalAABBMethodBindings.method_get_shortest_axis_size == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_get_shortest_axis_size")
	}
	methodName22 := NewStringNameWithLatin1Chars("get_endpoint")
	defer methodName22.Destroy()
	log.Debug("globalAABBMethodBindings.method_get_endpoint")
	globalAABBMethodBindings.method_get_endpoint = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName22.AsGDExtensionStringNamePtr(), 1394941017)
	if globalAABBMethodBindings.method_get_endpoint == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_get_endpoint")
	}
	methodName23 := NewStringNameWithLatin1Chars("intersects_segment")
	defer methodName23.Destroy()
	log.Debug("globalAABBMethodBindings.method_intersects_segment")
	globalAABBMethodBindings.method_intersects_segment = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName23.AsGDExtensionStringNamePtr(), 2048133369)
	if globalAABBMethodBindings.method_intersects_segment == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_intersects_segment")
	}
	methodName24 := NewStringNameWithLatin1Chars("intersects_ray")
	defer methodName24.Destroy()
	log.Debug("globalAABBMethodBindings.method_intersects_ray")
	globalAABBMethodBindings.method_intersects_ray = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, methodName24.AsGDExtensionStringNamePtr(), 2048133369)
	if globalAABBMethodBindings.method_intersects_ray == nil {
		missingMethods = append(missingMethods, "globalAABBMethodBindings.method_intersects_ray")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("position")
	defer memberName0.Destroy()
	log.Debug("globalAABBMethodBindings.member_position_setter")
	globalAABBMethodBindings.member_position_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalAABBMethodBindings.member_position_getter")
	globalAABBMethodBindings.member_position_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("size")
	defer memberName1.Destroy()
	log.Debug("globalAABBMethodBindings.member_size_setter")
	globalAABBMethodBindings.member_size_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalAABBMethodBindings.member_size_getter")
	globalAABBMethodBindings.member_size_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("end")
	defer memberName2.Destroy()
	log.Debug("globalAABBMethodBindings.member_end_setter")
	globalAABBMethodBindings.member_end_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalAABBMethodBindings.member_end_getter")
	globalAABBMethodBindings.member_end_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_AABB, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalAABBMethodBindings.operator: equal Variant")
	globalAABBMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_AABB, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalAABBMethodBindings.operator: not_equal Variant")
	globalAABBMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_AABB, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalAABBMethodBindings.operator: equal AABB")
	globalAABBMethodBindings.operator_equal_AABB = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_AABB, GDEXTENSION_VARIANT_TYPE_AABB)
	log.Debug("globalAABBMethodBindings.operator: not_equal AABB")
	globalAABBMethodBindings.operator_not_equal_AABB = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_AABB, GDEXTENSION_VARIANT_TYPE_AABB)
	log.Debug("globalAABBMethodBindings.operator: multiply Transform3D")
	globalAABBMethodBindings.operator_multiply_Transform3D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_AABB, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D)
	log.Debug("globalAABBMethodBindings.operator: in Dictionary")
	globalAABBMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_AABB, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalAABBMethodBindings.operator: in Array")
	globalAABBMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_AABB, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("aABBInitBindings end")
}

func (c *AABB) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewAABB, index: 0
func NewAABB() AABB {
	cx := AABB{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalAABBMethodBindings.constructor_0, ptr)

	return cx
}

// NewAABB, index: 1
func NewAABBWithAABB(from AABB) AABB {
	cx := AABB{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// AABB
	// AABBEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalAABBMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewAABB, index: 2
func NewAABBWithVector3Vector3(position Vector3, size Vector3) AABB {
	cx := AABB{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(position.ptr())

	// Vector3
	// Vector3Encoder
	args[1] = (GDExtensionConstTypePtr)(size.ptr())
	callBuiltinConstructor(globalAABBMethodBindings.constructor_2, ptr, args[0], args[1])

	return cx
}

// methods

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Abs() AABB {
	mb := globalAABBMethodBindings.method_abs

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[AABB](mb, bx, nil)
	return ret

}

/* GetCenter : get_center
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetCenter() Vector3 {
	mb := globalAABBMethodBindings.method_get_center

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* GetVolume : get_volume
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *AABB) GetVolume() float32 {
	mb := globalAABBMethodBindings.method_get_volume

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* HasVolume : has_volume
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) HasVolume() bool {
	mb := globalAABBMethodBindings.method_has_volume

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* HasSurface : has_surface
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) HasSurface() bool {
	mb := globalAABBMethodBindings.method_has_surface

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) HasPoint(point Vector3) bool {
	mb := globalAABBMethodBindings.method_has_point

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&point))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) IsEqualApprox(aabb AABB) bool {
	mb := globalAABBMethodBindings.method_is_equal_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&aabb))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) IsFinite() bool {
	mb := globalAABBMethodBindings.method_is_finite

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Intersects : intersects
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) Intersects(with AABB) bool {
	mb := globalAABBMethodBindings.method_intersects

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Encloses : encloses
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) Encloses(with AABB) bool {
	mb := globalAABBMethodBindings.method_encloses

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IntersectsPlane : intersects_plane
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) IntersectsPlane(plane Plane) bool {
	mb := globalAABBMethodBindings.method_intersects_plane

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&plane))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Intersection : intersection
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Intersection(with AABB) AABB {
	mb := globalAABBMethodBindings.method_intersection

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[AABB](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Merge(with AABB) AABB {
	mb := globalAABBMethodBindings.method_merge

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[AABB](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Expand : expand
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Expand(to_point Vector3) AABB {
	mb := globalAABBMethodBindings.method_expand

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to_point))

	ret := callBuiltinMethodPtrRet[AABB](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Grow : grow
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Grow(by float32) AABB {
	mb := globalAABBMethodBindings.method_grow

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(by)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[AABB](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetSupport : get_support
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetSupport(dir Vector3) Vector3 {
	mb := globalAABBMethodBindings.method_get_support

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&dir))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetLongestAxis : get_longest_axis
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetLongestAxis() Vector3 {
	mb := globalAABBMethodBindings.method_get_longest_axis

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* GetLongestAxisIndex : get_longest_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *AABB) GetLongestAxisIndex() int32 {
	mb := globalAABBMethodBindings.method_get_longest_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* GetLongestAxisSize : get_longest_axis_size
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *AABB) GetLongestAxisSize() float32 {
	mb := globalAABBMethodBindings.method_get_longest_axis_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* GetShortestAxis : get_shortest_axis
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetShortestAxis() Vector3 {
	mb := globalAABBMethodBindings.method_get_shortest_axis

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* GetShortestAxisIndex : get_shortest_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *AABB) GetShortestAxisIndex() int32 {
	mb := globalAABBMethodBindings.method_get_shortest_axis_index

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* GetShortestAxisSize : get_shortest_axis_size
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *AABB) GetShortestAxisSize() float32 {
	mb := globalAABBMethodBindings.method_get_shortest_axis_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* GetEndpoint : get_endpoint
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetEndpoint(idx int32) Vector3 {
	mb := globalAABBMethodBindings.method_get_endpoint

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(idx)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IntersectsSegment : intersects_segment
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *AABB) IntersectsSegment(from Vector3, to Vector3) Variant {
	mb := globalAABBMethodBindings.method_intersects_segment

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&from))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IntersectsRay : intersects_ray
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *AABB) IntersectsRay(from Vector3, dir Vector3) Variant {
	mb := globalAABBMethodBindings.method_intersects_ray

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&from))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&dir))

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

func (cx *AABB) MemberGetposition() Vector3 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector3](globalAABBMethodBindings.member_position_getter, bx)
	return ret

}

func (cx *AABB) MemberGetsize() Vector3 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector3](globalAABBMethodBindings.member_size_getter, bx)
	return ret

}

func (cx *AABB) MemberGetend() Vector3 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector3](globalAABBMethodBindings.member_end_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *AABB) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *AABB) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Equal_AABB operator
func (cx *AABB) Equal_AABB(right AABB) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_equal_AABB, lt, rt)
}

// Not_equal_AABB operator
func (cx *AABB) Not_equal_AABB(right AABB) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_not_equal_AABB, lt, rt)
}

// Multiply_Transform3D operator
func (cx *AABB) Multiply_Transform3D(right Transform3D) AABB {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[AABB](globalAABBMethodBindings.operator_multiply_Transform3D, lt, rt)
}

// In_Dictionary operator
func (cx *AABB) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *AABB) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_in_Array, lt, rt)
}

/*
 * Basis
 * indexingReturnType: Vector3
 * isKeyed: false
 * hasDestructor: false
 */
type Basis struct {
	opaque [36]uint8
}

type basisMethodBindings struct {
	constructor_0                  GDExtensionPtrConstructor
	constructor_1                  GDExtensionPtrConstructor
	constructor_2                  GDExtensionPtrConstructor
	constructor_3                  GDExtensionPtrConstructor
	constructor_4                  GDExtensionPtrConstructor
	method_inverse                 GDExtensionPtrBuiltInMethod
	method_transposed              GDExtensionPtrBuiltInMethod
	method_orthonormalized         GDExtensionPtrBuiltInMethod
	method_determinant             GDExtensionPtrBuiltInMethod
	method_rotated                 GDExtensionPtrBuiltInMethod
	method_scaled                  GDExtensionPtrBuiltInMethod
	method_get_scale               GDExtensionPtrBuiltInMethod
	method_get_euler               GDExtensionPtrBuiltInMethod
	method_tdotx                   GDExtensionPtrBuiltInMethod
	method_tdoty                   GDExtensionPtrBuiltInMethod
	method_tdotz                   GDExtensionPtrBuiltInMethod
	method_slerp                   GDExtensionPtrBuiltInMethod
	method_is_equal_approx         GDExtensionPtrBuiltInMethod
	method_is_finite               GDExtensionPtrBuiltInMethod
	method_get_rotation_quaternion GDExtensionPtrBuiltInMethod
	method_looking_at              GDExtensionPtrBuiltInMethod
	method_from_scale              GDExtensionPtrBuiltInMethod
	method_from_euler              GDExtensionPtrBuiltInMethod
	member_x_setter                GDExtensionPtrSetter
	member_x_getter                GDExtensionPtrGetter
	member_y_setter                GDExtensionPtrSetter
	member_y_getter                GDExtensionPtrGetter
	member_z_setter                GDExtensionPtrSetter
	member_z_getter                GDExtensionPtrGetter
	indexed_setter                 GDExtensionPtrIndexedSetter
	indexed_getter                 GDExtensionPtrIndexedGetter
	operator_equal_Variant         GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant     GDExtensionPtrOperatorEvaluator
	operator_multiply_int          GDExtensionPtrOperatorEvaluator
	operator_multiply_float        GDExtensionPtrOperatorEvaluator
	operator_multiply_Vector3      GDExtensionPtrOperatorEvaluator
	operator_equal_Basis           GDExtensionPtrOperatorEvaluator
	operator_not_equal_Basis       GDExtensionPtrOperatorEvaluator
	operator_multiply_Basis        GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary         GDExtensionPtrOperatorEvaluator
	operator_in_Array              GDExtensionPtrOperatorEvaluator
}

var globalBasisMethodBindings basisMethodBindings

func basisInitConstructorBindings() {
	log.Debug("basisInitConstructorBindings called")

	log.Debug("globalBasisMethodBindings.constructor_0")
	globalBasisMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, 0)
	log.Debug("globalBasisMethodBindings.constructor_1")
	globalBasisMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, 1)
	log.Debug("globalBasisMethodBindings.constructor_2")
	globalBasisMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, 2)
	log.Debug("globalBasisMethodBindings.constructor_3")
	globalBasisMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, 3)
	log.Debug("globalBasisMethodBindings.constructor_4")
	globalBasisMethodBindings.constructor_4 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, 4)
}

func basisInitMethodBindings() {
	log.Debug("basisInitMethodBindings called")

	missingMethods := make([]string, 0, 18)

	methodName0 := NewStringNameWithLatin1Chars("inverse")
	defer methodName0.Destroy()
	log.Debug("globalBasisMethodBindings.method_inverse")
	globalBasisMethodBindings.method_inverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName0.AsGDExtensionStringNamePtr(), 594669093)
	if globalBasisMethodBindings.method_inverse == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_inverse")
	}
	methodName1 := NewStringNameWithLatin1Chars("transposed")
	defer methodName1.Destroy()
	log.Debug("globalBasisMethodBindings.method_transposed")
	globalBasisMethodBindings.method_transposed = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName1.AsGDExtensionStringNamePtr(), 594669093)
	if globalBasisMethodBindings.method_transposed == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_transposed")
	}
	methodName2 := NewStringNameWithLatin1Chars("orthonormalized")
	defer methodName2.Destroy()
	log.Debug("globalBasisMethodBindings.method_orthonormalized")
	globalBasisMethodBindings.method_orthonormalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName2.AsGDExtensionStringNamePtr(), 594669093)
	if globalBasisMethodBindings.method_orthonormalized == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_orthonormalized")
	}
	methodName3 := NewStringNameWithLatin1Chars("determinant")
	defer methodName3.Destroy()
	log.Debug("globalBasisMethodBindings.method_determinant")
	globalBasisMethodBindings.method_determinant = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName3.AsGDExtensionStringNamePtr(), 466405837)
	if globalBasisMethodBindings.method_determinant == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_determinant")
	}
	methodName4 := NewStringNameWithLatin1Chars("rotated")
	defer methodName4.Destroy()
	log.Debug("globalBasisMethodBindings.method_rotated")
	globalBasisMethodBindings.method_rotated = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName4.AsGDExtensionStringNamePtr(), 1998708965)
	if globalBasisMethodBindings.method_rotated == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_rotated")
	}
	methodName5 := NewStringNameWithLatin1Chars("scaled")
	defer methodName5.Destroy()
	log.Debug("globalBasisMethodBindings.method_scaled")
	globalBasisMethodBindings.method_scaled = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName5.AsGDExtensionStringNamePtr(), 3934786792)
	if globalBasisMethodBindings.method_scaled == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_scaled")
	}
	methodName6 := NewStringNameWithLatin1Chars("get_scale")
	defer methodName6.Destroy()
	log.Debug("globalBasisMethodBindings.method_get_scale")
	globalBasisMethodBindings.method_get_scale = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName6.AsGDExtensionStringNamePtr(), 1776574132)
	if globalBasisMethodBindings.method_get_scale == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_get_scale")
	}
	methodName7 := NewStringNameWithLatin1Chars("get_euler")
	defer methodName7.Destroy()
	log.Debug("globalBasisMethodBindings.method_get_euler")
	globalBasisMethodBindings.method_get_euler = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName7.AsGDExtensionStringNamePtr(), 1394941017)
	if globalBasisMethodBindings.method_get_euler == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_get_euler")
	}
	methodName8 := NewStringNameWithLatin1Chars("tdotx")
	defer methodName8.Destroy()
	log.Debug("globalBasisMethodBindings.method_tdotx")
	globalBasisMethodBindings.method_tdotx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName8.AsGDExtensionStringNamePtr(), 1047977935)
	if globalBasisMethodBindings.method_tdotx == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_tdotx")
	}
	methodName9 := NewStringNameWithLatin1Chars("tdoty")
	defer methodName9.Destroy()
	log.Debug("globalBasisMethodBindings.method_tdoty")
	globalBasisMethodBindings.method_tdoty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName9.AsGDExtensionStringNamePtr(), 1047977935)
	if globalBasisMethodBindings.method_tdoty == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_tdoty")
	}
	methodName10 := NewStringNameWithLatin1Chars("tdotz")
	defer methodName10.Destroy()
	log.Debug("globalBasisMethodBindings.method_tdotz")
	globalBasisMethodBindings.method_tdotz = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName10.AsGDExtensionStringNamePtr(), 1047977935)
	if globalBasisMethodBindings.method_tdotz == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_tdotz")
	}
	methodName11 := NewStringNameWithLatin1Chars("slerp")
	defer methodName11.Destroy()
	log.Debug("globalBasisMethodBindings.method_slerp")
	globalBasisMethodBindings.method_slerp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName11.AsGDExtensionStringNamePtr(), 3118673011)
	if globalBasisMethodBindings.method_slerp == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_slerp")
	}
	methodName12 := NewStringNameWithLatin1Chars("is_equal_approx")
	defer methodName12.Destroy()
	log.Debug("globalBasisMethodBindings.method_is_equal_approx")
	globalBasisMethodBindings.method_is_equal_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName12.AsGDExtensionStringNamePtr(), 3165333982)
	if globalBasisMethodBindings.method_is_equal_approx == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_is_equal_approx")
	}
	methodName13 := NewStringNameWithLatin1Chars("is_finite")
	defer methodName13.Destroy()
	log.Debug("globalBasisMethodBindings.method_is_finite")
	globalBasisMethodBindings.method_is_finite = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName13.AsGDExtensionStringNamePtr(), 3918633141)
	if globalBasisMethodBindings.method_is_finite == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_is_finite")
	}
	methodName14 := NewStringNameWithLatin1Chars("get_rotation_quaternion")
	defer methodName14.Destroy()
	log.Debug("globalBasisMethodBindings.method_get_rotation_quaternion")
	globalBasisMethodBindings.method_get_rotation_quaternion = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName14.AsGDExtensionStringNamePtr(), 4274879941)
	if globalBasisMethodBindings.method_get_rotation_quaternion == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_get_rotation_quaternion")
	}
	methodName15 := NewStringNameWithLatin1Chars("looking_at")
	defer methodName15.Destroy()
	log.Debug("globalBasisMethodBindings.method_looking_at")
	globalBasisMethodBindings.method_looking_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName15.AsGDExtensionStringNamePtr(), 419916660)
	if globalBasisMethodBindings.method_looking_at == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_looking_at")
	}
	methodName16 := NewStringNameWithLatin1Chars("from_scale")
	defer methodName16.Destroy()
	log.Debug("globalBasisMethodBindings.method_from_scale")
	globalBasisMethodBindings.method_from_scale = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName16.AsGDExtensionStringNamePtr(), 3703240166)
	if globalBasisMethodBindings.method_from_scale == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_from_scale")
	}
	methodName17 := NewStringNameWithLatin1Chars("from_euler")
	defer methodName17.Destroy()
	log.Debug("globalBasisMethodBindings.method_from_euler")
	globalBasisMethodBindings.method_from_euler = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, methodName17.AsGDExtensionStringNamePtr(), 2802321791)
	if globalBasisMethodBindings.method_from_euler == nil {
		missingMethods = append(missingMethods, "globalBasisMethodBindings.method_from_euler")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("x")
	defer memberName0.Destroy()
	log.Debug("globalBasisMethodBindings.member_x_setter")
	globalBasisMethodBindings.member_x_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalBasisMethodBindings.member_x_getter")
	globalBasisMethodBindings.member_x_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("y")
	defer memberName1.Destroy()
	log.Debug("globalBasisMethodBindings.member_y_setter")
	globalBasisMethodBindings.member_y_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalBasisMethodBindings.member_y_getter")
	globalBasisMethodBindings.member_y_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("z")
	defer memberName2.Destroy()
	log.Debug("globalBasisMethodBindings.member_z_setter")
	globalBasisMethodBindings.member_z_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalBasisMethodBindings.member_z_getter")
	globalBasisMethodBindings.member_z_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalBasisMethodBindings.indexed_setter")
	globalBasisMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS)
	log.Debug("globalBasisMethodBindings.indexed_getter")
	globalBasisMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_BASIS)
	log.Debug("globalBasisMethodBindings.operator: equal Variant")
	globalBasisMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_BASIS, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalBasisMethodBindings.operator: not_equal Variant")
	globalBasisMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_BASIS, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalBasisMethodBindings.operator: multiply int")
	globalBasisMethodBindings.operator_multiply_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_BASIS, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalBasisMethodBindings.operator: multiply float")
	globalBasisMethodBindings.operator_multiply_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_BASIS, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalBasisMethodBindings.operator: multiply Vector3")
	globalBasisMethodBindings.operator_multiply_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_BASIS, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalBasisMethodBindings.operator: equal Basis")
	globalBasisMethodBindings.operator_equal_Basis = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_BASIS, GDEXTENSION_VARIANT_TYPE_BASIS)
	log.Debug("globalBasisMethodBindings.operator: not_equal Basis")
	globalBasisMethodBindings.operator_not_equal_Basis = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_BASIS, GDEXTENSION_VARIANT_TYPE_BASIS)
	log.Debug("globalBasisMethodBindings.operator: multiply Basis")
	globalBasisMethodBindings.operator_multiply_Basis = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_BASIS, GDEXTENSION_VARIANT_TYPE_BASIS)
	log.Debug("globalBasisMethodBindings.operator: in Dictionary")
	globalBasisMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_BASIS, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalBasisMethodBindings.operator: in Array")
	globalBasisMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_BASIS, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("basisInitBindings end")
}

func (c *Basis) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewBasis, index: 0
func NewBasis() Basis {
	cx := Basis{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalBasisMethodBindings.constructor_0, ptr)

	return cx
}

// NewBasis, index: 1
func NewBasisWithBasis(from Basis) Basis {
	cx := Basis{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Basis
	// BasisEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalBasisMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewBasis, index: 2
func NewBasisWithQuaternion(from Quaternion) Basis {
	cx := Basis{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Quaternion
	// QuaternionEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalBasisMethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewBasis, index: 3
func NewBasisWithVector3Float32(axis Vector3, angle float32) Basis {
	cx := Basis{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(axis.ptr())

	// float
	eArg1 := Float32Encoder.EncodeArg(angle)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))
	callBuiltinConstructor(globalBasisMethodBindings.constructor_3, ptr, args[0], args[1])

	return cx
}

// NewBasis, index: 4
func NewBasisWithVector3Vector3Vector3(x_axis Vector3, y_axis Vector3, z_axis Vector3) Basis {
	cx := Basis{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [3]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(x_axis.ptr())

	// Vector3
	// Vector3Encoder
	args[1] = (GDExtensionConstTypePtr)(y_axis.ptr())

	// Vector3
	// Vector3Encoder
	args[2] = (GDExtensionConstTypePtr)(z_axis.ptr())
	callBuiltinConstructor(globalBasisMethodBindings.constructor_4, ptr, args[0], args[1], args[2])

	return cx
}

// methods

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Inverse() Basis {
	mb := globalBasisMethodBindings.method_inverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Basis](mb, bx, nil)
	return ret

}

/* Transposed : transposed
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Transposed() Basis {
	mb := globalBasisMethodBindings.method_transposed

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Basis](mb, bx, nil)
	return ret

}

/* Orthonormalized : orthonormalized
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Orthonormalized() Basis {
	mb := globalBasisMethodBindings.method_orthonormalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Basis](mb, bx, nil)
	return ret

}

/* Determinant : determinant
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Determinant() float32 {
	mb := globalBasisMethodBindings.method_determinant

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Rotated(axis Vector3, angle float32) Basis {
	mb := globalBasisMethodBindings.method_rotated

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&axis))

	eArg1 := Float32Encoder.EncodeArg(angle)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Scaled : scaled
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Scaled(scale Vector3) Basis {
	mb := globalBasisMethodBindings.method_scaled

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&scale))

	ret := callBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetScale : get_scale
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Basis) GetScale() Vector3 {
	mb := globalBasisMethodBindings.method_get_scale

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret

}

/* GetEuler : get_euler
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Basis) GetEuler(order int32) Vector3 {
	mb := globalBasisMethodBindings.method_get_euler

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(order)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Tdotx : tdotx
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Tdotx(with Vector3) float32 {
	mb := globalBasisMethodBindings.method_tdotx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Tdoty : tdoty
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Tdoty(with Vector3) float32 {
	mb := globalBasisMethodBindings.method_tdoty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Tdotz : tdotz
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Tdotz(with Vector3) float32 {
	mb := globalBasisMethodBindings.method_tdotz

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&with))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Slerp(to Basis, weight float32) Basis {
	mb := globalBasisMethodBindings.method_slerp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	eArg1 := Float32Encoder.EncodeArg(weight)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Basis) IsEqualApprox(b Basis) bool {
	mb := globalBasisMethodBindings.method_is_equal_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&b))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Basis) IsFinite() bool {
	mb := globalBasisMethodBindings.method_is_finite

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* GetRotationQuaternion : get_rotation_quaternion
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Basis) GetRotationQuaternion() Quaternion {
	mb := globalBasisMethodBindings.method_get_rotation_quaternion

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, nil)
	return ret

}

/* LookingAt : looking_at
 * is_vararg = false, is_static = true
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) LookingAt(target Vector3, up Vector3) Basis {
	mb := globalBasisMethodBindings.method_looking_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&target))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&up))

	ret := callBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* FromScale : from_scale
 * is_vararg = false, is_static = true
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) FromScale(scale Vector3) Basis {
	mb := globalBasisMethodBindings.method_from_scale

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&scale))

	ret := callBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* FromEuler : from_euler
 * is_vararg = false, is_static = true
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) FromEuler(euler Vector3, order int32) Basis {
	mb := globalBasisMethodBindings.method_from_euler

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&euler))

	eArg1 := Int32Encoder.EncodeArg(order)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

func (cx *Basis) MemberGetx() Vector3 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector3](globalBasisMethodBindings.member_x_getter, bx)
	return ret

}

func (cx *Basis) MemberGety() Vector3 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector3](globalBasisMethodBindings.member_y_getter, bx)
	return ret

}

func (cx *Basis) MemberGetz() Vector3 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector3](globalBasisMethodBindings.member_z_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Basis) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Basis) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Multiply_int operator
func (cx *Basis) Multiply_int(right int32) Basis {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Basis](globalBasisMethodBindings.operator_multiply_int, lt, rt)
}

// Multiply_float operator
func (cx *Basis) Multiply_float(right float32) Basis {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Basis](globalBasisMethodBindings.operator_multiply_float, lt, rt)
}

// Multiply_Vector3 operator
func (cx *Basis) Multiply_Vector3(right Vector3) Vector3 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3](globalBasisMethodBindings.operator_multiply_Vector3, lt, rt)
}

// Equal_Basis operator
func (cx *Basis) Equal_Basis(right Basis) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_equal_Basis, lt, rt)
}

// Not_equal_Basis operator
func (cx *Basis) Not_equal_Basis(right Basis) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_not_equal_Basis, lt, rt)
}

// Multiply_Basis operator
func (cx *Basis) Multiply_Basis(right Basis) Basis {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Basis](globalBasisMethodBindings.operator_multiply_Basis, lt, rt)
}

// In_Dictionary operator
func (cx *Basis) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Basis) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_in_Array, lt, rt)
}

/*
 * Transform3D
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type Transform3D struct {
	opaque [48]uint8
}

type transform3DMethodBindings struct {
	constructor_0                        GDExtensionPtrConstructor
	constructor_1                        GDExtensionPtrConstructor
	constructor_2                        GDExtensionPtrConstructor
	constructor_3                        GDExtensionPtrConstructor
	constructor_4                        GDExtensionPtrConstructor
	method_inverse                       GDExtensionPtrBuiltInMethod
	method_affine_inverse                GDExtensionPtrBuiltInMethod
	method_orthonormalized               GDExtensionPtrBuiltInMethod
	method_rotated                       GDExtensionPtrBuiltInMethod
	method_rotated_local                 GDExtensionPtrBuiltInMethod
	method_scaled                        GDExtensionPtrBuiltInMethod
	method_scaled_local                  GDExtensionPtrBuiltInMethod
	method_translated                    GDExtensionPtrBuiltInMethod
	method_translated_local              GDExtensionPtrBuiltInMethod
	method_looking_at                    GDExtensionPtrBuiltInMethod
	method_interpolate_with              GDExtensionPtrBuiltInMethod
	method_is_equal_approx               GDExtensionPtrBuiltInMethod
	method_is_finite                     GDExtensionPtrBuiltInMethod
	member_basis_setter                  GDExtensionPtrSetter
	member_basis_getter                  GDExtensionPtrGetter
	member_origin_setter                 GDExtensionPtrSetter
	member_origin_getter                 GDExtensionPtrGetter
	operator_equal_Variant               GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant           GDExtensionPtrOperatorEvaluator
	operator_multiply_int                GDExtensionPtrOperatorEvaluator
	operator_multiply_float              GDExtensionPtrOperatorEvaluator
	operator_multiply_Vector3            GDExtensionPtrOperatorEvaluator
	operator_multiply_Plane              GDExtensionPtrOperatorEvaluator
	operator_multiply_AABB               GDExtensionPtrOperatorEvaluator
	operator_equal_Transform3D           GDExtensionPtrOperatorEvaluator
	operator_not_equal_Transform3D       GDExtensionPtrOperatorEvaluator
	operator_multiply_Transform3D        GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary               GDExtensionPtrOperatorEvaluator
	operator_in_Array                    GDExtensionPtrOperatorEvaluator
	operator_multiply_PackedVector3Array GDExtensionPtrOperatorEvaluator
}

var globalTransform3DMethodBindings transform3DMethodBindings

func transform3DInitConstructorBindings() {
	log.Debug("transform3DInitConstructorBindings called")

	log.Debug("globalTransform3DMethodBindings.constructor_0")
	globalTransform3DMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 0)
	log.Debug("globalTransform3DMethodBindings.constructor_1")
	globalTransform3DMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 1)
	log.Debug("globalTransform3DMethodBindings.constructor_2")
	globalTransform3DMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 2)
	log.Debug("globalTransform3DMethodBindings.constructor_3")
	globalTransform3DMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 3)
	log.Debug("globalTransform3DMethodBindings.constructor_4")
	globalTransform3DMethodBindings.constructor_4 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 4)
}

func transform3DInitMethodBindings() {
	log.Debug("transform3DInitMethodBindings called")

	missingMethods := make([]string, 0, 13)

	methodName0 := NewStringNameWithLatin1Chars("inverse")
	defer methodName0.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_inverse")
	globalTransform3DMethodBindings.method_inverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName0.AsGDExtensionStringNamePtr(), 3816817146)
	if globalTransform3DMethodBindings.method_inverse == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_inverse")
	}
	methodName1 := NewStringNameWithLatin1Chars("affine_inverse")
	defer methodName1.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_affine_inverse")
	globalTransform3DMethodBindings.method_affine_inverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName1.AsGDExtensionStringNamePtr(), 3816817146)
	if globalTransform3DMethodBindings.method_affine_inverse == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_affine_inverse")
	}
	methodName2 := NewStringNameWithLatin1Chars("orthonormalized")
	defer methodName2.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_orthonormalized")
	globalTransform3DMethodBindings.method_orthonormalized = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName2.AsGDExtensionStringNamePtr(), 3816817146)
	if globalTransform3DMethodBindings.method_orthonormalized == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_orthonormalized")
	}
	methodName3 := NewStringNameWithLatin1Chars("rotated")
	defer methodName3.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_rotated")
	globalTransform3DMethodBindings.method_rotated = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName3.AsGDExtensionStringNamePtr(), 1563203923)
	if globalTransform3DMethodBindings.method_rotated == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_rotated")
	}
	methodName4 := NewStringNameWithLatin1Chars("rotated_local")
	defer methodName4.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_rotated_local")
	globalTransform3DMethodBindings.method_rotated_local = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName4.AsGDExtensionStringNamePtr(), 1563203923)
	if globalTransform3DMethodBindings.method_rotated_local == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_rotated_local")
	}
	methodName5 := NewStringNameWithLatin1Chars("scaled")
	defer methodName5.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_scaled")
	globalTransform3DMethodBindings.method_scaled = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName5.AsGDExtensionStringNamePtr(), 1405596198)
	if globalTransform3DMethodBindings.method_scaled == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_scaled")
	}
	methodName6 := NewStringNameWithLatin1Chars("scaled_local")
	defer methodName6.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_scaled_local")
	globalTransform3DMethodBindings.method_scaled_local = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName6.AsGDExtensionStringNamePtr(), 1405596198)
	if globalTransform3DMethodBindings.method_scaled_local == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_scaled_local")
	}
	methodName7 := NewStringNameWithLatin1Chars("translated")
	defer methodName7.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_translated")
	globalTransform3DMethodBindings.method_translated = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName7.AsGDExtensionStringNamePtr(), 1405596198)
	if globalTransform3DMethodBindings.method_translated == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_translated")
	}
	methodName8 := NewStringNameWithLatin1Chars("translated_local")
	defer methodName8.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_translated_local")
	globalTransform3DMethodBindings.method_translated_local = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName8.AsGDExtensionStringNamePtr(), 1405596198)
	if globalTransform3DMethodBindings.method_translated_local == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_translated_local")
	}
	methodName9 := NewStringNameWithLatin1Chars("looking_at")
	defer methodName9.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_looking_at")
	globalTransform3DMethodBindings.method_looking_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName9.AsGDExtensionStringNamePtr(), 806929180)
	if globalTransform3DMethodBindings.method_looking_at == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_looking_at")
	}
	methodName10 := NewStringNameWithLatin1Chars("interpolate_with")
	defer methodName10.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_interpolate_with")
	globalTransform3DMethodBindings.method_interpolate_with = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName10.AsGDExtensionStringNamePtr(), 1786453358)
	if globalTransform3DMethodBindings.method_interpolate_with == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_interpolate_with")
	}
	methodName11 := NewStringNameWithLatin1Chars("is_equal_approx")
	defer methodName11.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_is_equal_approx")
	globalTransform3DMethodBindings.method_is_equal_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName11.AsGDExtensionStringNamePtr(), 696001652)
	if globalTransform3DMethodBindings.method_is_equal_approx == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_is_equal_approx")
	}
	methodName12 := NewStringNameWithLatin1Chars("is_finite")
	defer methodName12.Destroy()
	log.Debug("globalTransform3DMethodBindings.method_is_finite")
	globalTransform3DMethodBindings.method_is_finite = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, methodName12.AsGDExtensionStringNamePtr(), 3918633141)
	if globalTransform3DMethodBindings.method_is_finite == nil {
		missingMethods = append(missingMethods, "globalTransform3DMethodBindings.method_is_finite")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("basis")
	defer memberName0.Destroy()
	log.Debug("globalTransform3DMethodBindings.member_basis_setter")
	globalTransform3DMethodBindings.member_basis_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalTransform3DMethodBindings.member_basis_getter")
	globalTransform3DMethodBindings.member_basis_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("origin")
	defer memberName1.Destroy()
	log.Debug("globalTransform3DMethodBindings.member_origin_setter")
	globalTransform3DMethodBindings.member_origin_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalTransform3DMethodBindings.member_origin_getter")
	globalTransform3DMethodBindings.member_origin_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalTransform3DMethodBindings.operator: equal Variant")
	globalTransform3DMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalTransform3DMethodBindings.operator: not_equal Variant")
	globalTransform3DMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalTransform3DMethodBindings.operator: multiply int")
	globalTransform3DMethodBindings.operator_multiply_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalTransform3DMethodBindings.operator: multiply float")
	globalTransform3DMethodBindings.operator_multiply_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalTransform3DMethodBindings.operator: multiply Vector3")
	globalTransform3DMethodBindings.operator_multiply_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalTransform3DMethodBindings.operator: multiply Plane")
	globalTransform3DMethodBindings.operator_multiply_Plane = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_PLANE)
	log.Debug("globalTransform3DMethodBindings.operator: multiply AABB")
	globalTransform3DMethodBindings.operator_multiply_AABB = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_AABB)
	log.Debug("globalTransform3DMethodBindings.operator: equal Transform3D")
	globalTransform3DMethodBindings.operator_equal_Transform3D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D)
	log.Debug("globalTransform3DMethodBindings.operator: not_equal Transform3D")
	globalTransform3DMethodBindings.operator_not_equal_Transform3D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D)
	log.Debug("globalTransform3DMethodBindings.operator: multiply Transform3D")
	globalTransform3DMethodBindings.operator_multiply_Transform3D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D)
	log.Debug("globalTransform3DMethodBindings.operator: in Dictionary")
	globalTransform3DMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalTransform3DMethodBindings.operator: in Array")
	globalTransform3DMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalTransform3DMethodBindings.operator: multiply PackedVector3Array")
	globalTransform3DMethodBindings.operator_multiply_PackedVector3Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
	log.Debug("transform3DInitBindings end")
}

func (c *Transform3D) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewTransform3D, index: 0
func NewTransform3D() Transform3D {
	cx := Transform3D{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalTransform3DMethodBindings.constructor_0, ptr)

	return cx
}

// NewTransform3D, index: 1
func NewTransform3DWithTransform3D(from Transform3D) Transform3D {
	cx := Transform3D{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Transform3D
	// Transform3DEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalTransform3DMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewTransform3D, index: 2
func NewTransform3DWithBasisVector3(basis Basis, origin Vector3) Transform3D {
	cx := Transform3D{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Basis
	// BasisEncoder
	args[0] = (GDExtensionConstTypePtr)(basis.ptr())

	// Vector3
	// Vector3Encoder
	args[1] = (GDExtensionConstTypePtr)(origin.ptr())
	callBuiltinConstructor(globalTransform3DMethodBindings.constructor_2, ptr, args[0], args[1])

	return cx
}

// NewTransform3D, index: 3
func NewTransform3DWithVector3Vector3Vector3Vector3(x_axis Vector3, y_axis Vector3, z_axis Vector3, origin Vector3) Transform3D {
	cx := Transform3D{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [4]GDExtensionConstTypePtr

	// Vector3
	// Vector3Encoder
	args[0] = (GDExtensionConstTypePtr)(x_axis.ptr())

	// Vector3
	// Vector3Encoder
	args[1] = (GDExtensionConstTypePtr)(y_axis.ptr())

	// Vector3
	// Vector3Encoder
	args[2] = (GDExtensionConstTypePtr)(z_axis.ptr())

	// Vector3
	// Vector3Encoder
	args[3] = (GDExtensionConstTypePtr)(origin.ptr())
	callBuiltinConstructor(globalTransform3DMethodBindings.constructor_3, ptr, args[0], args[1], args[2], args[3])

	return cx
}

// NewTransform3D, index: 4
func NewTransform3DWithProjection(from Projection) Transform3D {
	cx := Transform3D{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Projection
	// ProjectionEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalTransform3DMethodBindings.constructor_4, ptr, args[0])

	return cx
}

// methods

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Inverse() Transform3D {
	mb := globalTransform3DMethodBindings.method_inverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, nil)
	return ret

}

/* AffineInverse : affine_inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) AffineInverse() Transform3D {
	mb := globalTransform3DMethodBindings.method_affine_inverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, nil)
	return ret

}

/* Orthonormalized : orthonormalized
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Orthonormalized() Transform3D {
	mb := globalTransform3DMethodBindings.method_orthonormalized

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, nil)
	return ret

}

/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Rotated(axis Vector3, angle float32) Transform3D {
	mb := globalTransform3DMethodBindings.method_rotated

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&axis))

	eArg1 := Float32Encoder.EncodeArg(angle)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* RotatedLocal : rotated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) RotatedLocal(axis Vector3, angle float32) Transform3D {
	mb := globalTransform3DMethodBindings.method_rotated_local

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&axis))

	eArg1 := Float32Encoder.EncodeArg(angle)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Scaled : scaled
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Scaled(scale Vector3) Transform3D {
	mb := globalTransform3DMethodBindings.method_scaled

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&scale))

	ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ScaledLocal : scaled_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) ScaledLocal(scale Vector3) Transform3D {
	mb := globalTransform3DMethodBindings.method_scaled_local

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&scale))

	ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Translated : translated
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Translated(offset Vector3) Transform3D {
	mb := globalTransform3DMethodBindings.method_translated

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&offset))

	ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* TranslatedLocal : translated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) TranslatedLocal(offset Vector3) Transform3D {
	mb := globalTransform3DMethodBindings.method_translated_local

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&offset))

	ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* LookingAt : looking_at
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) LookingAt(target Vector3, up Vector3) Transform3D {
	mb := globalTransform3DMethodBindings.method_looking_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&target))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&up))

	ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* InterpolateWith : interpolate_with
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) InterpolateWith(xform Transform3D, weight float32) Transform3D {
	mb := globalTransform3DMethodBindings.method_interpolate_with

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&xform))

	eArg1 := Float32Encoder.EncodeArg(weight)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Transform3D) IsEqualApprox(xform Transform3D) bool {
	mb := globalTransform3DMethodBindings.method_is_equal_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&xform))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Transform3D) IsFinite() bool {
	mb := globalTransform3DMethodBindings.method_is_finite

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

// members

func (cx *Transform3D) MemberGetbasis() Basis {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Basis](globalTransform3DMethodBindings.member_basis_getter, bx)
	return ret

}

func (cx *Transform3D) MemberGetorigin() Vector3 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector3](globalTransform3DMethodBindings.member_origin_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Transform3D) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Transform3D) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Multiply_int operator
func (cx *Transform3D) Multiply_int(right int32) Transform3D {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Transform3D](globalTransform3DMethodBindings.operator_multiply_int, lt, rt)
}

// Multiply_float operator
func (cx *Transform3D) Multiply_float(right float32) Transform3D {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Transform3D](globalTransform3DMethodBindings.operator_multiply_float, lt, rt)
}

// Multiply_Vector3 operator
func (cx *Transform3D) Multiply_Vector3(right Vector3) Vector3 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector3](globalTransform3DMethodBindings.operator_multiply_Vector3, lt, rt)
}

// Multiply_Plane operator
func (cx *Transform3D) Multiply_Plane(right Plane) Plane {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Plane](globalTransform3DMethodBindings.operator_multiply_Plane, lt, rt)
}

// Multiply_AABB operator
func (cx *Transform3D) Multiply_AABB(right AABB) AABB {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[AABB](globalTransform3DMethodBindings.operator_multiply_AABB, lt, rt)
}

// Equal_Transform3D operator
func (cx *Transform3D) Equal_Transform3D(right Transform3D) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_equal_Transform3D, lt, rt)
}

// Not_equal_Transform3D operator
func (cx *Transform3D) Not_equal_Transform3D(right Transform3D) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_not_equal_Transform3D, lt, rt)
}

// Multiply_Transform3D operator
func (cx *Transform3D) Multiply_Transform3D(right Transform3D) Transform3D {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Transform3D](globalTransform3DMethodBindings.operator_multiply_Transform3D, lt, rt)
}

// In_Dictionary operator
func (cx *Transform3D) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Transform3D) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_in_Array, lt, rt)
}

// Multiply_PackedVector3Array operator
func (cx *Transform3D) Multiply_PackedVector3Array(right PackedVector3Array) PackedVector3Array {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedVector3Array](globalTransform3DMethodBindings.operator_multiply_PackedVector3Array, lt, rt)
}

/*
 * Projection
 * indexingReturnType: Vector4
 * isKeyed: false
 * hasDestructor: false
 */
type Projection struct {
	opaque [64]uint8
}

type projectionMethodBindings struct {
	constructor_0                     GDExtensionPtrConstructor
	constructor_1                     GDExtensionPtrConstructor
	constructor_2                     GDExtensionPtrConstructor
	constructor_3                     GDExtensionPtrConstructor
	method_create_depth_correction    GDExtensionPtrBuiltInMethod
	method_create_light_atlas_rect    GDExtensionPtrBuiltInMethod
	method_create_perspective         GDExtensionPtrBuiltInMethod
	method_create_perspective_hmd     GDExtensionPtrBuiltInMethod
	method_create_for_hmd             GDExtensionPtrBuiltInMethod
	method_create_orthogonal          GDExtensionPtrBuiltInMethod
	method_create_orthogonal_aspect   GDExtensionPtrBuiltInMethod
	method_create_frustum             GDExtensionPtrBuiltInMethod
	method_create_frustum_aspect      GDExtensionPtrBuiltInMethod
	method_create_fit_aabb            GDExtensionPtrBuiltInMethod
	method_determinant                GDExtensionPtrBuiltInMethod
	method_perspective_znear_adjusted GDExtensionPtrBuiltInMethod
	method_get_projection_plane       GDExtensionPtrBuiltInMethod
	method_flipped_y                  GDExtensionPtrBuiltInMethod
	method_jitter_offseted            GDExtensionPtrBuiltInMethod
	method_get_fovy                   GDExtensionPtrBuiltInMethod
	method_get_z_far                  GDExtensionPtrBuiltInMethod
	method_get_z_near                 GDExtensionPtrBuiltInMethod
	method_get_aspect                 GDExtensionPtrBuiltInMethod
	method_get_fov                    GDExtensionPtrBuiltInMethod
	method_is_orthogonal              GDExtensionPtrBuiltInMethod
	method_get_viewport_half_extents  GDExtensionPtrBuiltInMethod
	method_get_far_plane_half_extents GDExtensionPtrBuiltInMethod
	method_inverse                    GDExtensionPtrBuiltInMethod
	method_get_pixels_per_meter       GDExtensionPtrBuiltInMethod
	method_get_lod_multiplier         GDExtensionPtrBuiltInMethod
	member_x_setter                   GDExtensionPtrSetter
	member_x_getter                   GDExtensionPtrGetter
	member_y_setter                   GDExtensionPtrSetter
	member_y_getter                   GDExtensionPtrGetter
	member_z_setter                   GDExtensionPtrSetter
	member_z_getter                   GDExtensionPtrGetter
	member_w_setter                   GDExtensionPtrSetter
	member_w_getter                   GDExtensionPtrGetter
	indexed_setter                    GDExtensionPtrIndexedSetter
	indexed_getter                    GDExtensionPtrIndexedGetter
	operator_equal_Variant            GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant        GDExtensionPtrOperatorEvaluator
	operator_multiply_Vector4         GDExtensionPtrOperatorEvaluator
	operator_equal_Projection         GDExtensionPtrOperatorEvaluator
	operator_not_equal_Projection     GDExtensionPtrOperatorEvaluator
	operator_multiply_Projection      GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary            GDExtensionPtrOperatorEvaluator
	operator_in_Array                 GDExtensionPtrOperatorEvaluator
}

var globalProjectionMethodBindings projectionMethodBindings

func projectionInitConstructorBindings() {
	log.Debug("projectionInitConstructorBindings called")

	log.Debug("globalProjectionMethodBindings.constructor_0")
	globalProjectionMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, 0)
	log.Debug("globalProjectionMethodBindings.constructor_1")
	globalProjectionMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, 1)
	log.Debug("globalProjectionMethodBindings.constructor_2")
	globalProjectionMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, 2)
	log.Debug("globalProjectionMethodBindings.constructor_3")
	globalProjectionMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, 3)
}

func projectionInitMethodBindings() {
	log.Debug("projectionInitMethodBindings called")

	missingMethods := make([]string, 0, 26)

	methodName0 := NewStringNameWithLatin1Chars("create_depth_correction")
	defer methodName0.Destroy()
	log.Debug("globalProjectionMethodBindings.method_create_depth_correction")
	globalProjectionMethodBindings.method_create_depth_correction = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName0.AsGDExtensionStringNamePtr(), 1228516048)
	if globalProjectionMethodBindings.method_create_depth_correction == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_create_depth_correction")
	}
	methodName1 := NewStringNameWithLatin1Chars("create_light_atlas_rect")
	defer methodName1.Destroy()
	log.Debug("globalProjectionMethodBindings.method_create_light_atlas_rect")
	globalProjectionMethodBindings.method_create_light_atlas_rect = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName1.AsGDExtensionStringNamePtr(), 2654950662)
	if globalProjectionMethodBindings.method_create_light_atlas_rect == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_create_light_atlas_rect")
	}
	methodName2 := NewStringNameWithLatin1Chars("create_perspective")
	defer methodName2.Destroy()
	log.Debug("globalProjectionMethodBindings.method_create_perspective")
	globalProjectionMethodBindings.method_create_perspective = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName2.AsGDExtensionStringNamePtr(), 390915442)
	if globalProjectionMethodBindings.method_create_perspective == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_create_perspective")
	}
	methodName3 := NewStringNameWithLatin1Chars("create_perspective_hmd")
	defer methodName3.Destroy()
	log.Debug("globalProjectionMethodBindings.method_create_perspective_hmd")
	globalProjectionMethodBindings.method_create_perspective_hmd = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName3.AsGDExtensionStringNamePtr(), 2857674800)
	if globalProjectionMethodBindings.method_create_perspective_hmd == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_create_perspective_hmd")
	}
	methodName4 := NewStringNameWithLatin1Chars("create_for_hmd")
	defer methodName4.Destroy()
	log.Debug("globalProjectionMethodBindings.method_create_for_hmd")
	globalProjectionMethodBindings.method_create_for_hmd = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName4.AsGDExtensionStringNamePtr(), 4184144994)
	if globalProjectionMethodBindings.method_create_for_hmd == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_create_for_hmd")
	}
	methodName5 := NewStringNameWithLatin1Chars("create_orthogonal")
	defer methodName5.Destroy()
	log.Debug("globalProjectionMethodBindings.method_create_orthogonal")
	globalProjectionMethodBindings.method_create_orthogonal = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName5.AsGDExtensionStringNamePtr(), 3707929169)
	if globalProjectionMethodBindings.method_create_orthogonal == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_create_orthogonal")
	}
	methodName6 := NewStringNameWithLatin1Chars("create_orthogonal_aspect")
	defer methodName6.Destroy()
	log.Debug("globalProjectionMethodBindings.method_create_orthogonal_aspect")
	globalProjectionMethodBindings.method_create_orthogonal_aspect = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName6.AsGDExtensionStringNamePtr(), 390915442)
	if globalProjectionMethodBindings.method_create_orthogonal_aspect == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_create_orthogonal_aspect")
	}
	methodName7 := NewStringNameWithLatin1Chars("create_frustum")
	defer methodName7.Destroy()
	log.Debug("globalProjectionMethodBindings.method_create_frustum")
	globalProjectionMethodBindings.method_create_frustum = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName7.AsGDExtensionStringNamePtr(), 3707929169)
	if globalProjectionMethodBindings.method_create_frustum == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_create_frustum")
	}
	methodName8 := NewStringNameWithLatin1Chars("create_frustum_aspect")
	defer methodName8.Destroy()
	log.Debug("globalProjectionMethodBindings.method_create_frustum_aspect")
	globalProjectionMethodBindings.method_create_frustum_aspect = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName8.AsGDExtensionStringNamePtr(), 1535076251)
	if globalProjectionMethodBindings.method_create_frustum_aspect == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_create_frustum_aspect")
	}
	methodName9 := NewStringNameWithLatin1Chars("create_fit_aabb")
	defer methodName9.Destroy()
	log.Debug("globalProjectionMethodBindings.method_create_fit_aabb")
	globalProjectionMethodBindings.method_create_fit_aabb = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName9.AsGDExtensionStringNamePtr(), 2264694907)
	if globalProjectionMethodBindings.method_create_fit_aabb == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_create_fit_aabb")
	}
	methodName10 := NewStringNameWithLatin1Chars("determinant")
	defer methodName10.Destroy()
	log.Debug("globalProjectionMethodBindings.method_determinant")
	globalProjectionMethodBindings.method_determinant = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName10.AsGDExtensionStringNamePtr(), 466405837)
	if globalProjectionMethodBindings.method_determinant == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_determinant")
	}
	methodName11 := NewStringNameWithLatin1Chars("perspective_znear_adjusted")
	defer methodName11.Destroy()
	log.Debug("globalProjectionMethodBindings.method_perspective_znear_adjusted")
	globalProjectionMethodBindings.method_perspective_znear_adjusted = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName11.AsGDExtensionStringNamePtr(), 3584785443)
	if globalProjectionMethodBindings.method_perspective_znear_adjusted == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_perspective_znear_adjusted")
	}
	methodName12 := NewStringNameWithLatin1Chars("get_projection_plane")
	defer methodName12.Destroy()
	log.Debug("globalProjectionMethodBindings.method_get_projection_plane")
	globalProjectionMethodBindings.method_get_projection_plane = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName12.AsGDExtensionStringNamePtr(), 1551184160)
	if globalProjectionMethodBindings.method_get_projection_plane == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_get_projection_plane")
	}
	methodName13 := NewStringNameWithLatin1Chars("flipped_y")
	defer methodName13.Destroy()
	log.Debug("globalProjectionMethodBindings.method_flipped_y")
	globalProjectionMethodBindings.method_flipped_y = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName13.AsGDExtensionStringNamePtr(), 4212530932)
	if globalProjectionMethodBindings.method_flipped_y == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_flipped_y")
	}
	methodName14 := NewStringNameWithLatin1Chars("jitter_offseted")
	defer methodName14.Destroy()
	log.Debug("globalProjectionMethodBindings.method_jitter_offseted")
	globalProjectionMethodBindings.method_jitter_offseted = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName14.AsGDExtensionStringNamePtr(), 2448438599)
	if globalProjectionMethodBindings.method_jitter_offseted == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_jitter_offseted")
	}
	methodName15 := NewStringNameWithLatin1Chars("get_fovy")
	defer methodName15.Destroy()
	log.Debug("globalProjectionMethodBindings.method_get_fovy")
	globalProjectionMethodBindings.method_get_fovy = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName15.AsGDExtensionStringNamePtr(), 3514207532)
	if globalProjectionMethodBindings.method_get_fovy == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_get_fovy")
	}
	methodName16 := NewStringNameWithLatin1Chars("get_z_far")
	defer methodName16.Destroy()
	log.Debug("globalProjectionMethodBindings.method_get_z_far")
	globalProjectionMethodBindings.method_get_z_far = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName16.AsGDExtensionStringNamePtr(), 466405837)
	if globalProjectionMethodBindings.method_get_z_far == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_get_z_far")
	}
	methodName17 := NewStringNameWithLatin1Chars("get_z_near")
	defer methodName17.Destroy()
	log.Debug("globalProjectionMethodBindings.method_get_z_near")
	globalProjectionMethodBindings.method_get_z_near = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName17.AsGDExtensionStringNamePtr(), 466405837)
	if globalProjectionMethodBindings.method_get_z_near == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_get_z_near")
	}
	methodName18 := NewStringNameWithLatin1Chars("get_aspect")
	defer methodName18.Destroy()
	log.Debug("globalProjectionMethodBindings.method_get_aspect")
	globalProjectionMethodBindings.method_get_aspect = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName18.AsGDExtensionStringNamePtr(), 466405837)
	if globalProjectionMethodBindings.method_get_aspect == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_get_aspect")
	}
	methodName19 := NewStringNameWithLatin1Chars("get_fov")
	defer methodName19.Destroy()
	log.Debug("globalProjectionMethodBindings.method_get_fov")
	globalProjectionMethodBindings.method_get_fov = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName19.AsGDExtensionStringNamePtr(), 466405837)
	if globalProjectionMethodBindings.method_get_fov == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_get_fov")
	}
	methodName20 := NewStringNameWithLatin1Chars("is_orthogonal")
	defer methodName20.Destroy()
	log.Debug("globalProjectionMethodBindings.method_is_orthogonal")
	globalProjectionMethodBindings.method_is_orthogonal = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName20.AsGDExtensionStringNamePtr(), 3918633141)
	if globalProjectionMethodBindings.method_is_orthogonal == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_is_orthogonal")
	}
	methodName21 := NewStringNameWithLatin1Chars("get_viewport_half_extents")
	defer methodName21.Destroy()
	log.Debug("globalProjectionMethodBindings.method_get_viewport_half_extents")
	globalProjectionMethodBindings.method_get_viewport_half_extents = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName21.AsGDExtensionStringNamePtr(), 2428350749)
	if globalProjectionMethodBindings.method_get_viewport_half_extents == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_get_viewport_half_extents")
	}
	methodName22 := NewStringNameWithLatin1Chars("get_far_plane_half_extents")
	defer methodName22.Destroy()
	log.Debug("globalProjectionMethodBindings.method_get_far_plane_half_extents")
	globalProjectionMethodBindings.method_get_far_plane_half_extents = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName22.AsGDExtensionStringNamePtr(), 2428350749)
	if globalProjectionMethodBindings.method_get_far_plane_half_extents == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_get_far_plane_half_extents")
	}
	methodName23 := NewStringNameWithLatin1Chars("inverse")
	defer methodName23.Destroy()
	log.Debug("globalProjectionMethodBindings.method_inverse")
	globalProjectionMethodBindings.method_inverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName23.AsGDExtensionStringNamePtr(), 4212530932)
	if globalProjectionMethodBindings.method_inverse == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_inverse")
	}
	methodName24 := NewStringNameWithLatin1Chars("get_pixels_per_meter")
	defer methodName24.Destroy()
	log.Debug("globalProjectionMethodBindings.method_get_pixels_per_meter")
	globalProjectionMethodBindings.method_get_pixels_per_meter = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName24.AsGDExtensionStringNamePtr(), 4103005248)
	if globalProjectionMethodBindings.method_get_pixels_per_meter == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_get_pixels_per_meter")
	}
	methodName25 := NewStringNameWithLatin1Chars("get_lod_multiplier")
	defer methodName25.Destroy()
	log.Debug("globalProjectionMethodBindings.method_get_lod_multiplier")
	globalProjectionMethodBindings.method_get_lod_multiplier = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, methodName25.AsGDExtensionStringNamePtr(), 466405837)
	if globalProjectionMethodBindings.method_get_lod_multiplier == nil {
		missingMethods = append(missingMethods, "globalProjectionMethodBindings.method_get_lod_multiplier")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("x")
	defer memberName0.Destroy()
	log.Debug("globalProjectionMethodBindings.member_x_setter")
	globalProjectionMethodBindings.member_x_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalProjectionMethodBindings.member_x_getter")
	globalProjectionMethodBindings.member_x_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("y")
	defer memberName1.Destroy()
	log.Debug("globalProjectionMethodBindings.member_y_setter")
	globalProjectionMethodBindings.member_y_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalProjectionMethodBindings.member_y_getter")
	globalProjectionMethodBindings.member_y_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("z")
	defer memberName2.Destroy()
	log.Debug("globalProjectionMethodBindings.member_z_setter")
	globalProjectionMethodBindings.member_z_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalProjectionMethodBindings.member_z_getter")
	globalProjectionMethodBindings.member_z_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, memberName2.AsGDExtensionStringNamePtr())
	memberName3 := NewStringNameWithLatin1Chars("w")
	defer memberName3.Destroy()
	log.Debug("globalProjectionMethodBindings.member_w_setter")
	globalProjectionMethodBindings.member_w_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, memberName3.AsGDExtensionStringNamePtr())
	log.Debug("globalProjectionMethodBindings.member_w_getter")
	globalProjectionMethodBindings.member_w_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION, memberName3.AsGDExtensionStringNamePtr())
	log.Debug("globalProjectionMethodBindings.indexed_setter")
	globalProjectionMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION)
	log.Debug("globalProjectionMethodBindings.indexed_getter")
	globalProjectionMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PROJECTION)
	log.Debug("globalProjectionMethodBindings.operator: equal Variant")
	globalProjectionMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PROJECTION, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalProjectionMethodBindings.operator: not_equal Variant")
	globalProjectionMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PROJECTION, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalProjectionMethodBindings.operator: multiply Vector4")
	globalProjectionMethodBindings.operator_multiply_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_PROJECTION, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalProjectionMethodBindings.operator: equal Projection")
	globalProjectionMethodBindings.operator_equal_Projection = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PROJECTION, GDEXTENSION_VARIANT_TYPE_PROJECTION)
	log.Debug("globalProjectionMethodBindings.operator: not_equal Projection")
	globalProjectionMethodBindings.operator_not_equal_Projection = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PROJECTION, GDEXTENSION_VARIANT_TYPE_PROJECTION)
	log.Debug("globalProjectionMethodBindings.operator: multiply Projection")
	globalProjectionMethodBindings.operator_multiply_Projection = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_PROJECTION, GDEXTENSION_VARIANT_TYPE_PROJECTION)
	log.Debug("globalProjectionMethodBindings.operator: in Dictionary")
	globalProjectionMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PROJECTION, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalProjectionMethodBindings.operator: in Array")
	globalProjectionMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PROJECTION, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("projectionInitBindings end")
}

func (c *Projection) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewProjection, index: 0
func NewProjection() Projection {
	cx := Projection{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalProjectionMethodBindings.constructor_0, ptr)

	return cx
}

// NewProjection, index: 1
func NewProjectionWithProjection(from Projection) Projection {
	cx := Projection{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Projection
	// ProjectionEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalProjectionMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewProjection, index: 2
func NewProjectionWithTransform3D(from Transform3D) Projection {
	cx := Projection{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Transform3D
	// Transform3DEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalProjectionMethodBindings.constructor_2, ptr, args[0])

	return cx
}

// NewProjection, index: 3
func NewProjectionWithVector4Vector4Vector4Vector4(x_axis Vector4, y_axis Vector4, z_axis Vector4, w_axis Vector4) Projection {
	cx := Projection{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [4]GDExtensionConstTypePtr

	// Vector4
	// Vector4Encoder
	args[0] = (GDExtensionConstTypePtr)(x_axis.ptr())

	// Vector4
	// Vector4Encoder
	args[1] = (GDExtensionConstTypePtr)(y_axis.ptr())

	// Vector4
	// Vector4Encoder
	args[2] = (GDExtensionConstTypePtr)(z_axis.ptr())

	// Vector4
	// Vector4Encoder
	args[3] = (GDExtensionConstTypePtr)(w_axis.ptr())
	callBuiltinConstructor(globalProjectionMethodBindings.constructor_3, ptr, args[0], args[1], args[2], args[3])

	return cx
}

// methods

/* CreateDepthCorrection : create_depth_correction
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateDepthCorrection(flip_y bool) Projection {
	mb := globalProjectionMethodBindings.method_create_depth_correction

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := BoolEncoder.EncodeArg(flip_y)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CreateLightAtlasRect : create_light_atlas_rect
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateLightAtlasRect(rect Rect2) Projection {
	mb := globalProjectionMethodBindings.method_create_light_atlas_rect

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Rect2Encoder.EncodeArg(rect)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CreatePerspective : create_perspective
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreatePerspective(fovy float32, aspect float32, z_near float32, z_far float32, flip_fov bool) Projection {
	mb := globalProjectionMethodBindings.method_create_perspective

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 5
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(fovy)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(aspect)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Float32Encoder.EncodeArg(z_near)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(z_far)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	eArg4 := BoolEncoder.EncodeArg(flip_fov)
	args[4] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg4))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CreatePerspectiveHmd : create_perspective_hmd
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreatePerspectiveHmd(fovy float32, aspect float32, z_near float32, z_far float32, flip_fov bool, eye int32, intraocular_dist float32, convergence_dist float32) Projection {
	mb := globalProjectionMethodBindings.method_create_perspective_hmd

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 8
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(fovy)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(aspect)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Float32Encoder.EncodeArg(z_near)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(z_far)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	eArg4 := BoolEncoder.EncodeArg(flip_fov)
	args[4] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg4))

	eArg5 := Int32Encoder.EncodeArg(eye)
	args[5] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg5))

	eArg6 := Float32Encoder.EncodeArg(intraocular_dist)
	args[6] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg6))

	eArg7 := Float32Encoder.EncodeArg(convergence_dist)
	args[7] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg7))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CreateForHmd : create_for_hmd
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateForHmd(eye int32, aspect float32, intraocular_dist float32, display_width float32, display_to_lens float32, oversample float32, z_near float32, z_far float32) Projection {
	mb := globalProjectionMethodBindings.method_create_for_hmd

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 8
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(eye)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(aspect)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Float32Encoder.EncodeArg(intraocular_dist)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(display_width)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	eArg4 := Float32Encoder.EncodeArg(display_to_lens)
	args[4] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg4))

	eArg5 := Float32Encoder.EncodeArg(oversample)
	args[5] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg5))

	eArg6 := Float32Encoder.EncodeArg(z_near)
	args[6] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg6))

	eArg7 := Float32Encoder.EncodeArg(z_far)
	args[7] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg7))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CreateOrthogonal : create_orthogonal
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateOrthogonal(left float32, right float32, bottom float32, top float32, z_near float32, z_far float32) Projection {
	mb := globalProjectionMethodBindings.method_create_orthogonal

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 6
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(left)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(right)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Float32Encoder.EncodeArg(bottom)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(top)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	eArg4 := Float32Encoder.EncodeArg(z_near)
	args[4] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg4))

	eArg5 := Float32Encoder.EncodeArg(z_far)
	args[5] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg5))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CreateOrthogonalAspect : create_orthogonal_aspect
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateOrthogonalAspect(size float32, aspect float32, z_near float32, z_far float32, flip_fov bool) Projection {
	mb := globalProjectionMethodBindings.method_create_orthogonal_aspect

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 5
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(aspect)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Float32Encoder.EncodeArg(z_near)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(z_far)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	eArg4 := BoolEncoder.EncodeArg(flip_fov)
	args[4] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg4))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CreateFrustum : create_frustum
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateFrustum(left float32, right float32, bottom float32, top float32, z_near float32, z_far float32) Projection {
	mb := globalProjectionMethodBindings.method_create_frustum

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 6
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(left)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(right)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Float32Encoder.EncodeArg(bottom)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(top)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	eArg4 := Float32Encoder.EncodeArg(z_near)
	args[4] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg4))

	eArg5 := Float32Encoder.EncodeArg(z_far)
	args[5] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg5))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CreateFrustumAspect : create_frustum_aspect
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateFrustumAspect(size float32, aspect float32, offset Vector2, z_near float32, z_far float32, flip_fov bool) Projection {
	mb := globalProjectionMethodBindings.method_create_frustum_aspect

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 6
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(aspect)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Vector2Encoder.EncodeArg(offset)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(z_near)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	eArg4 := Float32Encoder.EncodeArg(z_far)
	args[4] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg4))

	eArg5 := BoolEncoder.EncodeArg(flip_fov)
	args[5] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg5))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* CreateFitAabb : create_fit_aabb
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateFitAabb(aabb AABB) Projection {
	mb := globalProjectionMethodBindings.method_create_fit_aabb

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&aabb))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Determinant : determinant
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) Determinant() float32 {
	mb := globalProjectionMethodBindings.method_determinant

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* PerspectiveZnearAdjusted : perspective_znear_adjusted
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) PerspectiveZnearAdjusted(new_znear float32) Projection {
	mb := globalProjectionMethodBindings.method_perspective_znear_adjusted

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(new_znear)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetProjectionPlane : get_projection_plane
 * is_vararg = false, is_static = false
 * goReturnType(Plane) -> Plane
 */
func (cx *Projection) GetProjectionPlane(plane int32) Plane {
	mb := globalProjectionMethodBindings.method_get_projection_plane

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(plane)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Plane](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* FlippedY : flipped_y
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) FlippedY() Projection {
	mb := globalProjectionMethodBindings.method_flipped_y

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, nil)
	return ret

}

/* JitterOffseted : jitter_offseted
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) JitterOffseted(offset Vector2) Projection {
	mb := globalProjectionMethodBindings.method_jitter_offseted

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetFovy : get_fovy
 * is_vararg = false, is_static = true
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetFovy(fovx float32, aspect float32) float32 {
	mb := globalProjectionMethodBindings.method_get_fovy

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(fovx)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(aspect)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetZFar : get_z_far
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetZFar() float32 {
	mb := globalProjectionMethodBindings.method_get_z_far

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* GetZNear : get_z_near
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetZNear() float32 {
	mb := globalProjectionMethodBindings.method_get_z_near

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* GetAspect : get_aspect
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetAspect() float32 {
	mb := globalProjectionMethodBindings.method_get_aspect

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* GetFov : get_fov
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetFov() float32 {
	mb := globalProjectionMethodBindings.method_get_fov

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* IsOrthogonal : is_orthogonal
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Projection) IsOrthogonal() bool {
	mb := globalProjectionMethodBindings.method_is_orthogonal

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* GetViewportHalfExtents : get_viewport_half_extents
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Projection) GetViewportHalfExtents() Vector2 {
	mb := globalProjectionMethodBindings.method_get_viewport_half_extents

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* GetFarPlaneHalfExtents : get_far_plane_half_extents
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Projection) GetFarPlaneHalfExtents() Vector2 {
	mb := globalProjectionMethodBindings.method_get_far_plane_half_extents

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret

}

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) Inverse() Projection {
	mb := globalProjectionMethodBindings.method_inverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Projection](mb, bx, nil)
	return ret

}

/* GetPixelsPerMeter : get_pixels_per_meter
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Projection) GetPixelsPerMeter(for_pixel_width int32) int32 {
	mb := globalProjectionMethodBindings.method_get_pixels_per_meter

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(for_pixel_width)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetLodMultiplier : get_lod_multiplier
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetLodMultiplier() float32 {
	mb := globalProjectionMethodBindings.method_get_lod_multiplier

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

// members

func (cx *Projection) MemberGetx() Vector4 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_x_getter, bx)
	return ret

}

func (cx *Projection) MemberGety() Vector4 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_y_getter, bx)
	return ret

}

func (cx *Projection) MemberGetz() Vector4 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_z_getter, bx)
	return ret

}

func (cx *Projection) MemberGetw() Vector4 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_w_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Projection) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Projection) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Multiply_Vector4 operator
func (cx *Projection) Multiply_Vector4(right Vector4) Vector4 {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Vector4](globalProjectionMethodBindings.operator_multiply_Vector4, lt, rt)
}

// Equal_Projection operator
func (cx *Projection) Equal_Projection(right Projection) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_equal_Projection, lt, rt)
}

// Not_equal_Projection operator
func (cx *Projection) Not_equal_Projection(right Projection) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_not_equal_Projection, lt, rt)
}

// Multiply_Projection operator
func (cx *Projection) Multiply_Projection(right Projection) Projection {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Projection](globalProjectionMethodBindings.operator_multiply_Projection, lt, rt)
}

// In_Dictionary operator
func (cx *Projection) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Projection) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_in_Array, lt, rt)
}

/*
 * Color
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: false
 */
type Color struct {
	opaque [16]uint8
}

type colorMethodBindings struct {
	constructor_0                GDExtensionPtrConstructor
	constructor_1                GDExtensionPtrConstructor
	constructor_2                GDExtensionPtrConstructor
	constructor_3                GDExtensionPtrConstructor
	constructor_4                GDExtensionPtrConstructor
	constructor_5                GDExtensionPtrConstructor
	constructor_6                GDExtensionPtrConstructor
	method_to_argb32             GDExtensionPtrBuiltInMethod
	method_to_abgr32             GDExtensionPtrBuiltInMethod
	method_to_rgba32             GDExtensionPtrBuiltInMethod
	method_to_argb64             GDExtensionPtrBuiltInMethod
	method_to_abgr64             GDExtensionPtrBuiltInMethod
	method_to_rgba64             GDExtensionPtrBuiltInMethod
	method_to_html               GDExtensionPtrBuiltInMethod
	method_clamp                 GDExtensionPtrBuiltInMethod
	method_inverted              GDExtensionPtrBuiltInMethod
	method_lerp                  GDExtensionPtrBuiltInMethod
	method_lightened             GDExtensionPtrBuiltInMethod
	method_darkened              GDExtensionPtrBuiltInMethod
	method_blend                 GDExtensionPtrBuiltInMethod
	method_get_luminance         GDExtensionPtrBuiltInMethod
	method_srgb_to_linear        GDExtensionPtrBuiltInMethod
	method_linear_to_srgb        GDExtensionPtrBuiltInMethod
	method_is_equal_approx       GDExtensionPtrBuiltInMethod
	method_hex                   GDExtensionPtrBuiltInMethod
	method_hex64                 GDExtensionPtrBuiltInMethod
	method_html                  GDExtensionPtrBuiltInMethod
	method_html_is_valid         GDExtensionPtrBuiltInMethod
	method_from_string           GDExtensionPtrBuiltInMethod
	method_from_hsv              GDExtensionPtrBuiltInMethod
	method_from_ok_hsl           GDExtensionPtrBuiltInMethod
	method_from_rgbe9995         GDExtensionPtrBuiltInMethod
	member_r_setter              GDExtensionPtrSetter
	member_r_getter              GDExtensionPtrGetter
	member_g_setter              GDExtensionPtrSetter
	member_g_getter              GDExtensionPtrGetter
	member_b_setter              GDExtensionPtrSetter
	member_b_getter              GDExtensionPtrGetter
	member_a_setter              GDExtensionPtrSetter
	member_a_getter              GDExtensionPtrGetter
	member_r8_setter             GDExtensionPtrSetter
	member_r8_getter             GDExtensionPtrGetter
	member_g8_setter             GDExtensionPtrSetter
	member_g8_getter             GDExtensionPtrGetter
	member_b8_setter             GDExtensionPtrSetter
	member_b8_getter             GDExtensionPtrGetter
	member_a8_setter             GDExtensionPtrSetter
	member_a8_getter             GDExtensionPtrGetter
	member_h_setter              GDExtensionPtrSetter
	member_h_getter              GDExtensionPtrGetter
	member_s_setter              GDExtensionPtrSetter
	member_s_getter              GDExtensionPtrGetter
	member_v_setter              GDExtensionPtrSetter
	member_v_getter              GDExtensionPtrGetter
	indexed_setter               GDExtensionPtrIndexedSetter
	indexed_getter               GDExtensionPtrIndexedGetter
	operator_equal_Variant       GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant   GDExtensionPtrOperatorEvaluator
	operator_negate              GDExtensionPtrOperatorEvaluator
	operator_positive            GDExtensionPtrOperatorEvaluator
	operator_multiply_int        GDExtensionPtrOperatorEvaluator
	operator_divide_int          GDExtensionPtrOperatorEvaluator
	operator_multiply_float      GDExtensionPtrOperatorEvaluator
	operator_divide_float        GDExtensionPtrOperatorEvaluator
	operator_equal_Color         GDExtensionPtrOperatorEvaluator
	operator_not_equal_Color     GDExtensionPtrOperatorEvaluator
	operator_add_Color           GDExtensionPtrOperatorEvaluator
	operator_subtract_Color      GDExtensionPtrOperatorEvaluator
	operator_multiply_Color      GDExtensionPtrOperatorEvaluator
	operator_divide_Color        GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary       GDExtensionPtrOperatorEvaluator
	operator_in_Array            GDExtensionPtrOperatorEvaluator
	operator_in_PackedColorArray GDExtensionPtrOperatorEvaluator
}

var globalColorMethodBindings colorMethodBindings

func colorInitConstructorBindings() {
	log.Debug("colorInitConstructorBindings called")

	log.Debug("globalColorMethodBindings.constructor_0")
	globalColorMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, 0)
	log.Debug("globalColorMethodBindings.constructor_1")
	globalColorMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, 1)
	log.Debug("globalColorMethodBindings.constructor_2")
	globalColorMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, 2)
	log.Debug("globalColorMethodBindings.constructor_3")
	globalColorMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, 3)
	log.Debug("globalColorMethodBindings.constructor_4")
	globalColorMethodBindings.constructor_4 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, 4)
	log.Debug("globalColorMethodBindings.constructor_5")
	globalColorMethodBindings.constructor_5 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, 5)
	log.Debug("globalColorMethodBindings.constructor_6")
	globalColorMethodBindings.constructor_6 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, 6)
}

func colorInitMethodBindings() {
	log.Debug("colorInitMethodBindings called")

	missingMethods := make([]string, 0, 25)

	methodName0 := NewStringNameWithLatin1Chars("to_argb32")
	defer methodName0.Destroy()
	log.Debug("globalColorMethodBindings.method_to_argb32")
	globalColorMethodBindings.method_to_argb32 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalColorMethodBindings.method_to_argb32 == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_to_argb32")
	}
	methodName1 := NewStringNameWithLatin1Chars("to_abgr32")
	defer methodName1.Destroy()
	log.Debug("globalColorMethodBindings.method_to_abgr32")
	globalColorMethodBindings.method_to_abgr32 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName1.AsGDExtensionStringNamePtr(), 3173160232)
	if globalColorMethodBindings.method_to_abgr32 == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_to_abgr32")
	}
	methodName2 := NewStringNameWithLatin1Chars("to_rgba32")
	defer methodName2.Destroy()
	log.Debug("globalColorMethodBindings.method_to_rgba32")
	globalColorMethodBindings.method_to_rgba32 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName2.AsGDExtensionStringNamePtr(), 3173160232)
	if globalColorMethodBindings.method_to_rgba32 == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_to_rgba32")
	}
	methodName3 := NewStringNameWithLatin1Chars("to_argb64")
	defer methodName3.Destroy()
	log.Debug("globalColorMethodBindings.method_to_argb64")
	globalColorMethodBindings.method_to_argb64 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName3.AsGDExtensionStringNamePtr(), 3173160232)
	if globalColorMethodBindings.method_to_argb64 == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_to_argb64")
	}
	methodName4 := NewStringNameWithLatin1Chars("to_abgr64")
	defer methodName4.Destroy()
	log.Debug("globalColorMethodBindings.method_to_abgr64")
	globalColorMethodBindings.method_to_abgr64 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName4.AsGDExtensionStringNamePtr(), 3173160232)
	if globalColorMethodBindings.method_to_abgr64 == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_to_abgr64")
	}
	methodName5 := NewStringNameWithLatin1Chars("to_rgba64")
	defer methodName5.Destroy()
	log.Debug("globalColorMethodBindings.method_to_rgba64")
	globalColorMethodBindings.method_to_rgba64 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName5.AsGDExtensionStringNamePtr(), 3173160232)
	if globalColorMethodBindings.method_to_rgba64 == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_to_rgba64")
	}
	methodName6 := NewStringNameWithLatin1Chars("to_html")
	defer methodName6.Destroy()
	log.Debug("globalColorMethodBindings.method_to_html")
	globalColorMethodBindings.method_to_html = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName6.AsGDExtensionStringNamePtr(), 3429816538)
	if globalColorMethodBindings.method_to_html == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_to_html")
	}
	methodName7 := NewStringNameWithLatin1Chars("clamp")
	defer methodName7.Destroy()
	log.Debug("globalColorMethodBindings.method_clamp")
	globalColorMethodBindings.method_clamp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName7.AsGDExtensionStringNamePtr(), 105651410)
	if globalColorMethodBindings.method_clamp == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_clamp")
	}
	methodName8 := NewStringNameWithLatin1Chars("inverted")
	defer methodName8.Destroy()
	log.Debug("globalColorMethodBindings.method_inverted")
	globalColorMethodBindings.method_inverted = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName8.AsGDExtensionStringNamePtr(), 3334027602)
	if globalColorMethodBindings.method_inverted == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_inverted")
	}
	methodName9 := NewStringNameWithLatin1Chars("lerp")
	defer methodName9.Destroy()
	log.Debug("globalColorMethodBindings.method_lerp")
	globalColorMethodBindings.method_lerp = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName9.AsGDExtensionStringNamePtr(), 402949615)
	if globalColorMethodBindings.method_lerp == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_lerp")
	}
	methodName10 := NewStringNameWithLatin1Chars("lightened")
	defer methodName10.Destroy()
	log.Debug("globalColorMethodBindings.method_lightened")
	globalColorMethodBindings.method_lightened = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName10.AsGDExtensionStringNamePtr(), 1466039168)
	if globalColorMethodBindings.method_lightened == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_lightened")
	}
	methodName11 := NewStringNameWithLatin1Chars("darkened")
	defer methodName11.Destroy()
	log.Debug("globalColorMethodBindings.method_darkened")
	globalColorMethodBindings.method_darkened = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName11.AsGDExtensionStringNamePtr(), 1466039168)
	if globalColorMethodBindings.method_darkened == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_darkened")
	}
	methodName12 := NewStringNameWithLatin1Chars("blend")
	defer methodName12.Destroy()
	log.Debug("globalColorMethodBindings.method_blend")
	globalColorMethodBindings.method_blend = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName12.AsGDExtensionStringNamePtr(), 3803690977)
	if globalColorMethodBindings.method_blend == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_blend")
	}
	methodName13 := NewStringNameWithLatin1Chars("get_luminance")
	defer methodName13.Destroy()
	log.Debug("globalColorMethodBindings.method_get_luminance")
	globalColorMethodBindings.method_get_luminance = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName13.AsGDExtensionStringNamePtr(), 466405837)
	if globalColorMethodBindings.method_get_luminance == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_get_luminance")
	}
	methodName14 := NewStringNameWithLatin1Chars("srgb_to_linear")
	defer methodName14.Destroy()
	log.Debug("globalColorMethodBindings.method_srgb_to_linear")
	globalColorMethodBindings.method_srgb_to_linear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName14.AsGDExtensionStringNamePtr(), 3334027602)
	if globalColorMethodBindings.method_srgb_to_linear == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_srgb_to_linear")
	}
	methodName15 := NewStringNameWithLatin1Chars("linear_to_srgb")
	defer methodName15.Destroy()
	log.Debug("globalColorMethodBindings.method_linear_to_srgb")
	globalColorMethodBindings.method_linear_to_srgb = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName15.AsGDExtensionStringNamePtr(), 3334027602)
	if globalColorMethodBindings.method_linear_to_srgb == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_linear_to_srgb")
	}
	methodName16 := NewStringNameWithLatin1Chars("is_equal_approx")
	defer methodName16.Destroy()
	log.Debug("globalColorMethodBindings.method_is_equal_approx")
	globalColorMethodBindings.method_is_equal_approx = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName16.AsGDExtensionStringNamePtr(), 3167426256)
	if globalColorMethodBindings.method_is_equal_approx == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_is_equal_approx")
	}
	methodName17 := NewStringNameWithLatin1Chars("hex")
	defer methodName17.Destroy()
	log.Debug("globalColorMethodBindings.method_hex")
	globalColorMethodBindings.method_hex = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName17.AsGDExtensionStringNamePtr(), 351421375)
	if globalColorMethodBindings.method_hex == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_hex")
	}
	methodName18 := NewStringNameWithLatin1Chars("hex64")
	defer methodName18.Destroy()
	log.Debug("globalColorMethodBindings.method_hex64")
	globalColorMethodBindings.method_hex64 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName18.AsGDExtensionStringNamePtr(), 351421375)
	if globalColorMethodBindings.method_hex64 == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_hex64")
	}
	methodName19 := NewStringNameWithLatin1Chars("html")
	defer methodName19.Destroy()
	log.Debug("globalColorMethodBindings.method_html")
	globalColorMethodBindings.method_html = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName19.AsGDExtensionStringNamePtr(), 2500054655)
	if globalColorMethodBindings.method_html == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_html")
	}
	methodName20 := NewStringNameWithLatin1Chars("html_is_valid")
	defer methodName20.Destroy()
	log.Debug("globalColorMethodBindings.method_html_is_valid")
	globalColorMethodBindings.method_html_is_valid = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName20.AsGDExtensionStringNamePtr(), 2942997125)
	if globalColorMethodBindings.method_html_is_valid == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_html_is_valid")
	}
	methodName21 := NewStringNameWithLatin1Chars("from_string")
	defer methodName21.Destroy()
	log.Debug("globalColorMethodBindings.method_from_string")
	globalColorMethodBindings.method_from_string = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName21.AsGDExtensionStringNamePtr(), 3755044230)
	if globalColorMethodBindings.method_from_string == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_from_string")
	}
	methodName22 := NewStringNameWithLatin1Chars("from_hsv")
	defer methodName22.Destroy()
	log.Debug("globalColorMethodBindings.method_from_hsv")
	globalColorMethodBindings.method_from_hsv = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName22.AsGDExtensionStringNamePtr(), 1573799446)
	if globalColorMethodBindings.method_from_hsv == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_from_hsv")
	}
	methodName23 := NewStringNameWithLatin1Chars("from_ok_hsl")
	defer methodName23.Destroy()
	log.Debug("globalColorMethodBindings.method_from_ok_hsl")
	globalColorMethodBindings.method_from_ok_hsl = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName23.AsGDExtensionStringNamePtr(), 1573799446)
	if globalColorMethodBindings.method_from_ok_hsl == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_from_ok_hsl")
	}
	methodName24 := NewStringNameWithLatin1Chars("from_rgbe9995")
	defer methodName24.Destroy()
	log.Debug("globalColorMethodBindings.method_from_rgbe9995")
	globalColorMethodBindings.method_from_rgbe9995 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, methodName24.AsGDExtensionStringNamePtr(), 351421375)
	if globalColorMethodBindings.method_from_rgbe9995 == nil {
		missingMethods = append(missingMethods, "globalColorMethodBindings.method_from_rgbe9995")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	memberName0 := NewStringNameWithLatin1Chars("r")
	defer memberName0.Destroy()
	log.Debug("globalColorMethodBindings.member_r_setter")
	globalColorMethodBindings.member_r_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName0.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.member_r_getter")
	globalColorMethodBindings.member_r_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName0.AsGDExtensionStringNamePtr())
	memberName1 := NewStringNameWithLatin1Chars("g")
	defer memberName1.Destroy()
	log.Debug("globalColorMethodBindings.member_g_setter")
	globalColorMethodBindings.member_g_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName1.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.member_g_getter")
	globalColorMethodBindings.member_g_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName1.AsGDExtensionStringNamePtr())
	memberName2 := NewStringNameWithLatin1Chars("b")
	defer memberName2.Destroy()
	log.Debug("globalColorMethodBindings.member_b_setter")
	globalColorMethodBindings.member_b_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName2.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.member_b_getter")
	globalColorMethodBindings.member_b_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName2.AsGDExtensionStringNamePtr())
	memberName3 := NewStringNameWithLatin1Chars("a")
	defer memberName3.Destroy()
	log.Debug("globalColorMethodBindings.member_a_setter")
	globalColorMethodBindings.member_a_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName3.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.member_a_getter")
	globalColorMethodBindings.member_a_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName3.AsGDExtensionStringNamePtr())
	memberName4 := NewStringNameWithLatin1Chars("r8")
	defer memberName4.Destroy()
	log.Debug("globalColorMethodBindings.member_r8_setter")
	globalColorMethodBindings.member_r8_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName4.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.member_r8_getter")
	globalColorMethodBindings.member_r8_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName4.AsGDExtensionStringNamePtr())
	memberName5 := NewStringNameWithLatin1Chars("g8")
	defer memberName5.Destroy()
	log.Debug("globalColorMethodBindings.member_g8_setter")
	globalColorMethodBindings.member_g8_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName5.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.member_g8_getter")
	globalColorMethodBindings.member_g8_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName5.AsGDExtensionStringNamePtr())
	memberName6 := NewStringNameWithLatin1Chars("b8")
	defer memberName6.Destroy()
	log.Debug("globalColorMethodBindings.member_b8_setter")
	globalColorMethodBindings.member_b8_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName6.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.member_b8_getter")
	globalColorMethodBindings.member_b8_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName6.AsGDExtensionStringNamePtr())
	memberName7 := NewStringNameWithLatin1Chars("a8")
	defer memberName7.Destroy()
	log.Debug("globalColorMethodBindings.member_a8_setter")
	globalColorMethodBindings.member_a8_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName7.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.member_a8_getter")
	globalColorMethodBindings.member_a8_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName7.AsGDExtensionStringNamePtr())
	memberName8 := NewStringNameWithLatin1Chars("h")
	defer memberName8.Destroy()
	log.Debug("globalColorMethodBindings.member_h_setter")
	globalColorMethodBindings.member_h_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName8.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.member_h_getter")
	globalColorMethodBindings.member_h_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName8.AsGDExtensionStringNamePtr())
	memberName9 := NewStringNameWithLatin1Chars("s")
	defer memberName9.Destroy()
	log.Debug("globalColorMethodBindings.member_s_setter")
	globalColorMethodBindings.member_s_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName9.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.member_s_getter")
	globalColorMethodBindings.member_s_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName9.AsGDExtensionStringNamePtr())
	memberName10 := NewStringNameWithLatin1Chars("v")
	defer memberName10.Destroy()
	log.Debug("globalColorMethodBindings.member_v_setter")
	globalColorMethodBindings.member_v_setter = GDExtensionInterface_variant_get_ptr_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName10.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.member_v_getter")
	globalColorMethodBindings.member_v_getter = GDExtensionInterface_variant_get_ptr_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR, memberName10.AsGDExtensionStringNamePtr())
	log.Debug("globalColorMethodBindings.indexed_setter")
	globalColorMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR)
	log.Debug("globalColorMethodBindings.indexed_getter")
	globalColorMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_COLOR)
	log.Debug("globalColorMethodBindings.operator: equal Variant")
	globalColorMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalColorMethodBindings.operator: not_equal Variant")
	globalColorMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalColorMethodBindings.operator: negate ")
	globalColorMethodBindings.operator_negate = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NEGATE, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalColorMethodBindings.operator: positive ")
	globalColorMethodBindings.operator_positive = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_POSITIVE, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalColorMethodBindings.operator: multiply int")
	globalColorMethodBindings.operator_multiply_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalColorMethodBindings.operator: divide int")
	globalColorMethodBindings.operator_divide_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalColorMethodBindings.operator: multiply float")
	globalColorMethodBindings.operator_multiply_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalColorMethodBindings.operator: divide float")
	globalColorMethodBindings.operator_divide_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalColorMethodBindings.operator: equal Color")
	globalColorMethodBindings.operator_equal_Color = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)
	log.Debug("globalColorMethodBindings.operator: not_equal Color")
	globalColorMethodBindings.operator_not_equal_Color = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)
	log.Debug("globalColorMethodBindings.operator: add Color")
	globalColorMethodBindings.operator_add_Color = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)
	log.Debug("globalColorMethodBindings.operator: subtract Color")
	globalColorMethodBindings.operator_subtract_Color = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_SUBTRACT, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)
	log.Debug("globalColorMethodBindings.operator: multiply Color")
	globalColorMethodBindings.operator_multiply_Color = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)
	log.Debug("globalColorMethodBindings.operator: divide Color")
	globalColorMethodBindings.operator_divide_Color = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)
	log.Debug("globalColorMethodBindings.operator: in Dictionary")
	globalColorMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalColorMethodBindings.operator: in Array")
	globalColorMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalColorMethodBindings.operator: in PackedColorArray")
	globalColorMethodBindings.operator_in_PackedColorArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY)
	log.Debug("colorInitBindings end")
}

func (c *Color) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewColor, index: 0
func NewColor() Color {
	cx := Color{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalColorMethodBindings.constructor_0, ptr)

	return cx
}

// NewColor, index: 1
func NewColorWithColor(from Color) Color {
	cx := Color{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Color
	// ColorEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalColorMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewColor, index: 2
func NewColorWithColorFloat32(from Color, alpha float32) Color {
	cx := Color{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Color
	// ColorEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())

	// float
	eArg1 := Float32Encoder.EncodeArg(alpha)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))
	callBuiltinConstructor(globalColorMethodBindings.constructor_2, ptr, args[0], args[1])

	return cx
}

// NewColor, index: 3
func NewColorWithFloat32Float32Float32(r float32, g float32, b float32) Color {
	cx := Color{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [3]GDExtensionConstTypePtr

	// float
	eArg0 := Float32Encoder.EncodeArg(r)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// float
	eArg1 := Float32Encoder.EncodeArg(g)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))

	// float
	eArg2 := Float32Encoder.EncodeArg(b)
	args[2] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg2))
	callBuiltinConstructor(globalColorMethodBindings.constructor_3, ptr, args[0], args[1], args[2])

	return cx
}

// NewColor, index: 4
func NewColorWithFloat32Float32Float32Float32(r float32, g float32, b float32, a float32) Color {
	cx := Color{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [4]GDExtensionConstTypePtr

	// float
	eArg0 := Float32Encoder.EncodeArg(r)
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg0))

	// float
	eArg1 := Float32Encoder.EncodeArg(g)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))

	// float
	eArg2 := Float32Encoder.EncodeArg(b)
	args[2] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg2))

	// float
	eArg3 := Float32Encoder.EncodeArg(a)
	args[3] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg3))
	callBuiltinConstructor(globalColorMethodBindings.constructor_4, ptr, args[0], args[1], args[2], args[3])

	return cx
}

// NewColor, index: 5
func NewColorWithString(code String) Color {
	cx := Color{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// String
	// StringEncoder
	args[0] = (GDExtensionConstTypePtr)(code.ptr())
	callBuiltinConstructor(globalColorMethodBindings.constructor_5, ptr, args[0])

	return cx
}

// NewColor, index: 6
func NewColorWithStringFloat32(code String, alpha float32) Color {
	cx := Color{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// String
	// StringEncoder
	args[0] = (GDExtensionConstTypePtr)(code.ptr())

	// float
	eArg1 := Float32Encoder.EncodeArg(alpha)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))
	callBuiltinConstructor(globalColorMethodBindings.constructor_6, ptr, args[0], args[1])

	return cx
}

// methods

/* ToArgb32 : to_argb32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Color) ToArgb32() int32 {
	mb := globalColorMethodBindings.method_to_argb32

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* ToAbgr32 : to_abgr32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Color) ToAbgr32() int32 {
	mb := globalColorMethodBindings.method_to_abgr32

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* ToRgba32 : to_rgba32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Color) ToRgba32() int32 {
	mb := globalColorMethodBindings.method_to_rgba32

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* ToArgb64 : to_argb64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Color) ToArgb64() int32 {
	mb := globalColorMethodBindings.method_to_argb64

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* ToAbgr64 : to_abgr64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Color) ToAbgr64() int32 {
	mb := globalColorMethodBindings.method_to_abgr64

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* ToRgba64 : to_rgba64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Color) ToRgba64() int32 {
	mb := globalColorMethodBindings.method_to_rgba64

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* ToHtml : to_html
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *Color) ToHtml(with_alpha bool) String {
	mb := globalColorMethodBindings.method_to_html

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := BoolEncoder.EncodeArg(with_alpha)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Clamp(min Color, max Color) Color {
	mb := globalColorMethodBindings.method_clamp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&min))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&max))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Inverted : inverted
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Inverted() Color {
	mb := globalColorMethodBindings.method_inverted

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Color](mb, bx, nil)
	return ret

}

/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Lerp(to Color, weight float32) Color {
	mb := globalColorMethodBindings.method_lerp

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	eArg1 := Float32Encoder.EncodeArg(weight)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Lightened : lightened
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Lightened(amount float32) Color {
	mb := globalColorMethodBindings.method_lightened

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(amount)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Darkened : darkened
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Darkened(amount float32) Color {
	mb := globalColorMethodBindings.method_darkened

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(amount)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Blend : blend
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Blend(over Color) Color {
	mb := globalColorMethodBindings.method_blend

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&over))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetLuminance : get_luminance
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Color) GetLuminance() float32 {
	mb := globalColorMethodBindings.method_get_luminance

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* SrgbToLinear : srgb_to_linear
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) SrgbToLinear() Color {
	mb := globalColorMethodBindings.method_srgb_to_linear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Color](mb, bx, nil)
	return ret

}

/* LinearToSrgb : linear_to_srgb
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) LinearToSrgb() Color {
	mb := globalColorMethodBindings.method_linear_to_srgb

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Color](mb, bx, nil)
	return ret

}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Color) IsEqualApprox(to Color) bool {
	mb := globalColorMethodBindings.method_is_equal_approx

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&to))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Hex : hex
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) Hex(hex int32) Color {
	mb := globalColorMethodBindings.method_hex

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(hex)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Hex64 : hex64
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) Hex64(hex int32) Color {
	mb := globalColorMethodBindings.method_hex64

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(hex)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Html : html
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) Html(rgba String) Color {
	mb := globalColorMethodBindings.method_html

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(rgba)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* HtmlIsValid : html_is_valid
 * is_vararg = false, is_static = true
 * goReturnType(bool) -> bool
 */
func (cx *Color) HtmlIsValid(color String) bool {
	mb := globalColorMethodBindings.method_html_is_valid

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(color)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* FromString : from_string
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromString(str String, defaultName Color) Color {
	mb := globalColorMethodBindings.method_from_string

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(str)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&defaultName))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* FromHsv : from_hsv
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromHsv(h float32, s float32, v float32, alpha float32) Color {
	mb := globalColorMethodBindings.method_from_hsv

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(h)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(s)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Float32Encoder.EncodeArg(v)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(alpha)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* FromOkHsl : from_ok_hsl
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromOkHsl(h float32, s float32, l float32, alpha float32) Color {
	mb := globalColorMethodBindings.method_from_ok_hsl

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(h)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(s)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Float32Encoder.EncodeArg(l)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := Float32Encoder.EncodeArg(alpha)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* FromRgbe9995 : from_rgbe9995
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromRgbe9995(rgbe int32) Color {
	mb := globalColorMethodBindings.method_from_rgbe9995

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(nullptr)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(rgbe)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

func (cx *Color) MemberGetr() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalColorMethodBindings.member_r_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Color) MemberGetg() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalColorMethodBindings.member_g_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Color) MemberGetb() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalColorMethodBindings.member_b_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Color) MemberGeta() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalColorMethodBindings.member_a_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Color) MemberGetr8() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalColorMethodBindings.member_r8_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

func (cx *Color) MemberGetg8() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalColorMethodBindings.member_g8_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

func (cx *Color) MemberGetb8() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalColorMethodBindings.member_b8_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

func (cx *Color) MemberGeta8() int32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[int64](globalColorMethodBindings.member_a8_getter, bx)
	return Int32Encoder.DecodeArg(ret)

}

func (cx *Color) MemberGeth() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalColorMethodBindings.member_h_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Color) MemberGets() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalColorMethodBindings.member_s_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

func (cx *Color) MemberGetv() float32 {
	bx := cx.ptr()
	ret := callBuiltinPtrGetter[float64](globalColorMethodBindings.member_v_getter, bx)
	return Float32Encoder.DecodeArg(ret)

}

// Equal_Variant operator
func (cx *Color) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Color) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Color) Negate() Color {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Color) Positive() Color {
	lt := cx.ptr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_positive, lt, rt)
}

// Multiply_int operator
func (cx *Color) Multiply_int(right int32) Color {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Color) Divide_int(right int32) Color {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Color) Multiply_float(right float32) Color {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Color) Divide_float(right float32) Color {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_divide_float, lt, rt)
}

// Equal_Color operator
func (cx *Color) Equal_Color(right Color) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_equal_Color, lt, rt)
}

// Not_equal_Color operator
func (cx *Color) Not_equal_Color(right Color) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_not_equal_Color, lt, rt)
}

// Add_Color operator
func (cx *Color) Add_Color(right Color) Color {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_add_Color, lt, rt)
}

// Subtract_Color operator
func (cx *Color) Subtract_Color(right Color) Color {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_subtract_Color, lt, rt)
}

// Multiply_Color operator
func (cx *Color) Multiply_Color(right Color) Color {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_multiply_Color, lt, rt)
}

// Divide_Color operator
func (cx *Color) Divide_Color(right Color) Color {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_divide_Color, lt, rt)
}

// In_Dictionary operator
func (cx *Color) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Color) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_in_Array, lt, rt)
}

// In_PackedColorArray operator
func (cx *Color) In_PackedColorArray(right PackedColorArray) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_in_PackedColorArray, lt, rt)
}

/*
 * StringName
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: true
 */
type StringName struct {
	opaque [8]uint8
}

type stringNameMethodBindings struct {
	constructor_0                      GDExtensionPtrConstructor
	constructor_1                      GDExtensionPtrConstructor
	constructor_2                      GDExtensionPtrConstructor
	destructor                         GDExtensionPtrDestructor
	method_casecmp_to                  GDExtensionPtrBuiltInMethod
	method_nocasecmp_to                GDExtensionPtrBuiltInMethod
	method_naturalnocasecmp_to         GDExtensionPtrBuiltInMethod
	method_length                      GDExtensionPtrBuiltInMethod
	method_substr                      GDExtensionPtrBuiltInMethod
	method_get_slice                   GDExtensionPtrBuiltInMethod
	method_get_slicec                  GDExtensionPtrBuiltInMethod
	method_get_slice_count             GDExtensionPtrBuiltInMethod
	method_find                        GDExtensionPtrBuiltInMethod
	method_count                       GDExtensionPtrBuiltInMethod
	method_countn                      GDExtensionPtrBuiltInMethod
	method_findn                       GDExtensionPtrBuiltInMethod
	method_rfind                       GDExtensionPtrBuiltInMethod
	method_rfindn                      GDExtensionPtrBuiltInMethod
	method_match                       GDExtensionPtrBuiltInMethod
	method_matchn                      GDExtensionPtrBuiltInMethod
	method_begins_with                 GDExtensionPtrBuiltInMethod
	method_ends_with                   GDExtensionPtrBuiltInMethod
	method_is_subsequence_of           GDExtensionPtrBuiltInMethod
	method_is_subsequence_ofn          GDExtensionPtrBuiltInMethod
	method_bigrams                     GDExtensionPtrBuiltInMethod
	method_similarity                  GDExtensionPtrBuiltInMethod
	method_format                      GDExtensionPtrBuiltInMethod
	method_replace                     GDExtensionPtrBuiltInMethod
	method_replacen                    GDExtensionPtrBuiltInMethod
	method_repeat                      GDExtensionPtrBuiltInMethod
	method_insert                      GDExtensionPtrBuiltInMethod
	method_capitalize                  GDExtensionPtrBuiltInMethod
	method_to_camel_case               GDExtensionPtrBuiltInMethod
	method_to_pascal_case              GDExtensionPtrBuiltInMethod
	method_to_snake_case               GDExtensionPtrBuiltInMethod
	method_split                       GDExtensionPtrBuiltInMethod
	method_rsplit                      GDExtensionPtrBuiltInMethod
	method_split_floats                GDExtensionPtrBuiltInMethod
	method_join                        GDExtensionPtrBuiltInMethod
	method_to_upper                    GDExtensionPtrBuiltInMethod
	method_to_lower                    GDExtensionPtrBuiltInMethod
	method_left                        GDExtensionPtrBuiltInMethod
	method_right                       GDExtensionPtrBuiltInMethod
	method_strip_edges                 GDExtensionPtrBuiltInMethod
	method_strip_escapes               GDExtensionPtrBuiltInMethod
	method_lstrip                      GDExtensionPtrBuiltInMethod
	method_rstrip                      GDExtensionPtrBuiltInMethod
	method_get_extension               GDExtensionPtrBuiltInMethod
	method_get_basename                GDExtensionPtrBuiltInMethod
	method_path_join                   GDExtensionPtrBuiltInMethod
	method_unicode_at                  GDExtensionPtrBuiltInMethod
	method_indent                      GDExtensionPtrBuiltInMethod
	method_dedent                      GDExtensionPtrBuiltInMethod
	method_md5_text                    GDExtensionPtrBuiltInMethod
	method_sha1_text                   GDExtensionPtrBuiltInMethod
	method_sha256_text                 GDExtensionPtrBuiltInMethod
	method_md5_buffer                  GDExtensionPtrBuiltInMethod
	method_sha1_buffer                 GDExtensionPtrBuiltInMethod
	method_sha256_buffer               GDExtensionPtrBuiltInMethod
	method_is_empty                    GDExtensionPtrBuiltInMethod
	method_contains                    GDExtensionPtrBuiltInMethod
	method_is_absolute_path            GDExtensionPtrBuiltInMethod
	method_is_relative_path            GDExtensionPtrBuiltInMethod
	method_simplify_path               GDExtensionPtrBuiltInMethod
	method_get_base_dir                GDExtensionPtrBuiltInMethod
	method_get_file                    GDExtensionPtrBuiltInMethod
	method_xml_escape                  GDExtensionPtrBuiltInMethod
	method_xml_unescape                GDExtensionPtrBuiltInMethod
	method_uri_encode                  GDExtensionPtrBuiltInMethod
	method_uri_decode                  GDExtensionPtrBuiltInMethod
	method_c_escape                    GDExtensionPtrBuiltInMethod
	method_c_unescape                  GDExtensionPtrBuiltInMethod
	method_json_escape                 GDExtensionPtrBuiltInMethod
	method_validate_node_name          GDExtensionPtrBuiltInMethod
	method_validate_filename           GDExtensionPtrBuiltInMethod
	method_is_valid_identifier         GDExtensionPtrBuiltInMethod
	method_is_valid_int                GDExtensionPtrBuiltInMethod
	method_is_valid_float              GDExtensionPtrBuiltInMethod
	method_is_valid_hex_number         GDExtensionPtrBuiltInMethod
	method_is_valid_html_color         GDExtensionPtrBuiltInMethod
	method_is_valid_ip_address         GDExtensionPtrBuiltInMethod
	method_is_valid_filename           GDExtensionPtrBuiltInMethod
	method_to_int                      GDExtensionPtrBuiltInMethod
	method_to_float                    GDExtensionPtrBuiltInMethod
	method_hex_to_int                  GDExtensionPtrBuiltInMethod
	method_bin_to_int                  GDExtensionPtrBuiltInMethod
	method_lpad                        GDExtensionPtrBuiltInMethod
	method_rpad                        GDExtensionPtrBuiltInMethod
	method_pad_decimals                GDExtensionPtrBuiltInMethod
	method_pad_zeros                   GDExtensionPtrBuiltInMethod
	method_trim_prefix                 GDExtensionPtrBuiltInMethod
	method_trim_suffix                 GDExtensionPtrBuiltInMethod
	method_to_ascii_buffer             GDExtensionPtrBuiltInMethod
	method_to_utf8_buffer              GDExtensionPtrBuiltInMethod
	method_to_utf16_buffer             GDExtensionPtrBuiltInMethod
	method_to_utf32_buffer             GDExtensionPtrBuiltInMethod
	method_hash                        GDExtensionPtrBuiltInMethod
	operator_equal_Variant             GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant         GDExtensionPtrOperatorEvaluator
	operator_module_Variant            GDExtensionPtrOperatorEvaluator
	operator_module_bool               GDExtensionPtrOperatorEvaluator
	operator_module_int                GDExtensionPtrOperatorEvaluator
	operator_module_float              GDExtensionPtrOperatorEvaluator
	operator_equal_String              GDExtensionPtrOperatorEvaluator
	operator_not_equal_String          GDExtensionPtrOperatorEvaluator
	operator_add_String                GDExtensionPtrOperatorEvaluator
	operator_module_String             GDExtensionPtrOperatorEvaluator
	operator_in_String                 GDExtensionPtrOperatorEvaluator
	operator_module_Vector2            GDExtensionPtrOperatorEvaluator
	operator_module_Vector2i           GDExtensionPtrOperatorEvaluator
	operator_module_Rect2              GDExtensionPtrOperatorEvaluator
	operator_module_Rect2i             GDExtensionPtrOperatorEvaluator
	operator_module_Vector3            GDExtensionPtrOperatorEvaluator
	operator_module_Vector3i           GDExtensionPtrOperatorEvaluator
	operator_module_Transform2D        GDExtensionPtrOperatorEvaluator
	operator_module_Vector4            GDExtensionPtrOperatorEvaluator
	operator_module_Vector4i           GDExtensionPtrOperatorEvaluator
	operator_module_Plane              GDExtensionPtrOperatorEvaluator
	operator_module_Quaternion         GDExtensionPtrOperatorEvaluator
	operator_module_AABB               GDExtensionPtrOperatorEvaluator
	operator_module_Basis              GDExtensionPtrOperatorEvaluator
	operator_module_Transform3D        GDExtensionPtrOperatorEvaluator
	operator_module_Projection         GDExtensionPtrOperatorEvaluator
	operator_module_Color              GDExtensionPtrOperatorEvaluator
	operator_equal_StringName          GDExtensionPtrOperatorEvaluator
	operator_not_equal_StringName      GDExtensionPtrOperatorEvaluator
	operator_less_StringName           GDExtensionPtrOperatorEvaluator
	operator_less_equal_StringName     GDExtensionPtrOperatorEvaluator
	operator_greater_StringName        GDExtensionPtrOperatorEvaluator
	operator_greater_equal_StringName  GDExtensionPtrOperatorEvaluator
	operator_add_StringName            GDExtensionPtrOperatorEvaluator
	operator_module_StringName         GDExtensionPtrOperatorEvaluator
	operator_in_StringName             GDExtensionPtrOperatorEvaluator
	operator_module_NodePath           GDExtensionPtrOperatorEvaluator
	operator_module_Object             GDExtensionPtrOperatorEvaluator
	operator_in_Object                 GDExtensionPtrOperatorEvaluator
	operator_module_Callable           GDExtensionPtrOperatorEvaluator
	operator_module_Signal             GDExtensionPtrOperatorEvaluator
	operator_module_Dictionary         GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary             GDExtensionPtrOperatorEvaluator
	operator_module_Array              GDExtensionPtrOperatorEvaluator
	operator_in_Array                  GDExtensionPtrOperatorEvaluator
	operator_module_PackedByteArray    GDExtensionPtrOperatorEvaluator
	operator_module_PackedInt32Array   GDExtensionPtrOperatorEvaluator
	operator_module_PackedInt64Array   GDExtensionPtrOperatorEvaluator
	operator_module_PackedFloat32Array GDExtensionPtrOperatorEvaluator
	operator_module_PackedFloat64Array GDExtensionPtrOperatorEvaluator
	operator_module_PackedStringArray  GDExtensionPtrOperatorEvaluator
	operator_in_PackedStringArray      GDExtensionPtrOperatorEvaluator
	operator_module_PackedVector2Array GDExtensionPtrOperatorEvaluator
	operator_module_PackedVector3Array GDExtensionPtrOperatorEvaluator
	operator_module_PackedColorArray   GDExtensionPtrOperatorEvaluator
}

var globalStringNameMethodBindings stringNameMethodBindings

func stringNameInitConstructorBindings() {
	log.Debug("stringNameInitConstructorBindings called")

	log.Debug("globalStringNameMethodBindings.constructor_0")
	globalStringNameMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, 0)
	log.Debug("globalStringNameMethodBindings.constructor_1")
	globalStringNameMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, 1)
	log.Debug("globalStringNameMethodBindings.constructor_2")
	globalStringNameMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, 2)
	log.Debug("globalStringNameMethodBindings.destructor")
	globalStringNameMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
}

func stringNameInitMethodBindings() {
	log.Debug("stringNameInitMethodBindings called")

	missingMethods := make([]string, 0, 93)

	methodName0 := NewStringNameWithLatin1Chars("casecmp_to")
	defer methodName0.Destroy()
	log.Debug("globalStringNameMethodBindings.method_casecmp_to")
	globalStringNameMethodBindings.method_casecmp_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName0.AsGDExtensionStringNamePtr(), 2920860731)
	if globalStringNameMethodBindings.method_casecmp_to == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_casecmp_to")
	}
	methodName1 := NewStringNameWithLatin1Chars("nocasecmp_to")
	defer methodName1.Destroy()
	log.Debug("globalStringNameMethodBindings.method_nocasecmp_to")
	globalStringNameMethodBindings.method_nocasecmp_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName1.AsGDExtensionStringNamePtr(), 2920860731)
	if globalStringNameMethodBindings.method_nocasecmp_to == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_nocasecmp_to")
	}
	methodName2 := NewStringNameWithLatin1Chars("naturalnocasecmp_to")
	defer methodName2.Destroy()
	log.Debug("globalStringNameMethodBindings.method_naturalnocasecmp_to")
	globalStringNameMethodBindings.method_naturalnocasecmp_to = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName2.AsGDExtensionStringNamePtr(), 2920860731)
	if globalStringNameMethodBindings.method_naturalnocasecmp_to == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_naturalnocasecmp_to")
	}
	methodName3 := NewStringNameWithLatin1Chars("length")
	defer methodName3.Destroy()
	log.Debug("globalStringNameMethodBindings.method_length")
	globalStringNameMethodBindings.method_length = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName3.AsGDExtensionStringNamePtr(), 3173160232)
	if globalStringNameMethodBindings.method_length == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_length")
	}
	methodName4 := NewStringNameWithLatin1Chars("substr")
	defer methodName4.Destroy()
	log.Debug("globalStringNameMethodBindings.method_substr")
	globalStringNameMethodBindings.method_substr = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName4.AsGDExtensionStringNamePtr(), 787537301)
	if globalStringNameMethodBindings.method_substr == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_substr")
	}
	methodName5 := NewStringNameWithLatin1Chars("get_slice")
	defer methodName5.Destroy()
	log.Debug("globalStringNameMethodBindings.method_get_slice")
	globalStringNameMethodBindings.method_get_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName5.AsGDExtensionStringNamePtr(), 3535100402)
	if globalStringNameMethodBindings.method_get_slice == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_get_slice")
	}
	methodName6 := NewStringNameWithLatin1Chars("get_slicec")
	defer methodName6.Destroy()
	log.Debug("globalStringNameMethodBindings.method_get_slicec")
	globalStringNameMethodBindings.method_get_slicec = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName6.AsGDExtensionStringNamePtr(), 787537301)
	if globalStringNameMethodBindings.method_get_slicec == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_get_slicec")
	}
	methodName7 := NewStringNameWithLatin1Chars("get_slice_count")
	defer methodName7.Destroy()
	log.Debug("globalStringNameMethodBindings.method_get_slice_count")
	globalStringNameMethodBindings.method_get_slice_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName7.AsGDExtensionStringNamePtr(), 2920860731)
	if globalStringNameMethodBindings.method_get_slice_count == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_get_slice_count")
	}
	methodName8 := NewStringNameWithLatin1Chars("find")
	defer methodName8.Destroy()
	log.Debug("globalStringNameMethodBindings.method_find")
	globalStringNameMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName8.AsGDExtensionStringNamePtr(), 1760645412)
	if globalStringNameMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_find")
	}
	methodName9 := NewStringNameWithLatin1Chars("count")
	defer methodName9.Destroy()
	log.Debug("globalStringNameMethodBindings.method_count")
	globalStringNameMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName9.AsGDExtensionStringNamePtr(), 2343087891)
	if globalStringNameMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_count")
	}
	methodName10 := NewStringNameWithLatin1Chars("countn")
	defer methodName10.Destroy()
	log.Debug("globalStringNameMethodBindings.method_countn")
	globalStringNameMethodBindings.method_countn = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName10.AsGDExtensionStringNamePtr(), 2343087891)
	if globalStringNameMethodBindings.method_countn == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_countn")
	}
	methodName11 := NewStringNameWithLatin1Chars("findn")
	defer methodName11.Destroy()
	log.Debug("globalStringNameMethodBindings.method_findn")
	globalStringNameMethodBindings.method_findn = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName11.AsGDExtensionStringNamePtr(), 1760645412)
	if globalStringNameMethodBindings.method_findn == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_findn")
	}
	methodName12 := NewStringNameWithLatin1Chars("rfind")
	defer methodName12.Destroy()
	log.Debug("globalStringNameMethodBindings.method_rfind")
	globalStringNameMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName12.AsGDExtensionStringNamePtr(), 1760645412)
	if globalStringNameMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_rfind")
	}
	methodName13 := NewStringNameWithLatin1Chars("rfindn")
	defer methodName13.Destroy()
	log.Debug("globalStringNameMethodBindings.method_rfindn")
	globalStringNameMethodBindings.method_rfindn = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName13.AsGDExtensionStringNamePtr(), 1760645412)
	if globalStringNameMethodBindings.method_rfindn == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_rfindn")
	}
	methodName14 := NewStringNameWithLatin1Chars("match")
	defer methodName14.Destroy()
	log.Debug("globalStringNameMethodBindings.method_match")
	globalStringNameMethodBindings.method_match = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName14.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringNameMethodBindings.method_match == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_match")
	}
	methodName15 := NewStringNameWithLatin1Chars("matchn")
	defer methodName15.Destroy()
	log.Debug("globalStringNameMethodBindings.method_matchn")
	globalStringNameMethodBindings.method_matchn = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName15.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringNameMethodBindings.method_matchn == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_matchn")
	}
	methodName16 := NewStringNameWithLatin1Chars("begins_with")
	defer methodName16.Destroy()
	log.Debug("globalStringNameMethodBindings.method_begins_with")
	globalStringNameMethodBindings.method_begins_with = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName16.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringNameMethodBindings.method_begins_with == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_begins_with")
	}
	methodName17 := NewStringNameWithLatin1Chars("ends_with")
	defer methodName17.Destroy()
	log.Debug("globalStringNameMethodBindings.method_ends_with")
	globalStringNameMethodBindings.method_ends_with = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName17.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringNameMethodBindings.method_ends_with == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_ends_with")
	}
	methodName18 := NewStringNameWithLatin1Chars("is_subsequence_of")
	defer methodName18.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_subsequence_of")
	globalStringNameMethodBindings.method_is_subsequence_of = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName18.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringNameMethodBindings.method_is_subsequence_of == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_subsequence_of")
	}
	methodName19 := NewStringNameWithLatin1Chars("is_subsequence_ofn")
	defer methodName19.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_subsequence_ofn")
	globalStringNameMethodBindings.method_is_subsequence_ofn = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName19.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringNameMethodBindings.method_is_subsequence_ofn == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_subsequence_ofn")
	}
	methodName20 := NewStringNameWithLatin1Chars("bigrams")
	defer methodName20.Destroy()
	log.Debug("globalStringNameMethodBindings.method_bigrams")
	globalStringNameMethodBindings.method_bigrams = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName20.AsGDExtensionStringNamePtr(), 747180633)
	if globalStringNameMethodBindings.method_bigrams == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_bigrams")
	}
	methodName21 := NewStringNameWithLatin1Chars("similarity")
	defer methodName21.Destroy()
	log.Debug("globalStringNameMethodBindings.method_similarity")
	globalStringNameMethodBindings.method_similarity = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName21.AsGDExtensionStringNamePtr(), 2697460964)
	if globalStringNameMethodBindings.method_similarity == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_similarity")
	}
	methodName22 := NewStringNameWithLatin1Chars("format")
	defer methodName22.Destroy()
	log.Debug("globalStringNameMethodBindings.method_format")
	globalStringNameMethodBindings.method_format = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName22.AsGDExtensionStringNamePtr(), 3212199029)
	if globalStringNameMethodBindings.method_format == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_format")
	}
	methodName23 := NewStringNameWithLatin1Chars("replace")
	defer methodName23.Destroy()
	log.Debug("globalStringNameMethodBindings.method_replace")
	globalStringNameMethodBindings.method_replace = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName23.AsGDExtensionStringNamePtr(), 1340436205)
	if globalStringNameMethodBindings.method_replace == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_replace")
	}
	methodName24 := NewStringNameWithLatin1Chars("replacen")
	defer methodName24.Destroy()
	log.Debug("globalStringNameMethodBindings.method_replacen")
	globalStringNameMethodBindings.method_replacen = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName24.AsGDExtensionStringNamePtr(), 1340436205)
	if globalStringNameMethodBindings.method_replacen == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_replacen")
	}
	methodName25 := NewStringNameWithLatin1Chars("repeat")
	defer methodName25.Destroy()
	log.Debug("globalStringNameMethodBindings.method_repeat")
	globalStringNameMethodBindings.method_repeat = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName25.AsGDExtensionStringNamePtr(), 2162347432)
	if globalStringNameMethodBindings.method_repeat == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_repeat")
	}
	methodName26 := NewStringNameWithLatin1Chars("insert")
	defer methodName26.Destroy()
	log.Debug("globalStringNameMethodBindings.method_insert")
	globalStringNameMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName26.AsGDExtensionStringNamePtr(), 248737229)
	if globalStringNameMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_insert")
	}
	methodName27 := NewStringNameWithLatin1Chars("capitalize")
	defer methodName27.Destroy()
	log.Debug("globalStringNameMethodBindings.method_capitalize")
	globalStringNameMethodBindings.method_capitalize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName27.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_capitalize == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_capitalize")
	}
	methodName28 := NewStringNameWithLatin1Chars("to_camel_case")
	defer methodName28.Destroy()
	log.Debug("globalStringNameMethodBindings.method_to_camel_case")
	globalStringNameMethodBindings.method_to_camel_case = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName28.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_to_camel_case == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_to_camel_case")
	}
	methodName29 := NewStringNameWithLatin1Chars("to_pascal_case")
	defer methodName29.Destroy()
	log.Debug("globalStringNameMethodBindings.method_to_pascal_case")
	globalStringNameMethodBindings.method_to_pascal_case = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName29.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_to_pascal_case == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_to_pascal_case")
	}
	methodName30 := NewStringNameWithLatin1Chars("to_snake_case")
	defer methodName30.Destroy()
	log.Debug("globalStringNameMethodBindings.method_to_snake_case")
	globalStringNameMethodBindings.method_to_snake_case = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName30.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_to_snake_case == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_to_snake_case")
	}
	methodName31 := NewStringNameWithLatin1Chars("split")
	defer methodName31.Destroy()
	log.Debug("globalStringNameMethodBindings.method_split")
	globalStringNameMethodBindings.method_split = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName31.AsGDExtensionStringNamePtr(), 1252735785)
	if globalStringNameMethodBindings.method_split == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_split")
	}
	methodName32 := NewStringNameWithLatin1Chars("rsplit")
	defer methodName32.Destroy()
	log.Debug("globalStringNameMethodBindings.method_rsplit")
	globalStringNameMethodBindings.method_rsplit = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName32.AsGDExtensionStringNamePtr(), 1252735785)
	if globalStringNameMethodBindings.method_rsplit == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_rsplit")
	}
	methodName33 := NewStringNameWithLatin1Chars("split_floats")
	defer methodName33.Destroy()
	log.Debug("globalStringNameMethodBindings.method_split_floats")
	globalStringNameMethodBindings.method_split_floats = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName33.AsGDExtensionStringNamePtr(), 2092079095)
	if globalStringNameMethodBindings.method_split_floats == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_split_floats")
	}
	methodName34 := NewStringNameWithLatin1Chars("join")
	defer methodName34.Destroy()
	log.Debug("globalStringNameMethodBindings.method_join")
	globalStringNameMethodBindings.method_join = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName34.AsGDExtensionStringNamePtr(), 3595973238)
	if globalStringNameMethodBindings.method_join == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_join")
	}
	methodName35 := NewStringNameWithLatin1Chars("to_upper")
	defer methodName35.Destroy()
	log.Debug("globalStringNameMethodBindings.method_to_upper")
	globalStringNameMethodBindings.method_to_upper = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName35.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_to_upper == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_to_upper")
	}
	methodName36 := NewStringNameWithLatin1Chars("to_lower")
	defer methodName36.Destroy()
	log.Debug("globalStringNameMethodBindings.method_to_lower")
	globalStringNameMethodBindings.method_to_lower = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName36.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_to_lower == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_to_lower")
	}
	methodName37 := NewStringNameWithLatin1Chars("left")
	defer methodName37.Destroy()
	log.Debug("globalStringNameMethodBindings.method_left")
	globalStringNameMethodBindings.method_left = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName37.AsGDExtensionStringNamePtr(), 2162347432)
	if globalStringNameMethodBindings.method_left == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_left")
	}
	methodName38 := NewStringNameWithLatin1Chars("right")
	defer methodName38.Destroy()
	log.Debug("globalStringNameMethodBindings.method_right")
	globalStringNameMethodBindings.method_right = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName38.AsGDExtensionStringNamePtr(), 2162347432)
	if globalStringNameMethodBindings.method_right == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_right")
	}
	methodName39 := NewStringNameWithLatin1Chars("strip_edges")
	defer methodName39.Destroy()
	log.Debug("globalStringNameMethodBindings.method_strip_edges")
	globalStringNameMethodBindings.method_strip_edges = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName39.AsGDExtensionStringNamePtr(), 907855311)
	if globalStringNameMethodBindings.method_strip_edges == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_strip_edges")
	}
	methodName40 := NewStringNameWithLatin1Chars("strip_escapes")
	defer methodName40.Destroy()
	log.Debug("globalStringNameMethodBindings.method_strip_escapes")
	globalStringNameMethodBindings.method_strip_escapes = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName40.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_strip_escapes == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_strip_escapes")
	}
	methodName41 := NewStringNameWithLatin1Chars("lstrip")
	defer methodName41.Destroy()
	log.Debug("globalStringNameMethodBindings.method_lstrip")
	globalStringNameMethodBindings.method_lstrip = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName41.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringNameMethodBindings.method_lstrip == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_lstrip")
	}
	methodName42 := NewStringNameWithLatin1Chars("rstrip")
	defer methodName42.Destroy()
	log.Debug("globalStringNameMethodBindings.method_rstrip")
	globalStringNameMethodBindings.method_rstrip = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName42.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringNameMethodBindings.method_rstrip == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_rstrip")
	}
	methodName43 := NewStringNameWithLatin1Chars("get_extension")
	defer methodName43.Destroy()
	log.Debug("globalStringNameMethodBindings.method_get_extension")
	globalStringNameMethodBindings.method_get_extension = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName43.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_get_extension == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_get_extension")
	}
	methodName44 := NewStringNameWithLatin1Chars("get_basename")
	defer methodName44.Destroy()
	log.Debug("globalStringNameMethodBindings.method_get_basename")
	globalStringNameMethodBindings.method_get_basename = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName44.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_get_basename == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_get_basename")
	}
	methodName45 := NewStringNameWithLatin1Chars("path_join")
	defer methodName45.Destroy()
	log.Debug("globalStringNameMethodBindings.method_path_join")
	globalStringNameMethodBindings.method_path_join = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName45.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringNameMethodBindings.method_path_join == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_path_join")
	}
	methodName46 := NewStringNameWithLatin1Chars("unicode_at")
	defer methodName46.Destroy()
	log.Debug("globalStringNameMethodBindings.method_unicode_at")
	globalStringNameMethodBindings.method_unicode_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName46.AsGDExtensionStringNamePtr(), 4103005248)
	if globalStringNameMethodBindings.method_unicode_at == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_unicode_at")
	}
	methodName47 := NewStringNameWithLatin1Chars("indent")
	defer methodName47.Destroy()
	log.Debug("globalStringNameMethodBindings.method_indent")
	globalStringNameMethodBindings.method_indent = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName47.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringNameMethodBindings.method_indent == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_indent")
	}
	methodName48 := NewStringNameWithLatin1Chars("dedent")
	defer methodName48.Destroy()
	log.Debug("globalStringNameMethodBindings.method_dedent")
	globalStringNameMethodBindings.method_dedent = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName48.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_dedent == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_dedent")
	}
	methodName49 := NewStringNameWithLatin1Chars("md5_text")
	defer methodName49.Destroy()
	log.Debug("globalStringNameMethodBindings.method_md5_text")
	globalStringNameMethodBindings.method_md5_text = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName49.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_md5_text == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_md5_text")
	}
	methodName50 := NewStringNameWithLatin1Chars("sha1_text")
	defer methodName50.Destroy()
	log.Debug("globalStringNameMethodBindings.method_sha1_text")
	globalStringNameMethodBindings.method_sha1_text = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName50.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_sha1_text == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_sha1_text")
	}
	methodName51 := NewStringNameWithLatin1Chars("sha256_text")
	defer methodName51.Destroy()
	log.Debug("globalStringNameMethodBindings.method_sha256_text")
	globalStringNameMethodBindings.method_sha256_text = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName51.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_sha256_text == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_sha256_text")
	}
	methodName52 := NewStringNameWithLatin1Chars("md5_buffer")
	defer methodName52.Destroy()
	log.Debug("globalStringNameMethodBindings.method_md5_buffer")
	globalStringNameMethodBindings.method_md5_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName52.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringNameMethodBindings.method_md5_buffer == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_md5_buffer")
	}
	methodName53 := NewStringNameWithLatin1Chars("sha1_buffer")
	defer methodName53.Destroy()
	log.Debug("globalStringNameMethodBindings.method_sha1_buffer")
	globalStringNameMethodBindings.method_sha1_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName53.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringNameMethodBindings.method_sha1_buffer == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_sha1_buffer")
	}
	methodName54 := NewStringNameWithLatin1Chars("sha256_buffer")
	defer methodName54.Destroy()
	log.Debug("globalStringNameMethodBindings.method_sha256_buffer")
	globalStringNameMethodBindings.method_sha256_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName54.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringNameMethodBindings.method_sha256_buffer == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_sha256_buffer")
	}
	methodName55 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName55.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_empty")
	globalStringNameMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName55.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringNameMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_empty")
	}
	methodName56 := NewStringNameWithLatin1Chars("contains")
	defer methodName56.Destroy()
	log.Debug("globalStringNameMethodBindings.method_contains")
	globalStringNameMethodBindings.method_contains = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName56.AsGDExtensionStringNamePtr(), 2566493496)
	if globalStringNameMethodBindings.method_contains == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_contains")
	}
	methodName57 := NewStringNameWithLatin1Chars("is_absolute_path")
	defer methodName57.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_absolute_path")
	globalStringNameMethodBindings.method_is_absolute_path = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName57.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringNameMethodBindings.method_is_absolute_path == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_absolute_path")
	}
	methodName58 := NewStringNameWithLatin1Chars("is_relative_path")
	defer methodName58.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_relative_path")
	globalStringNameMethodBindings.method_is_relative_path = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName58.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringNameMethodBindings.method_is_relative_path == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_relative_path")
	}
	methodName59 := NewStringNameWithLatin1Chars("simplify_path")
	defer methodName59.Destroy()
	log.Debug("globalStringNameMethodBindings.method_simplify_path")
	globalStringNameMethodBindings.method_simplify_path = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName59.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_simplify_path == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_simplify_path")
	}
	methodName60 := NewStringNameWithLatin1Chars("get_base_dir")
	defer methodName60.Destroy()
	log.Debug("globalStringNameMethodBindings.method_get_base_dir")
	globalStringNameMethodBindings.method_get_base_dir = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName60.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_get_base_dir == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_get_base_dir")
	}
	methodName61 := NewStringNameWithLatin1Chars("get_file")
	defer methodName61.Destroy()
	log.Debug("globalStringNameMethodBindings.method_get_file")
	globalStringNameMethodBindings.method_get_file = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName61.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_get_file == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_get_file")
	}
	methodName62 := NewStringNameWithLatin1Chars("xml_escape")
	defer methodName62.Destroy()
	log.Debug("globalStringNameMethodBindings.method_xml_escape")
	globalStringNameMethodBindings.method_xml_escape = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName62.AsGDExtensionStringNamePtr(), 3429816538)
	if globalStringNameMethodBindings.method_xml_escape == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_xml_escape")
	}
	methodName63 := NewStringNameWithLatin1Chars("xml_unescape")
	defer methodName63.Destroy()
	log.Debug("globalStringNameMethodBindings.method_xml_unescape")
	globalStringNameMethodBindings.method_xml_unescape = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName63.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_xml_unescape == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_xml_unescape")
	}
	methodName64 := NewStringNameWithLatin1Chars("uri_encode")
	defer methodName64.Destroy()
	log.Debug("globalStringNameMethodBindings.method_uri_encode")
	globalStringNameMethodBindings.method_uri_encode = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName64.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_uri_encode == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_uri_encode")
	}
	methodName65 := NewStringNameWithLatin1Chars("uri_decode")
	defer methodName65.Destroy()
	log.Debug("globalStringNameMethodBindings.method_uri_decode")
	globalStringNameMethodBindings.method_uri_decode = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName65.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_uri_decode == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_uri_decode")
	}
	methodName66 := NewStringNameWithLatin1Chars("c_escape")
	defer methodName66.Destroy()
	log.Debug("globalStringNameMethodBindings.method_c_escape")
	globalStringNameMethodBindings.method_c_escape = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName66.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_c_escape == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_c_escape")
	}
	methodName67 := NewStringNameWithLatin1Chars("c_unescape")
	defer methodName67.Destroy()
	log.Debug("globalStringNameMethodBindings.method_c_unescape")
	globalStringNameMethodBindings.method_c_unescape = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName67.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_c_unescape == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_c_unescape")
	}
	methodName68 := NewStringNameWithLatin1Chars("json_escape")
	defer methodName68.Destroy()
	log.Debug("globalStringNameMethodBindings.method_json_escape")
	globalStringNameMethodBindings.method_json_escape = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName68.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_json_escape == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_json_escape")
	}
	methodName69 := NewStringNameWithLatin1Chars("validate_node_name")
	defer methodName69.Destroy()
	log.Debug("globalStringNameMethodBindings.method_validate_node_name")
	globalStringNameMethodBindings.method_validate_node_name = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName69.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_validate_node_name == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_validate_node_name")
	}
	methodName70 := NewStringNameWithLatin1Chars("validate_filename")
	defer methodName70.Destroy()
	log.Debug("globalStringNameMethodBindings.method_validate_filename")
	globalStringNameMethodBindings.method_validate_filename = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName70.AsGDExtensionStringNamePtr(), 3942272618)
	if globalStringNameMethodBindings.method_validate_filename == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_validate_filename")
	}
	methodName71 := NewStringNameWithLatin1Chars("is_valid_identifier")
	defer methodName71.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_valid_identifier")
	globalStringNameMethodBindings.method_is_valid_identifier = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName71.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringNameMethodBindings.method_is_valid_identifier == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_valid_identifier")
	}
	methodName72 := NewStringNameWithLatin1Chars("is_valid_int")
	defer methodName72.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_valid_int")
	globalStringNameMethodBindings.method_is_valid_int = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName72.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringNameMethodBindings.method_is_valid_int == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_valid_int")
	}
	methodName73 := NewStringNameWithLatin1Chars("is_valid_float")
	defer methodName73.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_valid_float")
	globalStringNameMethodBindings.method_is_valid_float = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName73.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringNameMethodBindings.method_is_valid_float == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_valid_float")
	}
	methodName74 := NewStringNameWithLatin1Chars("is_valid_hex_number")
	defer methodName74.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_valid_hex_number")
	globalStringNameMethodBindings.method_is_valid_hex_number = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName74.AsGDExtensionStringNamePtr(), 593672999)
	if globalStringNameMethodBindings.method_is_valid_hex_number == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_valid_hex_number")
	}
	methodName75 := NewStringNameWithLatin1Chars("is_valid_html_color")
	defer methodName75.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_valid_html_color")
	globalStringNameMethodBindings.method_is_valid_html_color = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName75.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringNameMethodBindings.method_is_valid_html_color == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_valid_html_color")
	}
	methodName76 := NewStringNameWithLatin1Chars("is_valid_ip_address")
	defer methodName76.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_valid_ip_address")
	globalStringNameMethodBindings.method_is_valid_ip_address = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName76.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringNameMethodBindings.method_is_valid_ip_address == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_valid_ip_address")
	}
	methodName77 := NewStringNameWithLatin1Chars("is_valid_filename")
	defer methodName77.Destroy()
	log.Debug("globalStringNameMethodBindings.method_is_valid_filename")
	globalStringNameMethodBindings.method_is_valid_filename = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName77.AsGDExtensionStringNamePtr(), 3918633141)
	if globalStringNameMethodBindings.method_is_valid_filename == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_is_valid_filename")
	}
	methodName78 := NewStringNameWithLatin1Chars("to_int")
	defer methodName78.Destroy()
	log.Debug("globalStringNameMethodBindings.method_to_int")
	globalStringNameMethodBindings.method_to_int = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName78.AsGDExtensionStringNamePtr(), 3173160232)
	if globalStringNameMethodBindings.method_to_int == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_to_int")
	}
	methodName79 := NewStringNameWithLatin1Chars("to_float")
	defer methodName79.Destroy()
	log.Debug("globalStringNameMethodBindings.method_to_float")
	globalStringNameMethodBindings.method_to_float = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName79.AsGDExtensionStringNamePtr(), 466405837)
	if globalStringNameMethodBindings.method_to_float == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_to_float")
	}
	methodName80 := NewStringNameWithLatin1Chars("hex_to_int")
	defer methodName80.Destroy()
	log.Debug("globalStringNameMethodBindings.method_hex_to_int")
	globalStringNameMethodBindings.method_hex_to_int = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName80.AsGDExtensionStringNamePtr(), 3173160232)
	if globalStringNameMethodBindings.method_hex_to_int == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_hex_to_int")
	}
	methodName81 := NewStringNameWithLatin1Chars("bin_to_int")
	defer methodName81.Destroy()
	log.Debug("globalStringNameMethodBindings.method_bin_to_int")
	globalStringNameMethodBindings.method_bin_to_int = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName81.AsGDExtensionStringNamePtr(), 3173160232)
	if globalStringNameMethodBindings.method_bin_to_int == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_bin_to_int")
	}
	methodName82 := NewStringNameWithLatin1Chars("lpad")
	defer methodName82.Destroy()
	log.Debug("globalStringNameMethodBindings.method_lpad")
	globalStringNameMethodBindings.method_lpad = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName82.AsGDExtensionStringNamePtr(), 248737229)
	if globalStringNameMethodBindings.method_lpad == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_lpad")
	}
	methodName83 := NewStringNameWithLatin1Chars("rpad")
	defer methodName83.Destroy()
	log.Debug("globalStringNameMethodBindings.method_rpad")
	globalStringNameMethodBindings.method_rpad = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName83.AsGDExtensionStringNamePtr(), 248737229)
	if globalStringNameMethodBindings.method_rpad == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_rpad")
	}
	methodName84 := NewStringNameWithLatin1Chars("pad_decimals")
	defer methodName84.Destroy()
	log.Debug("globalStringNameMethodBindings.method_pad_decimals")
	globalStringNameMethodBindings.method_pad_decimals = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName84.AsGDExtensionStringNamePtr(), 2162347432)
	if globalStringNameMethodBindings.method_pad_decimals == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_pad_decimals")
	}
	methodName85 := NewStringNameWithLatin1Chars("pad_zeros")
	defer methodName85.Destroy()
	log.Debug("globalStringNameMethodBindings.method_pad_zeros")
	globalStringNameMethodBindings.method_pad_zeros = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName85.AsGDExtensionStringNamePtr(), 2162347432)
	if globalStringNameMethodBindings.method_pad_zeros == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_pad_zeros")
	}
	methodName86 := NewStringNameWithLatin1Chars("trim_prefix")
	defer methodName86.Destroy()
	log.Debug("globalStringNameMethodBindings.method_trim_prefix")
	globalStringNameMethodBindings.method_trim_prefix = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName86.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringNameMethodBindings.method_trim_prefix == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_trim_prefix")
	}
	methodName87 := NewStringNameWithLatin1Chars("trim_suffix")
	defer methodName87.Destroy()
	log.Debug("globalStringNameMethodBindings.method_trim_suffix")
	globalStringNameMethodBindings.method_trim_suffix = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName87.AsGDExtensionStringNamePtr(), 3134094431)
	if globalStringNameMethodBindings.method_trim_suffix == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_trim_suffix")
	}
	methodName88 := NewStringNameWithLatin1Chars("to_ascii_buffer")
	defer methodName88.Destroy()
	log.Debug("globalStringNameMethodBindings.method_to_ascii_buffer")
	globalStringNameMethodBindings.method_to_ascii_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName88.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringNameMethodBindings.method_to_ascii_buffer == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_to_ascii_buffer")
	}
	methodName89 := NewStringNameWithLatin1Chars("to_utf8_buffer")
	defer methodName89.Destroy()
	log.Debug("globalStringNameMethodBindings.method_to_utf8_buffer")
	globalStringNameMethodBindings.method_to_utf8_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName89.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringNameMethodBindings.method_to_utf8_buffer == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_to_utf8_buffer")
	}
	methodName90 := NewStringNameWithLatin1Chars("to_utf16_buffer")
	defer methodName90.Destroy()
	log.Debug("globalStringNameMethodBindings.method_to_utf16_buffer")
	globalStringNameMethodBindings.method_to_utf16_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName90.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringNameMethodBindings.method_to_utf16_buffer == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_to_utf16_buffer")
	}
	methodName91 := NewStringNameWithLatin1Chars("to_utf32_buffer")
	defer methodName91.Destroy()
	log.Debug("globalStringNameMethodBindings.method_to_utf32_buffer")
	globalStringNameMethodBindings.method_to_utf32_buffer = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName91.AsGDExtensionStringNamePtr(), 247621236)
	if globalStringNameMethodBindings.method_to_utf32_buffer == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_to_utf32_buffer")
	}
	methodName92 := NewStringNameWithLatin1Chars("hash")
	defer methodName92.Destroy()
	log.Debug("globalStringNameMethodBindings.method_hash")
	globalStringNameMethodBindings.method_hash = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_STRING_NAME, methodName92.AsGDExtensionStringNamePtr(), 3173160232)
	if globalStringNameMethodBindings.method_hash == nil {
		missingMethods = append(missingMethods, "globalStringNameMethodBindings.method_hash")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalStringNameMethodBindings.operator: equal Variant")
	globalStringNameMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalStringNameMethodBindings.operator: not_equal Variant")
	globalStringNameMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalStringNameMethodBindings.operator: module Variant")
	globalStringNameMethodBindings.operator_module_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalStringNameMethodBindings.operator: module bool")
	globalStringNameMethodBindings.operator_module_bool = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_BOOL)
	log.Debug("globalStringNameMethodBindings.operator: module int")
	globalStringNameMethodBindings.operator_module_int = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_INT)
	log.Debug("globalStringNameMethodBindings.operator: module float")
	globalStringNameMethodBindings.operator_module_float = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_FLOAT)
	log.Debug("globalStringNameMethodBindings.operator: equal String")
	globalStringNameMethodBindings.operator_equal_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringNameMethodBindings.operator: not_equal String")
	globalStringNameMethodBindings.operator_not_equal_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringNameMethodBindings.operator: add String")
	globalStringNameMethodBindings.operator_add_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringNameMethodBindings.operator: module String")
	globalStringNameMethodBindings.operator_module_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringNameMethodBindings.operator: in String")
	globalStringNameMethodBindings.operator_in_String = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING)
	log.Debug("globalStringNameMethodBindings.operator: module Vector2")
	globalStringNameMethodBindings.operator_module_Vector2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR2)
	log.Debug("globalStringNameMethodBindings.operator: module Vector2i")
	globalStringNameMethodBindings.operator_module_Vector2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR2I)
	log.Debug("globalStringNameMethodBindings.operator: module Rect2")
	globalStringNameMethodBindings.operator_module_Rect2 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_RECT2)
	log.Debug("globalStringNameMethodBindings.operator: module Rect2i")
	globalStringNameMethodBindings.operator_module_Rect2i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_RECT2I)
	log.Debug("globalStringNameMethodBindings.operator: module Vector3")
	globalStringNameMethodBindings.operator_module_Vector3 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR3)
	log.Debug("globalStringNameMethodBindings.operator: module Vector3i")
	globalStringNameMethodBindings.operator_module_Vector3i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR3I)
	log.Debug("globalStringNameMethodBindings.operator: module Transform2D")
	globalStringNameMethodBindings.operator_module_Transform2D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)
	log.Debug("globalStringNameMethodBindings.operator: module Vector4")
	globalStringNameMethodBindings.operator_module_Vector4 = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR4)
	log.Debug("globalStringNameMethodBindings.operator: module Vector4i")
	globalStringNameMethodBindings.operator_module_Vector4i = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR4I)
	log.Debug("globalStringNameMethodBindings.operator: module Plane")
	globalStringNameMethodBindings.operator_module_Plane = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PLANE)
	log.Debug("globalStringNameMethodBindings.operator: module Quaternion")
	globalStringNameMethodBindings.operator_module_Quaternion = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_QUATERNION)
	log.Debug("globalStringNameMethodBindings.operator: module AABB")
	globalStringNameMethodBindings.operator_module_AABB = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_AABB)
	log.Debug("globalStringNameMethodBindings.operator: module Basis")
	globalStringNameMethodBindings.operator_module_Basis = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_BASIS)
	log.Debug("globalStringNameMethodBindings.operator: module Transform3D")
	globalStringNameMethodBindings.operator_module_Transform3D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D)
	log.Debug("globalStringNameMethodBindings.operator: module Projection")
	globalStringNameMethodBindings.operator_module_Projection = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PROJECTION)
	log.Debug("globalStringNameMethodBindings.operator: module Color")
	globalStringNameMethodBindings.operator_module_Color = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_COLOR)
	log.Debug("globalStringNameMethodBindings.operator: equal StringName")
	globalStringNameMethodBindings.operator_equal_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringNameMethodBindings.operator: not_equal StringName")
	globalStringNameMethodBindings.operator_not_equal_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringNameMethodBindings.operator: less StringName")
	globalStringNameMethodBindings.operator_less_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringNameMethodBindings.operator: less_equal StringName")
	globalStringNameMethodBindings.operator_less_equal_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringNameMethodBindings.operator: greater StringName")
	globalStringNameMethodBindings.operator_greater_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringNameMethodBindings.operator: greater_equal StringName")
	globalStringNameMethodBindings.operator_greater_equal_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringNameMethodBindings.operator: add StringName")
	globalStringNameMethodBindings.operator_add_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringNameMethodBindings.operator: module StringName")
	globalStringNameMethodBindings.operator_module_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringNameMethodBindings.operator: in StringName")
	globalStringNameMethodBindings.operator_in_StringName = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)
	log.Debug("globalStringNameMethodBindings.operator: module NodePath")
	globalStringNameMethodBindings.operator_module_NodePath = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_NODE_PATH)
	log.Debug("globalStringNameMethodBindings.operator: module Object")
	globalStringNameMethodBindings.operator_module_Object = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_OBJECT)
	log.Debug("globalStringNameMethodBindings.operator: in Object")
	globalStringNameMethodBindings.operator_in_Object = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_OBJECT)
	log.Debug("globalStringNameMethodBindings.operator: module Callable")
	globalStringNameMethodBindings.operator_module_Callable = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_CALLABLE)
	log.Debug("globalStringNameMethodBindings.operator: module Signal")
	globalStringNameMethodBindings.operator_module_Signal = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_SIGNAL)
	log.Debug("globalStringNameMethodBindings.operator: module Dictionary")
	globalStringNameMethodBindings.operator_module_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalStringNameMethodBindings.operator: in Dictionary")
	globalStringNameMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalStringNameMethodBindings.operator: module Array")
	globalStringNameMethodBindings.operator_module_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalStringNameMethodBindings.operator: in Array")
	globalStringNameMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalStringNameMethodBindings.operator: module PackedByteArray")
	globalStringNameMethodBindings.operator_module_PackedByteArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)
	log.Debug("globalStringNameMethodBindings.operator: module PackedInt32Array")
	globalStringNameMethodBindings.operator_module_PackedInt32Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY)
	log.Debug("globalStringNameMethodBindings.operator: module PackedInt64Array")
	globalStringNameMethodBindings.operator_module_PackedInt64Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY)
	log.Debug("globalStringNameMethodBindings.operator: module PackedFloat32Array")
	globalStringNameMethodBindings.operator_module_PackedFloat32Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
	log.Debug("globalStringNameMethodBindings.operator: module PackedFloat64Array")
	globalStringNameMethodBindings.operator_module_PackedFloat64Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
	log.Debug("globalStringNameMethodBindings.operator: module PackedStringArray")
	globalStringNameMethodBindings.operator_module_PackedStringArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)
	log.Debug("globalStringNameMethodBindings.operator: in PackedStringArray")
	globalStringNameMethodBindings.operator_in_PackedStringArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)
	log.Debug("globalStringNameMethodBindings.operator: module PackedVector2Array")
	globalStringNameMethodBindings.operator_module_PackedVector2Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
	log.Debug("globalStringNameMethodBindings.operator: module PackedVector3Array")
	globalStringNameMethodBindings.operator_module_PackedVector3Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
	log.Debug("globalStringNameMethodBindings.operator: module PackedColorArray")
	globalStringNameMethodBindings.operator_module_PackedColorArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY)
	log.Debug("stringNameInitBindings end")
}

func (c *StringName) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewStringName, index: 0
func NewStringName() StringName {
	cx := StringName{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalStringNameMethodBindings.constructor_0, ptr)

	return cx
}

// NewStringName, index: 1
func NewStringNameWithStringName(from StringName) StringName {
	cx := StringName{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// StringName
	// StringNameEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalStringNameMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewStringName, index: 2
func NewStringNameWithString(from String) StringName {
	cx := StringName{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// String
	// StringEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalStringNameMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *StringName) Destroy() {
	md := (GDExtensionPtrDestructor)(globalStringNameMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* CasecmpTo : casecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) CasecmpTo(to String) int32 {
	mb := globalStringNameMethodBindings.method_casecmp_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* NocasecmpTo : nocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) NocasecmpTo(to String) int32 {
	mb := globalStringNameMethodBindings.method_nocasecmp_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* NaturalnocasecmpTo : naturalnocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) NaturalnocasecmpTo(to String) int32 {
	mb := globalStringNameMethodBindings.method_naturalnocasecmp_to

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(to)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) Length() int32 {
	mb := globalStringNameMethodBindings.method_length

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Substr : substr
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Substr(from int32, len int32) String {
	mb := globalStringNameMethodBindings.method_substr

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(from)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(len)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetSlice : get_slice
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetSlice(delimiter String, slice int32) String {
	mb := globalStringNameMethodBindings.method_get_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(slice)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetSlicec : get_slicec
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetSlicec(delimiter int32, slice int32) String {
	mb := globalStringNameMethodBindings.method_get_slicec

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(slice)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetSliceCount : get_slice_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) GetSliceCount(delimiter String) int32 {
	mb := globalStringNameMethodBindings.method_get_slice_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) Find(what String, from int32) int32 {
	mb := globalStringNameMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) Count(what String, from int32, to int32) int32 {
	mb := globalStringNameMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Int32Encoder.EncodeArg(to)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Countn : countn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) Countn(what String, from int32, to int32) int32 {
	mb := globalStringNameMethodBindings.method_countn

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Int32Encoder.EncodeArg(to)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Findn : findn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) Findn(what String, from int32) int32 {
	mb := globalStringNameMethodBindings.method_findn

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) Rfind(what String, from int32) int32 {
	mb := globalStringNameMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfindn : rfindn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) Rfindn(what String, from int32) int32 {
	mb := globalStringNameMethodBindings.method_rfindn

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Match : match
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) Match(expr String) bool {
	mb := globalStringNameMethodBindings.method_match

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(expr)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Matchn : matchn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) Matchn(expr String) bool {
	mb := globalStringNameMethodBindings.method_matchn

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(expr)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* BeginsWith : begins_with
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) BeginsWith(text String) bool {
	mb := globalStringNameMethodBindings.method_begins_with

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(text)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* EndsWith : ends_with
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) EndsWith(text String) bool {
	mb := globalStringNameMethodBindings.method_ends_with

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(text)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsSubsequenceOf : is_subsequence_of
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsSubsequenceOf(text String) bool {
	mb := globalStringNameMethodBindings.method_is_subsequence_of

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(text)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsSubsequenceOfn : is_subsequence_ofn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsSubsequenceOfn(text String) bool {
	mb := globalStringNameMethodBindings.method_is_subsequence_ofn

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(text)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Bigrams : bigrams
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *StringName) Bigrams() PackedStringArray {
	mb := globalStringNameMethodBindings.method_bigrams

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, nil)
	return ret

}

/* Similarity : similarity
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *StringName) Similarity(text String) float32 {
	mb := globalStringNameMethodBindings.method_similarity

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(text)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Format : format
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Format(values Variant, placeholder String) String {
	mb := globalStringNameMethodBindings.method_format

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&values))

	eArg1 := StringEncoder.EncodeArg(placeholder)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Replace : replace
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Replace(what String, forwhat String) String {
	mb := globalStringNameMethodBindings.method_replace

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(forwhat)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Replacen : replacen
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Replacen(what String, forwhat String) String {
	mb := globalStringNameMethodBindings.method_replacen

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(forwhat)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Repeat : repeat
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Repeat(count int32) String {
	mb := globalStringNameMethodBindings.method_repeat

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(count)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Insert(position int32, what String) String {
	mb := globalStringNameMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(position)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(what)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Capitalize : capitalize
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Capitalize() String {
	mb := globalStringNameMethodBindings.method_capitalize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ToCamelCase : to_camel_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ToCamelCase() String {
	mb := globalStringNameMethodBindings.method_to_camel_case

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ToPascalCase : to_pascal_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ToPascalCase() String {
	mb := globalStringNameMethodBindings.method_to_pascal_case

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ToSnakeCase : to_snake_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ToSnakeCase() String {
	mb := globalStringNameMethodBindings.method_to_snake_case

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Split : split
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *StringName) Split(delimiter String, allow_empty bool, maxsplit int32) PackedStringArray {
	mb := globalStringNameMethodBindings.method_split

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(allow_empty)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Int32Encoder.EncodeArg(maxsplit)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rsplit : rsplit
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *StringName) Rsplit(delimiter String, allow_empty bool, maxsplit int32) PackedStringArray {
	mb := globalStringNameMethodBindings.method_rsplit

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(allow_empty)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Int32Encoder.EncodeArg(maxsplit)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* SplitFloats : split_floats
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *StringName) SplitFloats(delimiter String, allow_empty bool) PackedFloat64Array {
	mb := globalStringNameMethodBindings.method_split_floats

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(delimiter)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(allow_empty)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Join : join
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Join(parts PackedStringArray) String {
	mb := globalStringNameMethodBindings.method_join

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&parts))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToUpper : to_upper
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ToUpper() String {
	mb := globalStringNameMethodBindings.method_to_upper

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ToLower : to_lower
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ToLower() String {
	mb := globalStringNameMethodBindings.method_to_lower

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Left : left
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Left(length int32) String {
	mb := globalStringNameMethodBindings.method_left

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(length)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Right : right
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Right(length int32) String {
	mb := globalStringNameMethodBindings.method_right

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(length)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* StripEdges : strip_edges
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) StripEdges(left bool, right bool) String {
	mb := globalStringNameMethodBindings.method_strip_edges

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := BoolEncoder.EncodeArg(left)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(right)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* StripEscapes : strip_escapes
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) StripEscapes() String {
	mb := globalStringNameMethodBindings.method_strip_escapes

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Lstrip : lstrip
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Lstrip(chars String) String {
	mb := globalStringNameMethodBindings.method_lstrip

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(chars)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rstrip : rstrip
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Rstrip(chars String) String {
	mb := globalStringNameMethodBindings.method_rstrip

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(chars)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetExtension : get_extension
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetExtension() String {
	mb := globalStringNameMethodBindings.method_get_extension

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* GetBasename : get_basename
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetBasename() String {
	mb := globalStringNameMethodBindings.method_get_basename

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* PathJoin : path_join
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) PathJoin(file String) String {
	mb := globalStringNameMethodBindings.method_path_join

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(file)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* UnicodeAt : unicode_at
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) UnicodeAt(at int32) int32 {
	mb := globalStringNameMethodBindings.method_unicode_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(at)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Indent : indent
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Indent(prefix String) String {
	mb := globalStringNameMethodBindings.method_indent

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(prefix)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Dedent : dedent
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Dedent() String {
	mb := globalStringNameMethodBindings.method_dedent

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Md5Text : md5_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Md5Text() String {
	mb := globalStringNameMethodBindings.method_md5_text

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Sha1Text : sha1_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Sha1Text() String {
	mb := globalStringNameMethodBindings.method_sha1_text

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Sha256Text : sha256_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Sha256Text() String {
	mb := globalStringNameMethodBindings.method_sha256_text

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Md5Buffer : md5_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) Md5Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_md5_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sha1Buffer : sha1_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) Sha1Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_sha1_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sha256Buffer : sha256_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) Sha256Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_sha256_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsEmpty() bool {
	mb := globalStringNameMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Contains : contains
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) Contains(what String) bool {
	mb := globalStringNameMethodBindings.method_contains

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(what)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsAbsolutePath : is_absolute_path
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsAbsolutePath() bool {
	mb := globalStringNameMethodBindings.method_is_absolute_path

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsRelativePath : is_relative_path
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsRelativePath() bool {
	mb := globalStringNameMethodBindings.method_is_relative_path

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* SimplifyPath : simplify_path
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) SimplifyPath() String {
	mb := globalStringNameMethodBindings.method_simplify_path

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* GetBaseDir : get_base_dir
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetBaseDir() String {
	mb := globalStringNameMethodBindings.method_get_base_dir

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* GetFile : get_file
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetFile() String {
	mb := globalStringNameMethodBindings.method_get_file

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* XmlEscape : xml_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) XmlEscape(escape_quotes bool) String {
	mb := globalStringNameMethodBindings.method_xml_escape

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := BoolEncoder.EncodeArg(escape_quotes)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* XmlUnescape : xml_unescape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) XmlUnescape() String {
	mb := globalStringNameMethodBindings.method_xml_unescape

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* UriEncode : uri_encode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) UriEncode() String {
	mb := globalStringNameMethodBindings.method_uri_encode

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* UriDecode : uri_decode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) UriDecode() String {
	mb := globalStringNameMethodBindings.method_uri_decode

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* CEscape : c_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) CEscape() String {
	mb := globalStringNameMethodBindings.method_c_escape

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* CUnescape : c_unescape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) CUnescape() String {
	mb := globalStringNameMethodBindings.method_c_unescape

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* JsonEscape : json_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) JsonEscape() String {
	mb := globalStringNameMethodBindings.method_json_escape

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ValidateNodeName : validate_node_name
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ValidateNodeName() String {
	mb := globalStringNameMethodBindings.method_validate_node_name

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* ValidateFilename : validate_filename
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ValidateFilename() String {
	mb := globalStringNameMethodBindings.method_validate_filename

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* IsValidIdentifier : is_valid_identifier
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidIdentifier() bool {
	mb := globalStringNameMethodBindings.method_is_valid_identifier

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsValidInt : is_valid_int
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidInt() bool {
	mb := globalStringNameMethodBindings.method_is_valid_int

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsValidFloat : is_valid_float
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidFloat() bool {
	mb := globalStringNameMethodBindings.method_is_valid_float

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsValidHexNumber : is_valid_hex_number
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidHexNumber(with_prefix bool) bool {
	mb := globalStringNameMethodBindings.method_is_valid_hex_number

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := BoolEncoder.EncodeArg(with_prefix)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsValidHtmlColor : is_valid_html_color
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidHtmlColor() bool {
	mb := globalStringNameMethodBindings.method_is_valid_html_color

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsValidIpAddress : is_valid_ip_address
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidIpAddress() bool {
	mb := globalStringNameMethodBindings.method_is_valid_ip_address

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsValidFilename : is_valid_filename
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidFilename() bool {
	mb := globalStringNameMethodBindings.method_is_valid_filename

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* ToInt : to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) ToInt() int32 {
	mb := globalStringNameMethodBindings.method_to_int

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* ToFloat : to_float
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *StringName) ToFloat() float32 {
	mb := globalStringNameMethodBindings.method_to_float

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret

}

/* HexToInt : hex_to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) HexToInt() int32 {
	mb := globalStringNameMethodBindings.method_hex_to_int

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* BinToInt : bin_to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) BinToInt() int32 {
	mb := globalStringNameMethodBindings.method_bin_to_int

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Lpad : lpad
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Lpad(min_length int32, character String) String {
	mb := globalStringNameMethodBindings.method_lpad

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(min_length)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(character)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rpad : rpad
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Rpad(min_length int32, character String) String {
	mb := globalStringNameMethodBindings.method_rpad

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(min_length)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(character)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* PadDecimals : pad_decimals
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) PadDecimals(digits int32) String {
	mb := globalStringNameMethodBindings.method_pad_decimals

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(digits)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* PadZeros : pad_zeros
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) PadZeros(digits int32) String {
	mb := globalStringNameMethodBindings.method_pad_zeros

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(digits)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* TrimPrefix : trim_prefix
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) TrimPrefix(prefix String) String {
	mb := globalStringNameMethodBindings.method_trim_prefix

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(prefix)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* TrimSuffix : trim_suffix
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) TrimSuffix(suffix String) String {
	mb := globalStringNameMethodBindings.method_trim_suffix

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(suffix)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToAsciiBuffer : to_ascii_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) ToAsciiBuffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_to_ascii_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* ToUtf8Buffer : to_utf8_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) ToUtf8Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_to_utf8_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* ToUtf16Buffer : to_utf16_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) ToUtf16Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_to_utf16_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* ToUtf32Buffer : to_utf32_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) ToUtf32Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_to_utf32_buffer

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *StringName) Hash() int32 {
	mb := globalStringNameMethodBindings.method_hash

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

// members

// Equal_Variant operator
func (cx *StringName) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *StringName) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Module_Variant operator
func (cx *StringName) Module_Variant(right Variant) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Variant, lt, rt)
}

// Module_bool operator
func (cx *StringName) Module_bool(right bool) String {
	lt := cx.ptr()

	eRight := BoolEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_bool, lt, rt)
}

// Module_int operator
func (cx *StringName) Module_int(right int32) String {
	lt := cx.ptr()

	eRight := Int32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_int, lt, rt)
}

// Module_float operator
func (cx *StringName) Module_float(right float32) String {
	lt := cx.ptr()

	eRight := Float32Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_float, lt, rt)
}

// Equal_String operator
func (cx *StringName) Equal_String(right String) bool {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_equal_String, lt, rt)
}

// Not_equal_String operator
func (cx *StringName) Not_equal_String(right String) bool {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_not_equal_String, lt, rt)
}

// Add_String operator
func (cx *StringName) Add_String(right String) String {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_add_String, lt, rt)
}

// Module_String operator
func (cx *StringName) Module_String(right String) String {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_String, lt, rt)
}

// In_String operator
func (cx *StringName) In_String(right String) bool {
	lt := cx.ptr()

	eRight := StringEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_String, lt, rt)
}

// Module_Vector2 operator
func (cx *StringName) Module_Vector2(right Vector2) String {
	lt := cx.ptr()

	eRight := Vector2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector2, lt, rt)
}

// Module_Vector2i operator
func (cx *StringName) Module_Vector2i(right Vector2i) String {
	lt := cx.ptr()

	eRight := Vector2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector2i, lt, rt)
}

// Module_Rect2 operator
func (cx *StringName) Module_Rect2(right Rect2) String {
	lt := cx.ptr()

	eRight := Rect2Encoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Rect2, lt, rt)
}

// Module_Rect2i operator
func (cx *StringName) Module_Rect2i(right Rect2i) String {
	lt := cx.ptr()

	eRight := Rect2iEncoder.EncodeArg(right)
	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Rect2i, lt, rt)
}

// Module_Vector3 operator
func (cx *StringName) Module_Vector3(right Vector3) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector3, lt, rt)
}

// Module_Vector3i operator
func (cx *StringName) Module_Vector3i(right Vector3i) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector3i, lt, rt)
}

// Module_Transform2D operator
func (cx *StringName) Module_Transform2D(right Transform2D) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Transform2D, lt, rt)
}

// Module_Vector4 operator
func (cx *StringName) Module_Vector4(right Vector4) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector4, lt, rt)
}

// Module_Vector4i operator
func (cx *StringName) Module_Vector4i(right Vector4i) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector4i, lt, rt)
}

// Module_Plane operator
func (cx *StringName) Module_Plane(right Plane) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Plane, lt, rt)
}

// Module_Quaternion operator
func (cx *StringName) Module_Quaternion(right Quaternion) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Quaternion, lt, rt)
}

// Module_AABB operator
func (cx *StringName) Module_AABB(right AABB) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_AABB, lt, rt)
}

// Module_Basis operator
func (cx *StringName) Module_Basis(right Basis) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Basis, lt, rt)
}

// Module_Transform3D operator
func (cx *StringName) Module_Transform3D(right Transform3D) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Transform3D, lt, rt)
}

// Module_Projection operator
func (cx *StringName) Module_Projection(right Projection) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Projection, lt, rt)
}

// Module_Color operator
func (cx *StringName) Module_Color(right Color) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Color, lt, rt)
}

// Equal_StringName operator
func (cx *StringName) Equal_StringName(right StringName) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_equal_StringName, lt, rt)
}

// Not_equal_StringName operator
func (cx *StringName) Not_equal_StringName(right StringName) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_not_equal_StringName, lt, rt)
}

// Less_StringName operator
func (cx *StringName) Less_StringName(right StringName) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_less_StringName, lt, rt)
}

// Less_equal_StringName operator
func (cx *StringName) Less_equal_StringName(right StringName) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_less_equal_StringName, lt, rt)
}

// Greater_StringName operator
func (cx *StringName) Greater_StringName(right StringName) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_greater_StringName, lt, rt)
}

// Greater_equal_StringName operator
func (cx *StringName) Greater_equal_StringName(right StringName) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_greater_equal_StringName, lt, rt)
}

// Add_StringName operator
func (cx *StringName) Add_StringName(right StringName) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_add_StringName, lt, rt)
}

// Module_StringName operator
func (cx *StringName) Module_StringName(right StringName) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_StringName, lt, rt)
}

// In_StringName operator
func (cx *StringName) In_StringName(right StringName) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_StringName, lt, rt)
}

// Module_NodePath operator
func (cx *StringName) Module_NodePath(right NodePath) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_NodePath, lt, rt)
}

// Module_Object operator
func (cx *StringName) Module_Object(right Object) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Object, lt, rt)
}

// In_Object operator
func (cx *StringName) In_Object(right Object) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_Object, lt, rt)
}

// Module_Callable operator
func (cx *StringName) Module_Callable(right Callable) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Callable, lt, rt)
}

// Module_Signal operator
func (cx *StringName) Module_Signal(right Signal) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Signal, lt, rt)
}

// Module_Dictionary operator
func (cx *StringName) Module_Dictionary(right Dictionary) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Dictionary, lt, rt)
}

// In_Dictionary operator
func (cx *StringName) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_Dictionary, lt, rt)
}

// Module_Array operator
func (cx *StringName) Module_Array(right Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Array, lt, rt)
}

// In_Array operator
func (cx *StringName) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_Array, lt, rt)
}

// Module_PackedByteArray operator
func (cx *StringName) Module_PackedByteArray(right PackedByteArray) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedByteArray, lt, rt)
}

// Module_PackedInt32Array operator
func (cx *StringName) Module_PackedInt32Array(right PackedInt32Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedInt32Array, lt, rt)
}

// Module_PackedInt64Array operator
func (cx *StringName) Module_PackedInt64Array(right PackedInt64Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedInt64Array, lt, rt)
}

// Module_PackedFloat32Array operator
func (cx *StringName) Module_PackedFloat32Array(right PackedFloat32Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedFloat32Array, lt, rt)
}

// Module_PackedFloat64Array operator
func (cx *StringName) Module_PackedFloat64Array(right PackedFloat64Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedFloat64Array, lt, rt)
}

// Module_PackedStringArray operator
func (cx *StringName) Module_PackedStringArray(right PackedStringArray) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedStringArray, lt, rt)
}

// In_PackedStringArray operator
func (cx *StringName) In_PackedStringArray(right PackedStringArray) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_PackedStringArray, lt, rt)
}

// Module_PackedVector2Array operator
func (cx *StringName) Module_PackedVector2Array(right PackedVector2Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedVector2Array, lt, rt)
}

// Module_PackedVector3Array operator
func (cx *StringName) Module_PackedVector3Array(right PackedVector3Array) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedVector3Array, lt, rt)
}

// Module_PackedColorArray operator
func (cx *StringName) Module_PackedColorArray(right PackedColorArray) String {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedColorArray, lt, rt)
}

/*
 * NodePath
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: true
 */
type NodePath struct {
	opaque [8]uint8
}

type nodePathMethodBindings struct {
	constructor_0                    GDExtensionPtrConstructor
	constructor_1                    GDExtensionPtrConstructor
	constructor_2                    GDExtensionPtrConstructor
	destructor                       GDExtensionPtrDestructor
	method_is_absolute               GDExtensionPtrBuiltInMethod
	method_get_name_count            GDExtensionPtrBuiltInMethod
	method_get_name                  GDExtensionPtrBuiltInMethod
	method_get_subname_count         GDExtensionPtrBuiltInMethod
	method_hash                      GDExtensionPtrBuiltInMethod
	method_get_subname               GDExtensionPtrBuiltInMethod
	method_get_concatenated_names    GDExtensionPtrBuiltInMethod
	method_get_concatenated_subnames GDExtensionPtrBuiltInMethod
	method_get_as_property_path      GDExtensionPtrBuiltInMethod
	method_is_empty                  GDExtensionPtrBuiltInMethod
	operator_equal_Variant           GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant       GDExtensionPtrOperatorEvaluator
	operator_equal_NodePath          GDExtensionPtrOperatorEvaluator
	operator_not_equal_NodePath      GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary           GDExtensionPtrOperatorEvaluator
	operator_in_Array                GDExtensionPtrOperatorEvaluator
}

var globalNodePathMethodBindings nodePathMethodBindings

func nodePathInitConstructorBindings() {
	log.Debug("nodePathInitConstructorBindings called")

	log.Debug("globalNodePathMethodBindings.constructor_0")
	globalNodePathMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, 0)
	log.Debug("globalNodePathMethodBindings.constructor_1")
	globalNodePathMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, 1)
	log.Debug("globalNodePathMethodBindings.constructor_2")
	globalNodePathMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, 2)
	log.Debug("globalNodePathMethodBindings.destructor")
	globalNodePathMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH)
}

func nodePathInitMethodBindings() {
	log.Debug("nodePathInitMethodBindings called")

	missingMethods := make([]string, 0, 10)

	methodName0 := NewStringNameWithLatin1Chars("is_absolute")
	defer methodName0.Destroy()
	log.Debug("globalNodePathMethodBindings.method_is_absolute")
	globalNodePathMethodBindings.method_is_absolute = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, methodName0.AsGDExtensionStringNamePtr(), 3918633141)
	if globalNodePathMethodBindings.method_is_absolute == nil {
		missingMethods = append(missingMethods, "globalNodePathMethodBindings.method_is_absolute")
	}
	methodName1 := NewStringNameWithLatin1Chars("get_name_count")
	defer methodName1.Destroy()
	log.Debug("globalNodePathMethodBindings.method_get_name_count")
	globalNodePathMethodBindings.method_get_name_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, methodName1.AsGDExtensionStringNamePtr(), 3173160232)
	if globalNodePathMethodBindings.method_get_name_count == nil {
		missingMethods = append(missingMethods, "globalNodePathMethodBindings.method_get_name_count")
	}
	methodName2 := NewStringNameWithLatin1Chars("get_name")
	defer methodName2.Destroy()
	log.Debug("globalNodePathMethodBindings.method_get_name")
	globalNodePathMethodBindings.method_get_name = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, methodName2.AsGDExtensionStringNamePtr(), 2948586938)
	if globalNodePathMethodBindings.method_get_name == nil {
		missingMethods = append(missingMethods, "globalNodePathMethodBindings.method_get_name")
	}
	methodName3 := NewStringNameWithLatin1Chars("get_subname_count")
	defer methodName3.Destroy()
	log.Debug("globalNodePathMethodBindings.method_get_subname_count")
	globalNodePathMethodBindings.method_get_subname_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, methodName3.AsGDExtensionStringNamePtr(), 3173160232)
	if globalNodePathMethodBindings.method_get_subname_count == nil {
		missingMethods = append(missingMethods, "globalNodePathMethodBindings.method_get_subname_count")
	}
	methodName4 := NewStringNameWithLatin1Chars("hash")
	defer methodName4.Destroy()
	log.Debug("globalNodePathMethodBindings.method_hash")
	globalNodePathMethodBindings.method_hash = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, methodName4.AsGDExtensionStringNamePtr(), 3173160232)
	if globalNodePathMethodBindings.method_hash == nil {
		missingMethods = append(missingMethods, "globalNodePathMethodBindings.method_hash")
	}
	methodName5 := NewStringNameWithLatin1Chars("get_subname")
	defer methodName5.Destroy()
	log.Debug("globalNodePathMethodBindings.method_get_subname")
	globalNodePathMethodBindings.method_get_subname = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, methodName5.AsGDExtensionStringNamePtr(), 2948586938)
	if globalNodePathMethodBindings.method_get_subname == nil {
		missingMethods = append(missingMethods, "globalNodePathMethodBindings.method_get_subname")
	}
	methodName6 := NewStringNameWithLatin1Chars("get_concatenated_names")
	defer methodName6.Destroy()
	log.Debug("globalNodePathMethodBindings.method_get_concatenated_names")
	globalNodePathMethodBindings.method_get_concatenated_names = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, methodName6.AsGDExtensionStringNamePtr(), 1825232092)
	if globalNodePathMethodBindings.method_get_concatenated_names == nil {
		missingMethods = append(missingMethods, "globalNodePathMethodBindings.method_get_concatenated_names")
	}
	methodName7 := NewStringNameWithLatin1Chars("get_concatenated_subnames")
	defer methodName7.Destroy()
	log.Debug("globalNodePathMethodBindings.method_get_concatenated_subnames")
	globalNodePathMethodBindings.method_get_concatenated_subnames = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, methodName7.AsGDExtensionStringNamePtr(), 1825232092)
	if globalNodePathMethodBindings.method_get_concatenated_subnames == nil {
		missingMethods = append(missingMethods, "globalNodePathMethodBindings.method_get_concatenated_subnames")
	}
	methodName8 := NewStringNameWithLatin1Chars("get_as_property_path")
	defer methodName8.Destroy()
	log.Debug("globalNodePathMethodBindings.method_get_as_property_path")
	globalNodePathMethodBindings.method_get_as_property_path = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, methodName8.AsGDExtensionStringNamePtr(), 1598598043)
	if globalNodePathMethodBindings.method_get_as_property_path == nil {
		missingMethods = append(missingMethods, "globalNodePathMethodBindings.method_get_as_property_path")
	}
	methodName9 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName9.Destroy()
	log.Debug("globalNodePathMethodBindings.method_is_empty")
	globalNodePathMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_NODE_PATH, methodName9.AsGDExtensionStringNamePtr(), 3918633141)
	if globalNodePathMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalNodePathMethodBindings.method_is_empty")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalNodePathMethodBindings.operator: equal Variant")
	globalNodePathMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_NODE_PATH, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalNodePathMethodBindings.operator: not_equal Variant")
	globalNodePathMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_NODE_PATH, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalNodePathMethodBindings.operator: equal NodePath")
	globalNodePathMethodBindings.operator_equal_NodePath = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_NODE_PATH, GDEXTENSION_VARIANT_TYPE_NODE_PATH)
	log.Debug("globalNodePathMethodBindings.operator: not_equal NodePath")
	globalNodePathMethodBindings.operator_not_equal_NodePath = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_NODE_PATH, GDEXTENSION_VARIANT_TYPE_NODE_PATH)
	log.Debug("globalNodePathMethodBindings.operator: in Dictionary")
	globalNodePathMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_NODE_PATH, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalNodePathMethodBindings.operator: in Array")
	globalNodePathMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_NODE_PATH, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("nodePathInitBindings end")
}

func (c *NodePath) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewNodePath, index: 0
func NewNodePath() NodePath {
	cx := NodePath{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalNodePathMethodBindings.constructor_0, ptr)

	return cx
}

// NewNodePath, index: 1
func NewNodePathWithNodePath(from NodePath) NodePath {
	cx := NodePath{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// NodePath
	// NodePathEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalNodePathMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewNodePath, index: 2
func NewNodePathWithString(from String) NodePath {
	cx := NodePath{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// String
	// StringEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalNodePathMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *NodePath) Destroy() {
	md := (GDExtensionPtrDestructor)(globalNodePathMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* IsAbsolute : is_absolute
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *NodePath) IsAbsolute() bool {
	mb := globalNodePathMethodBindings.method_is_absolute

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* GetNameCount : get_name_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *NodePath) GetNameCount() int32 {
	mb := globalNodePathMethodBindings.method_get_name_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* GetName : get_name
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetName(idx int32) StringName {
	mb := globalNodePathMethodBindings.method_get_name

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(idx)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[StringName](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetSubnameCount : get_subname_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *NodePath) GetSubnameCount() int32 {
	mb := globalNodePathMethodBindings.method_get_subname_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *NodePath) Hash() int32 {
	mb := globalNodePathMethodBindings.method_hash

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* GetSubname : get_subname
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetSubname(idx int32) StringName {
	mb := globalNodePathMethodBindings.method_get_subname

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(idx)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[StringName](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetConcatenatedNames : get_concatenated_names
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetConcatenatedNames() StringName {
	mb := globalNodePathMethodBindings.method_get_concatenated_names

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret

}

/* GetConcatenatedSubnames : get_concatenated_subnames
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetConcatenatedSubnames() StringName {
	mb := globalNodePathMethodBindings.method_get_concatenated_subnames

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret

}

/* GetAsPropertyPath : get_as_property_path
 * is_vararg = false, is_static = false
 * goReturnType(NodePath) -> NodePath
 */
func (cx *NodePath) GetAsPropertyPath() NodePath {
	mb := globalNodePathMethodBindings.method_get_as_property_path

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[NodePath](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *NodePath) IsEmpty() bool {
	mb := globalNodePathMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

// members

// Equal_Variant operator
func (cx *NodePath) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *NodePath) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Equal_NodePath operator
func (cx *NodePath) Equal_NodePath(right NodePath) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_equal_NodePath, lt, rt)
}

// Not_equal_NodePath operator
func (cx *NodePath) Not_equal_NodePath(right NodePath) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_not_equal_NodePath, lt, rt)
}

// In_Dictionary operator
func (cx *NodePath) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *NodePath) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_in_Array, lt, rt)
}

/*
 * RID
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type RID struct {
	opaque [8]uint8
}

type rIDMethodBindings struct {
	constructor_0              GDExtensionPtrConstructor
	constructor_1              GDExtensionPtrConstructor
	method_is_valid            GDExtensionPtrBuiltInMethod
	method_get_id              GDExtensionPtrBuiltInMethod
	operator_equal_Variant     GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant GDExtensionPtrOperatorEvaluator
	operator_equal_RID         GDExtensionPtrOperatorEvaluator
	operator_not_equal_RID     GDExtensionPtrOperatorEvaluator
	operator_less_RID          GDExtensionPtrOperatorEvaluator
	operator_less_equal_RID    GDExtensionPtrOperatorEvaluator
	operator_greater_RID       GDExtensionPtrOperatorEvaluator
	operator_greater_equal_RID GDExtensionPtrOperatorEvaluator
}

var globalRIDMethodBindings rIDMethodBindings

func rIDInitConstructorBindings() {
	log.Debug("rIDInitConstructorBindings called")

	log.Debug("globalRIDMethodBindings.constructor_0")
	globalRIDMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RID, 0)
	log.Debug("globalRIDMethodBindings.constructor_1")
	globalRIDMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RID, 1)
}

func rIDInitMethodBindings() {
	log.Debug("rIDInitMethodBindings called")

	missingMethods := make([]string, 0, 2)

	methodName0 := NewStringNameWithLatin1Chars("is_valid")
	defer methodName0.Destroy()
	log.Debug("globalRIDMethodBindings.method_is_valid")
	globalRIDMethodBindings.method_is_valid = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RID, methodName0.AsGDExtensionStringNamePtr(), 3918633141)
	if globalRIDMethodBindings.method_is_valid == nil {
		missingMethods = append(missingMethods, "globalRIDMethodBindings.method_is_valid")
	}
	methodName1 := NewStringNameWithLatin1Chars("get_id")
	defer methodName1.Destroy()
	log.Debug("globalRIDMethodBindings.method_get_id")
	globalRIDMethodBindings.method_get_id = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_RID, methodName1.AsGDExtensionStringNamePtr(), 3173160232)
	if globalRIDMethodBindings.method_get_id == nil {
		missingMethods = append(missingMethods, "globalRIDMethodBindings.method_get_id")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalRIDMethodBindings.operator: equal Variant")
	globalRIDMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_RID, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalRIDMethodBindings.operator: not_equal Variant")
	globalRIDMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_RID, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalRIDMethodBindings.operator: equal RID")
	globalRIDMethodBindings.operator_equal_RID = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_RID, GDEXTENSION_VARIANT_TYPE_RID)
	log.Debug("globalRIDMethodBindings.operator: not_equal RID")
	globalRIDMethodBindings.operator_not_equal_RID = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_RID, GDEXTENSION_VARIANT_TYPE_RID)
	log.Debug("globalRIDMethodBindings.operator: less RID")
	globalRIDMethodBindings.operator_less_RID = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_RID, GDEXTENSION_VARIANT_TYPE_RID)
	log.Debug("globalRIDMethodBindings.operator: less_equal RID")
	globalRIDMethodBindings.operator_less_equal_RID = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_RID, GDEXTENSION_VARIANT_TYPE_RID)
	log.Debug("globalRIDMethodBindings.operator: greater RID")
	globalRIDMethodBindings.operator_greater_RID = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_RID, GDEXTENSION_VARIANT_TYPE_RID)
	log.Debug("globalRIDMethodBindings.operator: greater_equal RID")
	globalRIDMethodBindings.operator_greater_equal_RID = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_RID, GDEXTENSION_VARIANT_TYPE_RID)
	log.Debug("rIDInitBindings end")
}

func (c *RID) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewRID, index: 0
func NewRID() RID {
	cx := RID{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalRIDMethodBindings.constructor_0, ptr)

	return cx
}

// NewRID, index: 1
func NewRIDWithRID(from RID) RID {
	cx := RID{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// RID
	// RIDEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalRIDMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// methods

/* IsValid : is_valid
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *RID) IsValid() bool {
	mb := globalRIDMethodBindings.method_is_valid

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* GetId : get_id
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *RID) GetId() int32 {
	mb := globalRIDMethodBindings.method_get_id

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

// members

// Equal_Variant operator
func (cx *RID) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *RID) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Equal_RID operator
func (cx *RID) Equal_RID(right RID) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_equal_RID, lt, rt)
}

// Not_equal_RID operator
func (cx *RID) Not_equal_RID(right RID) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_not_equal_RID, lt, rt)
}

// Less_RID operator
func (cx *RID) Less_RID(right RID) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_less_RID, lt, rt)
}

// Less_equal_RID operator
func (cx *RID) Less_equal_RID(right RID) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_less_equal_RID, lt, rt)
}

// Greater_RID operator
func (cx *RID) Greater_RID(right RID) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_greater_RID, lt, rt)
}

// Greater_equal_RID operator
func (cx *RID) Greater_equal_RID(right RID) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_greater_equal_RID, lt, rt)
}

/*
 * Callable
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: true
 */
type Callable struct {
	opaque [16]uint8
}

type callableMethodBindings struct {
	constructor_0                    GDExtensionPtrConstructor
	constructor_1                    GDExtensionPtrConstructor
	constructor_2                    GDExtensionPtrConstructor
	destructor                       GDExtensionPtrDestructor
	method_callv                     GDExtensionPtrBuiltInMethod
	method_is_null                   GDExtensionPtrBuiltInMethod
	method_is_custom                 GDExtensionPtrBuiltInMethod
	method_is_standard               GDExtensionPtrBuiltInMethod
	method_is_valid                  GDExtensionPtrBuiltInMethod
	method_get_object                GDExtensionPtrBuiltInMethod
	method_get_object_id             GDExtensionPtrBuiltInMethod
	method_get_method                GDExtensionPtrBuiltInMethod
	method_get_bound_arguments_count GDExtensionPtrBuiltInMethod
	method_get_bound_arguments       GDExtensionPtrBuiltInMethod
	method_hash                      GDExtensionPtrBuiltInMethod
	method_bindv                     GDExtensionPtrBuiltInMethod
	method_unbind                    GDExtensionPtrBuiltInMethod
	operator_equal_Variant           GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant       GDExtensionPtrOperatorEvaluator
	operator_equal_Callable          GDExtensionPtrOperatorEvaluator
	operator_not_equal_Callable      GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary           GDExtensionPtrOperatorEvaluator
	operator_in_Array                GDExtensionPtrOperatorEvaluator
}

var globalCallableMethodBindings callableMethodBindings

func callableInitConstructorBindings() {
	log.Debug("callableInitConstructorBindings called")

	log.Debug("globalCallableMethodBindings.constructor_0")
	globalCallableMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, 0)
	log.Debug("globalCallableMethodBindings.constructor_1")
	globalCallableMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, 1)
	log.Debug("globalCallableMethodBindings.constructor_2")
	globalCallableMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, 2)
	log.Debug("globalCallableMethodBindings.destructor")
	globalCallableMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE)
}

func callableInitMethodBindings() {
	log.Debug("callableInitMethodBindings called")

	missingMethods := make([]string, 0, 13)

	methodName0 := NewStringNameWithLatin1Chars("callv")
	defer methodName0.Destroy()
	log.Debug("globalCallableMethodBindings.method_callv")
	globalCallableMethodBindings.method_callv = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName0.AsGDExtensionStringNamePtr(), 413578926)
	if globalCallableMethodBindings.method_callv == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_callv")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_null")
	defer methodName1.Destroy()
	log.Debug("globalCallableMethodBindings.method_is_null")
	globalCallableMethodBindings.method_is_null = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalCallableMethodBindings.method_is_null == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_is_null")
	}
	methodName2 := NewStringNameWithLatin1Chars("is_custom")
	defer methodName2.Destroy()
	log.Debug("globalCallableMethodBindings.method_is_custom")
	globalCallableMethodBindings.method_is_custom = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName2.AsGDExtensionStringNamePtr(), 3918633141)
	if globalCallableMethodBindings.method_is_custom == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_is_custom")
	}
	methodName3 := NewStringNameWithLatin1Chars("is_standard")
	defer methodName3.Destroy()
	log.Debug("globalCallableMethodBindings.method_is_standard")
	globalCallableMethodBindings.method_is_standard = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName3.AsGDExtensionStringNamePtr(), 3918633141)
	if globalCallableMethodBindings.method_is_standard == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_is_standard")
	}
	methodName4 := NewStringNameWithLatin1Chars("is_valid")
	defer methodName4.Destroy()
	log.Debug("globalCallableMethodBindings.method_is_valid")
	globalCallableMethodBindings.method_is_valid = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName4.AsGDExtensionStringNamePtr(), 3918633141)
	if globalCallableMethodBindings.method_is_valid == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_is_valid")
	}
	methodName5 := NewStringNameWithLatin1Chars("get_object")
	defer methodName5.Destroy()
	log.Debug("globalCallableMethodBindings.method_get_object")
	globalCallableMethodBindings.method_get_object = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName5.AsGDExtensionStringNamePtr(), 4008621732)
	if globalCallableMethodBindings.method_get_object == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_get_object")
	}
	methodName6 := NewStringNameWithLatin1Chars("get_object_id")
	defer methodName6.Destroy()
	log.Debug("globalCallableMethodBindings.method_get_object_id")
	globalCallableMethodBindings.method_get_object_id = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName6.AsGDExtensionStringNamePtr(), 3173160232)
	if globalCallableMethodBindings.method_get_object_id == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_get_object_id")
	}
	methodName7 := NewStringNameWithLatin1Chars("get_method")
	defer methodName7.Destroy()
	log.Debug("globalCallableMethodBindings.method_get_method")
	globalCallableMethodBindings.method_get_method = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName7.AsGDExtensionStringNamePtr(), 1825232092)
	if globalCallableMethodBindings.method_get_method == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_get_method")
	}
	methodName8 := NewStringNameWithLatin1Chars("get_bound_arguments_count")
	defer methodName8.Destroy()
	log.Debug("globalCallableMethodBindings.method_get_bound_arguments_count")
	globalCallableMethodBindings.method_get_bound_arguments_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName8.AsGDExtensionStringNamePtr(), 3173160232)
	if globalCallableMethodBindings.method_get_bound_arguments_count == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_get_bound_arguments_count")
	}
	methodName9 := NewStringNameWithLatin1Chars("get_bound_arguments")
	defer methodName9.Destroy()
	log.Debug("globalCallableMethodBindings.method_get_bound_arguments")
	globalCallableMethodBindings.method_get_bound_arguments = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName9.AsGDExtensionStringNamePtr(), 4144163970)
	if globalCallableMethodBindings.method_get_bound_arguments == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_get_bound_arguments")
	}
	methodName10 := NewStringNameWithLatin1Chars("hash")
	defer methodName10.Destroy()
	log.Debug("globalCallableMethodBindings.method_hash")
	globalCallableMethodBindings.method_hash = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName10.AsGDExtensionStringNamePtr(), 3173160232)
	if globalCallableMethodBindings.method_hash == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_hash")
	}
	methodName11 := NewStringNameWithLatin1Chars("bindv")
	defer methodName11.Destroy()
	log.Debug("globalCallableMethodBindings.method_bindv")
	globalCallableMethodBindings.method_bindv = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName11.AsGDExtensionStringNamePtr(), 3564560322)
	if globalCallableMethodBindings.method_bindv == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_bindv")
	}
	methodName12 := NewStringNameWithLatin1Chars("unbind")
	defer methodName12.Destroy()
	log.Debug("globalCallableMethodBindings.method_unbind")
	globalCallableMethodBindings.method_unbind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_CALLABLE, methodName12.AsGDExtensionStringNamePtr(), 755001590)
	if globalCallableMethodBindings.method_unbind == nil {
		missingMethods = append(missingMethods, "globalCallableMethodBindings.method_unbind")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalCallableMethodBindings.operator: equal Variant")
	globalCallableMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_CALLABLE, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalCallableMethodBindings.operator: not_equal Variant")
	globalCallableMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_CALLABLE, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalCallableMethodBindings.operator: equal Callable")
	globalCallableMethodBindings.operator_equal_Callable = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_CALLABLE, GDEXTENSION_VARIANT_TYPE_CALLABLE)
	log.Debug("globalCallableMethodBindings.operator: not_equal Callable")
	globalCallableMethodBindings.operator_not_equal_Callable = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_CALLABLE, GDEXTENSION_VARIANT_TYPE_CALLABLE)
	log.Debug("globalCallableMethodBindings.operator: in Dictionary")
	globalCallableMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_CALLABLE, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalCallableMethodBindings.operator: in Array")
	globalCallableMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_CALLABLE, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("callableInitBindings end")
}

func (c *Callable) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewCallable, index: 0
func NewCallable() Callable {
	cx := Callable{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalCallableMethodBindings.constructor_0, ptr)

	return cx
}

// NewCallable, index: 1
func NewCallableWithCallable(from Callable) Callable {
	cx := Callable{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Callable
	// CallableEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalCallableMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewCallable, index: 2
func NewCallableWithObjectStringName(object Object, method StringName) Callable {
	cx := Callable{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Object
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&object))

	// StringName
	// StringNameEncoder
	args[1] = (GDExtensionConstTypePtr)(method.ptr())
	callBuiltinConstructor(globalCallableMethodBindings.constructor_2, ptr, args[0], args[1])

	return cx
}

func (cx *Callable) Destroy() {
	md := (GDExtensionPtrDestructor)(globalCallableMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Callv : callv
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Callable) Callv(arguments Array) Variant {
	mb := globalCallableMethodBindings.method_callv

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&arguments))

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* IsNull : is_null
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsNull() bool {
	mb := globalCallableMethodBindings.method_is_null

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsCustom : is_custom
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsCustom() bool {
	mb := globalCallableMethodBindings.method_is_custom

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsStandard : is_standard
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsStandard() bool {
	mb := globalCallableMethodBindings.method_is_standard

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsValid : is_valid
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsValid() bool {
	mb := globalCallableMethodBindings.method_is_valid

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* GetObject : get_object
 * is_vararg = false, is_static = false
 * goReturnType(Object) -> Object
 */
func (cx *Callable) GetObject() Object {
	mb := globalCallableMethodBindings.method_get_object

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Object](mb, bx, nil)
	return ret

}

/* GetObjectId : get_object_id
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Callable) GetObjectId() int32 {
	mb := globalCallableMethodBindings.method_get_object_id

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* GetMethod : get_method
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *Callable) GetMethod() StringName {
	mb := globalCallableMethodBindings.method_get_method

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret

}

/* GetBoundArgumentsCount : get_bound_arguments_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Callable) GetBoundArgumentsCount() int32 {
	mb := globalCallableMethodBindings.method_get_bound_arguments_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* GetBoundArguments : get_bound_arguments
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Callable) GetBoundArguments() Array {
	mb := globalCallableMethodBindings.method_get_bound_arguments

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Array](mb, bx, nil)
	return ret

}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Callable) Hash() int32 {
	mb := globalCallableMethodBindings.method_hash

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Bindv : bindv
 * is_vararg = false, is_static = false
 * goReturnType(Callable) -> Callable
 */
func (cx *Callable) Bindv(arguments Array) Callable {
	mb := globalCallableMethodBindings.method_bindv

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&arguments))

	ret := callBuiltinMethodPtrRet[Callable](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Unbind : unbind
 * is_vararg = false, is_static = false
 * goReturnType(Callable) -> Callable
 */
func (cx *Callable) Unbind(argcount int32) Callable {
	mb := globalCallableMethodBindings.method_unbind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(argcount)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Callable](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

// members

// Equal_Variant operator
func (cx *Callable) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Callable) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Equal_Callable operator
func (cx *Callable) Equal_Callable(right Callable) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_equal_Callable, lt, rt)
}

// Not_equal_Callable operator
func (cx *Callable) Not_equal_Callable(right Callable) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_not_equal_Callable, lt, rt)
}

// In_Dictionary operator
func (cx *Callable) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Callable) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_in_Array, lt, rt)
}

/*
 * Signal
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: true
 */
type Signal struct {
	opaque [16]uint8
}

type signalMethodBindings struct {
	constructor_0              GDExtensionPtrConstructor
	constructor_1              GDExtensionPtrConstructor
	constructor_2              GDExtensionPtrConstructor
	destructor                 GDExtensionPtrDestructor
	method_is_null             GDExtensionPtrBuiltInMethod
	method_get_object          GDExtensionPtrBuiltInMethod
	method_get_object_id       GDExtensionPtrBuiltInMethod
	method_get_name            GDExtensionPtrBuiltInMethod
	method_connect             GDExtensionPtrBuiltInMethod
	method_disconnect          GDExtensionPtrBuiltInMethod
	method_is_connected        GDExtensionPtrBuiltInMethod
	method_get_connections     GDExtensionPtrBuiltInMethod
	operator_equal_Variant     GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant GDExtensionPtrOperatorEvaluator
	operator_equal_Signal      GDExtensionPtrOperatorEvaluator
	operator_not_equal_Signal  GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary     GDExtensionPtrOperatorEvaluator
	operator_in_Array          GDExtensionPtrOperatorEvaluator
}

var globalSignalMethodBindings signalMethodBindings

func signalInitConstructorBindings() {
	log.Debug("signalInitConstructorBindings called")

	log.Debug("globalSignalMethodBindings.constructor_0")
	globalSignalMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL, 0)
	log.Debug("globalSignalMethodBindings.constructor_1")
	globalSignalMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL, 1)
	log.Debug("globalSignalMethodBindings.constructor_2")
	globalSignalMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL, 2)
	log.Debug("globalSignalMethodBindings.destructor")
	globalSignalMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL)
}

func signalInitMethodBindings() {
	log.Debug("signalInitMethodBindings called")

	missingMethods := make([]string, 0, 8)

	methodName0 := NewStringNameWithLatin1Chars("is_null")
	defer methodName0.Destroy()
	log.Debug("globalSignalMethodBindings.method_is_null")
	globalSignalMethodBindings.method_is_null = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL, methodName0.AsGDExtensionStringNamePtr(), 3918633141)
	if globalSignalMethodBindings.method_is_null == nil {
		missingMethods = append(missingMethods, "globalSignalMethodBindings.method_is_null")
	}
	methodName1 := NewStringNameWithLatin1Chars("get_object")
	defer methodName1.Destroy()
	log.Debug("globalSignalMethodBindings.method_get_object")
	globalSignalMethodBindings.method_get_object = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL, methodName1.AsGDExtensionStringNamePtr(), 4008621732)
	if globalSignalMethodBindings.method_get_object == nil {
		missingMethods = append(missingMethods, "globalSignalMethodBindings.method_get_object")
	}
	methodName2 := NewStringNameWithLatin1Chars("get_object_id")
	defer methodName2.Destroy()
	log.Debug("globalSignalMethodBindings.method_get_object_id")
	globalSignalMethodBindings.method_get_object_id = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL, methodName2.AsGDExtensionStringNamePtr(), 3173160232)
	if globalSignalMethodBindings.method_get_object_id == nil {
		missingMethods = append(missingMethods, "globalSignalMethodBindings.method_get_object_id")
	}
	methodName3 := NewStringNameWithLatin1Chars("get_name")
	defer methodName3.Destroy()
	log.Debug("globalSignalMethodBindings.method_get_name")
	globalSignalMethodBindings.method_get_name = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL, methodName3.AsGDExtensionStringNamePtr(), 1825232092)
	if globalSignalMethodBindings.method_get_name == nil {
		missingMethods = append(missingMethods, "globalSignalMethodBindings.method_get_name")
	}
	methodName4 := NewStringNameWithLatin1Chars("connect")
	defer methodName4.Destroy()
	log.Debug("globalSignalMethodBindings.method_connect")
	globalSignalMethodBindings.method_connect = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL, methodName4.AsGDExtensionStringNamePtr(), 979702392)
	if globalSignalMethodBindings.method_connect == nil {
		missingMethods = append(missingMethods, "globalSignalMethodBindings.method_connect")
	}
	methodName5 := NewStringNameWithLatin1Chars("disconnect")
	defer methodName5.Destroy()
	log.Debug("globalSignalMethodBindings.method_disconnect")
	globalSignalMethodBindings.method_disconnect = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL, methodName5.AsGDExtensionStringNamePtr(), 3470848906)
	if globalSignalMethodBindings.method_disconnect == nil {
		missingMethods = append(missingMethods, "globalSignalMethodBindings.method_disconnect")
	}
	methodName6 := NewStringNameWithLatin1Chars("is_connected")
	defer methodName6.Destroy()
	log.Debug("globalSignalMethodBindings.method_is_connected")
	globalSignalMethodBindings.method_is_connected = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL, methodName6.AsGDExtensionStringNamePtr(), 4129521963)
	if globalSignalMethodBindings.method_is_connected == nil {
		missingMethods = append(missingMethods, "globalSignalMethodBindings.method_is_connected")
	}
	methodName7 := NewStringNameWithLatin1Chars("get_connections")
	defer methodName7.Destroy()
	log.Debug("globalSignalMethodBindings.method_get_connections")
	globalSignalMethodBindings.method_get_connections = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_SIGNAL, methodName7.AsGDExtensionStringNamePtr(), 4144163970)
	if globalSignalMethodBindings.method_get_connections == nil {
		missingMethods = append(missingMethods, "globalSignalMethodBindings.method_get_connections")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalSignalMethodBindings.operator: equal Variant")
	globalSignalMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_SIGNAL, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalSignalMethodBindings.operator: not_equal Variant")
	globalSignalMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_SIGNAL, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalSignalMethodBindings.operator: equal Signal")
	globalSignalMethodBindings.operator_equal_Signal = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_SIGNAL, GDEXTENSION_VARIANT_TYPE_SIGNAL)
	log.Debug("globalSignalMethodBindings.operator: not_equal Signal")
	globalSignalMethodBindings.operator_not_equal_Signal = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_SIGNAL, GDEXTENSION_VARIANT_TYPE_SIGNAL)
	log.Debug("globalSignalMethodBindings.operator: in Dictionary")
	globalSignalMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_SIGNAL, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalSignalMethodBindings.operator: in Array")
	globalSignalMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_SIGNAL, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("signalInitBindings end")
}

func (c *Signal) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewSignal, index: 0
func NewSignal() Signal {
	cx := Signal{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalSignalMethodBindings.constructor_0, ptr)

	return cx
}

// NewSignal, index: 1
func NewSignalWithSignal(from Signal) Signal {
	cx := Signal{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Signal
	// SignalEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalSignalMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewSignal, index: 2
func NewSignalWithObjectStringName(object Object, signal StringName) Signal {
	cx := Signal{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [2]GDExtensionConstTypePtr

	// Object
	args[0] = (GDExtensionConstTypePtr)(unsafe.Pointer(&object))

	// StringName
	// StringNameEncoder
	args[1] = (GDExtensionConstTypePtr)(signal.ptr())
	callBuiltinConstructor(globalSignalMethodBindings.constructor_2, ptr, args[0], args[1])

	return cx
}

func (cx *Signal) Destroy() {
	md := (GDExtensionPtrDestructor)(globalSignalMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* IsNull : is_null
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Signal) IsNull() bool {
	mb := globalSignalMethodBindings.method_is_null

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* GetObject : get_object
 * is_vararg = false, is_static = false
 * goReturnType(Object) -> Object
 */
func (cx *Signal) GetObject() Object {
	mb := globalSignalMethodBindings.method_get_object

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Object](mb, bx, nil)
	return ret

}

/* GetObjectId : get_object_id
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Signal) GetObjectId() int32 {
	mb := globalSignalMethodBindings.method_get_object_id

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* GetName : get_name
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *Signal) GetName() StringName {
	mb := globalSignalMethodBindings.method_get_name

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret

}

/* Connect : connect
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Signal) Connect(callable Callable, flags int32) int32 {
	mb := globalSignalMethodBindings.method_connect

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&callable))

	eArg1 := Int32Encoder.EncodeArg(flags)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Disconnect : disconnect
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Signal) Disconnect(callable Callable) {
	mb := globalSignalMethodBindings.method_disconnect

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&callable))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* IsConnected : is_connected
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Signal) IsConnected(callable Callable) bool {
	mb := globalSignalMethodBindings.method_is_connected

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&callable))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetConnections : get_connections
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Signal) GetConnections() Array {
	mb := globalSignalMethodBindings.method_get_connections

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Array](mb, bx, nil)
	return ret

}

// members

// Equal_Variant operator
func (cx *Signal) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Signal) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Equal_Signal operator
func (cx *Signal) Equal_Signal(right Signal) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_equal_Signal, lt, rt)
}

// Not_equal_Signal operator
func (cx *Signal) Not_equal_Signal(right Signal) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_not_equal_Signal, lt, rt)
}

// In_Dictionary operator
func (cx *Signal) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Signal) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_in_Array, lt, rt)
}

/*
 * Dictionary
 * indexingReturnType: Variant
 * isKeyed: true
 * hasDestructor: true
 */
type Dictionary struct {
	opaque [8]uint8
}

type dictionaryMethodBindings struct {
	constructor_0                 GDExtensionPtrConstructor
	constructor_1                 GDExtensionPtrConstructor
	destructor                    GDExtensionPtrDestructor
	method_size                   GDExtensionPtrBuiltInMethod
	method_is_empty               GDExtensionPtrBuiltInMethod
	method_clear                  GDExtensionPtrBuiltInMethod
	method_merge                  GDExtensionPtrBuiltInMethod
	method_has                    GDExtensionPtrBuiltInMethod
	method_has_all                GDExtensionPtrBuiltInMethod
	method_find_key               GDExtensionPtrBuiltInMethod
	method_erase                  GDExtensionPtrBuiltInMethod
	method_hash                   GDExtensionPtrBuiltInMethod
	method_keys                   GDExtensionPtrBuiltInMethod
	method_values                 GDExtensionPtrBuiltInMethod
	method_duplicate              GDExtensionPtrBuiltInMethod
	method_get                    GDExtensionPtrBuiltInMethod
	method_make_read_only         GDExtensionPtrBuiltInMethod
	method_is_read_only           GDExtensionPtrBuiltInMethod
	indexed_setter                GDExtensionPtrIndexedSetter
	indexed_getter                GDExtensionPtrIndexedGetter
	keyed_setter                  GDExtensionPtrKeyedSetter
	keyed_getter                  GDExtensionPtrKeyedGetter
	keyed_checker                 GDExtensionPtrKeyedChecker
	operator_equal_Variant        GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant    GDExtensionPtrOperatorEvaluator
	operator_equal_Dictionary     GDExtensionPtrOperatorEvaluator
	operator_not_equal_Dictionary GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary        GDExtensionPtrOperatorEvaluator
	operator_in_Array             GDExtensionPtrOperatorEvaluator
}

var globalDictionaryMethodBindings dictionaryMethodBindings

func dictionaryInitConstructorBindings() {
	log.Debug("dictionaryInitConstructorBindings called")

	log.Debug("globalDictionaryMethodBindings.constructor_0")
	globalDictionaryMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, 0)
	log.Debug("globalDictionaryMethodBindings.constructor_1")
	globalDictionaryMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, 1)
	log.Debug("globalDictionaryMethodBindings.destructor")
	globalDictionaryMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
}

func dictionaryInitMethodBindings() {
	log.Debug("dictionaryInitMethodBindings called")

	missingMethods := make([]string, 0, 15)

	methodName0 := NewStringNameWithLatin1Chars("size")
	defer methodName0.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_size")
	globalDictionaryMethodBindings.method_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalDictionaryMethodBindings.method_size == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_size")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName1.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_is_empty")
	globalDictionaryMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalDictionaryMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_is_empty")
	}
	methodName2 := NewStringNameWithLatin1Chars("clear")
	defer methodName2.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_clear")
	globalDictionaryMethodBindings.method_clear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName2.AsGDExtensionStringNamePtr(), 3218959716)
	if globalDictionaryMethodBindings.method_clear == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_clear")
	}
	methodName3 := NewStringNameWithLatin1Chars("merge")
	defer methodName3.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_merge")
	globalDictionaryMethodBindings.method_merge = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName3.AsGDExtensionStringNamePtr(), 2079548978)
	if globalDictionaryMethodBindings.method_merge == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_merge")
	}
	methodName4 := NewStringNameWithLatin1Chars("has")
	defer methodName4.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_has")
	globalDictionaryMethodBindings.method_has = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName4.AsGDExtensionStringNamePtr(), 3680194679)
	if globalDictionaryMethodBindings.method_has == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_has")
	}
	methodName5 := NewStringNameWithLatin1Chars("has_all")
	defer methodName5.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_has_all")
	globalDictionaryMethodBindings.method_has_all = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName5.AsGDExtensionStringNamePtr(), 2988181878)
	if globalDictionaryMethodBindings.method_has_all == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_has_all")
	}
	methodName6 := NewStringNameWithLatin1Chars("find_key")
	defer methodName6.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_find_key")
	globalDictionaryMethodBindings.method_find_key = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName6.AsGDExtensionStringNamePtr(), 1988825835)
	if globalDictionaryMethodBindings.method_find_key == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_find_key")
	}
	methodName7 := NewStringNameWithLatin1Chars("erase")
	defer methodName7.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_erase")
	globalDictionaryMethodBindings.method_erase = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName7.AsGDExtensionStringNamePtr(), 1776646889)
	if globalDictionaryMethodBindings.method_erase == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_erase")
	}
	methodName8 := NewStringNameWithLatin1Chars("hash")
	defer methodName8.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_hash")
	globalDictionaryMethodBindings.method_hash = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName8.AsGDExtensionStringNamePtr(), 3173160232)
	if globalDictionaryMethodBindings.method_hash == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_hash")
	}
	methodName9 := NewStringNameWithLatin1Chars("keys")
	defer methodName9.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_keys")
	globalDictionaryMethodBindings.method_keys = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName9.AsGDExtensionStringNamePtr(), 4144163970)
	if globalDictionaryMethodBindings.method_keys == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_keys")
	}
	methodName10 := NewStringNameWithLatin1Chars("values")
	defer methodName10.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_values")
	globalDictionaryMethodBindings.method_values = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName10.AsGDExtensionStringNamePtr(), 4144163970)
	if globalDictionaryMethodBindings.method_values == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_values")
	}
	methodName11 := NewStringNameWithLatin1Chars("duplicate")
	defer methodName11.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_duplicate")
	globalDictionaryMethodBindings.method_duplicate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName11.AsGDExtensionStringNamePtr(), 830099069)
	if globalDictionaryMethodBindings.method_duplicate == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_duplicate")
	}
	methodName12 := NewStringNameWithLatin1Chars("get")
	defer methodName12.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_get")
	globalDictionaryMethodBindings.method_get = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName12.AsGDExtensionStringNamePtr(), 2205440559)
	if globalDictionaryMethodBindings.method_get == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_get")
	}
	methodName13 := NewStringNameWithLatin1Chars("make_read_only")
	defer methodName13.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_make_read_only")
	globalDictionaryMethodBindings.method_make_read_only = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName13.AsGDExtensionStringNamePtr(), 3218959716)
	if globalDictionaryMethodBindings.method_make_read_only == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_make_read_only")
	}
	methodName14 := NewStringNameWithLatin1Chars("is_read_only")
	defer methodName14.Destroy()
	log.Debug("globalDictionaryMethodBindings.method_is_read_only")
	globalDictionaryMethodBindings.method_is_read_only = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY, methodName14.AsGDExtensionStringNamePtr(), 3918633141)
	if globalDictionaryMethodBindings.method_is_read_only == nil {
		missingMethods = append(missingMethods, "globalDictionaryMethodBindings.method_is_read_only")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalDictionaryMethodBindings.indexed_setter")
	globalDictionaryMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalDictionaryMethodBindings.indexed_getter")
	globalDictionaryMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalDictionaryMethodBindings.keyed_setter")
	globalDictionaryMethodBindings.keyed_setter = GDExtensionInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalDictionaryMethodBindings.keyed_getter")
	globalDictionaryMethodBindings.keyed_getter = GDExtensionInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalDictionaryMethodBindings.keyed_checked")
	globalDictionaryMethodBindings.keyed_checker = GDExtensionInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalDictionaryMethodBindings.operator: equal Variant")
	globalDictionaryMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_DICTIONARY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalDictionaryMethodBindings.operator: not_equal Variant")
	globalDictionaryMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_DICTIONARY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalDictionaryMethodBindings.operator: equal Dictionary")
	globalDictionaryMethodBindings.operator_equal_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_DICTIONARY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalDictionaryMethodBindings.operator: not_equal Dictionary")
	globalDictionaryMethodBindings.operator_not_equal_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_DICTIONARY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalDictionaryMethodBindings.operator: in Dictionary")
	globalDictionaryMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_DICTIONARY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalDictionaryMethodBindings.operator: in Array")
	globalDictionaryMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_DICTIONARY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("dictionaryInitBindings end")
}

func (c *Dictionary) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewDictionary, index: 0
func NewDictionary() Dictionary {
	cx := Dictionary{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalDictionaryMethodBindings.constructor_0, ptr)

	return cx
}

// NewDictionary, index: 1
func NewDictionaryWithDictionary(from Dictionary) Dictionary {
	cx := Dictionary{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Dictionary
	// DictionaryEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalDictionaryMethodBindings.constructor_1, ptr, args[0])

	return cx
}

func (cx *Dictionary) Destroy() {
	md := (GDExtensionPtrDestructor)(globalDictionaryMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Dictionary) Size() int32 {
	mb := globalDictionaryMethodBindings.method_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) IsEmpty() bool {
	mb := globalDictionaryMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Dictionary) Clear() {
	mb := globalDictionaryMethodBindings.method_clear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Dictionary) Merge(dictionary Dictionary, overwrite bool) {
	mb := globalDictionaryMethodBindings.method_merge

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&dictionary))

	eArg1 := BoolEncoder.EncodeArg(overwrite)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) Has(key Variant) bool {
	mb := globalDictionaryMethodBindings.method_has

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&key))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* HasAll : has_all
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) HasAll(keys Array) bool {
	mb := globalDictionaryMethodBindings.method_has_all

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&keys))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* FindKey : find_key
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Dictionary) FindKey(value Variant) Variant {
	mb := globalDictionaryMethodBindings.method_find_key

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) Erase(key Variant) bool {
	mb := globalDictionaryMethodBindings.method_erase

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&key))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Dictionary) Hash() int32 {
	mb := globalDictionaryMethodBindings.method_hash

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Keys : keys
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Dictionary) Keys() Array {
	mb := globalDictionaryMethodBindings.method_keys

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Array](mb, bx, nil)
	return ret

}

/* Values : values
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Dictionary) Values() Array {
	mb := globalDictionaryMethodBindings.method_values

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Array](mb, bx, nil)
	return ret

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(Dictionary) -> Dictionary
 */
func (cx *Dictionary) Duplicate(deep bool) Dictionary {
	mb := globalDictionaryMethodBindings.method_duplicate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := BoolEncoder.EncodeArg(deep)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Dictionary](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Dictionary) Get(key Variant, defaultName Variant) Variant {
	mb := globalDictionaryMethodBindings.method_get

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&key))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&defaultName))

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* MakeReadOnly : make_read_only
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Dictionary) MakeReadOnly() {
	mb := globalDictionaryMethodBindings.method_make_read_only

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* IsReadOnly : is_read_only
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) IsReadOnly() bool {
	mb := globalDictionaryMethodBindings.method_is_read_only

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* TODO: implement keyed built-in classes

typedef void (*GDExtensionPtrKeyedSetter)(GDExtensionTypePtr p_base, const GDExtensionTypePtr p_key, const GDExtensionTypePtr p_value);
typedef void (*GDExtensionPtrKeyedGetter)(const GDExtensionTypePtr p_base, const GDExtensionTypePtr p_key, GDExtensionTypePtr r_value);


// keyed
func (cx *Dictionary) SetKey(const Variant &p_key) Variant {

}
*/

// members

// Equal_Variant operator
func (cx *Dictionary) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Dictionary) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Equal_Dictionary operator
func (cx *Dictionary) Equal_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_equal_Dictionary, lt, rt)
}

// Not_equal_Dictionary operator
func (cx *Dictionary) Not_equal_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_not_equal_Dictionary, lt, rt)
}

// In_Dictionary operator
func (cx *Dictionary) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Dictionary) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_in_Array, lt, rt)
}

/*
 * Array
 * indexingReturnType: Variant
 * isKeyed: false
 * hasDestructor: true
 */
type Array struct {
	opaque [8]uint8
}

type arrayMethodBindings struct {
	constructor_0                GDExtensionPtrConstructor
	constructor_1                GDExtensionPtrConstructor
	constructor_2                GDExtensionPtrConstructor
	constructor_3                GDExtensionPtrConstructor
	constructor_4                GDExtensionPtrConstructor
	constructor_5                GDExtensionPtrConstructor
	constructor_6                GDExtensionPtrConstructor
	constructor_7                GDExtensionPtrConstructor
	constructor_8                GDExtensionPtrConstructor
	constructor_9                GDExtensionPtrConstructor
	constructor_10               GDExtensionPtrConstructor
	constructor_11               GDExtensionPtrConstructor
	destructor                   GDExtensionPtrDestructor
	method_size                  GDExtensionPtrBuiltInMethod
	method_is_empty              GDExtensionPtrBuiltInMethod
	method_clear                 GDExtensionPtrBuiltInMethod
	method_hash                  GDExtensionPtrBuiltInMethod
	method_assign                GDExtensionPtrBuiltInMethod
	method_push_back             GDExtensionPtrBuiltInMethod
	method_push_front            GDExtensionPtrBuiltInMethod
	method_append                GDExtensionPtrBuiltInMethod
	method_append_array          GDExtensionPtrBuiltInMethod
	method_resize                GDExtensionPtrBuiltInMethod
	method_insert                GDExtensionPtrBuiltInMethod
	method_remove_at             GDExtensionPtrBuiltInMethod
	method_fill                  GDExtensionPtrBuiltInMethod
	method_erase                 GDExtensionPtrBuiltInMethod
	method_front                 GDExtensionPtrBuiltInMethod
	method_back                  GDExtensionPtrBuiltInMethod
	method_pick_random           GDExtensionPtrBuiltInMethod
	method_find                  GDExtensionPtrBuiltInMethod
	method_rfind                 GDExtensionPtrBuiltInMethod
	method_count                 GDExtensionPtrBuiltInMethod
	method_has                   GDExtensionPtrBuiltInMethod
	method_pop_back              GDExtensionPtrBuiltInMethod
	method_pop_front             GDExtensionPtrBuiltInMethod
	method_pop_at                GDExtensionPtrBuiltInMethod
	method_sort                  GDExtensionPtrBuiltInMethod
	method_sort_custom           GDExtensionPtrBuiltInMethod
	method_shuffle               GDExtensionPtrBuiltInMethod
	method_bsearch               GDExtensionPtrBuiltInMethod
	method_bsearch_custom        GDExtensionPtrBuiltInMethod
	method_reverse               GDExtensionPtrBuiltInMethod
	method_duplicate             GDExtensionPtrBuiltInMethod
	method_slice                 GDExtensionPtrBuiltInMethod
	method_filter                GDExtensionPtrBuiltInMethod
	method_map                   GDExtensionPtrBuiltInMethod
	method_reduce                GDExtensionPtrBuiltInMethod
	method_any                   GDExtensionPtrBuiltInMethod
	method_all                   GDExtensionPtrBuiltInMethod
	method_max                   GDExtensionPtrBuiltInMethod
	method_min                   GDExtensionPtrBuiltInMethod
	method_is_typed              GDExtensionPtrBuiltInMethod
	method_is_same_typed         GDExtensionPtrBuiltInMethod
	method_get_typed_builtin     GDExtensionPtrBuiltInMethod
	method_get_typed_class_name  GDExtensionPtrBuiltInMethod
	method_get_typed_script      GDExtensionPtrBuiltInMethod
	method_make_read_only        GDExtensionPtrBuiltInMethod
	method_is_read_only          GDExtensionPtrBuiltInMethod
	indexed_setter               GDExtensionPtrIndexedSetter
	indexed_getter               GDExtensionPtrIndexedGetter
	operator_equal_Variant       GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant   GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary       GDExtensionPtrOperatorEvaluator
	operator_equal_Array         GDExtensionPtrOperatorEvaluator
	operator_not_equal_Array     GDExtensionPtrOperatorEvaluator
	operator_less_Array          GDExtensionPtrOperatorEvaluator
	operator_less_equal_Array    GDExtensionPtrOperatorEvaluator
	operator_greater_Array       GDExtensionPtrOperatorEvaluator
	operator_greater_equal_Array GDExtensionPtrOperatorEvaluator
	operator_add_Array           GDExtensionPtrOperatorEvaluator
	operator_in_Array            GDExtensionPtrOperatorEvaluator
}

var globalArrayMethodBindings arrayMethodBindings

func arrayInitConstructorBindings() {
	log.Debug("arrayInitConstructorBindings called")

	log.Debug("globalArrayMethodBindings.constructor_0")
	globalArrayMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 0)
	log.Debug("globalArrayMethodBindings.constructor_1")
	globalArrayMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 1)
	log.Debug("globalArrayMethodBindings.constructor_2")
	globalArrayMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 2)
	log.Debug("globalArrayMethodBindings.constructor_3")
	globalArrayMethodBindings.constructor_3 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 3)
	log.Debug("globalArrayMethodBindings.constructor_4")
	globalArrayMethodBindings.constructor_4 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 4)
	log.Debug("globalArrayMethodBindings.constructor_5")
	globalArrayMethodBindings.constructor_5 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 5)
	log.Debug("globalArrayMethodBindings.constructor_6")
	globalArrayMethodBindings.constructor_6 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 6)
	log.Debug("globalArrayMethodBindings.constructor_7")
	globalArrayMethodBindings.constructor_7 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 7)
	log.Debug("globalArrayMethodBindings.constructor_8")
	globalArrayMethodBindings.constructor_8 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 8)
	log.Debug("globalArrayMethodBindings.constructor_9")
	globalArrayMethodBindings.constructor_9 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 9)
	log.Debug("globalArrayMethodBindings.constructor_10")
	globalArrayMethodBindings.constructor_10 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 10)
	log.Debug("globalArrayMethodBindings.constructor_11")
	globalArrayMethodBindings.constructor_11 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, 11)
	log.Debug("globalArrayMethodBindings.destructor")
	globalArrayMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY)
}

func arrayInitMethodBindings() {
	log.Debug("arrayInitMethodBindings called")

	missingMethods := make([]string, 0, 46)

	methodName0 := NewStringNameWithLatin1Chars("size")
	defer methodName0.Destroy()
	log.Debug("globalArrayMethodBindings.method_size")
	globalArrayMethodBindings.method_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalArrayMethodBindings.method_size == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_size")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName1.Destroy()
	log.Debug("globalArrayMethodBindings.method_is_empty")
	globalArrayMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalArrayMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_is_empty")
	}
	methodName2 := NewStringNameWithLatin1Chars("clear")
	defer methodName2.Destroy()
	log.Debug("globalArrayMethodBindings.method_clear")
	globalArrayMethodBindings.method_clear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName2.AsGDExtensionStringNamePtr(), 3218959716)
	if globalArrayMethodBindings.method_clear == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_clear")
	}
	methodName3 := NewStringNameWithLatin1Chars("hash")
	defer methodName3.Destroy()
	log.Debug("globalArrayMethodBindings.method_hash")
	globalArrayMethodBindings.method_hash = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName3.AsGDExtensionStringNamePtr(), 3173160232)
	if globalArrayMethodBindings.method_hash == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_hash")
	}
	methodName4 := NewStringNameWithLatin1Chars("assign")
	defer methodName4.Destroy()
	log.Debug("globalArrayMethodBindings.method_assign")
	globalArrayMethodBindings.method_assign = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName4.AsGDExtensionStringNamePtr(), 2307260970)
	if globalArrayMethodBindings.method_assign == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_assign")
	}
	methodName5 := NewStringNameWithLatin1Chars("push_back")
	defer methodName5.Destroy()
	log.Debug("globalArrayMethodBindings.method_push_back")
	globalArrayMethodBindings.method_push_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName5.AsGDExtensionStringNamePtr(), 3316032543)
	if globalArrayMethodBindings.method_push_back == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_push_back")
	}
	methodName6 := NewStringNameWithLatin1Chars("push_front")
	defer methodName6.Destroy()
	log.Debug("globalArrayMethodBindings.method_push_front")
	globalArrayMethodBindings.method_push_front = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName6.AsGDExtensionStringNamePtr(), 3316032543)
	if globalArrayMethodBindings.method_push_front == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_push_front")
	}
	methodName7 := NewStringNameWithLatin1Chars("append")
	defer methodName7.Destroy()
	log.Debug("globalArrayMethodBindings.method_append")
	globalArrayMethodBindings.method_append = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName7.AsGDExtensionStringNamePtr(), 3316032543)
	if globalArrayMethodBindings.method_append == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_append")
	}
	methodName8 := NewStringNameWithLatin1Chars("append_array")
	defer methodName8.Destroy()
	log.Debug("globalArrayMethodBindings.method_append_array")
	globalArrayMethodBindings.method_append_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName8.AsGDExtensionStringNamePtr(), 2307260970)
	if globalArrayMethodBindings.method_append_array == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_append_array")
	}
	methodName9 := NewStringNameWithLatin1Chars("resize")
	defer methodName9.Destroy()
	log.Debug("globalArrayMethodBindings.method_resize")
	globalArrayMethodBindings.method_resize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName9.AsGDExtensionStringNamePtr(), 848867239)
	if globalArrayMethodBindings.method_resize == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_resize")
	}
	methodName10 := NewStringNameWithLatin1Chars("insert")
	defer methodName10.Destroy()
	log.Debug("globalArrayMethodBindings.method_insert")
	globalArrayMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName10.AsGDExtensionStringNamePtr(), 3176316662)
	if globalArrayMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_insert")
	}
	methodName11 := NewStringNameWithLatin1Chars("remove_at")
	defer methodName11.Destroy()
	log.Debug("globalArrayMethodBindings.method_remove_at")
	globalArrayMethodBindings.method_remove_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName11.AsGDExtensionStringNamePtr(), 2823966027)
	if globalArrayMethodBindings.method_remove_at == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_remove_at")
	}
	methodName12 := NewStringNameWithLatin1Chars("fill")
	defer methodName12.Destroy()
	log.Debug("globalArrayMethodBindings.method_fill")
	globalArrayMethodBindings.method_fill = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName12.AsGDExtensionStringNamePtr(), 3316032543)
	if globalArrayMethodBindings.method_fill == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_fill")
	}
	methodName13 := NewStringNameWithLatin1Chars("erase")
	defer methodName13.Destroy()
	log.Debug("globalArrayMethodBindings.method_erase")
	globalArrayMethodBindings.method_erase = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName13.AsGDExtensionStringNamePtr(), 3316032543)
	if globalArrayMethodBindings.method_erase == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_erase")
	}
	methodName14 := NewStringNameWithLatin1Chars("front")
	defer methodName14.Destroy()
	log.Debug("globalArrayMethodBindings.method_front")
	globalArrayMethodBindings.method_front = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName14.AsGDExtensionStringNamePtr(), 1460142086)
	if globalArrayMethodBindings.method_front == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_front")
	}
	methodName15 := NewStringNameWithLatin1Chars("back")
	defer methodName15.Destroy()
	log.Debug("globalArrayMethodBindings.method_back")
	globalArrayMethodBindings.method_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName15.AsGDExtensionStringNamePtr(), 1460142086)
	if globalArrayMethodBindings.method_back == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_back")
	}
	methodName16 := NewStringNameWithLatin1Chars("pick_random")
	defer methodName16.Destroy()
	log.Debug("globalArrayMethodBindings.method_pick_random")
	globalArrayMethodBindings.method_pick_random = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName16.AsGDExtensionStringNamePtr(), 1460142086)
	if globalArrayMethodBindings.method_pick_random == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_pick_random")
	}
	methodName17 := NewStringNameWithLatin1Chars("find")
	defer methodName17.Destroy()
	log.Debug("globalArrayMethodBindings.method_find")
	globalArrayMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName17.AsGDExtensionStringNamePtr(), 2336346817)
	if globalArrayMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_find")
	}
	methodName18 := NewStringNameWithLatin1Chars("rfind")
	defer methodName18.Destroy()
	log.Debug("globalArrayMethodBindings.method_rfind")
	globalArrayMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName18.AsGDExtensionStringNamePtr(), 2336346817)
	if globalArrayMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_rfind")
	}
	methodName19 := NewStringNameWithLatin1Chars("count")
	defer methodName19.Destroy()
	log.Debug("globalArrayMethodBindings.method_count")
	globalArrayMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName19.AsGDExtensionStringNamePtr(), 1481661226)
	if globalArrayMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_count")
	}
	methodName20 := NewStringNameWithLatin1Chars("has")
	defer methodName20.Destroy()
	log.Debug("globalArrayMethodBindings.method_has")
	globalArrayMethodBindings.method_has = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName20.AsGDExtensionStringNamePtr(), 3680194679)
	if globalArrayMethodBindings.method_has == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_has")
	}
	methodName21 := NewStringNameWithLatin1Chars("pop_back")
	defer methodName21.Destroy()
	log.Debug("globalArrayMethodBindings.method_pop_back")
	globalArrayMethodBindings.method_pop_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName21.AsGDExtensionStringNamePtr(), 1321915136)
	if globalArrayMethodBindings.method_pop_back == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_pop_back")
	}
	methodName22 := NewStringNameWithLatin1Chars("pop_front")
	defer methodName22.Destroy()
	log.Debug("globalArrayMethodBindings.method_pop_front")
	globalArrayMethodBindings.method_pop_front = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName22.AsGDExtensionStringNamePtr(), 1321915136)
	if globalArrayMethodBindings.method_pop_front == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_pop_front")
	}
	methodName23 := NewStringNameWithLatin1Chars("pop_at")
	defer methodName23.Destroy()
	log.Debug("globalArrayMethodBindings.method_pop_at")
	globalArrayMethodBindings.method_pop_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName23.AsGDExtensionStringNamePtr(), 3518259424)
	if globalArrayMethodBindings.method_pop_at == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_pop_at")
	}
	methodName24 := NewStringNameWithLatin1Chars("sort")
	defer methodName24.Destroy()
	log.Debug("globalArrayMethodBindings.method_sort")
	globalArrayMethodBindings.method_sort = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName24.AsGDExtensionStringNamePtr(), 3218959716)
	if globalArrayMethodBindings.method_sort == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_sort")
	}
	methodName25 := NewStringNameWithLatin1Chars("sort_custom")
	defer methodName25.Destroy()
	log.Debug("globalArrayMethodBindings.method_sort_custom")
	globalArrayMethodBindings.method_sort_custom = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName25.AsGDExtensionStringNamePtr(), 3470848906)
	if globalArrayMethodBindings.method_sort_custom == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_sort_custom")
	}
	methodName26 := NewStringNameWithLatin1Chars("shuffle")
	defer methodName26.Destroy()
	log.Debug("globalArrayMethodBindings.method_shuffle")
	globalArrayMethodBindings.method_shuffle = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName26.AsGDExtensionStringNamePtr(), 3218959716)
	if globalArrayMethodBindings.method_shuffle == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_shuffle")
	}
	methodName27 := NewStringNameWithLatin1Chars("bsearch")
	defer methodName27.Destroy()
	log.Debug("globalArrayMethodBindings.method_bsearch")
	globalArrayMethodBindings.method_bsearch = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName27.AsGDExtensionStringNamePtr(), 3372222236)
	if globalArrayMethodBindings.method_bsearch == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_bsearch")
	}
	methodName28 := NewStringNameWithLatin1Chars("bsearch_custom")
	defer methodName28.Destroy()
	log.Debug("globalArrayMethodBindings.method_bsearch_custom")
	globalArrayMethodBindings.method_bsearch_custom = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName28.AsGDExtensionStringNamePtr(), 161317131)
	if globalArrayMethodBindings.method_bsearch_custom == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_bsearch_custom")
	}
	methodName29 := NewStringNameWithLatin1Chars("reverse")
	defer methodName29.Destroy()
	log.Debug("globalArrayMethodBindings.method_reverse")
	globalArrayMethodBindings.method_reverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName29.AsGDExtensionStringNamePtr(), 3218959716)
	if globalArrayMethodBindings.method_reverse == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_reverse")
	}
	methodName30 := NewStringNameWithLatin1Chars("duplicate")
	defer methodName30.Destroy()
	log.Debug("globalArrayMethodBindings.method_duplicate")
	globalArrayMethodBindings.method_duplicate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName30.AsGDExtensionStringNamePtr(), 636440122)
	if globalArrayMethodBindings.method_duplicate == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_duplicate")
	}
	methodName31 := NewStringNameWithLatin1Chars("slice")
	defer methodName31.Destroy()
	log.Debug("globalArrayMethodBindings.method_slice")
	globalArrayMethodBindings.method_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName31.AsGDExtensionStringNamePtr(), 1393718243)
	if globalArrayMethodBindings.method_slice == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_slice")
	}
	methodName32 := NewStringNameWithLatin1Chars("filter")
	defer methodName32.Destroy()
	log.Debug("globalArrayMethodBindings.method_filter")
	globalArrayMethodBindings.method_filter = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName32.AsGDExtensionStringNamePtr(), 4075186556)
	if globalArrayMethodBindings.method_filter == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_filter")
	}
	methodName33 := NewStringNameWithLatin1Chars("map")
	defer methodName33.Destroy()
	log.Debug("globalArrayMethodBindings.method_map")
	globalArrayMethodBindings.method_map = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName33.AsGDExtensionStringNamePtr(), 4075186556)
	if globalArrayMethodBindings.method_map == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_map")
	}
	methodName34 := NewStringNameWithLatin1Chars("reduce")
	defer methodName34.Destroy()
	log.Debug("globalArrayMethodBindings.method_reduce")
	globalArrayMethodBindings.method_reduce = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName34.AsGDExtensionStringNamePtr(), 4272450342)
	if globalArrayMethodBindings.method_reduce == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_reduce")
	}
	methodName35 := NewStringNameWithLatin1Chars("any")
	defer methodName35.Destroy()
	log.Debug("globalArrayMethodBindings.method_any")
	globalArrayMethodBindings.method_any = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName35.AsGDExtensionStringNamePtr(), 4129521963)
	if globalArrayMethodBindings.method_any == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_any")
	}
	methodName36 := NewStringNameWithLatin1Chars("all")
	defer methodName36.Destroy()
	log.Debug("globalArrayMethodBindings.method_all")
	globalArrayMethodBindings.method_all = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName36.AsGDExtensionStringNamePtr(), 4129521963)
	if globalArrayMethodBindings.method_all == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_all")
	}
	methodName37 := NewStringNameWithLatin1Chars("max")
	defer methodName37.Destroy()
	log.Debug("globalArrayMethodBindings.method_max")
	globalArrayMethodBindings.method_max = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName37.AsGDExtensionStringNamePtr(), 1460142086)
	if globalArrayMethodBindings.method_max == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_max")
	}
	methodName38 := NewStringNameWithLatin1Chars("min")
	defer methodName38.Destroy()
	log.Debug("globalArrayMethodBindings.method_min")
	globalArrayMethodBindings.method_min = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName38.AsGDExtensionStringNamePtr(), 1460142086)
	if globalArrayMethodBindings.method_min == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_min")
	}
	methodName39 := NewStringNameWithLatin1Chars("is_typed")
	defer methodName39.Destroy()
	log.Debug("globalArrayMethodBindings.method_is_typed")
	globalArrayMethodBindings.method_is_typed = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName39.AsGDExtensionStringNamePtr(), 3918633141)
	if globalArrayMethodBindings.method_is_typed == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_is_typed")
	}
	methodName40 := NewStringNameWithLatin1Chars("is_same_typed")
	defer methodName40.Destroy()
	log.Debug("globalArrayMethodBindings.method_is_same_typed")
	globalArrayMethodBindings.method_is_same_typed = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName40.AsGDExtensionStringNamePtr(), 2988181878)
	if globalArrayMethodBindings.method_is_same_typed == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_is_same_typed")
	}
	methodName41 := NewStringNameWithLatin1Chars("get_typed_builtin")
	defer methodName41.Destroy()
	log.Debug("globalArrayMethodBindings.method_get_typed_builtin")
	globalArrayMethodBindings.method_get_typed_builtin = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName41.AsGDExtensionStringNamePtr(), 3173160232)
	if globalArrayMethodBindings.method_get_typed_builtin == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_get_typed_builtin")
	}
	methodName42 := NewStringNameWithLatin1Chars("get_typed_class_name")
	defer methodName42.Destroy()
	log.Debug("globalArrayMethodBindings.method_get_typed_class_name")
	globalArrayMethodBindings.method_get_typed_class_name = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName42.AsGDExtensionStringNamePtr(), 1825232092)
	if globalArrayMethodBindings.method_get_typed_class_name == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_get_typed_class_name")
	}
	methodName43 := NewStringNameWithLatin1Chars("get_typed_script")
	defer methodName43.Destroy()
	log.Debug("globalArrayMethodBindings.method_get_typed_script")
	globalArrayMethodBindings.method_get_typed_script = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName43.AsGDExtensionStringNamePtr(), 1460142086)
	if globalArrayMethodBindings.method_get_typed_script == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_get_typed_script")
	}
	methodName44 := NewStringNameWithLatin1Chars("make_read_only")
	defer methodName44.Destroy()
	log.Debug("globalArrayMethodBindings.method_make_read_only")
	globalArrayMethodBindings.method_make_read_only = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName44.AsGDExtensionStringNamePtr(), 3218959716)
	if globalArrayMethodBindings.method_make_read_only == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_make_read_only")
	}
	methodName45 := NewStringNameWithLatin1Chars("is_read_only")
	defer methodName45.Destroy()
	log.Debug("globalArrayMethodBindings.method_is_read_only")
	globalArrayMethodBindings.method_is_read_only = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY, methodName45.AsGDExtensionStringNamePtr(), 3918633141)
	if globalArrayMethodBindings.method_is_read_only == nil {
		missingMethods = append(missingMethods, "globalArrayMethodBindings.method_is_read_only")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalArrayMethodBindings.indexed_setter")
	globalArrayMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalArrayMethodBindings.indexed_getter")
	globalArrayMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalArrayMethodBindings.operator: equal Variant")
	globalArrayMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalArrayMethodBindings.operator: not_equal Variant")
	globalArrayMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalArrayMethodBindings.operator: in Dictionary")
	globalArrayMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalArrayMethodBindings.operator: equal Array")
	globalArrayMethodBindings.operator_equal_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalArrayMethodBindings.operator: not_equal Array")
	globalArrayMethodBindings.operator_not_equal_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalArrayMethodBindings.operator: less Array")
	globalArrayMethodBindings.operator_less_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalArrayMethodBindings.operator: less_equal Array")
	globalArrayMethodBindings.operator_less_equal_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalArrayMethodBindings.operator: greater Array")
	globalArrayMethodBindings.operator_greater_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalArrayMethodBindings.operator: greater_equal Array")
	globalArrayMethodBindings.operator_greater_equal_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalArrayMethodBindings.operator: add Array")
	globalArrayMethodBindings.operator_add_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalArrayMethodBindings.operator: in Array")
	globalArrayMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("arrayInitBindings end")
}

func (c *Array) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewArray, index: 0
func NewArray() Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalArrayMethodBindings.constructor_0, ptr)

	return cx
}

// NewArray, index: 1
func NewArrayWithArray(from Array) Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Array
	// ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalArrayMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewArray, index: 2
func NewArrayWithArrayInt32StringNameVariant(base Array, typeName int32, class_name StringName, script Variant) Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [4]GDExtensionConstTypePtr

	// Array
	// ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(base.ptr())

	// int
	eArg1 := Int32Encoder.EncodeArg(typeName)
	args[1] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg1))

	// StringName
	// StringNameEncoder
	args[2] = (GDExtensionConstTypePtr)(class_name.ptr())

	// Variant
	// VariantEncoder
	args[3] = (GDExtensionConstTypePtr)(script.ptr())
	callBuiltinConstructor(globalArrayMethodBindings.constructor_2, ptr, args[0], args[1], args[2], args[3])

	return cx
}

// NewArray, index: 3
func NewArrayWithPackedByteArray(from PackedByteArray) Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedByteArray
	// PackedByteArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalArrayMethodBindings.constructor_3, ptr, args[0])

	return cx
}

// NewArray, index: 4
func NewArrayWithPackedInt32Array(from PackedInt32Array) Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedInt32Array
	// PackedInt32ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalArrayMethodBindings.constructor_4, ptr, args[0])

	return cx
}

// NewArray, index: 5
func NewArrayWithPackedInt64Array(from PackedInt64Array) Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedInt64Array
	// PackedInt64ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalArrayMethodBindings.constructor_5, ptr, args[0])

	return cx
}

// NewArray, index: 6
func NewArrayWithPackedFloat32Array(from PackedFloat32Array) Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedFloat32Array
	// PackedFloat32ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalArrayMethodBindings.constructor_6, ptr, args[0])

	return cx
}

// NewArray, index: 7
func NewArrayWithPackedFloat64Array(from PackedFloat64Array) Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedFloat64Array
	// PackedFloat64ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalArrayMethodBindings.constructor_7, ptr, args[0])

	return cx
}

// NewArray, index: 8
func NewArrayWithPackedStringArray(from PackedStringArray) Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedStringArray
	// PackedStringArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalArrayMethodBindings.constructor_8, ptr, args[0])

	return cx
}

// NewArray, index: 9
func NewArrayWithPackedVector2Array(from PackedVector2Array) Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedVector2Array
	// PackedVector2ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalArrayMethodBindings.constructor_9, ptr, args[0])

	return cx
}

// NewArray, index: 10
func NewArrayWithPackedVector3Array(from PackedVector3Array) Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedVector3Array
	// PackedVector3ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalArrayMethodBindings.constructor_10, ptr, args[0])

	return cx
}

// NewArray, index: 11
func NewArrayWithPackedColorArray(from PackedColorArray) Array {
	cx := Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedColorArray
	// PackedColorArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalArrayMethodBindings.constructor_11, ptr, args[0])

	return cx
}

func (cx *Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalArrayMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Array) Size() int32 {
	mb := globalArrayMethodBindings.method_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) IsEmpty() bool {
	mb := globalArrayMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Clear() {
	mb := globalArrayMethodBindings.method_clear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Array) Hash() int32 {
	mb := globalArrayMethodBindings.method_hash

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* Assign : assign
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Assign(array Array) {
	mb := globalArrayMethodBindings.method_assign

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) PushBack(value Variant) {
	mb := globalArrayMethodBindings.method_push_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* PushFront : push_front
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) PushFront(value Variant) {
	mb := globalArrayMethodBindings.method_push_front

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Append(value Variant) {
	mb := globalArrayMethodBindings.method_append

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) AppendArray(array Array) {
	mb := globalArrayMethodBindings.method_append_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Array) Resize(size int32) int32 {
	mb := globalArrayMethodBindings.method_resize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Array) Insert(position int32, value Variant) int32 {
	mb := globalArrayMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(position)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) RemoveAt(position int32) {
	mb := globalArrayMethodBindings.method_remove_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(position)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Fill(value Variant) {
	mb := globalArrayMethodBindings.method_fill

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Erase(value Variant) {
	mb := globalArrayMethodBindings.method_erase

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Front : front
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Front() Variant {
	mb := globalArrayMethodBindings.method_front

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret

}

/* Back : back
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Back() Variant {
	mb := globalArrayMethodBindings.method_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret

}

/* PickRandom : pick_random
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) PickRandom() Variant {
	mb := globalArrayMethodBindings.method_pick_random

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Array) Find(what Variant, from int32) int32 {
	mb := globalArrayMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&what))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Array) Rfind(what Variant, from int32) int32 {
	mb := globalArrayMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&what))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Array) Count(value Variant) int32 {
	mb := globalArrayMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) Has(value Variant) bool {
	mb := globalArrayMethodBindings.method_has

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* PopBack : pop_back
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) PopBack() Variant {
	mb := globalArrayMethodBindings.method_pop_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret

}

/* PopFront : pop_front
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) PopFront() Variant {
	mb := globalArrayMethodBindings.method_pop_front

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret

}

/* PopAt : pop_at
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) PopAt(position int32) Variant {
	mb := globalArrayMethodBindings.method_pop_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(position)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Sort() {
	mb := globalArrayMethodBindings.method_sort

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* SortCustom : sort_custom
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) SortCustom(callbackFunc Callable) {
	mb := globalArrayMethodBindings.method_sort_custom

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&callbackFunc))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Shuffle : shuffle
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Shuffle() {
	mb := globalArrayMethodBindings.method_shuffle

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Array) Bsearch(value Variant, before bool) int32 {
	mb := globalArrayMethodBindings.method_bsearch

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	eArg1 := BoolEncoder.EncodeArg(before)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* BsearchCustom : bsearch_custom
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Array) BsearchCustom(value Variant, callbackFunc Callable, before bool) int32 {
	mb := globalArrayMethodBindings.method_bsearch_custom

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&callbackFunc))

	eArg2 := BoolEncoder.EncodeArg(before)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Reverse() {
	mb := globalArrayMethodBindings.method_reverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Duplicate(deep bool) Array {
	mb := globalArrayMethodBindings.method_duplicate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := BoolEncoder.EncodeArg(deep)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Slice(begin int32, end int32, step int32, deep bool) Array {
	mb := globalArrayMethodBindings.method_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(begin)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(end)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	eArg2 := Int32Encoder.EncodeArg(step)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	eArg3 := BoolEncoder.EncodeArg(deep)
	args[3] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg3))

	ret := callBuiltinMethodPtrRet[Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Filter : filter
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Filter(method Callable) Array {
	mb := globalArrayMethodBindings.method_filter

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&method))

	ret := callBuiltinMethodPtrRet[Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Map : map
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Map(method Callable) Array {
	mb := globalArrayMethodBindings.method_map

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&method))

	ret := callBuiltinMethodPtrRet[Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reduce : reduce
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Reduce(method Callable, accum Variant) Variant {
	mb := globalArrayMethodBindings.method_reduce

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&method))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&accum))

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Any : any
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) Any(method Callable) bool {
	mb := globalArrayMethodBindings.method_any

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&method))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* All : all
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) All(method Callable) bool {
	mb := globalArrayMethodBindings.method_all

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&method))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Max : max
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Max() Variant {
	mb := globalArrayMethodBindings.method_max

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret

}

/* Min : min
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Min() Variant {
	mb := globalArrayMethodBindings.method_min

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret

}

/* IsTyped : is_typed
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) IsTyped() bool {
	mb := globalArrayMethodBindings.method_is_typed

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* IsSameTyped : is_same_typed
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) IsSameTyped(array Array) bool {
	mb := globalArrayMethodBindings.method_is_same_typed

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetTypedBuiltin : get_typed_builtin
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *Array) GetTypedBuiltin() int32 {
	mb := globalArrayMethodBindings.method_get_typed_builtin

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* GetTypedClassName : get_typed_class_name
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *Array) GetTypedClassName() StringName {
	mb := globalArrayMethodBindings.method_get_typed_class_name

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret

}

/* GetTypedScript : get_typed_script
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) GetTypedScript() Variant {
	mb := globalArrayMethodBindings.method_get_typed_script

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret

}

/* MakeReadOnly : make_read_only
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) MakeReadOnly() {
	mb := globalArrayMethodBindings.method_make_read_only

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* IsReadOnly : is_read_only
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) IsReadOnly() bool {
	mb := globalArrayMethodBindings.method_is_read_only

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

func (cx *Array) GetIndexed(i int64) Variant {

	var ret Variant

	CallFunc_GDExtensionPtrIndexedGetter(
		globalArrayMethodBindings.indexed_getter,
		(GDExtensionConstTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(unsafe.Pointer(&ret)),
	)

	return ret
}

func (cx *Array) SetIndexed(i int64, value Variant) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalArrayMethodBindings.indexed_setter,
		(GDExtensionTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(unsafe.Pointer(&value)),
	)
}

// members

// Equal_Variant operator
func (cx *Array) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Array) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// In_Dictionary operator
func (cx *Array) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// Equal_Array operator
func (cx *Array) Equal_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_equal_Array, lt, rt)
}

// Not_equal_Array operator
func (cx *Array) Not_equal_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_not_equal_Array, lt, rt)
}

// Less_Array operator
func (cx *Array) Less_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_less_Array, lt, rt)
}

// Less_equal_Array operator
func (cx *Array) Less_equal_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_less_equal_Array, lt, rt)
}

// Greater_Array operator
func (cx *Array) Greater_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_greater_Array, lt, rt)
}

// Greater_equal_Array operator
func (cx *Array) Greater_equal_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_greater_equal_Array, lt, rt)
}

// Add_Array operator
func (cx *Array) Add_Array(right Array) Array {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[Array](globalArrayMethodBindings.operator_add_Array, lt, rt)
}

// In_Array operator
func (cx *Array) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_in_Array, lt, rt)
}

/*
 * PackedByteArray
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: true
 */
type PackedByteArray struct {
	opaque [16]uint8
}

type packedByteArrayMethodBindings struct {
	constructor_0                      GDExtensionPtrConstructor
	constructor_1                      GDExtensionPtrConstructor
	constructor_2                      GDExtensionPtrConstructor
	destructor                         GDExtensionPtrDestructor
	method_size                        GDExtensionPtrBuiltInMethod
	method_is_empty                    GDExtensionPtrBuiltInMethod
	method_set                         GDExtensionPtrBuiltInMethod
	method_push_back                   GDExtensionPtrBuiltInMethod
	method_append                      GDExtensionPtrBuiltInMethod
	method_append_array                GDExtensionPtrBuiltInMethod
	method_remove_at                   GDExtensionPtrBuiltInMethod
	method_insert                      GDExtensionPtrBuiltInMethod
	method_fill                        GDExtensionPtrBuiltInMethod
	method_resize                      GDExtensionPtrBuiltInMethod
	method_clear                       GDExtensionPtrBuiltInMethod
	method_has                         GDExtensionPtrBuiltInMethod
	method_reverse                     GDExtensionPtrBuiltInMethod
	method_slice                       GDExtensionPtrBuiltInMethod
	method_sort                        GDExtensionPtrBuiltInMethod
	method_bsearch                     GDExtensionPtrBuiltInMethod
	method_duplicate                   GDExtensionPtrBuiltInMethod
	method_find                        GDExtensionPtrBuiltInMethod
	method_rfind                       GDExtensionPtrBuiltInMethod
	method_count                       GDExtensionPtrBuiltInMethod
	method_get_string_from_ascii       GDExtensionPtrBuiltInMethod
	method_get_string_from_utf8        GDExtensionPtrBuiltInMethod
	method_get_string_from_utf16       GDExtensionPtrBuiltInMethod
	method_get_string_from_utf32       GDExtensionPtrBuiltInMethod
	method_hex_encode                  GDExtensionPtrBuiltInMethod
	method_compress                    GDExtensionPtrBuiltInMethod
	method_decompress                  GDExtensionPtrBuiltInMethod
	method_decompress_dynamic          GDExtensionPtrBuiltInMethod
	method_decode_u8                   GDExtensionPtrBuiltInMethod
	method_decode_s8                   GDExtensionPtrBuiltInMethod
	method_decode_u16                  GDExtensionPtrBuiltInMethod
	method_decode_s16                  GDExtensionPtrBuiltInMethod
	method_decode_u32                  GDExtensionPtrBuiltInMethod
	method_decode_s32                  GDExtensionPtrBuiltInMethod
	method_decode_u64                  GDExtensionPtrBuiltInMethod
	method_decode_s64                  GDExtensionPtrBuiltInMethod
	method_decode_half                 GDExtensionPtrBuiltInMethod
	method_decode_float                GDExtensionPtrBuiltInMethod
	method_decode_double               GDExtensionPtrBuiltInMethod
	method_has_encoded_var             GDExtensionPtrBuiltInMethod
	method_decode_var                  GDExtensionPtrBuiltInMethod
	method_decode_var_size             GDExtensionPtrBuiltInMethod
	method_to_int32_array              GDExtensionPtrBuiltInMethod
	method_to_int64_array              GDExtensionPtrBuiltInMethod
	method_to_float32_array            GDExtensionPtrBuiltInMethod
	method_to_float64_array            GDExtensionPtrBuiltInMethod
	method_encode_u8                   GDExtensionPtrBuiltInMethod
	method_encode_s8                   GDExtensionPtrBuiltInMethod
	method_encode_u16                  GDExtensionPtrBuiltInMethod
	method_encode_s16                  GDExtensionPtrBuiltInMethod
	method_encode_u32                  GDExtensionPtrBuiltInMethod
	method_encode_s32                  GDExtensionPtrBuiltInMethod
	method_encode_u64                  GDExtensionPtrBuiltInMethod
	method_encode_s64                  GDExtensionPtrBuiltInMethod
	method_encode_half                 GDExtensionPtrBuiltInMethod
	method_encode_float                GDExtensionPtrBuiltInMethod
	method_encode_double               GDExtensionPtrBuiltInMethod
	method_encode_var                  GDExtensionPtrBuiltInMethod
	indexed_setter                     GDExtensionPtrIndexedSetter
	indexed_getter                     GDExtensionPtrIndexedGetter
	operator_equal_Variant             GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant         GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary             GDExtensionPtrOperatorEvaluator
	operator_in_Array                  GDExtensionPtrOperatorEvaluator
	operator_equal_PackedByteArray     GDExtensionPtrOperatorEvaluator
	operator_not_equal_PackedByteArray GDExtensionPtrOperatorEvaluator
	operator_add_PackedByteArray       GDExtensionPtrOperatorEvaluator
}

var globalPackedByteArrayMethodBindings packedByteArrayMethodBindings

func packedByteArrayInitConstructorBindings() {
	log.Debug("packedByteArrayInitConstructorBindings called")

	log.Debug("globalPackedByteArrayMethodBindings.constructor_0")
	globalPackedByteArrayMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, 0)
	log.Debug("globalPackedByteArrayMethodBindings.constructor_1")
	globalPackedByteArrayMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, 1)
	log.Debug("globalPackedByteArrayMethodBindings.constructor_2")
	globalPackedByteArrayMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, 2)
	log.Debug("globalPackedByteArrayMethodBindings.destructor")
	globalPackedByteArrayMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)
}

func packedByteArrayInitMethodBindings() {
	log.Debug("packedByteArrayInitMethodBindings called")

	missingMethods := make([]string, 0, 58)

	methodName0 := NewStringNameWithLatin1Chars("size")
	defer methodName0.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_size")
	globalPackedByteArrayMethodBindings.method_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalPackedByteArrayMethodBindings.method_size == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_size")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName1.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_is_empty")
	globalPackedByteArrayMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalPackedByteArrayMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_is_empty")
	}
	methodName2 := NewStringNameWithLatin1Chars("set")
	defer methodName2.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_set")
	globalPackedByteArrayMethodBindings.method_set = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName2.AsGDExtensionStringNamePtr(), 3638975848)
	if globalPackedByteArrayMethodBindings.method_set == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_set")
	}
	methodName3 := NewStringNameWithLatin1Chars("push_back")
	defer methodName3.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_push_back")
	globalPackedByteArrayMethodBindings.method_push_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName3.AsGDExtensionStringNamePtr(), 694024632)
	if globalPackedByteArrayMethodBindings.method_push_back == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_push_back")
	}
	methodName4 := NewStringNameWithLatin1Chars("append")
	defer methodName4.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_append")
	globalPackedByteArrayMethodBindings.method_append = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName4.AsGDExtensionStringNamePtr(), 694024632)
	if globalPackedByteArrayMethodBindings.method_append == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_append")
	}
	methodName5 := NewStringNameWithLatin1Chars("append_array")
	defer methodName5.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_append_array")
	globalPackedByteArrayMethodBindings.method_append_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName5.AsGDExtensionStringNamePtr(), 791097111)
	if globalPackedByteArrayMethodBindings.method_append_array == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_append_array")
	}
	methodName6 := NewStringNameWithLatin1Chars("remove_at")
	defer methodName6.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_remove_at")
	globalPackedByteArrayMethodBindings.method_remove_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName6.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedByteArrayMethodBindings.method_remove_at == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_remove_at")
	}
	methodName7 := NewStringNameWithLatin1Chars("insert")
	defer methodName7.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_insert")
	globalPackedByteArrayMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName7.AsGDExtensionStringNamePtr(), 1487112728)
	if globalPackedByteArrayMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_insert")
	}
	methodName8 := NewStringNameWithLatin1Chars("fill")
	defer methodName8.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_fill")
	globalPackedByteArrayMethodBindings.method_fill = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName8.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedByteArrayMethodBindings.method_fill == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_fill")
	}
	methodName9 := NewStringNameWithLatin1Chars("resize")
	defer methodName9.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_resize")
	globalPackedByteArrayMethodBindings.method_resize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName9.AsGDExtensionStringNamePtr(), 848867239)
	if globalPackedByteArrayMethodBindings.method_resize == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_resize")
	}
	methodName10 := NewStringNameWithLatin1Chars("clear")
	defer methodName10.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_clear")
	globalPackedByteArrayMethodBindings.method_clear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName10.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedByteArrayMethodBindings.method_clear == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_clear")
	}
	methodName11 := NewStringNameWithLatin1Chars("has")
	defer methodName11.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_has")
	globalPackedByteArrayMethodBindings.method_has = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName11.AsGDExtensionStringNamePtr(), 931488181)
	if globalPackedByteArrayMethodBindings.method_has == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_has")
	}
	methodName12 := NewStringNameWithLatin1Chars("reverse")
	defer methodName12.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_reverse")
	globalPackedByteArrayMethodBindings.method_reverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName12.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedByteArrayMethodBindings.method_reverse == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_reverse")
	}
	methodName13 := NewStringNameWithLatin1Chars("slice")
	defer methodName13.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_slice")
	globalPackedByteArrayMethodBindings.method_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName13.AsGDExtensionStringNamePtr(), 2278869132)
	if globalPackedByteArrayMethodBindings.method_slice == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_slice")
	}
	methodName14 := NewStringNameWithLatin1Chars("sort")
	defer methodName14.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_sort")
	globalPackedByteArrayMethodBindings.method_sort = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName14.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedByteArrayMethodBindings.method_sort == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_sort")
	}
	methodName15 := NewStringNameWithLatin1Chars("bsearch")
	defer methodName15.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_bsearch")
	globalPackedByteArrayMethodBindings.method_bsearch = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName15.AsGDExtensionStringNamePtr(), 3380005890)
	if globalPackedByteArrayMethodBindings.method_bsearch == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_bsearch")
	}
	methodName16 := NewStringNameWithLatin1Chars("duplicate")
	defer methodName16.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_duplicate")
	globalPackedByteArrayMethodBindings.method_duplicate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName16.AsGDExtensionStringNamePtr(), 851781288)
	if globalPackedByteArrayMethodBindings.method_duplicate == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_duplicate")
	}
	methodName17 := NewStringNameWithLatin1Chars("find")
	defer methodName17.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_find")
	globalPackedByteArrayMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName17.AsGDExtensionStringNamePtr(), 2984303840)
	if globalPackedByteArrayMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_find")
	}
	methodName18 := NewStringNameWithLatin1Chars("rfind")
	defer methodName18.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_rfind")
	globalPackedByteArrayMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName18.AsGDExtensionStringNamePtr(), 2984303840)
	if globalPackedByteArrayMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_rfind")
	}
	methodName19 := NewStringNameWithLatin1Chars("count")
	defer methodName19.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_count")
	globalPackedByteArrayMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName19.AsGDExtensionStringNamePtr(), 4103005248)
	if globalPackedByteArrayMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_count")
	}
	methodName20 := NewStringNameWithLatin1Chars("get_string_from_ascii")
	defer methodName20.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_get_string_from_ascii")
	globalPackedByteArrayMethodBindings.method_get_string_from_ascii = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName20.AsGDExtensionStringNamePtr(), 3942272618)
	if globalPackedByteArrayMethodBindings.method_get_string_from_ascii == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_get_string_from_ascii")
	}
	methodName21 := NewStringNameWithLatin1Chars("get_string_from_utf8")
	defer methodName21.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_get_string_from_utf8")
	globalPackedByteArrayMethodBindings.method_get_string_from_utf8 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName21.AsGDExtensionStringNamePtr(), 3942272618)
	if globalPackedByteArrayMethodBindings.method_get_string_from_utf8 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_get_string_from_utf8")
	}
	methodName22 := NewStringNameWithLatin1Chars("get_string_from_utf16")
	defer methodName22.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_get_string_from_utf16")
	globalPackedByteArrayMethodBindings.method_get_string_from_utf16 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName22.AsGDExtensionStringNamePtr(), 3942272618)
	if globalPackedByteArrayMethodBindings.method_get_string_from_utf16 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_get_string_from_utf16")
	}
	methodName23 := NewStringNameWithLatin1Chars("get_string_from_utf32")
	defer methodName23.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_get_string_from_utf32")
	globalPackedByteArrayMethodBindings.method_get_string_from_utf32 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName23.AsGDExtensionStringNamePtr(), 3942272618)
	if globalPackedByteArrayMethodBindings.method_get_string_from_utf32 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_get_string_from_utf32")
	}
	methodName24 := NewStringNameWithLatin1Chars("hex_encode")
	defer methodName24.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_hex_encode")
	globalPackedByteArrayMethodBindings.method_hex_encode = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName24.AsGDExtensionStringNamePtr(), 3942272618)
	if globalPackedByteArrayMethodBindings.method_hex_encode == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_hex_encode")
	}
	methodName25 := NewStringNameWithLatin1Chars("compress")
	defer methodName25.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_compress")
	globalPackedByteArrayMethodBindings.method_compress = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName25.AsGDExtensionStringNamePtr(), 1845905913)
	if globalPackedByteArrayMethodBindings.method_compress == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_compress")
	}
	methodName26 := NewStringNameWithLatin1Chars("decompress")
	defer methodName26.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decompress")
	globalPackedByteArrayMethodBindings.method_decompress = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName26.AsGDExtensionStringNamePtr(), 2278869132)
	if globalPackedByteArrayMethodBindings.method_decompress == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decompress")
	}
	methodName27 := NewStringNameWithLatin1Chars("decompress_dynamic")
	defer methodName27.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decompress_dynamic")
	globalPackedByteArrayMethodBindings.method_decompress_dynamic = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName27.AsGDExtensionStringNamePtr(), 2278869132)
	if globalPackedByteArrayMethodBindings.method_decompress_dynamic == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decompress_dynamic")
	}
	methodName28 := NewStringNameWithLatin1Chars("decode_u8")
	defer methodName28.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_u8")
	globalPackedByteArrayMethodBindings.method_decode_u8 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName28.AsGDExtensionStringNamePtr(), 4103005248)
	if globalPackedByteArrayMethodBindings.method_decode_u8 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_u8")
	}
	methodName29 := NewStringNameWithLatin1Chars("decode_s8")
	defer methodName29.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_s8")
	globalPackedByteArrayMethodBindings.method_decode_s8 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName29.AsGDExtensionStringNamePtr(), 4103005248)
	if globalPackedByteArrayMethodBindings.method_decode_s8 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_s8")
	}
	methodName30 := NewStringNameWithLatin1Chars("decode_u16")
	defer methodName30.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_u16")
	globalPackedByteArrayMethodBindings.method_decode_u16 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName30.AsGDExtensionStringNamePtr(), 4103005248)
	if globalPackedByteArrayMethodBindings.method_decode_u16 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_u16")
	}
	methodName31 := NewStringNameWithLatin1Chars("decode_s16")
	defer methodName31.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_s16")
	globalPackedByteArrayMethodBindings.method_decode_s16 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName31.AsGDExtensionStringNamePtr(), 4103005248)
	if globalPackedByteArrayMethodBindings.method_decode_s16 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_s16")
	}
	methodName32 := NewStringNameWithLatin1Chars("decode_u32")
	defer methodName32.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_u32")
	globalPackedByteArrayMethodBindings.method_decode_u32 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName32.AsGDExtensionStringNamePtr(), 4103005248)
	if globalPackedByteArrayMethodBindings.method_decode_u32 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_u32")
	}
	methodName33 := NewStringNameWithLatin1Chars("decode_s32")
	defer methodName33.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_s32")
	globalPackedByteArrayMethodBindings.method_decode_s32 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName33.AsGDExtensionStringNamePtr(), 4103005248)
	if globalPackedByteArrayMethodBindings.method_decode_s32 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_s32")
	}
	methodName34 := NewStringNameWithLatin1Chars("decode_u64")
	defer methodName34.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_u64")
	globalPackedByteArrayMethodBindings.method_decode_u64 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName34.AsGDExtensionStringNamePtr(), 4103005248)
	if globalPackedByteArrayMethodBindings.method_decode_u64 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_u64")
	}
	methodName35 := NewStringNameWithLatin1Chars("decode_s64")
	defer methodName35.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_s64")
	globalPackedByteArrayMethodBindings.method_decode_s64 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName35.AsGDExtensionStringNamePtr(), 4103005248)
	if globalPackedByteArrayMethodBindings.method_decode_s64 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_s64")
	}
	methodName36 := NewStringNameWithLatin1Chars("decode_half")
	defer methodName36.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_half")
	globalPackedByteArrayMethodBindings.method_decode_half = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName36.AsGDExtensionStringNamePtr(), 1401583798)
	if globalPackedByteArrayMethodBindings.method_decode_half == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_half")
	}
	methodName37 := NewStringNameWithLatin1Chars("decode_float")
	defer methodName37.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_float")
	globalPackedByteArrayMethodBindings.method_decode_float = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName37.AsGDExtensionStringNamePtr(), 1401583798)
	if globalPackedByteArrayMethodBindings.method_decode_float == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_float")
	}
	methodName38 := NewStringNameWithLatin1Chars("decode_double")
	defer methodName38.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_double")
	globalPackedByteArrayMethodBindings.method_decode_double = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName38.AsGDExtensionStringNamePtr(), 1401583798)
	if globalPackedByteArrayMethodBindings.method_decode_double == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_double")
	}
	methodName39 := NewStringNameWithLatin1Chars("has_encoded_var")
	defer methodName39.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_has_encoded_var")
	globalPackedByteArrayMethodBindings.method_has_encoded_var = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName39.AsGDExtensionStringNamePtr(), 2914632957)
	if globalPackedByteArrayMethodBindings.method_has_encoded_var == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_has_encoded_var")
	}
	methodName40 := NewStringNameWithLatin1Chars("decode_var")
	defer methodName40.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_var")
	globalPackedByteArrayMethodBindings.method_decode_var = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName40.AsGDExtensionStringNamePtr(), 1740420038)
	if globalPackedByteArrayMethodBindings.method_decode_var == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_var")
	}
	methodName41 := NewStringNameWithLatin1Chars("decode_var_size")
	defer methodName41.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_decode_var_size")
	globalPackedByteArrayMethodBindings.method_decode_var_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName41.AsGDExtensionStringNamePtr(), 954237325)
	if globalPackedByteArrayMethodBindings.method_decode_var_size == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_decode_var_size")
	}
	methodName42 := NewStringNameWithLatin1Chars("to_int32_array")
	defer methodName42.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_to_int32_array")
	globalPackedByteArrayMethodBindings.method_to_int32_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName42.AsGDExtensionStringNamePtr(), 3158844420)
	if globalPackedByteArrayMethodBindings.method_to_int32_array == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_to_int32_array")
	}
	methodName43 := NewStringNameWithLatin1Chars("to_int64_array")
	defer methodName43.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_to_int64_array")
	globalPackedByteArrayMethodBindings.method_to_int64_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName43.AsGDExtensionStringNamePtr(), 1961294120)
	if globalPackedByteArrayMethodBindings.method_to_int64_array == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_to_int64_array")
	}
	methodName44 := NewStringNameWithLatin1Chars("to_float32_array")
	defer methodName44.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_to_float32_array")
	globalPackedByteArrayMethodBindings.method_to_float32_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName44.AsGDExtensionStringNamePtr(), 3575107827)
	if globalPackedByteArrayMethodBindings.method_to_float32_array == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_to_float32_array")
	}
	methodName45 := NewStringNameWithLatin1Chars("to_float64_array")
	defer methodName45.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_to_float64_array")
	globalPackedByteArrayMethodBindings.method_to_float64_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName45.AsGDExtensionStringNamePtr(), 1627308337)
	if globalPackedByteArrayMethodBindings.method_to_float64_array == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_to_float64_array")
	}
	methodName46 := NewStringNameWithLatin1Chars("encode_u8")
	defer methodName46.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_u8")
	globalPackedByteArrayMethodBindings.method_encode_u8 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName46.AsGDExtensionStringNamePtr(), 3638975848)
	if globalPackedByteArrayMethodBindings.method_encode_u8 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_u8")
	}
	methodName47 := NewStringNameWithLatin1Chars("encode_s8")
	defer methodName47.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_s8")
	globalPackedByteArrayMethodBindings.method_encode_s8 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName47.AsGDExtensionStringNamePtr(), 3638975848)
	if globalPackedByteArrayMethodBindings.method_encode_s8 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_s8")
	}
	methodName48 := NewStringNameWithLatin1Chars("encode_u16")
	defer methodName48.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_u16")
	globalPackedByteArrayMethodBindings.method_encode_u16 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName48.AsGDExtensionStringNamePtr(), 3638975848)
	if globalPackedByteArrayMethodBindings.method_encode_u16 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_u16")
	}
	methodName49 := NewStringNameWithLatin1Chars("encode_s16")
	defer methodName49.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_s16")
	globalPackedByteArrayMethodBindings.method_encode_s16 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName49.AsGDExtensionStringNamePtr(), 3638975848)
	if globalPackedByteArrayMethodBindings.method_encode_s16 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_s16")
	}
	methodName50 := NewStringNameWithLatin1Chars("encode_u32")
	defer methodName50.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_u32")
	globalPackedByteArrayMethodBindings.method_encode_u32 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName50.AsGDExtensionStringNamePtr(), 3638975848)
	if globalPackedByteArrayMethodBindings.method_encode_u32 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_u32")
	}
	methodName51 := NewStringNameWithLatin1Chars("encode_s32")
	defer methodName51.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_s32")
	globalPackedByteArrayMethodBindings.method_encode_s32 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName51.AsGDExtensionStringNamePtr(), 3638975848)
	if globalPackedByteArrayMethodBindings.method_encode_s32 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_s32")
	}
	methodName52 := NewStringNameWithLatin1Chars("encode_u64")
	defer methodName52.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_u64")
	globalPackedByteArrayMethodBindings.method_encode_u64 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName52.AsGDExtensionStringNamePtr(), 3638975848)
	if globalPackedByteArrayMethodBindings.method_encode_u64 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_u64")
	}
	methodName53 := NewStringNameWithLatin1Chars("encode_s64")
	defer methodName53.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_s64")
	globalPackedByteArrayMethodBindings.method_encode_s64 = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName53.AsGDExtensionStringNamePtr(), 3638975848)
	if globalPackedByteArrayMethodBindings.method_encode_s64 == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_s64")
	}
	methodName54 := NewStringNameWithLatin1Chars("encode_half")
	defer methodName54.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_half")
	globalPackedByteArrayMethodBindings.method_encode_half = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName54.AsGDExtensionStringNamePtr(), 1113000516)
	if globalPackedByteArrayMethodBindings.method_encode_half == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_half")
	}
	methodName55 := NewStringNameWithLatin1Chars("encode_float")
	defer methodName55.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_float")
	globalPackedByteArrayMethodBindings.method_encode_float = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName55.AsGDExtensionStringNamePtr(), 1113000516)
	if globalPackedByteArrayMethodBindings.method_encode_float == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_float")
	}
	methodName56 := NewStringNameWithLatin1Chars("encode_double")
	defer methodName56.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_double")
	globalPackedByteArrayMethodBindings.method_encode_double = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName56.AsGDExtensionStringNamePtr(), 1113000516)
	if globalPackedByteArrayMethodBindings.method_encode_double == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_double")
	}
	methodName57 := NewStringNameWithLatin1Chars("encode_var")
	defer methodName57.Destroy()
	log.Debug("globalPackedByteArrayMethodBindings.method_encode_var")
	globalPackedByteArrayMethodBindings.method_encode_var = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, methodName57.AsGDExtensionStringNamePtr(), 2604460497)
	if globalPackedByteArrayMethodBindings.method_encode_var == nil {
		missingMethods = append(missingMethods, "globalPackedByteArrayMethodBindings.method_encode_var")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalPackedByteArrayMethodBindings.indexed_setter")
	globalPackedByteArrayMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)
	log.Debug("globalPackedByteArrayMethodBindings.indexed_getter")
	globalPackedByteArrayMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)
	log.Debug("globalPackedByteArrayMethodBindings.operator: equal Variant")
	globalPackedByteArrayMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedByteArrayMethodBindings.operator: not_equal Variant")
	globalPackedByteArrayMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedByteArrayMethodBindings.operator: in Dictionary")
	globalPackedByteArrayMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalPackedByteArrayMethodBindings.operator: in Array")
	globalPackedByteArrayMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalPackedByteArrayMethodBindings.operator: equal PackedByteArray")
	globalPackedByteArrayMethodBindings.operator_equal_PackedByteArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)
	log.Debug("globalPackedByteArrayMethodBindings.operator: not_equal PackedByteArray")
	globalPackedByteArrayMethodBindings.operator_not_equal_PackedByteArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)
	log.Debug("globalPackedByteArrayMethodBindings.operator: add PackedByteArray")
	globalPackedByteArrayMethodBindings.operator_add_PackedByteArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)
	log.Debug("packedByteArrayInitBindings end")
}

func (c *PackedByteArray) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedByteArray, index: 0
func NewPackedByteArray() PackedByteArray {
	cx := PackedByteArray{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalPackedByteArrayMethodBindings.constructor_0, ptr)

	return cx
}

// NewPackedByteArray, index: 1
func NewPackedByteArrayWithPackedByteArray(from PackedByteArray) PackedByteArray {
	cx := PackedByteArray{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedByteArray
	// PackedByteArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedByteArrayMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewPackedByteArray, index: 2
func NewPackedByteArrayWithArray(from Array) PackedByteArray {
	cx := PackedByteArray{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Array
	// ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedByteArrayMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *PackedByteArray) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedByteArrayMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) Size() int32 {
	mb := globalPackedByteArrayMethodBindings.method_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) IsEmpty() bool {
	mb := globalPackedByteArrayMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Set(index int32, value int32) {
	mb := globalPackedByteArrayMethodBindings.method_set

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) PushBack(value int32) bool {
	mb := globalPackedByteArrayMethodBindings.method_push_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) Append(value int32) bool {
	mb := globalPackedByteArrayMethodBindings.method_append

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) AppendArray(array PackedByteArray) {
	mb := globalPackedByteArrayMethodBindings.method_append_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) RemoveAt(index int32) {
	mb := globalPackedByteArrayMethodBindings.method_remove_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) Insert(at_index int32, value int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(at_index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Fill(value int32) {
	mb := globalPackedByteArrayMethodBindings.method_fill

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) Resize(new_size int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_resize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(new_size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Clear() {
	mb := globalPackedByteArrayMethodBindings.method_clear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) Has(value int32) bool {
	mb := globalPackedByteArrayMethodBindings.method_has

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Reverse() {
	mb := globalPackedByteArrayMethodBindings.method_reverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Slice(begin int32, end int32) PackedByteArray {
	mb := globalPackedByteArrayMethodBindings.method_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(begin)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(end)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Sort() {
	mb := globalPackedByteArrayMethodBindings.method_sort

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) Bsearch(value int32, before bool) int32 {
	mb := globalPackedByteArrayMethodBindings.method_bsearch

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(before)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Duplicate() PackedByteArray {
	mb := globalPackedByteArrayMethodBindings.method_duplicate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) Find(value int32, from int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) Rfind(value int32, from int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) Count(value int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* GetStringFromAscii : get_string_from_ascii
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromAscii() String {
	mb := globalPackedByteArrayMethodBindings.method_get_string_from_ascii

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* GetStringFromUtf8 : get_string_from_utf8
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromUtf8() String {
	mb := globalPackedByteArrayMethodBindings.method_get_string_from_utf8

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* GetStringFromUtf16 : get_string_from_utf16
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromUtf16() String {
	mb := globalPackedByteArrayMethodBindings.method_get_string_from_utf16

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* GetStringFromUtf32 : get_string_from_utf32
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromUtf32() String {
	mb := globalPackedByteArrayMethodBindings.method_get_string_from_utf32

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* HexEncode : hex_encode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) HexEncode() String {
	mb := globalPackedByteArrayMethodBindings.method_hex_encode

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret

}

/* Compress : compress
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Compress(compression_mode int32) PackedByteArray {
	mb := globalPackedByteArrayMethodBindings.method_compress

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(compression_mode)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Decompress : decompress
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Decompress(buffer_size int32, compression_mode int32) PackedByteArray {
	mb := globalPackedByteArrayMethodBindings.method_decompress

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(buffer_size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(compression_mode)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecompressDynamic : decompress_dynamic
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) DecompressDynamic(max_output_size int32, compression_mode int32) PackedByteArray {
	mb := globalPackedByteArrayMethodBindings.method_decompress_dynamic

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(max_output_size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(compression_mode)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeU8 : decode_u8
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) DecodeU8(byte_offset int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_u8

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeS8 : decode_s8
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) DecodeS8(byte_offset int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_s8

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeU16 : decode_u16
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) DecodeU16(byte_offset int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_u16

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeS16 : decode_s16
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) DecodeS16(byte_offset int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_s16

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeU32 : decode_u32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) DecodeU32(byte_offset int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_u32

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeS32 : decode_s32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) DecodeS32(byte_offset int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_s32

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeU64 : decode_u64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) DecodeU64(byte_offset int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_u64

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeS64 : decode_s64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) DecodeS64(byte_offset int32) int32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_s64

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeHalf : decode_half
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *PackedByteArray) DecodeHalf(byte_offset int32) float32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_half

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeFloat : decode_float
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *PackedByteArray) DecodeFloat(byte_offset int32) float32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_float

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeDouble : decode_double
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *PackedByteArray) DecodeDouble(byte_offset int32) float32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_double

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* HasEncodedVar : has_encoded_var
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) HasEncodedVar(byte_offset int32, allow_objects bool) bool {
	mb := globalPackedByteArrayMethodBindings.method_has_encoded_var

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(allow_objects)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeVar : decode_var
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *PackedByteArray) DecodeVar(byte_offset int32, allow_objects bool) Variant {
	mb := globalPackedByteArrayMethodBindings.method_decode_var

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(allow_objects)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* DecodeVarSize : decode_var_size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) DecodeVarSize(byte_offset int32, allow_objects bool) int32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_var_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(allow_objects)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToInt32Array : to_int32_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt32Array) -> PackedInt32Array
 */
func (cx *PackedByteArray) ToInt32Array() PackedInt32Array {
	mb := globalPackedByteArrayMethodBindings.method_to_int32_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedInt32Array](mb, bx, nil)
	return ret

}

/* ToInt64Array : to_int64_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt64Array) -> PackedInt64Array
 */
func (cx *PackedByteArray) ToInt64Array() PackedInt64Array {
	mb := globalPackedByteArrayMethodBindings.method_to_int64_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedInt64Array](mb, bx, nil)
	return ret

}

/* ToFloat32Array : to_float32_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat32Array) -> PackedFloat32Array
 */
func (cx *PackedByteArray) ToFloat32Array() PackedFloat32Array {
	mb := globalPackedByteArrayMethodBindings.method_to_float32_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedFloat32Array](mb, bx, nil)
	return ret

}

/* ToFloat64Array : to_float64_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *PackedByteArray) ToFloat64Array() PackedFloat64Array {
	mb := globalPackedByteArrayMethodBindings.method_to_float64_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, nil)
	return ret

}

/* EncodeU8 : encode_u8
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeU8(byte_offset int32, value int32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_u8

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* EncodeS8 : encode_s8
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeS8(byte_offset int32, value int32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_s8

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* EncodeU16 : encode_u16
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeU16(byte_offset int32, value int32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_u16

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* EncodeS16 : encode_s16
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeS16(byte_offset int32, value int32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_s16

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* EncodeU32 : encode_u32
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeU32(byte_offset int32, value int32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_u32

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* EncodeS32 : encode_s32
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeS32(byte_offset int32, value int32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_s32

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* EncodeU64 : encode_u64
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeU64(byte_offset int32, value int32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_u64

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* EncodeS64 : encode_s64
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeS64(byte_offset int32, value int32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_s64

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* EncodeHalf : encode_half
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeHalf(byte_offset int32, value float32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_half

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* EncodeFloat : encode_float
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeFloat(byte_offset int32, value float32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_float

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* EncodeDouble : encode_double
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeDouble(byte_offset int32, value float32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_double

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* EncodeVar : encode_var
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedByteArray) EncodeVar(byte_offset int32, value Variant, allow_objects bool) int32 {
	mb := globalPackedByteArrayMethodBindings.method_encode_var

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(byte_offset)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	eArg2 := BoolEncoder.EncodeArg(allow_objects)
	args[2] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg2))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

func (cx *PackedByteArray) GetIndexed(i int64) int32 {

	var ret int32

	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedByteArrayMethodBindings.indexed_getter,
		(GDExtensionConstTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(unsafe.Pointer(&ret)),
	)

	return ret
}

func (cx *PackedByteArray) SetIndexed(i int64, value int32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedByteArrayMethodBindings.indexed_setter,
		(GDExtensionTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(unsafe.Pointer(&value)),
	)
}

// members

// Equal_Variant operator
func (cx *PackedByteArray) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedByteArray) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// In_Dictionary operator
func (cx *PackedByteArray) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedByteArray) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedByteArray operator
func (cx *PackedByteArray) Equal_PackedByteArray(right PackedByteArray) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_equal_PackedByteArray, lt, rt)
}

// Not_equal_PackedByteArray operator
func (cx *PackedByteArray) Not_equal_PackedByteArray(right PackedByteArray) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_not_equal_PackedByteArray, lt, rt)
}

// Add_PackedByteArray operator
func (cx *PackedByteArray) Add_PackedByteArray(right PackedByteArray) PackedByteArray {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedByteArray](globalPackedByteArrayMethodBindings.operator_add_PackedByteArray, lt, rt)
}

/*
 * PackedInt32Array
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: true
 */
type PackedInt32Array struct {
	opaque [16]uint8
}

type packedInt32ArrayMethodBindings struct {
	constructor_0                       GDExtensionPtrConstructor
	constructor_1                       GDExtensionPtrConstructor
	constructor_2                       GDExtensionPtrConstructor
	destructor                          GDExtensionPtrDestructor
	method_size                         GDExtensionPtrBuiltInMethod
	method_is_empty                     GDExtensionPtrBuiltInMethod
	method_set                          GDExtensionPtrBuiltInMethod
	method_push_back                    GDExtensionPtrBuiltInMethod
	method_append                       GDExtensionPtrBuiltInMethod
	method_append_array                 GDExtensionPtrBuiltInMethod
	method_remove_at                    GDExtensionPtrBuiltInMethod
	method_insert                       GDExtensionPtrBuiltInMethod
	method_fill                         GDExtensionPtrBuiltInMethod
	method_resize                       GDExtensionPtrBuiltInMethod
	method_clear                        GDExtensionPtrBuiltInMethod
	method_has                          GDExtensionPtrBuiltInMethod
	method_reverse                      GDExtensionPtrBuiltInMethod
	method_slice                        GDExtensionPtrBuiltInMethod
	method_to_byte_array                GDExtensionPtrBuiltInMethod
	method_sort                         GDExtensionPtrBuiltInMethod
	method_bsearch                      GDExtensionPtrBuiltInMethod
	method_duplicate                    GDExtensionPtrBuiltInMethod
	method_find                         GDExtensionPtrBuiltInMethod
	method_rfind                        GDExtensionPtrBuiltInMethod
	method_count                        GDExtensionPtrBuiltInMethod
	indexed_setter                      GDExtensionPtrIndexedSetter
	indexed_getter                      GDExtensionPtrIndexedGetter
	operator_equal_Variant              GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant          GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary              GDExtensionPtrOperatorEvaluator
	operator_in_Array                   GDExtensionPtrOperatorEvaluator
	operator_equal_PackedInt32Array     GDExtensionPtrOperatorEvaluator
	operator_not_equal_PackedInt32Array GDExtensionPtrOperatorEvaluator
	operator_add_PackedInt32Array       GDExtensionPtrOperatorEvaluator
}

var globalPackedInt32ArrayMethodBindings packedInt32ArrayMethodBindings

func packedInt32ArrayInitConstructorBindings() {
	log.Debug("packedInt32ArrayInitConstructorBindings called")

	log.Debug("globalPackedInt32ArrayMethodBindings.constructor_0")
	globalPackedInt32ArrayMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, 0)
	log.Debug("globalPackedInt32ArrayMethodBindings.constructor_1")
	globalPackedInt32ArrayMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, 1)
	log.Debug("globalPackedInt32ArrayMethodBindings.constructor_2")
	globalPackedInt32ArrayMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, 2)
	log.Debug("globalPackedInt32ArrayMethodBindings.destructor")
	globalPackedInt32ArrayMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY)
}

func packedInt32ArrayInitMethodBindings() {
	log.Debug("packedInt32ArrayInitMethodBindings called")

	missingMethods := make([]string, 0, 21)

	methodName0 := NewStringNameWithLatin1Chars("size")
	defer methodName0.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_size")
	globalPackedInt32ArrayMethodBindings.method_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalPackedInt32ArrayMethodBindings.method_size == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_size")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName1.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_is_empty")
	globalPackedInt32ArrayMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalPackedInt32ArrayMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_is_empty")
	}
	methodName2 := NewStringNameWithLatin1Chars("set")
	defer methodName2.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_set")
	globalPackedInt32ArrayMethodBindings.method_set = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName2.AsGDExtensionStringNamePtr(), 3638975848)
	if globalPackedInt32ArrayMethodBindings.method_set == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_set")
	}
	methodName3 := NewStringNameWithLatin1Chars("push_back")
	defer methodName3.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_push_back")
	globalPackedInt32ArrayMethodBindings.method_push_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName3.AsGDExtensionStringNamePtr(), 694024632)
	if globalPackedInt32ArrayMethodBindings.method_push_back == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_push_back")
	}
	methodName4 := NewStringNameWithLatin1Chars("append")
	defer methodName4.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_append")
	globalPackedInt32ArrayMethodBindings.method_append = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName4.AsGDExtensionStringNamePtr(), 694024632)
	if globalPackedInt32ArrayMethodBindings.method_append == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_append")
	}
	methodName5 := NewStringNameWithLatin1Chars("append_array")
	defer methodName5.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_append_array")
	globalPackedInt32ArrayMethodBindings.method_append_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName5.AsGDExtensionStringNamePtr(), 1087733270)
	if globalPackedInt32ArrayMethodBindings.method_append_array == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_append_array")
	}
	methodName6 := NewStringNameWithLatin1Chars("remove_at")
	defer methodName6.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_remove_at")
	globalPackedInt32ArrayMethodBindings.method_remove_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName6.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedInt32ArrayMethodBindings.method_remove_at == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_remove_at")
	}
	methodName7 := NewStringNameWithLatin1Chars("insert")
	defer methodName7.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_insert")
	globalPackedInt32ArrayMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName7.AsGDExtensionStringNamePtr(), 1487112728)
	if globalPackedInt32ArrayMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_insert")
	}
	methodName8 := NewStringNameWithLatin1Chars("fill")
	defer methodName8.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_fill")
	globalPackedInt32ArrayMethodBindings.method_fill = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName8.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedInt32ArrayMethodBindings.method_fill == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_fill")
	}
	methodName9 := NewStringNameWithLatin1Chars("resize")
	defer methodName9.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_resize")
	globalPackedInt32ArrayMethodBindings.method_resize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName9.AsGDExtensionStringNamePtr(), 848867239)
	if globalPackedInt32ArrayMethodBindings.method_resize == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_resize")
	}
	methodName10 := NewStringNameWithLatin1Chars("clear")
	defer methodName10.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_clear")
	globalPackedInt32ArrayMethodBindings.method_clear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName10.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedInt32ArrayMethodBindings.method_clear == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_clear")
	}
	methodName11 := NewStringNameWithLatin1Chars("has")
	defer methodName11.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_has")
	globalPackedInt32ArrayMethodBindings.method_has = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName11.AsGDExtensionStringNamePtr(), 931488181)
	if globalPackedInt32ArrayMethodBindings.method_has == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_has")
	}
	methodName12 := NewStringNameWithLatin1Chars("reverse")
	defer methodName12.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_reverse")
	globalPackedInt32ArrayMethodBindings.method_reverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName12.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedInt32ArrayMethodBindings.method_reverse == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_reverse")
	}
	methodName13 := NewStringNameWithLatin1Chars("slice")
	defer methodName13.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_slice")
	globalPackedInt32ArrayMethodBindings.method_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName13.AsGDExtensionStringNamePtr(), 1216021098)
	if globalPackedInt32ArrayMethodBindings.method_slice == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_slice")
	}
	methodName14 := NewStringNameWithLatin1Chars("to_byte_array")
	defer methodName14.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_to_byte_array")
	globalPackedInt32ArrayMethodBindings.method_to_byte_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName14.AsGDExtensionStringNamePtr(), 247621236)
	if globalPackedInt32ArrayMethodBindings.method_to_byte_array == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_to_byte_array")
	}
	methodName15 := NewStringNameWithLatin1Chars("sort")
	defer methodName15.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_sort")
	globalPackedInt32ArrayMethodBindings.method_sort = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName15.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedInt32ArrayMethodBindings.method_sort == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_sort")
	}
	methodName16 := NewStringNameWithLatin1Chars("bsearch")
	defer methodName16.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_bsearch")
	globalPackedInt32ArrayMethodBindings.method_bsearch = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName16.AsGDExtensionStringNamePtr(), 3380005890)
	if globalPackedInt32ArrayMethodBindings.method_bsearch == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_bsearch")
	}
	methodName17 := NewStringNameWithLatin1Chars("duplicate")
	defer methodName17.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_duplicate")
	globalPackedInt32ArrayMethodBindings.method_duplicate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName17.AsGDExtensionStringNamePtr(), 1997843129)
	if globalPackedInt32ArrayMethodBindings.method_duplicate == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_duplicate")
	}
	methodName18 := NewStringNameWithLatin1Chars("find")
	defer methodName18.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_find")
	globalPackedInt32ArrayMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName18.AsGDExtensionStringNamePtr(), 2984303840)
	if globalPackedInt32ArrayMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_find")
	}
	methodName19 := NewStringNameWithLatin1Chars("rfind")
	defer methodName19.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_rfind")
	globalPackedInt32ArrayMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName19.AsGDExtensionStringNamePtr(), 2984303840)
	if globalPackedInt32ArrayMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_rfind")
	}
	methodName20 := NewStringNameWithLatin1Chars("count")
	defer methodName20.Destroy()
	log.Debug("globalPackedInt32ArrayMethodBindings.method_count")
	globalPackedInt32ArrayMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, methodName20.AsGDExtensionStringNamePtr(), 4103005248)
	if globalPackedInt32ArrayMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalPackedInt32ArrayMethodBindings.method_count")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalPackedInt32ArrayMethodBindings.indexed_setter")
	globalPackedInt32ArrayMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY)
	log.Debug("globalPackedInt32ArrayMethodBindings.indexed_getter")
	globalPackedInt32ArrayMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY)
	log.Debug("globalPackedInt32ArrayMethodBindings.operator: equal Variant")
	globalPackedInt32ArrayMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedInt32ArrayMethodBindings.operator: not_equal Variant")
	globalPackedInt32ArrayMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedInt32ArrayMethodBindings.operator: in Dictionary")
	globalPackedInt32ArrayMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalPackedInt32ArrayMethodBindings.operator: in Array")
	globalPackedInt32ArrayMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalPackedInt32ArrayMethodBindings.operator: equal PackedInt32Array")
	globalPackedInt32ArrayMethodBindings.operator_equal_PackedInt32Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY)
	log.Debug("globalPackedInt32ArrayMethodBindings.operator: not_equal PackedInt32Array")
	globalPackedInt32ArrayMethodBindings.operator_not_equal_PackedInt32Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY)
	log.Debug("globalPackedInt32ArrayMethodBindings.operator: add PackedInt32Array")
	globalPackedInt32ArrayMethodBindings.operator_add_PackedInt32Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY)
	log.Debug("packedInt32ArrayInitBindings end")
}

func (c *PackedInt32Array) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedInt32Array, index: 0
func NewPackedInt32Array() PackedInt32Array {
	cx := PackedInt32Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalPackedInt32ArrayMethodBindings.constructor_0, ptr)

	return cx
}

// NewPackedInt32Array, index: 1
func NewPackedInt32ArrayWithPackedInt32Array(from PackedInt32Array) PackedInt32Array {
	cx := PackedInt32Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedInt32Array
	// PackedInt32ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedInt32ArrayMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewPackedInt32Array, index: 2
func NewPackedInt32ArrayWithArray(from Array) PackedInt32Array {
	cx := PackedInt32Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Array
	// ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedInt32ArrayMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *PackedInt32Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedInt32ArrayMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt32Array) Size() int32 {
	mb := globalPackedInt32ArrayMethodBindings.method_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) IsEmpty() bool {
	mb := globalPackedInt32ArrayMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) Set(index int32, value int32) {
	mb := globalPackedInt32ArrayMethodBindings.method_set

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) PushBack(value int32) bool {
	mb := globalPackedInt32ArrayMethodBindings.method_push_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) Append(value int32) bool {
	mb := globalPackedInt32ArrayMethodBindings.method_append

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) AppendArray(array PackedInt32Array) {
	mb := globalPackedInt32ArrayMethodBindings.method_append_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) RemoveAt(index int32) {
	mb := globalPackedInt32ArrayMethodBindings.method_remove_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt32Array) Insert(at_index int32, value int32) int32 {
	mb := globalPackedInt32ArrayMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(at_index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) Fill(value int32) {
	mb := globalPackedInt32ArrayMethodBindings.method_fill

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt32Array) Resize(new_size int32) int32 {
	mb := globalPackedInt32ArrayMethodBindings.method_resize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(new_size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) Clear() {
	mb := globalPackedInt32ArrayMethodBindings.method_clear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) Has(value int32) bool {
	mb := globalPackedInt32ArrayMethodBindings.method_has

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) Reverse() {
	mb := globalPackedInt32ArrayMethodBindings.method_reverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt32Array) -> PackedInt32Array
 */
func (cx *PackedInt32Array) Slice(begin int32, end int32) PackedInt32Array {
	mb := globalPackedInt32ArrayMethodBindings.method_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(begin)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(end)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedInt32Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedInt32Array) ToByteArray() PackedByteArray {
	mb := globalPackedInt32ArrayMethodBindings.method_to_byte_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) Sort() {
	mb := globalPackedInt32ArrayMethodBindings.method_sort

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt32Array) Bsearch(value int32, before bool) int32 {
	mb := globalPackedInt32ArrayMethodBindings.method_bsearch

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(before)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt32Array) -> PackedInt32Array
 */
func (cx *PackedInt32Array) Duplicate() PackedInt32Array {
	mb := globalPackedInt32ArrayMethodBindings.method_duplicate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedInt32Array](mb, bx, nil)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt32Array) Find(value int32, from int32) int32 {
	mb := globalPackedInt32ArrayMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt32Array) Rfind(value int32, from int32) int32 {
	mb := globalPackedInt32ArrayMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt32Array) Count(value int32) int32 {
	mb := globalPackedInt32ArrayMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

func (cx *PackedInt32Array) GetIndexed(i int64) int32 {

	var ret int32

	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedInt32ArrayMethodBindings.indexed_getter,
		(GDExtensionConstTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(unsafe.Pointer(&ret)),
	)

	return ret
}

func (cx *PackedInt32Array) SetIndexed(i int64, value int32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedInt32ArrayMethodBindings.indexed_setter,
		(GDExtensionTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(unsafe.Pointer(&value)),
	)
}

// members

// Equal_Variant operator
func (cx *PackedInt32Array) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedInt32Array) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// In_Dictionary operator
func (cx *PackedInt32Array) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedInt32Array) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedInt32Array operator
func (cx *PackedInt32Array) Equal_PackedInt32Array(right PackedInt32Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_equal_PackedInt32Array, lt, rt)
}

// Not_equal_PackedInt32Array operator
func (cx *PackedInt32Array) Not_equal_PackedInt32Array(right PackedInt32Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_not_equal_PackedInt32Array, lt, rt)
}

// Add_PackedInt32Array operator
func (cx *PackedInt32Array) Add_PackedInt32Array(right PackedInt32Array) PackedInt32Array {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedInt32Array](globalPackedInt32ArrayMethodBindings.operator_add_PackedInt32Array, lt, rt)
}

/*
 * PackedInt64Array
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: true
 */
type PackedInt64Array struct {
	opaque [16]uint8
}

type packedInt64ArrayMethodBindings struct {
	constructor_0                       GDExtensionPtrConstructor
	constructor_1                       GDExtensionPtrConstructor
	constructor_2                       GDExtensionPtrConstructor
	destructor                          GDExtensionPtrDestructor
	method_size                         GDExtensionPtrBuiltInMethod
	method_is_empty                     GDExtensionPtrBuiltInMethod
	method_set                          GDExtensionPtrBuiltInMethod
	method_push_back                    GDExtensionPtrBuiltInMethod
	method_append                       GDExtensionPtrBuiltInMethod
	method_append_array                 GDExtensionPtrBuiltInMethod
	method_remove_at                    GDExtensionPtrBuiltInMethod
	method_insert                       GDExtensionPtrBuiltInMethod
	method_fill                         GDExtensionPtrBuiltInMethod
	method_resize                       GDExtensionPtrBuiltInMethod
	method_clear                        GDExtensionPtrBuiltInMethod
	method_has                          GDExtensionPtrBuiltInMethod
	method_reverse                      GDExtensionPtrBuiltInMethod
	method_slice                        GDExtensionPtrBuiltInMethod
	method_to_byte_array                GDExtensionPtrBuiltInMethod
	method_sort                         GDExtensionPtrBuiltInMethod
	method_bsearch                      GDExtensionPtrBuiltInMethod
	method_duplicate                    GDExtensionPtrBuiltInMethod
	method_find                         GDExtensionPtrBuiltInMethod
	method_rfind                        GDExtensionPtrBuiltInMethod
	method_count                        GDExtensionPtrBuiltInMethod
	indexed_setter                      GDExtensionPtrIndexedSetter
	indexed_getter                      GDExtensionPtrIndexedGetter
	operator_equal_Variant              GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant          GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary              GDExtensionPtrOperatorEvaluator
	operator_in_Array                   GDExtensionPtrOperatorEvaluator
	operator_equal_PackedInt64Array     GDExtensionPtrOperatorEvaluator
	operator_not_equal_PackedInt64Array GDExtensionPtrOperatorEvaluator
	operator_add_PackedInt64Array       GDExtensionPtrOperatorEvaluator
}

var globalPackedInt64ArrayMethodBindings packedInt64ArrayMethodBindings

func packedInt64ArrayInitConstructorBindings() {
	log.Debug("packedInt64ArrayInitConstructorBindings called")

	log.Debug("globalPackedInt64ArrayMethodBindings.constructor_0")
	globalPackedInt64ArrayMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, 0)
	log.Debug("globalPackedInt64ArrayMethodBindings.constructor_1")
	globalPackedInt64ArrayMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, 1)
	log.Debug("globalPackedInt64ArrayMethodBindings.constructor_2")
	globalPackedInt64ArrayMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, 2)
	log.Debug("globalPackedInt64ArrayMethodBindings.destructor")
	globalPackedInt64ArrayMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY)
}

func packedInt64ArrayInitMethodBindings() {
	log.Debug("packedInt64ArrayInitMethodBindings called")

	missingMethods := make([]string, 0, 21)

	methodName0 := NewStringNameWithLatin1Chars("size")
	defer methodName0.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_size")
	globalPackedInt64ArrayMethodBindings.method_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalPackedInt64ArrayMethodBindings.method_size == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_size")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName1.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_is_empty")
	globalPackedInt64ArrayMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalPackedInt64ArrayMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_is_empty")
	}
	methodName2 := NewStringNameWithLatin1Chars("set")
	defer methodName2.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_set")
	globalPackedInt64ArrayMethodBindings.method_set = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName2.AsGDExtensionStringNamePtr(), 3638975848)
	if globalPackedInt64ArrayMethodBindings.method_set == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_set")
	}
	methodName3 := NewStringNameWithLatin1Chars("push_back")
	defer methodName3.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_push_back")
	globalPackedInt64ArrayMethodBindings.method_push_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName3.AsGDExtensionStringNamePtr(), 694024632)
	if globalPackedInt64ArrayMethodBindings.method_push_back == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_push_back")
	}
	methodName4 := NewStringNameWithLatin1Chars("append")
	defer methodName4.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_append")
	globalPackedInt64ArrayMethodBindings.method_append = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName4.AsGDExtensionStringNamePtr(), 694024632)
	if globalPackedInt64ArrayMethodBindings.method_append == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_append")
	}
	methodName5 := NewStringNameWithLatin1Chars("append_array")
	defer methodName5.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_append_array")
	globalPackedInt64ArrayMethodBindings.method_append_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName5.AsGDExtensionStringNamePtr(), 2090311302)
	if globalPackedInt64ArrayMethodBindings.method_append_array == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_append_array")
	}
	methodName6 := NewStringNameWithLatin1Chars("remove_at")
	defer methodName6.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_remove_at")
	globalPackedInt64ArrayMethodBindings.method_remove_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName6.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedInt64ArrayMethodBindings.method_remove_at == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_remove_at")
	}
	methodName7 := NewStringNameWithLatin1Chars("insert")
	defer methodName7.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_insert")
	globalPackedInt64ArrayMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName7.AsGDExtensionStringNamePtr(), 1487112728)
	if globalPackedInt64ArrayMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_insert")
	}
	methodName8 := NewStringNameWithLatin1Chars("fill")
	defer methodName8.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_fill")
	globalPackedInt64ArrayMethodBindings.method_fill = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName8.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedInt64ArrayMethodBindings.method_fill == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_fill")
	}
	methodName9 := NewStringNameWithLatin1Chars("resize")
	defer methodName9.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_resize")
	globalPackedInt64ArrayMethodBindings.method_resize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName9.AsGDExtensionStringNamePtr(), 848867239)
	if globalPackedInt64ArrayMethodBindings.method_resize == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_resize")
	}
	methodName10 := NewStringNameWithLatin1Chars("clear")
	defer methodName10.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_clear")
	globalPackedInt64ArrayMethodBindings.method_clear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName10.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedInt64ArrayMethodBindings.method_clear == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_clear")
	}
	methodName11 := NewStringNameWithLatin1Chars("has")
	defer methodName11.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_has")
	globalPackedInt64ArrayMethodBindings.method_has = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName11.AsGDExtensionStringNamePtr(), 931488181)
	if globalPackedInt64ArrayMethodBindings.method_has == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_has")
	}
	methodName12 := NewStringNameWithLatin1Chars("reverse")
	defer methodName12.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_reverse")
	globalPackedInt64ArrayMethodBindings.method_reverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName12.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedInt64ArrayMethodBindings.method_reverse == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_reverse")
	}
	methodName13 := NewStringNameWithLatin1Chars("slice")
	defer methodName13.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_slice")
	globalPackedInt64ArrayMethodBindings.method_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName13.AsGDExtensionStringNamePtr(), 1726550804)
	if globalPackedInt64ArrayMethodBindings.method_slice == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_slice")
	}
	methodName14 := NewStringNameWithLatin1Chars("to_byte_array")
	defer methodName14.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_to_byte_array")
	globalPackedInt64ArrayMethodBindings.method_to_byte_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName14.AsGDExtensionStringNamePtr(), 247621236)
	if globalPackedInt64ArrayMethodBindings.method_to_byte_array == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_to_byte_array")
	}
	methodName15 := NewStringNameWithLatin1Chars("sort")
	defer methodName15.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_sort")
	globalPackedInt64ArrayMethodBindings.method_sort = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName15.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedInt64ArrayMethodBindings.method_sort == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_sort")
	}
	methodName16 := NewStringNameWithLatin1Chars("bsearch")
	defer methodName16.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_bsearch")
	globalPackedInt64ArrayMethodBindings.method_bsearch = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName16.AsGDExtensionStringNamePtr(), 3380005890)
	if globalPackedInt64ArrayMethodBindings.method_bsearch == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_bsearch")
	}
	methodName17 := NewStringNameWithLatin1Chars("duplicate")
	defer methodName17.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_duplicate")
	globalPackedInt64ArrayMethodBindings.method_duplicate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName17.AsGDExtensionStringNamePtr(), 2376370016)
	if globalPackedInt64ArrayMethodBindings.method_duplicate == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_duplicate")
	}
	methodName18 := NewStringNameWithLatin1Chars("find")
	defer methodName18.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_find")
	globalPackedInt64ArrayMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName18.AsGDExtensionStringNamePtr(), 2984303840)
	if globalPackedInt64ArrayMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_find")
	}
	methodName19 := NewStringNameWithLatin1Chars("rfind")
	defer methodName19.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_rfind")
	globalPackedInt64ArrayMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName19.AsGDExtensionStringNamePtr(), 2984303840)
	if globalPackedInt64ArrayMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_rfind")
	}
	methodName20 := NewStringNameWithLatin1Chars("count")
	defer methodName20.Destroy()
	log.Debug("globalPackedInt64ArrayMethodBindings.method_count")
	globalPackedInt64ArrayMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, methodName20.AsGDExtensionStringNamePtr(), 4103005248)
	if globalPackedInt64ArrayMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalPackedInt64ArrayMethodBindings.method_count")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalPackedInt64ArrayMethodBindings.indexed_setter")
	globalPackedInt64ArrayMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY)
	log.Debug("globalPackedInt64ArrayMethodBindings.indexed_getter")
	globalPackedInt64ArrayMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY)
	log.Debug("globalPackedInt64ArrayMethodBindings.operator: equal Variant")
	globalPackedInt64ArrayMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedInt64ArrayMethodBindings.operator: not_equal Variant")
	globalPackedInt64ArrayMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedInt64ArrayMethodBindings.operator: in Dictionary")
	globalPackedInt64ArrayMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalPackedInt64ArrayMethodBindings.operator: in Array")
	globalPackedInt64ArrayMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalPackedInt64ArrayMethodBindings.operator: equal PackedInt64Array")
	globalPackedInt64ArrayMethodBindings.operator_equal_PackedInt64Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY)
	log.Debug("globalPackedInt64ArrayMethodBindings.operator: not_equal PackedInt64Array")
	globalPackedInt64ArrayMethodBindings.operator_not_equal_PackedInt64Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY)
	log.Debug("globalPackedInt64ArrayMethodBindings.operator: add PackedInt64Array")
	globalPackedInt64ArrayMethodBindings.operator_add_PackedInt64Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY)
	log.Debug("packedInt64ArrayInitBindings end")
}

func (c *PackedInt64Array) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedInt64Array, index: 0
func NewPackedInt64Array() PackedInt64Array {
	cx := PackedInt64Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalPackedInt64ArrayMethodBindings.constructor_0, ptr)

	return cx
}

// NewPackedInt64Array, index: 1
func NewPackedInt64ArrayWithPackedInt64Array(from PackedInt64Array) PackedInt64Array {
	cx := PackedInt64Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedInt64Array
	// PackedInt64ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedInt64ArrayMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewPackedInt64Array, index: 2
func NewPackedInt64ArrayWithArray(from Array) PackedInt64Array {
	cx := PackedInt64Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Array
	// ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedInt64ArrayMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *PackedInt64Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedInt64ArrayMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt64Array) Size() int32 {
	mb := globalPackedInt64ArrayMethodBindings.method_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) IsEmpty() bool {
	mb := globalPackedInt64ArrayMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) Set(index int32, value int32) {
	mb := globalPackedInt64ArrayMethodBindings.method_set

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) PushBack(value int32) bool {
	mb := globalPackedInt64ArrayMethodBindings.method_push_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) Append(value int32) bool {
	mb := globalPackedInt64ArrayMethodBindings.method_append

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) AppendArray(array PackedInt64Array) {
	mb := globalPackedInt64ArrayMethodBindings.method_append_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) RemoveAt(index int32) {
	mb := globalPackedInt64ArrayMethodBindings.method_remove_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt64Array) Insert(at_index int32, value int32) int32 {
	mb := globalPackedInt64ArrayMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(at_index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) Fill(value int32) {
	mb := globalPackedInt64ArrayMethodBindings.method_fill

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt64Array) Resize(new_size int32) int32 {
	mb := globalPackedInt64ArrayMethodBindings.method_resize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(new_size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) Clear() {
	mb := globalPackedInt64ArrayMethodBindings.method_clear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) Has(value int32) bool {
	mb := globalPackedInt64ArrayMethodBindings.method_has

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) Reverse() {
	mb := globalPackedInt64ArrayMethodBindings.method_reverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt64Array) -> PackedInt64Array
 */
func (cx *PackedInt64Array) Slice(begin int32, end int32) PackedInt64Array {
	mb := globalPackedInt64ArrayMethodBindings.method_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(begin)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(end)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedInt64Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedInt64Array) ToByteArray() PackedByteArray {
	mb := globalPackedInt64ArrayMethodBindings.method_to_byte_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) Sort() {
	mb := globalPackedInt64ArrayMethodBindings.method_sort

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt64Array) Bsearch(value int32, before bool) int32 {
	mb := globalPackedInt64ArrayMethodBindings.method_bsearch

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(before)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt64Array) -> PackedInt64Array
 */
func (cx *PackedInt64Array) Duplicate() PackedInt64Array {
	mb := globalPackedInt64ArrayMethodBindings.method_duplicate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedInt64Array](mb, bx, nil)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt64Array) Find(value int32, from int32) int32 {
	mb := globalPackedInt64ArrayMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt64Array) Rfind(value int32, from int32) int32 {
	mb := globalPackedInt64ArrayMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedInt64Array) Count(value int32) int32 {
	mb := globalPackedInt64ArrayMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

func (cx *PackedInt64Array) GetIndexed(i int64) int32 {

	var ret int32

	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedInt64ArrayMethodBindings.indexed_getter,
		(GDExtensionConstTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(unsafe.Pointer(&ret)),
	)

	return ret
}

func (cx *PackedInt64Array) SetIndexed(i int64, value int32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedInt64ArrayMethodBindings.indexed_setter,
		(GDExtensionTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(unsafe.Pointer(&value)),
	)
}

// members

// Equal_Variant operator
func (cx *PackedInt64Array) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedInt64Array) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// In_Dictionary operator
func (cx *PackedInt64Array) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedInt64Array) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedInt64Array operator
func (cx *PackedInt64Array) Equal_PackedInt64Array(right PackedInt64Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_equal_PackedInt64Array, lt, rt)
}

// Not_equal_PackedInt64Array operator
func (cx *PackedInt64Array) Not_equal_PackedInt64Array(right PackedInt64Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_not_equal_PackedInt64Array, lt, rt)
}

// Add_PackedInt64Array operator
func (cx *PackedInt64Array) Add_PackedInt64Array(right PackedInt64Array) PackedInt64Array {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedInt64Array](globalPackedInt64ArrayMethodBindings.operator_add_PackedInt64Array, lt, rt)
}

/*
 * PackedFloat32Array
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: true
 */
type PackedFloat32Array struct {
	opaque [16]uint8
}

type packedFloat32ArrayMethodBindings struct {
	constructor_0                         GDExtensionPtrConstructor
	constructor_1                         GDExtensionPtrConstructor
	constructor_2                         GDExtensionPtrConstructor
	destructor                            GDExtensionPtrDestructor
	method_size                           GDExtensionPtrBuiltInMethod
	method_is_empty                       GDExtensionPtrBuiltInMethod
	method_set                            GDExtensionPtrBuiltInMethod
	method_push_back                      GDExtensionPtrBuiltInMethod
	method_append                         GDExtensionPtrBuiltInMethod
	method_append_array                   GDExtensionPtrBuiltInMethod
	method_remove_at                      GDExtensionPtrBuiltInMethod
	method_insert                         GDExtensionPtrBuiltInMethod
	method_fill                           GDExtensionPtrBuiltInMethod
	method_resize                         GDExtensionPtrBuiltInMethod
	method_clear                          GDExtensionPtrBuiltInMethod
	method_has                            GDExtensionPtrBuiltInMethod
	method_reverse                        GDExtensionPtrBuiltInMethod
	method_slice                          GDExtensionPtrBuiltInMethod
	method_to_byte_array                  GDExtensionPtrBuiltInMethod
	method_sort                           GDExtensionPtrBuiltInMethod
	method_bsearch                        GDExtensionPtrBuiltInMethod
	method_duplicate                      GDExtensionPtrBuiltInMethod
	method_find                           GDExtensionPtrBuiltInMethod
	method_rfind                          GDExtensionPtrBuiltInMethod
	method_count                          GDExtensionPtrBuiltInMethod
	indexed_setter                        GDExtensionPtrIndexedSetter
	indexed_getter                        GDExtensionPtrIndexedGetter
	operator_equal_Variant                GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant            GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary                GDExtensionPtrOperatorEvaluator
	operator_in_Array                     GDExtensionPtrOperatorEvaluator
	operator_equal_PackedFloat32Array     GDExtensionPtrOperatorEvaluator
	operator_not_equal_PackedFloat32Array GDExtensionPtrOperatorEvaluator
	operator_add_PackedFloat32Array       GDExtensionPtrOperatorEvaluator
}

var globalPackedFloat32ArrayMethodBindings packedFloat32ArrayMethodBindings

func packedFloat32ArrayInitConstructorBindings() {
	log.Debug("packedFloat32ArrayInitConstructorBindings called")

	log.Debug("globalPackedFloat32ArrayMethodBindings.constructor_0")
	globalPackedFloat32ArrayMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, 0)
	log.Debug("globalPackedFloat32ArrayMethodBindings.constructor_1")
	globalPackedFloat32ArrayMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, 1)
	log.Debug("globalPackedFloat32ArrayMethodBindings.constructor_2")
	globalPackedFloat32ArrayMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, 2)
	log.Debug("globalPackedFloat32ArrayMethodBindings.destructor")
	globalPackedFloat32ArrayMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
}

func packedFloat32ArrayInitMethodBindings() {
	log.Debug("packedFloat32ArrayInitMethodBindings called")

	missingMethods := make([]string, 0, 21)

	methodName0 := NewStringNameWithLatin1Chars("size")
	defer methodName0.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_size")
	globalPackedFloat32ArrayMethodBindings.method_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalPackedFloat32ArrayMethodBindings.method_size == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_size")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName1.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_is_empty")
	globalPackedFloat32ArrayMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalPackedFloat32ArrayMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_is_empty")
	}
	methodName2 := NewStringNameWithLatin1Chars("set")
	defer methodName2.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_set")
	globalPackedFloat32ArrayMethodBindings.method_set = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName2.AsGDExtensionStringNamePtr(), 1113000516)
	if globalPackedFloat32ArrayMethodBindings.method_set == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_set")
	}
	methodName3 := NewStringNameWithLatin1Chars("push_back")
	defer methodName3.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_push_back")
	globalPackedFloat32ArrayMethodBindings.method_push_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName3.AsGDExtensionStringNamePtr(), 4094791666)
	if globalPackedFloat32ArrayMethodBindings.method_push_back == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_push_back")
	}
	methodName4 := NewStringNameWithLatin1Chars("append")
	defer methodName4.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_append")
	globalPackedFloat32ArrayMethodBindings.method_append = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName4.AsGDExtensionStringNamePtr(), 4094791666)
	if globalPackedFloat32ArrayMethodBindings.method_append == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_append")
	}
	methodName5 := NewStringNameWithLatin1Chars("append_array")
	defer methodName5.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_append_array")
	globalPackedFloat32ArrayMethodBindings.method_append_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName5.AsGDExtensionStringNamePtr(), 2981316639)
	if globalPackedFloat32ArrayMethodBindings.method_append_array == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_append_array")
	}
	methodName6 := NewStringNameWithLatin1Chars("remove_at")
	defer methodName6.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_remove_at")
	globalPackedFloat32ArrayMethodBindings.method_remove_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName6.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedFloat32ArrayMethodBindings.method_remove_at == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_remove_at")
	}
	methodName7 := NewStringNameWithLatin1Chars("insert")
	defer methodName7.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_insert")
	globalPackedFloat32ArrayMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName7.AsGDExtensionStringNamePtr(), 1379903876)
	if globalPackedFloat32ArrayMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_insert")
	}
	methodName8 := NewStringNameWithLatin1Chars("fill")
	defer methodName8.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_fill")
	globalPackedFloat32ArrayMethodBindings.method_fill = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName8.AsGDExtensionStringNamePtr(), 833936903)
	if globalPackedFloat32ArrayMethodBindings.method_fill == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_fill")
	}
	methodName9 := NewStringNameWithLatin1Chars("resize")
	defer methodName9.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_resize")
	globalPackedFloat32ArrayMethodBindings.method_resize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName9.AsGDExtensionStringNamePtr(), 848867239)
	if globalPackedFloat32ArrayMethodBindings.method_resize == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_resize")
	}
	methodName10 := NewStringNameWithLatin1Chars("clear")
	defer methodName10.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_clear")
	globalPackedFloat32ArrayMethodBindings.method_clear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName10.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedFloat32ArrayMethodBindings.method_clear == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_clear")
	}
	methodName11 := NewStringNameWithLatin1Chars("has")
	defer methodName11.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_has")
	globalPackedFloat32ArrayMethodBindings.method_has = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName11.AsGDExtensionStringNamePtr(), 1296369134)
	if globalPackedFloat32ArrayMethodBindings.method_has == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_has")
	}
	methodName12 := NewStringNameWithLatin1Chars("reverse")
	defer methodName12.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_reverse")
	globalPackedFloat32ArrayMethodBindings.method_reverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName12.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedFloat32ArrayMethodBindings.method_reverse == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_reverse")
	}
	methodName13 := NewStringNameWithLatin1Chars("slice")
	defer methodName13.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_slice")
	globalPackedFloat32ArrayMethodBindings.method_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName13.AsGDExtensionStringNamePtr(), 1418229160)
	if globalPackedFloat32ArrayMethodBindings.method_slice == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_slice")
	}
	methodName14 := NewStringNameWithLatin1Chars("to_byte_array")
	defer methodName14.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_to_byte_array")
	globalPackedFloat32ArrayMethodBindings.method_to_byte_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName14.AsGDExtensionStringNamePtr(), 247621236)
	if globalPackedFloat32ArrayMethodBindings.method_to_byte_array == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_to_byte_array")
	}
	methodName15 := NewStringNameWithLatin1Chars("sort")
	defer methodName15.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_sort")
	globalPackedFloat32ArrayMethodBindings.method_sort = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName15.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedFloat32ArrayMethodBindings.method_sort == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_sort")
	}
	methodName16 := NewStringNameWithLatin1Chars("bsearch")
	defer methodName16.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_bsearch")
	globalPackedFloat32ArrayMethodBindings.method_bsearch = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName16.AsGDExtensionStringNamePtr(), 1188816338)
	if globalPackedFloat32ArrayMethodBindings.method_bsearch == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_bsearch")
	}
	methodName17 := NewStringNameWithLatin1Chars("duplicate")
	defer methodName17.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_duplicate")
	globalPackedFloat32ArrayMethodBindings.method_duplicate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName17.AsGDExtensionStringNamePtr(), 831114784)
	if globalPackedFloat32ArrayMethodBindings.method_duplicate == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_duplicate")
	}
	methodName18 := NewStringNameWithLatin1Chars("find")
	defer methodName18.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_find")
	globalPackedFloat32ArrayMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName18.AsGDExtensionStringNamePtr(), 1343150241)
	if globalPackedFloat32ArrayMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_find")
	}
	methodName19 := NewStringNameWithLatin1Chars("rfind")
	defer methodName19.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_rfind")
	globalPackedFloat32ArrayMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName19.AsGDExtensionStringNamePtr(), 1343150241)
	if globalPackedFloat32ArrayMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_rfind")
	}
	methodName20 := NewStringNameWithLatin1Chars("count")
	defer methodName20.Destroy()
	log.Debug("globalPackedFloat32ArrayMethodBindings.method_count")
	globalPackedFloat32ArrayMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, methodName20.AsGDExtensionStringNamePtr(), 2859915090)
	if globalPackedFloat32ArrayMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalPackedFloat32ArrayMethodBindings.method_count")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalPackedFloat32ArrayMethodBindings.indexed_setter")
	globalPackedFloat32ArrayMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
	log.Debug("globalPackedFloat32ArrayMethodBindings.indexed_getter")
	globalPackedFloat32ArrayMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
	log.Debug("globalPackedFloat32ArrayMethodBindings.operator: equal Variant")
	globalPackedFloat32ArrayMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedFloat32ArrayMethodBindings.operator: not_equal Variant")
	globalPackedFloat32ArrayMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedFloat32ArrayMethodBindings.operator: in Dictionary")
	globalPackedFloat32ArrayMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalPackedFloat32ArrayMethodBindings.operator: in Array")
	globalPackedFloat32ArrayMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalPackedFloat32ArrayMethodBindings.operator: equal PackedFloat32Array")
	globalPackedFloat32ArrayMethodBindings.operator_equal_PackedFloat32Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
	log.Debug("globalPackedFloat32ArrayMethodBindings.operator: not_equal PackedFloat32Array")
	globalPackedFloat32ArrayMethodBindings.operator_not_equal_PackedFloat32Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
	log.Debug("globalPackedFloat32ArrayMethodBindings.operator: add PackedFloat32Array")
	globalPackedFloat32ArrayMethodBindings.operator_add_PackedFloat32Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
	log.Debug("packedFloat32ArrayInitBindings end")
}

func (c *PackedFloat32Array) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedFloat32Array, index: 0
func NewPackedFloat32Array() PackedFloat32Array {
	cx := PackedFloat32Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalPackedFloat32ArrayMethodBindings.constructor_0, ptr)

	return cx
}

// NewPackedFloat32Array, index: 1
func NewPackedFloat32ArrayWithPackedFloat32Array(from PackedFloat32Array) PackedFloat32Array {
	cx := PackedFloat32Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedFloat32Array
	// PackedFloat32ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedFloat32ArrayMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewPackedFloat32Array, index: 2
func NewPackedFloat32ArrayWithArray(from Array) PackedFloat32Array {
	cx := PackedFloat32Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Array
	// ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedFloat32ArrayMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *PackedFloat32Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedFloat32ArrayMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat32Array) Size() int32 {
	mb := globalPackedFloat32ArrayMethodBindings.method_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) IsEmpty() bool {
	mb := globalPackedFloat32ArrayMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) Set(index int32, value float32) {
	mb := globalPackedFloat32ArrayMethodBindings.method_set

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) PushBack(value float32) bool {
	mb := globalPackedFloat32ArrayMethodBindings.method_push_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) Append(value float32) bool {
	mb := globalPackedFloat32ArrayMethodBindings.method_append

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) AppendArray(array PackedFloat32Array) {
	mb := globalPackedFloat32ArrayMethodBindings.method_append_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) RemoveAt(index int32) {
	mb := globalPackedFloat32ArrayMethodBindings.method_remove_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat32Array) Insert(at_index int32, value float32) int32 {
	mb := globalPackedFloat32ArrayMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(at_index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) Fill(value float32) {
	mb := globalPackedFloat32ArrayMethodBindings.method_fill

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat32Array) Resize(new_size int32) int32 {
	mb := globalPackedFloat32ArrayMethodBindings.method_resize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(new_size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) Clear() {
	mb := globalPackedFloat32ArrayMethodBindings.method_clear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) Has(value float32) bool {
	mb := globalPackedFloat32ArrayMethodBindings.method_has

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) Reverse() {
	mb := globalPackedFloat32ArrayMethodBindings.method_reverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat32Array) -> PackedFloat32Array
 */
func (cx *PackedFloat32Array) Slice(begin int32, end int32) PackedFloat32Array {
	mb := globalPackedFloat32ArrayMethodBindings.method_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(begin)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(end)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedFloat32Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedFloat32Array) ToByteArray() PackedByteArray {
	mb := globalPackedFloat32ArrayMethodBindings.method_to_byte_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) Sort() {
	mb := globalPackedFloat32ArrayMethodBindings.method_sort

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat32Array) Bsearch(value float32, before bool) int32 {
	mb := globalPackedFloat32ArrayMethodBindings.method_bsearch

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(before)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat32Array) -> PackedFloat32Array
 */
func (cx *PackedFloat32Array) Duplicate() PackedFloat32Array {
	mb := globalPackedFloat32ArrayMethodBindings.method_duplicate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedFloat32Array](mb, bx, nil)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat32Array) Find(value float32, from int32) int32 {
	mb := globalPackedFloat32ArrayMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat32Array) Rfind(value float32, from int32) int32 {
	mb := globalPackedFloat32ArrayMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat32Array) Count(value float32) int32 {
	mb := globalPackedFloat32ArrayMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

func (cx *PackedFloat32Array) GetIndexed(i int64) float32 {

	var ret float32

	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedFloat32ArrayMethodBindings.indexed_getter,
		(GDExtensionConstTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(unsafe.Pointer(&ret)),
	)

	return ret
}

func (cx *PackedFloat32Array) SetIndexed(i int64, value float32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedFloat32ArrayMethodBindings.indexed_setter,
		(GDExtensionTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(unsafe.Pointer(&value)),
	)
}

// members

// Equal_Variant operator
func (cx *PackedFloat32Array) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedFloat32Array) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// In_Dictionary operator
func (cx *PackedFloat32Array) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedFloat32Array) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedFloat32Array operator
func (cx *PackedFloat32Array) Equal_PackedFloat32Array(right PackedFloat32Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_equal_PackedFloat32Array, lt, rt)
}

// Not_equal_PackedFloat32Array operator
func (cx *PackedFloat32Array) Not_equal_PackedFloat32Array(right PackedFloat32Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_not_equal_PackedFloat32Array, lt, rt)
}

// Add_PackedFloat32Array operator
func (cx *PackedFloat32Array) Add_PackedFloat32Array(right PackedFloat32Array) PackedFloat32Array {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedFloat32Array](globalPackedFloat32ArrayMethodBindings.operator_add_PackedFloat32Array, lt, rt)
}

/*
 * PackedFloat64Array
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: true
 */
type PackedFloat64Array struct {
	opaque [16]uint8
}

type packedFloat64ArrayMethodBindings struct {
	constructor_0                         GDExtensionPtrConstructor
	constructor_1                         GDExtensionPtrConstructor
	constructor_2                         GDExtensionPtrConstructor
	destructor                            GDExtensionPtrDestructor
	method_size                           GDExtensionPtrBuiltInMethod
	method_is_empty                       GDExtensionPtrBuiltInMethod
	method_set                            GDExtensionPtrBuiltInMethod
	method_push_back                      GDExtensionPtrBuiltInMethod
	method_append                         GDExtensionPtrBuiltInMethod
	method_append_array                   GDExtensionPtrBuiltInMethod
	method_remove_at                      GDExtensionPtrBuiltInMethod
	method_insert                         GDExtensionPtrBuiltInMethod
	method_fill                           GDExtensionPtrBuiltInMethod
	method_resize                         GDExtensionPtrBuiltInMethod
	method_clear                          GDExtensionPtrBuiltInMethod
	method_has                            GDExtensionPtrBuiltInMethod
	method_reverse                        GDExtensionPtrBuiltInMethod
	method_slice                          GDExtensionPtrBuiltInMethod
	method_to_byte_array                  GDExtensionPtrBuiltInMethod
	method_sort                           GDExtensionPtrBuiltInMethod
	method_bsearch                        GDExtensionPtrBuiltInMethod
	method_duplicate                      GDExtensionPtrBuiltInMethod
	method_find                           GDExtensionPtrBuiltInMethod
	method_rfind                          GDExtensionPtrBuiltInMethod
	method_count                          GDExtensionPtrBuiltInMethod
	indexed_setter                        GDExtensionPtrIndexedSetter
	indexed_getter                        GDExtensionPtrIndexedGetter
	operator_equal_Variant                GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant            GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary                GDExtensionPtrOperatorEvaluator
	operator_in_Array                     GDExtensionPtrOperatorEvaluator
	operator_equal_PackedFloat64Array     GDExtensionPtrOperatorEvaluator
	operator_not_equal_PackedFloat64Array GDExtensionPtrOperatorEvaluator
	operator_add_PackedFloat64Array       GDExtensionPtrOperatorEvaluator
}

var globalPackedFloat64ArrayMethodBindings packedFloat64ArrayMethodBindings

func packedFloat64ArrayInitConstructorBindings() {
	log.Debug("packedFloat64ArrayInitConstructorBindings called")

	log.Debug("globalPackedFloat64ArrayMethodBindings.constructor_0")
	globalPackedFloat64ArrayMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, 0)
	log.Debug("globalPackedFloat64ArrayMethodBindings.constructor_1")
	globalPackedFloat64ArrayMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, 1)
	log.Debug("globalPackedFloat64ArrayMethodBindings.constructor_2")
	globalPackedFloat64ArrayMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, 2)
	log.Debug("globalPackedFloat64ArrayMethodBindings.destructor")
	globalPackedFloat64ArrayMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
}

func packedFloat64ArrayInitMethodBindings() {
	log.Debug("packedFloat64ArrayInitMethodBindings called")

	missingMethods := make([]string, 0, 21)

	methodName0 := NewStringNameWithLatin1Chars("size")
	defer methodName0.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_size")
	globalPackedFloat64ArrayMethodBindings.method_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalPackedFloat64ArrayMethodBindings.method_size == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_size")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName1.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_is_empty")
	globalPackedFloat64ArrayMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalPackedFloat64ArrayMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_is_empty")
	}
	methodName2 := NewStringNameWithLatin1Chars("set")
	defer methodName2.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_set")
	globalPackedFloat64ArrayMethodBindings.method_set = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName2.AsGDExtensionStringNamePtr(), 1113000516)
	if globalPackedFloat64ArrayMethodBindings.method_set == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_set")
	}
	methodName3 := NewStringNameWithLatin1Chars("push_back")
	defer methodName3.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_push_back")
	globalPackedFloat64ArrayMethodBindings.method_push_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName3.AsGDExtensionStringNamePtr(), 4094791666)
	if globalPackedFloat64ArrayMethodBindings.method_push_back == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_push_back")
	}
	methodName4 := NewStringNameWithLatin1Chars("append")
	defer methodName4.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_append")
	globalPackedFloat64ArrayMethodBindings.method_append = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName4.AsGDExtensionStringNamePtr(), 4094791666)
	if globalPackedFloat64ArrayMethodBindings.method_append == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_append")
	}
	methodName5 := NewStringNameWithLatin1Chars("append_array")
	defer methodName5.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_append_array")
	globalPackedFloat64ArrayMethodBindings.method_append_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName5.AsGDExtensionStringNamePtr(), 792078629)
	if globalPackedFloat64ArrayMethodBindings.method_append_array == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_append_array")
	}
	methodName6 := NewStringNameWithLatin1Chars("remove_at")
	defer methodName6.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_remove_at")
	globalPackedFloat64ArrayMethodBindings.method_remove_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName6.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedFloat64ArrayMethodBindings.method_remove_at == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_remove_at")
	}
	methodName7 := NewStringNameWithLatin1Chars("insert")
	defer methodName7.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_insert")
	globalPackedFloat64ArrayMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName7.AsGDExtensionStringNamePtr(), 1379903876)
	if globalPackedFloat64ArrayMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_insert")
	}
	methodName8 := NewStringNameWithLatin1Chars("fill")
	defer methodName8.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_fill")
	globalPackedFloat64ArrayMethodBindings.method_fill = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName8.AsGDExtensionStringNamePtr(), 833936903)
	if globalPackedFloat64ArrayMethodBindings.method_fill == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_fill")
	}
	methodName9 := NewStringNameWithLatin1Chars("resize")
	defer methodName9.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_resize")
	globalPackedFloat64ArrayMethodBindings.method_resize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName9.AsGDExtensionStringNamePtr(), 848867239)
	if globalPackedFloat64ArrayMethodBindings.method_resize == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_resize")
	}
	methodName10 := NewStringNameWithLatin1Chars("clear")
	defer methodName10.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_clear")
	globalPackedFloat64ArrayMethodBindings.method_clear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName10.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedFloat64ArrayMethodBindings.method_clear == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_clear")
	}
	methodName11 := NewStringNameWithLatin1Chars("has")
	defer methodName11.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_has")
	globalPackedFloat64ArrayMethodBindings.method_has = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName11.AsGDExtensionStringNamePtr(), 1296369134)
	if globalPackedFloat64ArrayMethodBindings.method_has == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_has")
	}
	methodName12 := NewStringNameWithLatin1Chars("reverse")
	defer methodName12.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_reverse")
	globalPackedFloat64ArrayMethodBindings.method_reverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName12.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedFloat64ArrayMethodBindings.method_reverse == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_reverse")
	}
	methodName13 := NewStringNameWithLatin1Chars("slice")
	defer methodName13.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_slice")
	globalPackedFloat64ArrayMethodBindings.method_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName13.AsGDExtensionStringNamePtr(), 2192974324)
	if globalPackedFloat64ArrayMethodBindings.method_slice == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_slice")
	}
	methodName14 := NewStringNameWithLatin1Chars("to_byte_array")
	defer methodName14.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_to_byte_array")
	globalPackedFloat64ArrayMethodBindings.method_to_byte_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName14.AsGDExtensionStringNamePtr(), 247621236)
	if globalPackedFloat64ArrayMethodBindings.method_to_byte_array == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_to_byte_array")
	}
	methodName15 := NewStringNameWithLatin1Chars("sort")
	defer methodName15.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_sort")
	globalPackedFloat64ArrayMethodBindings.method_sort = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName15.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedFloat64ArrayMethodBindings.method_sort == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_sort")
	}
	methodName16 := NewStringNameWithLatin1Chars("bsearch")
	defer methodName16.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_bsearch")
	globalPackedFloat64ArrayMethodBindings.method_bsearch = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName16.AsGDExtensionStringNamePtr(), 1188816338)
	if globalPackedFloat64ArrayMethodBindings.method_bsearch == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_bsearch")
	}
	methodName17 := NewStringNameWithLatin1Chars("duplicate")
	defer methodName17.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_duplicate")
	globalPackedFloat64ArrayMethodBindings.method_duplicate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName17.AsGDExtensionStringNamePtr(), 949266573)
	if globalPackedFloat64ArrayMethodBindings.method_duplicate == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_duplicate")
	}
	methodName18 := NewStringNameWithLatin1Chars("find")
	defer methodName18.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_find")
	globalPackedFloat64ArrayMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName18.AsGDExtensionStringNamePtr(), 1343150241)
	if globalPackedFloat64ArrayMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_find")
	}
	methodName19 := NewStringNameWithLatin1Chars("rfind")
	defer methodName19.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_rfind")
	globalPackedFloat64ArrayMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName19.AsGDExtensionStringNamePtr(), 1343150241)
	if globalPackedFloat64ArrayMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_rfind")
	}
	methodName20 := NewStringNameWithLatin1Chars("count")
	defer methodName20.Destroy()
	log.Debug("globalPackedFloat64ArrayMethodBindings.method_count")
	globalPackedFloat64ArrayMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, methodName20.AsGDExtensionStringNamePtr(), 2859915090)
	if globalPackedFloat64ArrayMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalPackedFloat64ArrayMethodBindings.method_count")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalPackedFloat64ArrayMethodBindings.indexed_setter")
	globalPackedFloat64ArrayMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
	log.Debug("globalPackedFloat64ArrayMethodBindings.indexed_getter")
	globalPackedFloat64ArrayMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
	log.Debug("globalPackedFloat64ArrayMethodBindings.operator: equal Variant")
	globalPackedFloat64ArrayMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedFloat64ArrayMethodBindings.operator: not_equal Variant")
	globalPackedFloat64ArrayMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedFloat64ArrayMethodBindings.operator: in Dictionary")
	globalPackedFloat64ArrayMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalPackedFloat64ArrayMethodBindings.operator: in Array")
	globalPackedFloat64ArrayMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalPackedFloat64ArrayMethodBindings.operator: equal PackedFloat64Array")
	globalPackedFloat64ArrayMethodBindings.operator_equal_PackedFloat64Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
	log.Debug("globalPackedFloat64ArrayMethodBindings.operator: not_equal PackedFloat64Array")
	globalPackedFloat64ArrayMethodBindings.operator_not_equal_PackedFloat64Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
	log.Debug("globalPackedFloat64ArrayMethodBindings.operator: add PackedFloat64Array")
	globalPackedFloat64ArrayMethodBindings.operator_add_PackedFloat64Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
	log.Debug("packedFloat64ArrayInitBindings end")
}

func (c *PackedFloat64Array) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedFloat64Array, index: 0
func NewPackedFloat64Array() PackedFloat64Array {
	cx := PackedFloat64Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalPackedFloat64ArrayMethodBindings.constructor_0, ptr)

	return cx
}

// NewPackedFloat64Array, index: 1
func NewPackedFloat64ArrayWithPackedFloat64Array(from PackedFloat64Array) PackedFloat64Array {
	cx := PackedFloat64Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedFloat64Array
	// PackedFloat64ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedFloat64ArrayMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewPackedFloat64Array, index: 2
func NewPackedFloat64ArrayWithArray(from Array) PackedFloat64Array {
	cx := PackedFloat64Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Array
	// ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedFloat64ArrayMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *PackedFloat64Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedFloat64ArrayMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat64Array) Size() int32 {
	mb := globalPackedFloat64ArrayMethodBindings.method_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) IsEmpty() bool {
	mb := globalPackedFloat64ArrayMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) Set(index int32, value float32) {
	mb := globalPackedFloat64ArrayMethodBindings.method_set

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) PushBack(value float32) bool {
	mb := globalPackedFloat64ArrayMethodBindings.method_push_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) Append(value float32) bool {
	mb := globalPackedFloat64ArrayMethodBindings.method_append

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) AppendArray(array PackedFloat64Array) {
	mb := globalPackedFloat64ArrayMethodBindings.method_append_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) RemoveAt(index int32) {
	mb := globalPackedFloat64ArrayMethodBindings.method_remove_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat64Array) Insert(at_index int32, value float32) int32 {
	mb := globalPackedFloat64ArrayMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(at_index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Float32Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) Fill(value float32) {
	mb := globalPackedFloat64ArrayMethodBindings.method_fill

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat64Array) Resize(new_size int32) int32 {
	mb := globalPackedFloat64ArrayMethodBindings.method_resize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(new_size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) Clear() {
	mb := globalPackedFloat64ArrayMethodBindings.method_clear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) Has(value float32) bool {
	mb := globalPackedFloat64ArrayMethodBindings.method_has

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) Reverse() {
	mb := globalPackedFloat64ArrayMethodBindings.method_reverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *PackedFloat64Array) Slice(begin int32, end int32) PackedFloat64Array {
	mb := globalPackedFloat64ArrayMethodBindings.method_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(begin)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(end)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedFloat64Array) ToByteArray() PackedByteArray {
	mb := globalPackedFloat64ArrayMethodBindings.method_to_byte_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) Sort() {
	mb := globalPackedFloat64ArrayMethodBindings.method_sort

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat64Array) Bsearch(value float32, before bool) int32 {
	mb := globalPackedFloat64ArrayMethodBindings.method_bsearch

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(before)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *PackedFloat64Array) Duplicate() PackedFloat64Array {
	mb := globalPackedFloat64ArrayMethodBindings.method_duplicate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, nil)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat64Array) Find(value float32, from int32) int32 {
	mb := globalPackedFloat64ArrayMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat64Array) Rfind(value float32, from int32) int32 {
	mb := globalPackedFloat64ArrayMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedFloat64Array) Count(value float32) int32 {
	mb := globalPackedFloat64ArrayMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Float32Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

func (cx *PackedFloat64Array) GetIndexed(i int64) float32 {

	var ret float32

	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedFloat64ArrayMethodBindings.indexed_getter,
		(GDExtensionConstTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(unsafe.Pointer(&ret)),
	)

	return ret
}

func (cx *PackedFloat64Array) SetIndexed(i int64, value float32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedFloat64ArrayMethodBindings.indexed_setter,
		(GDExtensionTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(unsafe.Pointer(&value)),
	)
}

// members

// Equal_Variant operator
func (cx *PackedFloat64Array) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedFloat64Array) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// In_Dictionary operator
func (cx *PackedFloat64Array) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedFloat64Array) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedFloat64Array operator
func (cx *PackedFloat64Array) Equal_PackedFloat64Array(right PackedFloat64Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_equal_PackedFloat64Array, lt, rt)
}

// Not_equal_PackedFloat64Array operator
func (cx *PackedFloat64Array) Not_equal_PackedFloat64Array(right PackedFloat64Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_not_equal_PackedFloat64Array, lt, rt)
}

// Add_PackedFloat64Array operator
func (cx *PackedFloat64Array) Add_PackedFloat64Array(right PackedFloat64Array) PackedFloat64Array {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedFloat64Array](globalPackedFloat64ArrayMethodBindings.operator_add_PackedFloat64Array, lt, rt)
}

/*
 * PackedStringArray
 * indexingReturnType: String
 * isKeyed: false
 * hasDestructor: true
 */
type PackedStringArray struct {
	opaque [16]uint8
}

type packedStringArrayMethodBindings struct {
	constructor_0                        GDExtensionPtrConstructor
	constructor_1                        GDExtensionPtrConstructor
	constructor_2                        GDExtensionPtrConstructor
	destructor                           GDExtensionPtrDestructor
	method_size                          GDExtensionPtrBuiltInMethod
	method_is_empty                      GDExtensionPtrBuiltInMethod
	method_set                           GDExtensionPtrBuiltInMethod
	method_push_back                     GDExtensionPtrBuiltInMethod
	method_append                        GDExtensionPtrBuiltInMethod
	method_append_array                  GDExtensionPtrBuiltInMethod
	method_remove_at                     GDExtensionPtrBuiltInMethod
	method_insert                        GDExtensionPtrBuiltInMethod
	method_fill                          GDExtensionPtrBuiltInMethod
	method_resize                        GDExtensionPtrBuiltInMethod
	method_clear                         GDExtensionPtrBuiltInMethod
	method_has                           GDExtensionPtrBuiltInMethod
	method_reverse                       GDExtensionPtrBuiltInMethod
	method_slice                         GDExtensionPtrBuiltInMethod
	method_to_byte_array                 GDExtensionPtrBuiltInMethod
	method_sort                          GDExtensionPtrBuiltInMethod
	method_bsearch                       GDExtensionPtrBuiltInMethod
	method_duplicate                     GDExtensionPtrBuiltInMethod
	method_find                          GDExtensionPtrBuiltInMethod
	method_rfind                         GDExtensionPtrBuiltInMethod
	method_count                         GDExtensionPtrBuiltInMethod
	indexed_setter                       GDExtensionPtrIndexedSetter
	indexed_getter                       GDExtensionPtrIndexedGetter
	operator_equal_Variant               GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant           GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary               GDExtensionPtrOperatorEvaluator
	operator_in_Array                    GDExtensionPtrOperatorEvaluator
	operator_equal_PackedStringArray     GDExtensionPtrOperatorEvaluator
	operator_not_equal_PackedStringArray GDExtensionPtrOperatorEvaluator
	operator_add_PackedStringArray       GDExtensionPtrOperatorEvaluator
}

var globalPackedStringArrayMethodBindings packedStringArrayMethodBindings

func packedStringArrayInitConstructorBindings() {
	log.Debug("packedStringArrayInitConstructorBindings called")

	log.Debug("globalPackedStringArrayMethodBindings.constructor_0")
	globalPackedStringArrayMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, 0)
	log.Debug("globalPackedStringArrayMethodBindings.constructor_1")
	globalPackedStringArrayMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, 1)
	log.Debug("globalPackedStringArrayMethodBindings.constructor_2")
	globalPackedStringArrayMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, 2)
	log.Debug("globalPackedStringArrayMethodBindings.destructor")
	globalPackedStringArrayMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)
}

func packedStringArrayInitMethodBindings() {
	log.Debug("packedStringArrayInitMethodBindings called")

	missingMethods := make([]string, 0, 21)

	methodName0 := NewStringNameWithLatin1Chars("size")
	defer methodName0.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_size")
	globalPackedStringArrayMethodBindings.method_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalPackedStringArrayMethodBindings.method_size == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_size")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName1.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_is_empty")
	globalPackedStringArrayMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalPackedStringArrayMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_is_empty")
	}
	methodName2 := NewStringNameWithLatin1Chars("set")
	defer methodName2.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_set")
	globalPackedStringArrayMethodBindings.method_set = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName2.AsGDExtensionStringNamePtr(), 725585539)
	if globalPackedStringArrayMethodBindings.method_set == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_set")
	}
	methodName3 := NewStringNameWithLatin1Chars("push_back")
	defer methodName3.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_push_back")
	globalPackedStringArrayMethodBindings.method_push_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName3.AsGDExtensionStringNamePtr(), 816187996)
	if globalPackedStringArrayMethodBindings.method_push_back == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_push_back")
	}
	methodName4 := NewStringNameWithLatin1Chars("append")
	defer methodName4.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_append")
	globalPackedStringArrayMethodBindings.method_append = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName4.AsGDExtensionStringNamePtr(), 816187996)
	if globalPackedStringArrayMethodBindings.method_append == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_append")
	}
	methodName5 := NewStringNameWithLatin1Chars("append_array")
	defer methodName5.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_append_array")
	globalPackedStringArrayMethodBindings.method_append_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName5.AsGDExtensionStringNamePtr(), 1120103966)
	if globalPackedStringArrayMethodBindings.method_append_array == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_append_array")
	}
	methodName6 := NewStringNameWithLatin1Chars("remove_at")
	defer methodName6.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_remove_at")
	globalPackedStringArrayMethodBindings.method_remove_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName6.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedStringArrayMethodBindings.method_remove_at == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_remove_at")
	}
	methodName7 := NewStringNameWithLatin1Chars("insert")
	defer methodName7.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_insert")
	globalPackedStringArrayMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName7.AsGDExtensionStringNamePtr(), 2432393153)
	if globalPackedStringArrayMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_insert")
	}
	methodName8 := NewStringNameWithLatin1Chars("fill")
	defer methodName8.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_fill")
	globalPackedStringArrayMethodBindings.method_fill = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName8.AsGDExtensionStringNamePtr(), 3174917410)
	if globalPackedStringArrayMethodBindings.method_fill == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_fill")
	}
	methodName9 := NewStringNameWithLatin1Chars("resize")
	defer methodName9.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_resize")
	globalPackedStringArrayMethodBindings.method_resize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName9.AsGDExtensionStringNamePtr(), 848867239)
	if globalPackedStringArrayMethodBindings.method_resize == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_resize")
	}
	methodName10 := NewStringNameWithLatin1Chars("clear")
	defer methodName10.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_clear")
	globalPackedStringArrayMethodBindings.method_clear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName10.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedStringArrayMethodBindings.method_clear == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_clear")
	}
	methodName11 := NewStringNameWithLatin1Chars("has")
	defer methodName11.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_has")
	globalPackedStringArrayMethodBindings.method_has = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName11.AsGDExtensionStringNamePtr(), 2566493496)
	if globalPackedStringArrayMethodBindings.method_has == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_has")
	}
	methodName12 := NewStringNameWithLatin1Chars("reverse")
	defer methodName12.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_reverse")
	globalPackedStringArrayMethodBindings.method_reverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName12.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedStringArrayMethodBindings.method_reverse == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_reverse")
	}
	methodName13 := NewStringNameWithLatin1Chars("slice")
	defer methodName13.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_slice")
	globalPackedStringArrayMethodBindings.method_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName13.AsGDExtensionStringNamePtr(), 2094601407)
	if globalPackedStringArrayMethodBindings.method_slice == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_slice")
	}
	methodName14 := NewStringNameWithLatin1Chars("to_byte_array")
	defer methodName14.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_to_byte_array")
	globalPackedStringArrayMethodBindings.method_to_byte_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName14.AsGDExtensionStringNamePtr(), 247621236)
	if globalPackedStringArrayMethodBindings.method_to_byte_array == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_to_byte_array")
	}
	methodName15 := NewStringNameWithLatin1Chars("sort")
	defer methodName15.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_sort")
	globalPackedStringArrayMethodBindings.method_sort = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName15.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedStringArrayMethodBindings.method_sort == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_sort")
	}
	methodName16 := NewStringNameWithLatin1Chars("bsearch")
	defer methodName16.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_bsearch")
	globalPackedStringArrayMethodBindings.method_bsearch = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName16.AsGDExtensionStringNamePtr(), 328976671)
	if globalPackedStringArrayMethodBindings.method_bsearch == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_bsearch")
	}
	methodName17 := NewStringNameWithLatin1Chars("duplicate")
	defer methodName17.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_duplicate")
	globalPackedStringArrayMethodBindings.method_duplicate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName17.AsGDExtensionStringNamePtr(), 2991231410)
	if globalPackedStringArrayMethodBindings.method_duplicate == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_duplicate")
	}
	methodName18 := NewStringNameWithLatin1Chars("find")
	defer methodName18.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_find")
	globalPackedStringArrayMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName18.AsGDExtensionStringNamePtr(), 1760645412)
	if globalPackedStringArrayMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_find")
	}
	methodName19 := NewStringNameWithLatin1Chars("rfind")
	defer methodName19.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_rfind")
	globalPackedStringArrayMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName19.AsGDExtensionStringNamePtr(), 1760645412)
	if globalPackedStringArrayMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_rfind")
	}
	methodName20 := NewStringNameWithLatin1Chars("count")
	defer methodName20.Destroy()
	log.Debug("globalPackedStringArrayMethodBindings.method_count")
	globalPackedStringArrayMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, methodName20.AsGDExtensionStringNamePtr(), 2920860731)
	if globalPackedStringArrayMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalPackedStringArrayMethodBindings.method_count")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalPackedStringArrayMethodBindings.indexed_setter")
	globalPackedStringArrayMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)
	log.Debug("globalPackedStringArrayMethodBindings.indexed_getter")
	globalPackedStringArrayMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)
	log.Debug("globalPackedStringArrayMethodBindings.operator: equal Variant")
	globalPackedStringArrayMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedStringArrayMethodBindings.operator: not_equal Variant")
	globalPackedStringArrayMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedStringArrayMethodBindings.operator: in Dictionary")
	globalPackedStringArrayMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalPackedStringArrayMethodBindings.operator: in Array")
	globalPackedStringArrayMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalPackedStringArrayMethodBindings.operator: equal PackedStringArray")
	globalPackedStringArrayMethodBindings.operator_equal_PackedStringArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)
	log.Debug("globalPackedStringArrayMethodBindings.operator: not_equal PackedStringArray")
	globalPackedStringArrayMethodBindings.operator_not_equal_PackedStringArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)
	log.Debug("globalPackedStringArrayMethodBindings.operator: add PackedStringArray")
	globalPackedStringArrayMethodBindings.operator_add_PackedStringArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)
	log.Debug("packedStringArrayInitBindings end")
}

func (c *PackedStringArray) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedStringArray, index: 0
func NewPackedStringArray() PackedStringArray {
	cx := PackedStringArray{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalPackedStringArrayMethodBindings.constructor_0, ptr)

	return cx
}

// NewPackedStringArray, index: 1
func NewPackedStringArrayWithPackedStringArray(from PackedStringArray) PackedStringArray {
	cx := PackedStringArray{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedStringArray
	// PackedStringArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedStringArrayMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewPackedStringArray, index: 2
func NewPackedStringArrayWithArray(from Array) PackedStringArray {
	cx := PackedStringArray{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Array
	// ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedStringArrayMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *PackedStringArray) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedStringArrayMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedStringArray) Size() int32 {
	mb := globalPackedStringArrayMethodBindings.method_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) IsEmpty() bool {
	mb := globalPackedStringArrayMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) Set(index int32, value String) {
	mb := globalPackedStringArrayMethodBindings.method_set

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) PushBack(value String) bool {
	mb := globalPackedStringArrayMethodBindings.method_push_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) Append(value String) bool {
	mb := globalPackedStringArrayMethodBindings.method_append

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) AppendArray(array PackedStringArray) {
	mb := globalPackedStringArrayMethodBindings.method_append_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) RemoveAt(index int32) {
	mb := globalPackedStringArrayMethodBindings.method_remove_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedStringArray) Insert(at_index int32, value String) int32 {
	mb := globalPackedStringArrayMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(at_index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := StringEncoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) Fill(value String) {
	mb := globalPackedStringArrayMethodBindings.method_fill

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedStringArray) Resize(new_size int32) int32 {
	mb := globalPackedStringArrayMethodBindings.method_resize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(new_size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) Clear() {
	mb := globalPackedStringArrayMethodBindings.method_clear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) Has(value String) bool {
	mb := globalPackedStringArrayMethodBindings.method_has

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) Reverse() {
	mb := globalPackedStringArrayMethodBindings.method_reverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *PackedStringArray) Slice(begin int32, end int32) PackedStringArray {
	mb := globalPackedStringArrayMethodBindings.method_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(begin)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(end)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedStringArray) ToByteArray() PackedByteArray {
	mb := globalPackedStringArrayMethodBindings.method_to_byte_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) Sort() {
	mb := globalPackedStringArrayMethodBindings.method_sort

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedStringArray) Bsearch(value String, before bool) int32 {
	mb := globalPackedStringArrayMethodBindings.method_bsearch

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(before)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *PackedStringArray) Duplicate() PackedStringArray {
	mb := globalPackedStringArrayMethodBindings.method_duplicate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, nil)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedStringArray) Find(value String, from int32) int32 {
	mb := globalPackedStringArrayMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedStringArray) Rfind(value String, from int32) int32 {
	mb := globalPackedStringArrayMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedStringArray) Count(value String) int32 {
	mb := globalPackedStringArrayMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := StringEncoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

func (cx *PackedStringArray) GetIndexed(i int64) String {

	var ret String

	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedStringArrayMethodBindings.indexed_getter,
		(GDExtensionConstTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(unsafe.Pointer(&ret)),
	)

	return ret
}

func (cx *PackedStringArray) SetIndexed(i int64, value String) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedStringArrayMethodBindings.indexed_setter,
		(GDExtensionTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(unsafe.Pointer(&value)),
	)
}

// members

// Equal_Variant operator
func (cx *PackedStringArray) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedStringArray) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// In_Dictionary operator
func (cx *PackedStringArray) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedStringArray) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedStringArray operator
func (cx *PackedStringArray) Equal_PackedStringArray(right PackedStringArray) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_equal_PackedStringArray, lt, rt)
}

// Not_equal_PackedStringArray operator
func (cx *PackedStringArray) Not_equal_PackedStringArray(right PackedStringArray) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_not_equal_PackedStringArray, lt, rt)
}

// Add_PackedStringArray operator
func (cx *PackedStringArray) Add_PackedStringArray(right PackedStringArray) PackedStringArray {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedStringArray](globalPackedStringArrayMethodBindings.operator_add_PackedStringArray, lt, rt)
}

/*
 * PackedVector2Array
 * indexingReturnType: Vector2
 * isKeyed: false
 * hasDestructor: true
 */
type PackedVector2Array struct {
	opaque [16]uint8
}

type packedVector2ArrayMethodBindings struct {
	constructor_0                         GDExtensionPtrConstructor
	constructor_1                         GDExtensionPtrConstructor
	constructor_2                         GDExtensionPtrConstructor
	destructor                            GDExtensionPtrDestructor
	method_size                           GDExtensionPtrBuiltInMethod
	method_is_empty                       GDExtensionPtrBuiltInMethod
	method_set                            GDExtensionPtrBuiltInMethod
	method_push_back                      GDExtensionPtrBuiltInMethod
	method_append                         GDExtensionPtrBuiltInMethod
	method_append_array                   GDExtensionPtrBuiltInMethod
	method_remove_at                      GDExtensionPtrBuiltInMethod
	method_insert                         GDExtensionPtrBuiltInMethod
	method_fill                           GDExtensionPtrBuiltInMethod
	method_resize                         GDExtensionPtrBuiltInMethod
	method_clear                          GDExtensionPtrBuiltInMethod
	method_has                            GDExtensionPtrBuiltInMethod
	method_reverse                        GDExtensionPtrBuiltInMethod
	method_slice                          GDExtensionPtrBuiltInMethod
	method_to_byte_array                  GDExtensionPtrBuiltInMethod
	method_sort                           GDExtensionPtrBuiltInMethod
	method_bsearch                        GDExtensionPtrBuiltInMethod
	method_duplicate                      GDExtensionPtrBuiltInMethod
	method_find                           GDExtensionPtrBuiltInMethod
	method_rfind                          GDExtensionPtrBuiltInMethod
	method_count                          GDExtensionPtrBuiltInMethod
	indexed_setter                        GDExtensionPtrIndexedSetter
	indexed_getter                        GDExtensionPtrIndexedGetter
	operator_equal_Variant                GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant            GDExtensionPtrOperatorEvaluator
	operator_multiply_Transform2D         GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary                GDExtensionPtrOperatorEvaluator
	operator_in_Array                     GDExtensionPtrOperatorEvaluator
	operator_equal_PackedVector2Array     GDExtensionPtrOperatorEvaluator
	operator_not_equal_PackedVector2Array GDExtensionPtrOperatorEvaluator
	operator_add_PackedVector2Array       GDExtensionPtrOperatorEvaluator
}

var globalPackedVector2ArrayMethodBindings packedVector2ArrayMethodBindings

func packedVector2ArrayInitConstructorBindings() {
	log.Debug("packedVector2ArrayInitConstructorBindings called")

	log.Debug("globalPackedVector2ArrayMethodBindings.constructor_0")
	globalPackedVector2ArrayMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, 0)
	log.Debug("globalPackedVector2ArrayMethodBindings.constructor_1")
	globalPackedVector2ArrayMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, 1)
	log.Debug("globalPackedVector2ArrayMethodBindings.constructor_2")
	globalPackedVector2ArrayMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, 2)
	log.Debug("globalPackedVector2ArrayMethodBindings.destructor")
	globalPackedVector2ArrayMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
}

func packedVector2ArrayInitMethodBindings() {
	log.Debug("packedVector2ArrayInitMethodBindings called")

	missingMethods := make([]string, 0, 21)

	methodName0 := NewStringNameWithLatin1Chars("size")
	defer methodName0.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_size")
	globalPackedVector2ArrayMethodBindings.method_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalPackedVector2ArrayMethodBindings.method_size == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_size")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName1.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_is_empty")
	globalPackedVector2ArrayMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalPackedVector2ArrayMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_is_empty")
	}
	methodName2 := NewStringNameWithLatin1Chars("set")
	defer methodName2.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_set")
	globalPackedVector2ArrayMethodBindings.method_set = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName2.AsGDExtensionStringNamePtr(), 635767250)
	if globalPackedVector2ArrayMethodBindings.method_set == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_set")
	}
	methodName3 := NewStringNameWithLatin1Chars("push_back")
	defer methodName3.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_push_back")
	globalPackedVector2ArrayMethodBindings.method_push_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName3.AsGDExtensionStringNamePtr(), 4188891560)
	if globalPackedVector2ArrayMethodBindings.method_push_back == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_push_back")
	}
	methodName4 := NewStringNameWithLatin1Chars("append")
	defer methodName4.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_append")
	globalPackedVector2ArrayMethodBindings.method_append = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName4.AsGDExtensionStringNamePtr(), 4188891560)
	if globalPackedVector2ArrayMethodBindings.method_append == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_append")
	}
	methodName5 := NewStringNameWithLatin1Chars("append_array")
	defer methodName5.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_append_array")
	globalPackedVector2ArrayMethodBindings.method_append_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName5.AsGDExtensionStringNamePtr(), 3887534835)
	if globalPackedVector2ArrayMethodBindings.method_append_array == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_append_array")
	}
	methodName6 := NewStringNameWithLatin1Chars("remove_at")
	defer methodName6.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_remove_at")
	globalPackedVector2ArrayMethodBindings.method_remove_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName6.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedVector2ArrayMethodBindings.method_remove_at == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_remove_at")
	}
	methodName7 := NewStringNameWithLatin1Chars("insert")
	defer methodName7.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_insert")
	globalPackedVector2ArrayMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName7.AsGDExtensionStringNamePtr(), 2225629369)
	if globalPackedVector2ArrayMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_insert")
	}
	methodName8 := NewStringNameWithLatin1Chars("fill")
	defer methodName8.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_fill")
	globalPackedVector2ArrayMethodBindings.method_fill = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName8.AsGDExtensionStringNamePtr(), 3790411178)
	if globalPackedVector2ArrayMethodBindings.method_fill == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_fill")
	}
	methodName9 := NewStringNameWithLatin1Chars("resize")
	defer methodName9.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_resize")
	globalPackedVector2ArrayMethodBindings.method_resize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName9.AsGDExtensionStringNamePtr(), 848867239)
	if globalPackedVector2ArrayMethodBindings.method_resize == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_resize")
	}
	methodName10 := NewStringNameWithLatin1Chars("clear")
	defer methodName10.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_clear")
	globalPackedVector2ArrayMethodBindings.method_clear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName10.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedVector2ArrayMethodBindings.method_clear == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_clear")
	}
	methodName11 := NewStringNameWithLatin1Chars("has")
	defer methodName11.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_has")
	globalPackedVector2ArrayMethodBindings.method_has = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName11.AsGDExtensionStringNamePtr(), 3190634762)
	if globalPackedVector2ArrayMethodBindings.method_has == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_has")
	}
	methodName12 := NewStringNameWithLatin1Chars("reverse")
	defer methodName12.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_reverse")
	globalPackedVector2ArrayMethodBindings.method_reverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName12.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedVector2ArrayMethodBindings.method_reverse == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_reverse")
	}
	methodName13 := NewStringNameWithLatin1Chars("slice")
	defer methodName13.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_slice")
	globalPackedVector2ArrayMethodBindings.method_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName13.AsGDExtensionStringNamePtr(), 3864005350)
	if globalPackedVector2ArrayMethodBindings.method_slice == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_slice")
	}
	methodName14 := NewStringNameWithLatin1Chars("to_byte_array")
	defer methodName14.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_to_byte_array")
	globalPackedVector2ArrayMethodBindings.method_to_byte_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName14.AsGDExtensionStringNamePtr(), 247621236)
	if globalPackedVector2ArrayMethodBindings.method_to_byte_array == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_to_byte_array")
	}
	methodName15 := NewStringNameWithLatin1Chars("sort")
	defer methodName15.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_sort")
	globalPackedVector2ArrayMethodBindings.method_sort = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName15.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedVector2ArrayMethodBindings.method_sort == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_sort")
	}
	methodName16 := NewStringNameWithLatin1Chars("bsearch")
	defer methodName16.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_bsearch")
	globalPackedVector2ArrayMethodBindings.method_bsearch = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName16.AsGDExtensionStringNamePtr(), 3778035805)
	if globalPackedVector2ArrayMethodBindings.method_bsearch == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_bsearch")
	}
	methodName17 := NewStringNameWithLatin1Chars("duplicate")
	defer methodName17.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_duplicate")
	globalPackedVector2ArrayMethodBindings.method_duplicate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName17.AsGDExtensionStringNamePtr(), 3763646812)
	if globalPackedVector2ArrayMethodBindings.method_duplicate == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_duplicate")
	}
	methodName18 := NewStringNameWithLatin1Chars("find")
	defer methodName18.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_find")
	globalPackedVector2ArrayMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName18.AsGDExtensionStringNamePtr(), 1469606149)
	if globalPackedVector2ArrayMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_find")
	}
	methodName19 := NewStringNameWithLatin1Chars("rfind")
	defer methodName19.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_rfind")
	globalPackedVector2ArrayMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName19.AsGDExtensionStringNamePtr(), 1469606149)
	if globalPackedVector2ArrayMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_rfind")
	}
	methodName20 := NewStringNameWithLatin1Chars("count")
	defer methodName20.Destroy()
	log.Debug("globalPackedVector2ArrayMethodBindings.method_count")
	globalPackedVector2ArrayMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, methodName20.AsGDExtensionStringNamePtr(), 2798848307)
	if globalPackedVector2ArrayMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalPackedVector2ArrayMethodBindings.method_count")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalPackedVector2ArrayMethodBindings.indexed_setter")
	globalPackedVector2ArrayMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
	log.Debug("globalPackedVector2ArrayMethodBindings.indexed_getter")
	globalPackedVector2ArrayMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
	log.Debug("globalPackedVector2ArrayMethodBindings.operator: equal Variant")
	globalPackedVector2ArrayMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedVector2ArrayMethodBindings.operator: not_equal Variant")
	globalPackedVector2ArrayMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedVector2ArrayMethodBindings.operator: multiply Transform2D")
	globalPackedVector2ArrayMethodBindings.operator_multiply_Transform2D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)
	log.Debug("globalPackedVector2ArrayMethodBindings.operator: in Dictionary")
	globalPackedVector2ArrayMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalPackedVector2ArrayMethodBindings.operator: in Array")
	globalPackedVector2ArrayMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalPackedVector2ArrayMethodBindings.operator: equal PackedVector2Array")
	globalPackedVector2ArrayMethodBindings.operator_equal_PackedVector2Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
	log.Debug("globalPackedVector2ArrayMethodBindings.operator: not_equal PackedVector2Array")
	globalPackedVector2ArrayMethodBindings.operator_not_equal_PackedVector2Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
	log.Debug("globalPackedVector2ArrayMethodBindings.operator: add PackedVector2Array")
	globalPackedVector2ArrayMethodBindings.operator_add_PackedVector2Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
	log.Debug("packedVector2ArrayInitBindings end")
}

func (c *PackedVector2Array) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedVector2Array, index: 0
func NewPackedVector2Array() PackedVector2Array {
	cx := PackedVector2Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalPackedVector2ArrayMethodBindings.constructor_0, ptr)

	return cx
}

// NewPackedVector2Array, index: 1
func NewPackedVector2ArrayWithPackedVector2Array(from PackedVector2Array) PackedVector2Array {
	cx := PackedVector2Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedVector2Array
	// PackedVector2ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedVector2ArrayMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewPackedVector2Array, index: 2
func NewPackedVector2ArrayWithArray(from Array) PackedVector2Array {
	cx := PackedVector2Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Array
	// ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedVector2ArrayMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *PackedVector2Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedVector2ArrayMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector2Array) Size() int32 {
	mb := globalPackedVector2ArrayMethodBindings.method_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) IsEmpty() bool {
	mb := globalPackedVector2ArrayMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) Set(index int32, value Vector2) {
	mb := globalPackedVector2ArrayMethodBindings.method_set

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Vector2Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) PushBack(value Vector2) bool {
	mb := globalPackedVector2ArrayMethodBindings.method_push_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) Append(value Vector2) bool {
	mb := globalPackedVector2ArrayMethodBindings.method_append

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) AppendArray(array PackedVector2Array) {
	mb := globalPackedVector2ArrayMethodBindings.method_append_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) RemoveAt(index int32) {
	mb := globalPackedVector2ArrayMethodBindings.method_remove_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector2Array) Insert(at_index int32, value Vector2) int32 {
	mb := globalPackedVector2ArrayMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(at_index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Vector2Encoder.EncodeArg(value)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) Fill(value Vector2) {
	mb := globalPackedVector2ArrayMethodBindings.method_fill

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector2Array) Resize(new_size int32) int32 {
	mb := globalPackedVector2ArrayMethodBindings.method_resize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(new_size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) Clear() {
	mb := globalPackedVector2ArrayMethodBindings.method_clear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) Has(value Vector2) bool {
	mb := globalPackedVector2ArrayMethodBindings.method_has

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) Reverse() {
	mb := globalPackedVector2ArrayMethodBindings.method_reverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector2Array) -> PackedVector2Array
 */
func (cx *PackedVector2Array) Slice(begin int32, end int32) PackedVector2Array {
	mb := globalPackedVector2ArrayMethodBindings.method_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(begin)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(end)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedVector2Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedVector2Array) ToByteArray() PackedByteArray {
	mb := globalPackedVector2ArrayMethodBindings.method_to_byte_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) Sort() {
	mb := globalPackedVector2ArrayMethodBindings.method_sort

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector2Array) Bsearch(value Vector2, before bool) int32 {
	mb := globalPackedVector2ArrayMethodBindings.method_bsearch

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := BoolEncoder.EncodeArg(before)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector2Array) -> PackedVector2Array
 */
func (cx *PackedVector2Array) Duplicate() PackedVector2Array {
	mb := globalPackedVector2ArrayMethodBindings.method_duplicate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedVector2Array](mb, bx, nil)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector2Array) Find(value Vector2, from int32) int32 {
	mb := globalPackedVector2ArrayMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector2Array) Rfind(value Vector2, from int32) int32 {
	mb := globalPackedVector2ArrayMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector2Array) Count(value Vector2) int32 {
	mb := globalPackedVector2ArrayMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Vector2Encoder.EncodeArg(value)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

func (cx *PackedVector2Array) GetIndexed(i int64) Vector2 {

	var ret Vector2

	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedVector2ArrayMethodBindings.indexed_getter,
		(GDExtensionConstTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(unsafe.Pointer(&ret)),
	)

	return ret
}

func (cx *PackedVector2Array) SetIndexed(i int64, value Vector2) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedVector2ArrayMethodBindings.indexed_setter,
		(GDExtensionTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(unsafe.Pointer(&value)),
	)
}

// members

// Equal_Variant operator
func (cx *PackedVector2Array) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedVector2Array) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Multiply_Transform2D operator
func (cx *PackedVector2Array) Multiply_Transform2D(right Transform2D) PackedVector2Array {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedVector2Array](globalPackedVector2ArrayMethodBindings.operator_multiply_Transform2D, lt, rt)
}

// In_Dictionary operator
func (cx *PackedVector2Array) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedVector2Array) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedVector2Array operator
func (cx *PackedVector2Array) Equal_PackedVector2Array(right PackedVector2Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_equal_PackedVector2Array, lt, rt)
}

// Not_equal_PackedVector2Array operator
func (cx *PackedVector2Array) Not_equal_PackedVector2Array(right PackedVector2Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_not_equal_PackedVector2Array, lt, rt)
}

// Add_PackedVector2Array operator
func (cx *PackedVector2Array) Add_PackedVector2Array(right PackedVector2Array) PackedVector2Array {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedVector2Array](globalPackedVector2ArrayMethodBindings.operator_add_PackedVector2Array, lt, rt)
}

/*
 * PackedVector3Array
 * indexingReturnType: Vector3
 * isKeyed: false
 * hasDestructor: true
 */
type PackedVector3Array struct {
	opaque [16]uint8
}

type packedVector3ArrayMethodBindings struct {
	constructor_0                         GDExtensionPtrConstructor
	constructor_1                         GDExtensionPtrConstructor
	constructor_2                         GDExtensionPtrConstructor
	destructor                            GDExtensionPtrDestructor
	method_size                           GDExtensionPtrBuiltInMethod
	method_is_empty                       GDExtensionPtrBuiltInMethod
	method_set                            GDExtensionPtrBuiltInMethod
	method_push_back                      GDExtensionPtrBuiltInMethod
	method_append                         GDExtensionPtrBuiltInMethod
	method_append_array                   GDExtensionPtrBuiltInMethod
	method_remove_at                      GDExtensionPtrBuiltInMethod
	method_insert                         GDExtensionPtrBuiltInMethod
	method_fill                           GDExtensionPtrBuiltInMethod
	method_resize                         GDExtensionPtrBuiltInMethod
	method_clear                          GDExtensionPtrBuiltInMethod
	method_has                            GDExtensionPtrBuiltInMethod
	method_reverse                        GDExtensionPtrBuiltInMethod
	method_slice                          GDExtensionPtrBuiltInMethod
	method_to_byte_array                  GDExtensionPtrBuiltInMethod
	method_sort                           GDExtensionPtrBuiltInMethod
	method_bsearch                        GDExtensionPtrBuiltInMethod
	method_duplicate                      GDExtensionPtrBuiltInMethod
	method_find                           GDExtensionPtrBuiltInMethod
	method_rfind                          GDExtensionPtrBuiltInMethod
	method_count                          GDExtensionPtrBuiltInMethod
	indexed_setter                        GDExtensionPtrIndexedSetter
	indexed_getter                        GDExtensionPtrIndexedGetter
	operator_equal_Variant                GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant            GDExtensionPtrOperatorEvaluator
	operator_multiply_Transform3D         GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary                GDExtensionPtrOperatorEvaluator
	operator_in_Array                     GDExtensionPtrOperatorEvaluator
	operator_equal_PackedVector3Array     GDExtensionPtrOperatorEvaluator
	operator_not_equal_PackedVector3Array GDExtensionPtrOperatorEvaluator
	operator_add_PackedVector3Array       GDExtensionPtrOperatorEvaluator
}

var globalPackedVector3ArrayMethodBindings packedVector3ArrayMethodBindings

func packedVector3ArrayInitConstructorBindings() {
	log.Debug("packedVector3ArrayInitConstructorBindings called")

	log.Debug("globalPackedVector3ArrayMethodBindings.constructor_0")
	globalPackedVector3ArrayMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, 0)
	log.Debug("globalPackedVector3ArrayMethodBindings.constructor_1")
	globalPackedVector3ArrayMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, 1)
	log.Debug("globalPackedVector3ArrayMethodBindings.constructor_2")
	globalPackedVector3ArrayMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, 2)
	log.Debug("globalPackedVector3ArrayMethodBindings.destructor")
	globalPackedVector3ArrayMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
}

func packedVector3ArrayInitMethodBindings() {
	log.Debug("packedVector3ArrayInitMethodBindings called")

	missingMethods := make([]string, 0, 21)

	methodName0 := NewStringNameWithLatin1Chars("size")
	defer methodName0.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_size")
	globalPackedVector3ArrayMethodBindings.method_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalPackedVector3ArrayMethodBindings.method_size == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_size")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName1.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_is_empty")
	globalPackedVector3ArrayMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalPackedVector3ArrayMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_is_empty")
	}
	methodName2 := NewStringNameWithLatin1Chars("set")
	defer methodName2.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_set")
	globalPackedVector3ArrayMethodBindings.method_set = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName2.AsGDExtensionStringNamePtr(), 3975343409)
	if globalPackedVector3ArrayMethodBindings.method_set == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_set")
	}
	methodName3 := NewStringNameWithLatin1Chars("push_back")
	defer methodName3.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_push_back")
	globalPackedVector3ArrayMethodBindings.method_push_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName3.AsGDExtensionStringNamePtr(), 3295363524)
	if globalPackedVector3ArrayMethodBindings.method_push_back == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_push_back")
	}
	methodName4 := NewStringNameWithLatin1Chars("append")
	defer methodName4.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_append")
	globalPackedVector3ArrayMethodBindings.method_append = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName4.AsGDExtensionStringNamePtr(), 3295363524)
	if globalPackedVector3ArrayMethodBindings.method_append == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_append")
	}
	methodName5 := NewStringNameWithLatin1Chars("append_array")
	defer methodName5.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_append_array")
	globalPackedVector3ArrayMethodBindings.method_append_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName5.AsGDExtensionStringNamePtr(), 203538016)
	if globalPackedVector3ArrayMethodBindings.method_append_array == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_append_array")
	}
	methodName6 := NewStringNameWithLatin1Chars("remove_at")
	defer methodName6.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_remove_at")
	globalPackedVector3ArrayMethodBindings.method_remove_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName6.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedVector3ArrayMethodBindings.method_remove_at == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_remove_at")
	}
	methodName7 := NewStringNameWithLatin1Chars("insert")
	defer methodName7.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_insert")
	globalPackedVector3ArrayMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName7.AsGDExtensionStringNamePtr(), 3892262309)
	if globalPackedVector3ArrayMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_insert")
	}
	methodName8 := NewStringNameWithLatin1Chars("fill")
	defer methodName8.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_fill")
	globalPackedVector3ArrayMethodBindings.method_fill = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName8.AsGDExtensionStringNamePtr(), 3726392409)
	if globalPackedVector3ArrayMethodBindings.method_fill == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_fill")
	}
	methodName9 := NewStringNameWithLatin1Chars("resize")
	defer methodName9.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_resize")
	globalPackedVector3ArrayMethodBindings.method_resize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName9.AsGDExtensionStringNamePtr(), 848867239)
	if globalPackedVector3ArrayMethodBindings.method_resize == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_resize")
	}
	methodName10 := NewStringNameWithLatin1Chars("clear")
	defer methodName10.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_clear")
	globalPackedVector3ArrayMethodBindings.method_clear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName10.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedVector3ArrayMethodBindings.method_clear == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_clear")
	}
	methodName11 := NewStringNameWithLatin1Chars("has")
	defer methodName11.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_has")
	globalPackedVector3ArrayMethodBindings.method_has = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName11.AsGDExtensionStringNamePtr(), 1749054343)
	if globalPackedVector3ArrayMethodBindings.method_has == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_has")
	}
	methodName12 := NewStringNameWithLatin1Chars("reverse")
	defer methodName12.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_reverse")
	globalPackedVector3ArrayMethodBindings.method_reverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName12.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedVector3ArrayMethodBindings.method_reverse == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_reverse")
	}
	methodName13 := NewStringNameWithLatin1Chars("slice")
	defer methodName13.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_slice")
	globalPackedVector3ArrayMethodBindings.method_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName13.AsGDExtensionStringNamePtr(), 2086131305)
	if globalPackedVector3ArrayMethodBindings.method_slice == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_slice")
	}
	methodName14 := NewStringNameWithLatin1Chars("to_byte_array")
	defer methodName14.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_to_byte_array")
	globalPackedVector3ArrayMethodBindings.method_to_byte_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName14.AsGDExtensionStringNamePtr(), 247621236)
	if globalPackedVector3ArrayMethodBindings.method_to_byte_array == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_to_byte_array")
	}
	methodName15 := NewStringNameWithLatin1Chars("sort")
	defer methodName15.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_sort")
	globalPackedVector3ArrayMethodBindings.method_sort = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName15.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedVector3ArrayMethodBindings.method_sort == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_sort")
	}
	methodName16 := NewStringNameWithLatin1Chars("bsearch")
	defer methodName16.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_bsearch")
	globalPackedVector3ArrayMethodBindings.method_bsearch = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName16.AsGDExtensionStringNamePtr(), 219263630)
	if globalPackedVector3ArrayMethodBindings.method_bsearch == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_bsearch")
	}
	methodName17 := NewStringNameWithLatin1Chars("duplicate")
	defer methodName17.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_duplicate")
	globalPackedVector3ArrayMethodBindings.method_duplicate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName17.AsGDExtensionStringNamePtr(), 2754175465)
	if globalPackedVector3ArrayMethodBindings.method_duplicate == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_duplicate")
	}
	methodName18 := NewStringNameWithLatin1Chars("find")
	defer methodName18.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_find")
	globalPackedVector3ArrayMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName18.AsGDExtensionStringNamePtr(), 3718155780)
	if globalPackedVector3ArrayMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_find")
	}
	methodName19 := NewStringNameWithLatin1Chars("rfind")
	defer methodName19.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_rfind")
	globalPackedVector3ArrayMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName19.AsGDExtensionStringNamePtr(), 3718155780)
	if globalPackedVector3ArrayMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_rfind")
	}
	methodName20 := NewStringNameWithLatin1Chars("count")
	defer methodName20.Destroy()
	log.Debug("globalPackedVector3ArrayMethodBindings.method_count")
	globalPackedVector3ArrayMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, methodName20.AsGDExtensionStringNamePtr(), 194580386)
	if globalPackedVector3ArrayMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalPackedVector3ArrayMethodBindings.method_count")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalPackedVector3ArrayMethodBindings.indexed_setter")
	globalPackedVector3ArrayMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
	log.Debug("globalPackedVector3ArrayMethodBindings.indexed_getter")
	globalPackedVector3ArrayMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
	log.Debug("globalPackedVector3ArrayMethodBindings.operator: equal Variant")
	globalPackedVector3ArrayMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedVector3ArrayMethodBindings.operator: not_equal Variant")
	globalPackedVector3ArrayMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedVector3ArrayMethodBindings.operator: multiply Transform3D")
	globalPackedVector3ArrayMethodBindings.operator_multiply_Transform3D = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D)
	log.Debug("globalPackedVector3ArrayMethodBindings.operator: in Dictionary")
	globalPackedVector3ArrayMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalPackedVector3ArrayMethodBindings.operator: in Array")
	globalPackedVector3ArrayMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalPackedVector3ArrayMethodBindings.operator: equal PackedVector3Array")
	globalPackedVector3ArrayMethodBindings.operator_equal_PackedVector3Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
	log.Debug("globalPackedVector3ArrayMethodBindings.operator: not_equal PackedVector3Array")
	globalPackedVector3ArrayMethodBindings.operator_not_equal_PackedVector3Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
	log.Debug("globalPackedVector3ArrayMethodBindings.operator: add PackedVector3Array")
	globalPackedVector3ArrayMethodBindings.operator_add_PackedVector3Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
	log.Debug("packedVector3ArrayInitBindings end")
}

func (c *PackedVector3Array) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedVector3Array, index: 0
func NewPackedVector3Array() PackedVector3Array {
	cx := PackedVector3Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalPackedVector3ArrayMethodBindings.constructor_0, ptr)

	return cx
}

// NewPackedVector3Array, index: 1
func NewPackedVector3ArrayWithPackedVector3Array(from PackedVector3Array) PackedVector3Array {
	cx := PackedVector3Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedVector3Array
	// PackedVector3ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedVector3ArrayMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewPackedVector3Array, index: 2
func NewPackedVector3ArrayWithArray(from Array) PackedVector3Array {
	cx := PackedVector3Array{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Array
	// ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedVector3ArrayMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *PackedVector3Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedVector3ArrayMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector3Array) Size() int32 {
	mb := globalPackedVector3ArrayMethodBindings.method_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) IsEmpty() bool {
	mb := globalPackedVector3ArrayMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) Set(index int32, value Vector3) {
	mb := globalPackedVector3ArrayMethodBindings.method_set

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) PushBack(value Vector3) bool {
	mb := globalPackedVector3ArrayMethodBindings.method_push_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) Append(value Vector3) bool {
	mb := globalPackedVector3ArrayMethodBindings.method_append

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) AppendArray(array PackedVector3Array) {
	mb := globalPackedVector3ArrayMethodBindings.method_append_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) RemoveAt(index int32) {
	mb := globalPackedVector3ArrayMethodBindings.method_remove_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector3Array) Insert(at_index int32, value Vector3) int32 {
	mb := globalPackedVector3ArrayMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(at_index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) Fill(value Vector3) {
	mb := globalPackedVector3ArrayMethodBindings.method_fill

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector3Array) Resize(new_size int32) int32 {
	mb := globalPackedVector3ArrayMethodBindings.method_resize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(new_size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) Clear() {
	mb := globalPackedVector3ArrayMethodBindings.method_clear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) Has(value Vector3) bool {
	mb := globalPackedVector3ArrayMethodBindings.method_has

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) Reverse() {
	mb := globalPackedVector3ArrayMethodBindings.method_reverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector3Array) -> PackedVector3Array
 */
func (cx *PackedVector3Array) Slice(begin int32, end int32) PackedVector3Array {
	mb := globalPackedVector3ArrayMethodBindings.method_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(begin)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(end)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedVector3Array](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedVector3Array) ToByteArray() PackedByteArray {
	mb := globalPackedVector3ArrayMethodBindings.method_to_byte_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) Sort() {
	mb := globalPackedVector3ArrayMethodBindings.method_sort

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector3Array) Bsearch(value Vector3, before bool) int32 {
	mb := globalPackedVector3ArrayMethodBindings.method_bsearch

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	eArg1 := BoolEncoder.EncodeArg(before)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector3Array) -> PackedVector3Array
 */
func (cx *PackedVector3Array) Duplicate() PackedVector3Array {
	mb := globalPackedVector3ArrayMethodBindings.method_duplicate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedVector3Array](mb, bx, nil)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector3Array) Find(value Vector3, from int32) int32 {
	mb := globalPackedVector3ArrayMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector3Array) Rfind(value Vector3, from int32) int32 {
	mb := globalPackedVector3ArrayMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedVector3Array) Count(value Vector3) int32 {
	mb := globalPackedVector3ArrayMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

func (cx *PackedVector3Array) GetIndexed(i int64) Vector3 {

	var ret Vector3

	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedVector3ArrayMethodBindings.indexed_getter,
		(GDExtensionConstTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(unsafe.Pointer(&ret)),
	)

	return ret
}

func (cx *PackedVector3Array) SetIndexed(i int64, value Vector3) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedVector3ArrayMethodBindings.indexed_setter,
		(GDExtensionTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(unsafe.Pointer(&value)),
	)
}

// members

// Equal_Variant operator
func (cx *PackedVector3Array) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedVector3Array) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Multiply_Transform3D operator
func (cx *PackedVector3Array) Multiply_Transform3D(right Transform3D) PackedVector3Array {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedVector3Array](globalPackedVector3ArrayMethodBindings.operator_multiply_Transform3D, lt, rt)
}

// In_Dictionary operator
func (cx *PackedVector3Array) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedVector3Array) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedVector3Array operator
func (cx *PackedVector3Array) Equal_PackedVector3Array(right PackedVector3Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_equal_PackedVector3Array, lt, rt)
}

// Not_equal_PackedVector3Array operator
func (cx *PackedVector3Array) Not_equal_PackedVector3Array(right PackedVector3Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_not_equal_PackedVector3Array, lt, rt)
}

// Add_PackedVector3Array operator
func (cx *PackedVector3Array) Add_PackedVector3Array(right PackedVector3Array) PackedVector3Array {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedVector3Array](globalPackedVector3ArrayMethodBindings.operator_add_PackedVector3Array, lt, rt)
}

/*
 * PackedColorArray
 * indexingReturnType: Color
 * isKeyed: false
 * hasDestructor: true
 */
type PackedColorArray struct {
	opaque [16]uint8
}

type packedColorArrayMethodBindings struct {
	constructor_0                       GDExtensionPtrConstructor
	constructor_1                       GDExtensionPtrConstructor
	constructor_2                       GDExtensionPtrConstructor
	destructor                          GDExtensionPtrDestructor
	method_size                         GDExtensionPtrBuiltInMethod
	method_is_empty                     GDExtensionPtrBuiltInMethod
	method_set                          GDExtensionPtrBuiltInMethod
	method_push_back                    GDExtensionPtrBuiltInMethod
	method_append                       GDExtensionPtrBuiltInMethod
	method_append_array                 GDExtensionPtrBuiltInMethod
	method_remove_at                    GDExtensionPtrBuiltInMethod
	method_insert                       GDExtensionPtrBuiltInMethod
	method_fill                         GDExtensionPtrBuiltInMethod
	method_resize                       GDExtensionPtrBuiltInMethod
	method_clear                        GDExtensionPtrBuiltInMethod
	method_has                          GDExtensionPtrBuiltInMethod
	method_reverse                      GDExtensionPtrBuiltInMethod
	method_slice                        GDExtensionPtrBuiltInMethod
	method_to_byte_array                GDExtensionPtrBuiltInMethod
	method_sort                         GDExtensionPtrBuiltInMethod
	method_bsearch                      GDExtensionPtrBuiltInMethod
	method_duplicate                    GDExtensionPtrBuiltInMethod
	method_find                         GDExtensionPtrBuiltInMethod
	method_rfind                        GDExtensionPtrBuiltInMethod
	method_count                        GDExtensionPtrBuiltInMethod
	indexed_setter                      GDExtensionPtrIndexedSetter
	indexed_getter                      GDExtensionPtrIndexedGetter
	operator_equal_Variant              GDExtensionPtrOperatorEvaluator
	operator_not_equal_Variant          GDExtensionPtrOperatorEvaluator
	operator_in_Dictionary              GDExtensionPtrOperatorEvaluator
	operator_in_Array                   GDExtensionPtrOperatorEvaluator
	operator_equal_PackedColorArray     GDExtensionPtrOperatorEvaluator
	operator_not_equal_PackedColorArray GDExtensionPtrOperatorEvaluator
	operator_add_PackedColorArray       GDExtensionPtrOperatorEvaluator
}

var globalPackedColorArrayMethodBindings packedColorArrayMethodBindings

func packedColorArrayInitConstructorBindings() {
	log.Debug("packedColorArrayInitConstructorBindings called")

	log.Debug("globalPackedColorArrayMethodBindings.constructor_0")
	globalPackedColorArrayMethodBindings.constructor_0 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, 0)
	log.Debug("globalPackedColorArrayMethodBindings.constructor_1")
	globalPackedColorArrayMethodBindings.constructor_1 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, 1)
	log.Debug("globalPackedColorArrayMethodBindings.constructor_2")
	globalPackedColorArrayMethodBindings.constructor_2 = GDExtensionInterface_variant_get_ptr_constructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, 2)
	log.Debug("globalPackedColorArrayMethodBindings.destructor")
	globalPackedColorArrayMethodBindings.destructor = GDExtensionInterface_variant_get_ptr_destructor(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY)
}

func packedColorArrayInitMethodBindings() {
	log.Debug("packedColorArrayInitMethodBindings called")

	missingMethods := make([]string, 0, 21)

	methodName0 := NewStringNameWithLatin1Chars("size")
	defer methodName0.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_size")
	globalPackedColorArrayMethodBindings.method_size = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName0.AsGDExtensionStringNamePtr(), 3173160232)
	if globalPackedColorArrayMethodBindings.method_size == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_size")
	}
	methodName1 := NewStringNameWithLatin1Chars("is_empty")
	defer methodName1.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_is_empty")
	globalPackedColorArrayMethodBindings.method_is_empty = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName1.AsGDExtensionStringNamePtr(), 3918633141)
	if globalPackedColorArrayMethodBindings.method_is_empty == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_is_empty")
	}
	methodName2 := NewStringNameWithLatin1Chars("set")
	defer methodName2.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_set")
	globalPackedColorArrayMethodBindings.method_set = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName2.AsGDExtensionStringNamePtr(), 1444096570)
	if globalPackedColorArrayMethodBindings.method_set == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_set")
	}
	methodName3 := NewStringNameWithLatin1Chars("push_back")
	defer methodName3.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_push_back")
	globalPackedColorArrayMethodBindings.method_push_back = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName3.AsGDExtensionStringNamePtr(), 1007858200)
	if globalPackedColorArrayMethodBindings.method_push_back == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_push_back")
	}
	methodName4 := NewStringNameWithLatin1Chars("append")
	defer methodName4.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_append")
	globalPackedColorArrayMethodBindings.method_append = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName4.AsGDExtensionStringNamePtr(), 1007858200)
	if globalPackedColorArrayMethodBindings.method_append == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_append")
	}
	methodName5 := NewStringNameWithLatin1Chars("append_array")
	defer methodName5.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_append_array")
	globalPackedColorArrayMethodBindings.method_append_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName5.AsGDExtensionStringNamePtr(), 798822497)
	if globalPackedColorArrayMethodBindings.method_append_array == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_append_array")
	}
	methodName6 := NewStringNameWithLatin1Chars("remove_at")
	defer methodName6.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_remove_at")
	globalPackedColorArrayMethodBindings.method_remove_at = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName6.AsGDExtensionStringNamePtr(), 2823966027)
	if globalPackedColorArrayMethodBindings.method_remove_at == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_remove_at")
	}
	methodName7 := NewStringNameWithLatin1Chars("insert")
	defer methodName7.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_insert")
	globalPackedColorArrayMethodBindings.method_insert = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName7.AsGDExtensionStringNamePtr(), 785289703)
	if globalPackedColorArrayMethodBindings.method_insert == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_insert")
	}
	methodName8 := NewStringNameWithLatin1Chars("fill")
	defer methodName8.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_fill")
	globalPackedColorArrayMethodBindings.method_fill = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName8.AsGDExtensionStringNamePtr(), 3730314301)
	if globalPackedColorArrayMethodBindings.method_fill == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_fill")
	}
	methodName9 := NewStringNameWithLatin1Chars("resize")
	defer methodName9.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_resize")
	globalPackedColorArrayMethodBindings.method_resize = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName9.AsGDExtensionStringNamePtr(), 848867239)
	if globalPackedColorArrayMethodBindings.method_resize == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_resize")
	}
	methodName10 := NewStringNameWithLatin1Chars("clear")
	defer methodName10.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_clear")
	globalPackedColorArrayMethodBindings.method_clear = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName10.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedColorArrayMethodBindings.method_clear == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_clear")
	}
	methodName11 := NewStringNameWithLatin1Chars("has")
	defer methodName11.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_has")
	globalPackedColorArrayMethodBindings.method_has = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName11.AsGDExtensionStringNamePtr(), 3167426256)
	if globalPackedColorArrayMethodBindings.method_has == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_has")
	}
	methodName12 := NewStringNameWithLatin1Chars("reverse")
	defer methodName12.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_reverse")
	globalPackedColorArrayMethodBindings.method_reverse = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName12.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedColorArrayMethodBindings.method_reverse == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_reverse")
	}
	methodName13 := NewStringNameWithLatin1Chars("slice")
	defer methodName13.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_slice")
	globalPackedColorArrayMethodBindings.method_slice = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName13.AsGDExtensionStringNamePtr(), 2451797139)
	if globalPackedColorArrayMethodBindings.method_slice == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_slice")
	}
	methodName14 := NewStringNameWithLatin1Chars("to_byte_array")
	defer methodName14.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_to_byte_array")
	globalPackedColorArrayMethodBindings.method_to_byte_array = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName14.AsGDExtensionStringNamePtr(), 247621236)
	if globalPackedColorArrayMethodBindings.method_to_byte_array == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_to_byte_array")
	}
	methodName15 := NewStringNameWithLatin1Chars("sort")
	defer methodName15.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_sort")
	globalPackedColorArrayMethodBindings.method_sort = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName15.AsGDExtensionStringNamePtr(), 3218959716)
	if globalPackedColorArrayMethodBindings.method_sort == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_sort")
	}
	methodName16 := NewStringNameWithLatin1Chars("bsearch")
	defer methodName16.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_bsearch")
	globalPackedColorArrayMethodBindings.method_bsearch = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName16.AsGDExtensionStringNamePtr(), 314143821)
	if globalPackedColorArrayMethodBindings.method_bsearch == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_bsearch")
	}
	methodName17 := NewStringNameWithLatin1Chars("duplicate")
	defer methodName17.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_duplicate")
	globalPackedColorArrayMethodBindings.method_duplicate = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName17.AsGDExtensionStringNamePtr(), 1011903421)
	if globalPackedColorArrayMethodBindings.method_duplicate == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_duplicate")
	}
	methodName18 := NewStringNameWithLatin1Chars("find")
	defer methodName18.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_find")
	globalPackedColorArrayMethodBindings.method_find = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName18.AsGDExtensionStringNamePtr(), 3156095363)
	if globalPackedColorArrayMethodBindings.method_find == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_find")
	}
	methodName19 := NewStringNameWithLatin1Chars("rfind")
	defer methodName19.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_rfind")
	globalPackedColorArrayMethodBindings.method_rfind = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName19.AsGDExtensionStringNamePtr(), 3156095363)
	if globalPackedColorArrayMethodBindings.method_rfind == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_rfind")
	}
	methodName20 := NewStringNameWithLatin1Chars("count")
	defer methodName20.Destroy()
	log.Debug("globalPackedColorArrayMethodBindings.method_count")
	globalPackedColorArrayMethodBindings.method_count = GDExtensionInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, methodName20.AsGDExtensionStringNamePtr(), 1682108616)
	if globalPackedColorArrayMethodBindings.method_count == nil {
		missingMethods = append(missingMethods, "globalPackedColorArrayMethodBindings.method_count")
	}
	if len(missingMethods) > 0 {
		log.Panic("missing method binds", zap.Any("missing", missingMethods))
	}

	log.Debug("globalPackedColorArrayMethodBindings.indexed_setter")
	globalPackedColorArrayMethodBindings.indexed_setter = GDExtensionInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY)
	log.Debug("globalPackedColorArrayMethodBindings.indexed_getter")
	globalPackedColorArrayMethodBindings.indexed_getter = GDExtensionInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY)
	log.Debug("globalPackedColorArrayMethodBindings.operator: equal Variant")
	globalPackedColorArrayMethodBindings.operator_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedColorArrayMethodBindings.operator: not_equal Variant")
	globalPackedColorArrayMethodBindings.operator_not_equal_Variant = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDEXTENSION_VARIANT_TYPE_NIL)
	log.Debug("globalPackedColorArrayMethodBindings.operator: in Dictionary")
	globalPackedColorArrayMethodBindings.operator_in_Dictionary = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDEXTENSION_VARIANT_TYPE_DICTIONARY)
	log.Debug("globalPackedColorArrayMethodBindings.operator: in Array")
	globalPackedColorArrayMethodBindings.operator_in_Array = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_IN, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDEXTENSION_VARIANT_TYPE_ARRAY)
	log.Debug("globalPackedColorArrayMethodBindings.operator: equal PackedColorArray")
	globalPackedColorArrayMethodBindings.operator_equal_PackedColorArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY)
	log.Debug("globalPackedColorArrayMethodBindings.operator: not_equal PackedColorArray")
	globalPackedColorArrayMethodBindings.operator_not_equal_PackedColorArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY)
	log.Debug("globalPackedColorArrayMethodBindings.operator: add PackedColorArray")
	globalPackedColorArrayMethodBindings.operator_add_PackedColorArray = GDExtensionInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY)
	log.Debug("packedColorArrayInitBindings end")
}

func (c *PackedColorArray) ptr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedColorArray, index: 0
func NewPackedColorArray() PackedColorArray {
	cx := PackedColorArray{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	callBuiltinConstructor(globalPackedColorArrayMethodBindings.constructor_0, ptr)

	return cx
}

// NewPackedColorArray, index: 1
func NewPackedColorArrayWithPackedColorArray(from PackedColorArray) PackedColorArray {
	cx := PackedColorArray{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// PackedColorArray
	// PackedColorArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedColorArrayMethodBindings.constructor_1, ptr, args[0])

	return cx
}

// NewPackedColorArray, index: 2
func NewPackedColorArrayWithArray(from Array) PackedColorArray {
	cx := PackedColorArray{}

	ptr := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))

	var args [1]GDExtensionConstTypePtr

	// Array
	// ArrayEncoder
	args[0] = (GDExtensionConstTypePtr)(from.ptr())
	callBuiltinConstructor(globalPackedColorArrayMethodBindings.constructor_2, ptr, args[0])

	return cx
}

func (cx *PackedColorArray) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedColorArrayMethodBindings.destructor)
	bx := (GDExtensionTypePtr)(cx.ptr())
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedColorArray) Size() int32 {
	mb := globalPackedColorArrayMethodBindings.method_size

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[int32](mb, bx, nil)
	return ret

}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) IsEmpty() bool {
	mb := globalPackedColorArrayMethodBindings.method_is_empty

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret

}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) Set(index int32, value Color) {
	mb := globalPackedColorArrayMethodBindings.method_set

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) PushBack(value Color) bool {
	mb := globalPackedColorArrayMethodBindings.method_push_back

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) Append(value Color) bool {
	mb := globalPackedColorArrayMethodBindings.method_append

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) AppendArray(array PackedColorArray) {
	mb := globalPackedColorArrayMethodBindings.method_append_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&array))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) RemoveAt(index int32) {
	mb := globalPackedColorArrayMethodBindings.method_remove_at

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedColorArray) Insert(at_index int32, value Color) int32 {
	mb := globalPackedColorArrayMethodBindings.method_insert

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(at_index)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) Fill(value Color) {
	mb := globalPackedColorArrayMethodBindings.method_fill

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	callBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedColorArray) Resize(new_size int32) int32 {
	mb := globalPackedColorArrayMethodBindings.method_resize

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(new_size)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) Clear() {
	mb := globalPackedColorArrayMethodBindings.method_clear

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) Has(value Color) bool {
	mb := globalPackedColorArrayMethodBindings.method_has

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) Reverse() {
	mb := globalPackedColorArrayMethodBindings.method_reverse

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedColorArray) -> PackedColorArray
 */
func (cx *PackedColorArray) Slice(begin int32, end int32) PackedColorArray {
	mb := globalPackedColorArrayMethodBindings.method_slice

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	eArg0 := Int32Encoder.EncodeArg(begin)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg0))

	eArg1 := Int32Encoder.EncodeArg(end)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[PackedColorArray](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedColorArray) ToByteArray() PackedByteArray {
	mb := globalPackedColorArrayMethodBindings.method_to_byte_array

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret

}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) Sort() {
	mb := globalPackedColorArrayMethodBindings.method_sort

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	callBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedColorArray) Bsearch(value Color, before bool) int32 {
	mb := globalPackedColorArrayMethodBindings.method_bsearch

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	eArg1 := BoolEncoder.EncodeArg(before)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedColorArray) -> PackedColorArray
 */
func (cx *PackedColorArray) Duplicate() PackedColorArray {
	mb := globalPackedColorArrayMethodBindings.method_duplicate

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := callBuiltinMethodPtrRet[PackedColorArray](mb, bx, nil)
	return ret

}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedColorArray) Find(value Color, from int32) int32 {
	mb := globalPackedColorArrayMethodBindings.method_find

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedColorArray) Rfind(value Color, from int32) int32 {
	mb := globalPackedColorArrayMethodBindings.method_rfind

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	eArg1 := Int32Encoder.EncodeArg(from)
	args[1] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg1))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int32
 */
func (cx *PackedColorArray) Count(value Color) int32 {
	mb := globalPackedColorArrayMethodBindings.method_count

	if mb == nil {
		log.Panic("method bind cannot be nil")
	}

	bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(unsafe.Pointer(&value))

	ret := callBuiltinMethodPtrRet[int32](mb, bx, args...)
	runtime.KeepAlive(args)
	// C.free(argBytes)
	return ret

}

func (cx *PackedColorArray) GetIndexed(i int64) Color {

	var ret Color

	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedColorArrayMethodBindings.indexed_getter,
		(GDExtensionConstTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(unsafe.Pointer(&ret)),
	)

	return ret
}

func (cx *PackedColorArray) SetIndexed(i int64, value Color) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedColorArrayMethodBindings.indexed_setter,
		(GDExtensionTypePtr)(unsafe.Pointer(cx)),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(unsafe.Pointer(&value)),
	)
}

// members

// Equal_Variant operator
func (cx *PackedColorArray) Equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedColorArray) Not_equal_Variant(right Variant) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// In_Dictionary operator
func (cx *PackedColorArray) In_Dictionary(right Dictionary) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedColorArray) In_Array(right Array) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedColorArray operator
func (cx *PackedColorArray) Equal_PackedColorArray(right PackedColorArray) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_equal_PackedColorArray, lt, rt)
}

// Not_equal_PackedColorArray operator
func (cx *PackedColorArray) Not_equal_PackedColorArray(right PackedColorArray) bool {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_not_equal_PackedColorArray, lt, rt)
}

// Add_PackedColorArray operator
func (cx *PackedColorArray) Add_PackedColorArray(right PackedColorArray) PackedColorArray {
	lt := cx.ptr()

	rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
	return callBuiltinOperatorPtr[PackedColorArray](globalPackedColorArrayMethodBindings.operator_add_PackedColorArray, lt, rt)
}
func builtinClassesInitBindings() {
	stringInitConstructorBindings()
	vector2InitConstructorBindings()
	vector2iInitConstructorBindings()
	rect2InitConstructorBindings()
	rect2iInitConstructorBindings()
	vector3InitConstructorBindings()
	vector3iInitConstructorBindings()
	transform2DInitConstructorBindings()
	vector4InitConstructorBindings()
	vector4iInitConstructorBindings()
	planeInitConstructorBindings()
	quaternionInitConstructorBindings()
	aABBInitConstructorBindings()
	basisInitConstructorBindings()
	transform3DInitConstructorBindings()
	projectionInitConstructorBindings()
	colorInitConstructorBindings()
	stringNameInitConstructorBindings()
	nodePathInitConstructorBindings()
	rIDInitConstructorBindings()
	callableInitConstructorBindings()
	signalInitConstructorBindings()
	dictionaryInitConstructorBindings()
	arrayInitConstructorBindings()
	packedByteArrayInitConstructorBindings()
	packedInt32ArrayInitConstructorBindings()
	packedInt64ArrayInitConstructorBindings()
	packedFloat32ArrayInitConstructorBindings()
	packedFloat64ArrayInitConstructorBindings()
	packedStringArrayInitConstructorBindings()
	packedVector2ArrayInitConstructorBindings()
	packedVector3ArrayInitConstructorBindings()
	packedColorArrayInitConstructorBindings()
	stringInitMethodBindings()
	vector2InitMethodBindings()
	vector2iInitMethodBindings()
	rect2InitMethodBindings()
	rect2iInitMethodBindings()
	vector3InitMethodBindings()
	vector3iInitMethodBindings()
	transform2DInitMethodBindings()
	vector4InitMethodBindings()
	vector4iInitMethodBindings()
	planeInitMethodBindings()
	quaternionInitMethodBindings()
	aABBInitMethodBindings()
	basisInitMethodBindings()
	transform3DInitMethodBindings()
	projectionInitMethodBindings()
	colorInitMethodBindings()
	stringNameInitMethodBindings()
	nodePathInitMethodBindings()
	rIDInitMethodBindings()
	callableInitMethodBindings()
	signalInitMethodBindings()
	dictionaryInitMethodBindings()
	arrayInitMethodBindings()
	packedByteArrayInitMethodBindings()
	packedInt32ArrayInitMethodBindings()
	packedInt64ArrayInitMethodBindings()
	packedFloat32ArrayInitMethodBindings()
	packedFloat64ArrayInitMethodBindings()
	packedStringArrayInitMethodBindings()
	packedVector2ArrayInitMethodBindings()
	packedVector3ArrayInitMethodBindings()
	packedColorArrayInitMethodBindings()
}
