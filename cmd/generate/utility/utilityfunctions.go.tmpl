{{ $view := . -}}
package utility

/*------------------------------------------------------------------------------
//   This code was generated by template utilityfunctions.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "globalenums.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//revive:disable

// #include <godot/gdextension_interface.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
	"unsafe"
	. "github.com/godot-go/godot-go/pkg/gdextension/builtin"
	. "github.com/godot-go/godot-go/pkg/gdextension/ffi"
	. "github.com/godot-go/godot-go/pkg/gdextension/gdclassimpl"
)

// utility functions
{{ range $i, $f := $view.UtilityFunctions -}}
{{ $fnReturnType := goReturnType $f.ReturnType }}
// {{ camelCase $f.Name }} is under the category "{{ $f.Category }}".
func {{ camelCase $f.Name }}(
{{- range $j, $arg := $f.Arguments -}}
	{{ goArgumentName $arg.Name }} {{ goArgumentType $arg.Type }},
{{- end -}}
{{- if $f.IsVararg -}}
	varargs ...Variant,
{{- end -}}
) {{ $fnReturnType }} {
	{{/* TODO: refactor for static instantiation */ -}}
	fName := NewStringNameWithLatin1Chars("{{ $f.Name }}")
	defer fName.Destroy()
	fn := CallFunc_GDExtensionInterfaceVariantGetPtrUtilityFunction(fName.AsGDExtensionConstStringNamePtr(), {{ $f.Hash }})
	if fn == nil {
		panic("could not find utility function {{ $f.Name }} ({{ $f.Hash }})")
	}
	{{ if $fnReturnType -}}
	var ret {{ $fnReturnType }}

	{{ if eq $fnReturnType "Object" -}}
	ret = &ObjectImpl{}
	retPtr := ret.AsGDExtensionTypePtr()
	{{ else if goEncodeIsReference $fnReturnType -}}
	retPtr := (GDExtensionTypePtr)(unsafe.Pointer(ret.NativePtr()))
    {{ else -}}
    retPtr := (GDExtensionTypePtr)(unsafe.Pointer(&ret))
    {{ end -}}

	{{ else -}}
	retPtr := (GDExtensionTypePtr)(nullptr)
	{{- end }}
	{{ if $f.Arguments -}}
	{{ if $f.IsVararg -}}
	sz := {{ len $f.Arguments }}
	args := make([]GDExtensionConstTypePtr, sz + len(varargs))
	{{ range $j, $arg := $f.Arguments -}}
		args[{{ $j }}] = (GDExtensionConstTypePtr)(unsafe.Pointer({{ goEncoder (goArgumentType $arg.Type) }}.EncodeTypePtr({{ goArgumentName $arg.Name }})))
	{{ end -}}
	for i := range varargs {
		args[sz + i] = (GDExtensionConstTypePtr)(unsafe.Pointer(VariantEncoder.EncodeTypePtr(varargs[i])))
	}
	typePtrArgs := (*GDExtensionConstTypePtr)(unsafe.SliceData(args))
	{{ else -}}
	args := [{{ len $f.Arguments }}]GDExtensionConstTypePtr{
	{{ range $j, $arg := $f.Arguments -}}
		(GDExtensionConstTypePtr)(unsafe.Pointer({{ goEncoder (goArgumentType $arg.Type) }}.EncodeTypePtr({{ goArgumentName $arg.Name }}))),
	{{ end -}}
	}
	typePtrArgs := (*GDExtensionConstTypePtr)(unsafe.Pointer(&args[0]))
	{{ end -}}
	{{ else -}}
	typePtrArgs := (*GDExtensionConstTypePtr)(nil)
	{{ end -}}
	argCount := (int32)({{ len $f.Arguments }}{{ if $f.IsVararg -}} + len(varargs){{ end }})
	CallFunc_GDExtensionPtrUtilityFunction(fn, retPtr, typePtrArgs, argCount)
	{{- with $fnReturnType }}
	return ret
	{{- end }}
}
{{ end }}
