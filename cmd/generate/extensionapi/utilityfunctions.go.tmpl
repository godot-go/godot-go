{{ $view := . -}}
package gdextension

/*------------------------------------------------------------------------------
//   This code was generated by template utilityfunctions.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "globalenums.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//revive:disable

// #include <godot/gdextension_interface.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
	"unsafe"
	. "github.com/godot-go/godot-go/pkg/gdextensionffi"
)

// utility functions
{{ range $i, $f := $view.UtilityFunctions -}}
{{ $fnReturnType := goReturnType $f.ReturnType }}
// {{ camelCase $f.Name }} is under the category "{{ $f.Category }}".
func {{ camelCase $f.Name }}(
{{- if $f.IsVararg -}}
	{{- range $j, $arg := $f.Arguments -}}
		{{ $arg.Name }} {{ goArgumentType $arg.Type }},
	{{- end -}}
{{- else -}}
	{{- range $j, $arg := $f.Arguments -}}
		{{ $arg.Name }} {{ goArgumentType $arg.Type }},
	{{- end -}}
{{- end -}}
) {{ $fnReturnType }} {
	{{/* TODO: refactor for static instantiation */}}
	fName := NewStringNameWithLatin1Chars("{{ $f.Name }}")
	defer fName.Destroy()
	fn := GDExtensionInterface_variant_get_ptr_utility_function(internal.gdnInterface, fName.AsGDExtensionStringNamePtr(), {{ $f.Hash }})

	if fn == nil {
		panic("could not find utility function {{ $f.Name }} ({{ $f.Hash }})")
	}

	{{ if $fnReturnType -}}
	var ret {{ $fnReturnType }}
	retPtr := (GDExtensionTypePtr)(unsafe.Pointer(&ret))
	{{- else -}}
	retPtr := (GDExtensionTypePtr)(nullptr)
	{{- end }}

	sz := int(unsafe.Sizeof(nullptr) * uintptr({{ len $f.Arguments }}))

	argBytes := AllocZeros(sz)

	{{ if $f.Arguments }}
	argsPtr := (*[{{ len $f.Arguments }}]unsafe.Pointer)(argBytes)

	{{ range $j, $arg := $f.Arguments -}}
		argsPtr[{{ $j }}] = unsafe.Pointer(&{{ $arg.Name }})
	{{ end }}
	{{ end }}

	args := (*GDExtensionConstTypePtr)(argBytes)

	argCount := (int32)({{ len $f.Arguments }})

	CallFunc_GDExtensionPtrUtilityFunction(fn, retPtr, args, argCount)

	{{ with $fnReturnType -}}
	Free(argBytes)
	return ret
	{{- end }}
}
{{ end }}
