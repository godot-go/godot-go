/*------------------------------------------------------------------------------
//   This code was generated by template classes.h.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "classes.h.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

#ifndef CGO_GODOT_GO_CLASSES_CALLBACK_H
#define CGO_GODOT_GO_CLASSES_CALLBACK_H

#include <stdbool.h>
#include <godot/gdextension_interface.h>

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AESContext(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AESContext(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AESContext(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AESContext;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AStar2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AStar2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AStar2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AStar2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AStar3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AStar3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AStar3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AStar3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AStarGrid2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AStarGrid2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AStarGrid2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AStarGrid2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AcceptDialog(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AcceptDialog(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AcceptDialog(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AcceptDialog;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimatableBody2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimatableBody2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimatableBody2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimatableBody2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimatableBody3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimatableBody3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimatableBody3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimatableBody3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimatedSprite2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimatedSprite2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimatedSprite2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimatedSprite2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimatedSprite3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimatedSprite3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimatedSprite3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimatedSprite3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimatedTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimatedTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimatedTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimatedTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Animation(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Animation(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Animation(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Animation;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationLibrary(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationLibrary(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationLibrary(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationLibrary;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationMixer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationMixer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationMixer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationMixer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNode(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNode(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNode(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNode;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeAdd2(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeAdd2(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeAdd2(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeAdd2;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeAdd3(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeAdd3(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeAdd3(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeAdd3;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeAnimation(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeAnimation(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeAnimation(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeAnimation;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeBlend2(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeBlend2(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeBlend2(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeBlend2;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeBlend3(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeBlend3(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeBlend3(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeBlend3;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeBlendSpace1D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeBlendSpace1D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeBlendSpace1D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeBlendSpace1D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeBlendSpace2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeBlendSpace2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeBlendSpace2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeBlendSpace2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeBlendTree(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeBlendTree(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeBlendTree(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeBlendTree;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeOneShot(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeOneShot(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeOneShot(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeOneShot;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeOutput(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeOutput(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeOutput(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeOutput;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeStateMachine(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeStateMachine(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeStateMachine(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeStateMachine;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeStateMachinePlayback(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeStateMachinePlayback(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeStateMachinePlayback(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeStateMachinePlayback;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeStateMachineTransition(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeStateMachineTransition(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeStateMachineTransition(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeStateMachineTransition;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeSub2(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeSub2(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeSub2(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeSub2;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeSync(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeSync(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeSync(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeSync;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeTimeScale(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeTimeScale(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeTimeScale(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeTimeScale;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeTimeSeek(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeTimeSeek(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeTimeSeek(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeTimeSeek;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationNodeTransition(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationNodeTransition(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationNodeTransition(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationNodeTransition;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationPlayer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationPlayer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationPlayer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationPlayer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationRootNode(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationRootNode(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationRootNode(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationRootNode;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AnimationTree(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AnimationTree(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AnimationTree(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AnimationTree;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Area2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Area2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Area2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Area2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Area3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Area3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Area3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Area3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ArrayMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ArrayMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ArrayMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ArrayMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ArrayOccluder3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ArrayOccluder3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ArrayOccluder3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ArrayOccluder3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AspectRatioContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AspectRatioContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AspectRatioContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AspectRatioContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AtlasTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AtlasTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AtlasTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AtlasTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioBusLayout(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioBusLayout(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioBusLayout(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioBusLayout;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffect(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffect(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffect(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffect;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectAmplify(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectAmplify(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectAmplify(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectAmplify;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectBandLimitFilter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectBandLimitFilter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectBandLimitFilter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectBandLimitFilter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectBandPassFilter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectBandPassFilter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectBandPassFilter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectBandPassFilter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectCapture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectCapture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectCapture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectCapture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectChorus(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectChorus(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectChorus(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectChorus;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectCompressor(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectCompressor(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectCompressor(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectCompressor;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectDelay(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectDelay(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectDelay(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectDelay;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectDistortion(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectDistortion(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectDistortion(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectDistortion;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectEQ(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectEQ(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectEQ(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectEQ;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectEQ10(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectEQ10(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectEQ10(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectEQ10;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectEQ21(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectEQ21(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectEQ21(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectEQ21;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectEQ6(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectEQ6(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectEQ6(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectEQ6;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectFilter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectFilter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectFilter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectFilter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectHardLimiter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectHardLimiter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectHardLimiter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectHardLimiter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectHighPassFilter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectHighPassFilter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectHighPassFilter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectHighPassFilter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectHighShelfFilter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectHighShelfFilter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectHighShelfFilter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectHighShelfFilter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectInstance(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectInstance(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectInstance(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectInstance;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectLimiter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectLimiter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectLimiter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectLimiter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectLowPassFilter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectLowPassFilter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectLowPassFilter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectLowPassFilter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectLowShelfFilter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectLowShelfFilter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectLowShelfFilter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectLowShelfFilter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectNotchFilter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectNotchFilter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectNotchFilter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectNotchFilter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectPanner(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectPanner(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectPanner(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectPanner;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectPhaser(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectPhaser(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectPhaser(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectPhaser;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectPitchShift(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectPitchShift(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectPitchShift(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectPitchShift;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectRecord(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectRecord(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectRecord(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectRecord;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectReverb(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectReverb(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectReverb(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectReverb;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectSpectrumAnalyzer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectSpectrumAnalyzer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectSpectrumAnalyzer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectSpectrumAnalyzer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectSpectrumAnalyzerInstance(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectSpectrumAnalyzerInstance(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectSpectrumAnalyzerInstance(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectSpectrumAnalyzerInstance;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioEffectStereoEnhance(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioEffectStereoEnhance(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioEffectStereoEnhance(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioEffectStereoEnhance;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioListener2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioListener2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioListener2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioListener2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioListener3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioListener3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioListener3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioListener3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioSample(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioSample(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioSample(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioSample;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioSamplePlayback(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioSamplePlayback(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioSamplePlayback(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioSamplePlayback;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioServer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioServer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioServer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioServer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStream(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStream(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStream(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStream;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamGenerator(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamGenerator(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamGenerator(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamGenerator;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamGeneratorPlayback(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamGeneratorPlayback(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamGeneratorPlayback(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamGeneratorPlayback;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamMP3(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamMP3(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamMP3(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamMP3;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamMicrophone(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamMicrophone(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamMicrophone(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamMicrophone;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamOggVorbis(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamOggVorbis(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamOggVorbis(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamOggVorbis;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamPlayback(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamPlayback(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamPlayback(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamPlayback;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamPlaybackOggVorbis(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamPlaybackOggVorbis(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamPlaybackOggVorbis(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamPlaybackOggVorbis;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamPlaybackPolyphonic(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamPlaybackPolyphonic(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamPlaybackPolyphonic(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamPlaybackPolyphonic;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamPlaybackResampled(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamPlaybackResampled(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamPlaybackResampled(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamPlaybackResampled;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamPlayer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamPlayer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamPlayer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamPlayer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamPlayer2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamPlayer2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamPlayer2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamPlayer2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamPlayer3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamPlayer3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamPlayer3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamPlayer3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamPolyphonic(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamPolyphonic(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamPolyphonic(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamPolyphonic;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamRandomizer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamRandomizer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamRandomizer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamRandomizer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_AudioStreamWAV(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_AudioStreamWAV(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_AudioStreamWAV(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_AudioStreamWAV;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_BackBufferCopy(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_BackBufferCopy(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_BackBufferCopy(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_BackBufferCopy;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_BaseButton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_BaseButton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_BaseButton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_BaseButton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_BaseMaterial3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_BaseMaterial3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_BaseMaterial3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_BaseMaterial3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_BitMap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_BitMap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_BitMap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_BitMap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Bone2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Bone2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Bone2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Bone2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_BoneAttachment3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_BoneAttachment3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_BoneAttachment3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_BoneAttachment3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_BoneMap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_BoneMap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_BoneMap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_BoneMap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_BoxContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_BoxContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_BoxContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_BoxContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_BoxMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_BoxMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_BoxMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_BoxMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_BoxOccluder3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_BoxOccluder3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_BoxOccluder3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_BoxOccluder3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_BoxShape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_BoxShape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_BoxShape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_BoxShape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Button(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Button(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Button(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Button;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ButtonGroup(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ButtonGroup(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ButtonGroup(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ButtonGroup;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CPUParticles2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CPUParticles2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CPUParticles2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CPUParticles2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CPUParticles3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CPUParticles3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CPUParticles3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CPUParticles3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CSGBox3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CSGBox3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CSGBox3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CSGBox3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CSGCombiner3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CSGCombiner3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CSGCombiner3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CSGCombiner3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CSGCylinder3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CSGCylinder3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CSGCylinder3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CSGCylinder3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CSGMesh3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CSGMesh3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CSGMesh3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CSGMesh3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CSGPolygon3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CSGPolygon3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CSGPolygon3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CSGPolygon3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CSGPrimitive3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CSGPrimitive3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CSGPrimitive3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CSGPrimitive3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CSGShape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CSGShape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CSGShape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CSGShape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CSGSphere3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CSGSphere3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CSGSphere3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CSGSphere3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CSGTorus3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CSGTorus3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CSGTorus3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CSGTorus3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CallbackTweener(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CallbackTweener(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CallbackTweener(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CallbackTweener;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Camera2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Camera2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Camera2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Camera2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Camera3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Camera3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Camera3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Camera3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CameraAttributes(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CameraAttributes(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CameraAttributes(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CameraAttributes;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CameraAttributesPhysical(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CameraAttributesPhysical(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CameraAttributesPhysical(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CameraAttributesPhysical;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CameraAttributesPractical(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CameraAttributesPractical(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CameraAttributesPractical(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CameraAttributesPractical;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CameraFeed(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CameraFeed(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CameraFeed(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CameraFeed;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CameraServer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CameraServer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CameraServer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CameraServer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CameraTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CameraTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CameraTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CameraTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CanvasGroup(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CanvasGroup(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CanvasGroup(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CanvasGroup;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CanvasItem(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CanvasItem(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CanvasItem(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CanvasItem;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CanvasItemMaterial(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CanvasItemMaterial(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CanvasItemMaterial(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CanvasItemMaterial;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CanvasLayer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CanvasLayer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CanvasLayer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CanvasLayer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CanvasModulate(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CanvasModulate(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CanvasModulate(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CanvasModulate;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CanvasTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CanvasTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CanvasTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CanvasTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CapsuleMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CapsuleMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CapsuleMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CapsuleMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CapsuleShape2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CapsuleShape2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CapsuleShape2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CapsuleShape2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CapsuleShape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CapsuleShape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CapsuleShape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CapsuleShape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CenterContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CenterContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CenterContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CenterContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CharFXTransform(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CharFXTransform(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CharFXTransform(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CharFXTransform;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CharacterBody2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CharacterBody2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CharacterBody2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CharacterBody2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CharacterBody3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CharacterBody3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CharacterBody3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CharacterBody3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CheckBox(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CheckBox(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CheckBox(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CheckBox;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CheckButton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CheckButton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CheckButton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CheckButton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CircleShape2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CircleShape2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CircleShape2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CircleShape2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ClassDB(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ClassDB(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ClassDB(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ClassDB;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CodeEdit(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CodeEdit(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CodeEdit(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CodeEdit;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CodeHighlighter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CodeHighlighter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CodeHighlighter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CodeHighlighter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CollisionObject2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CollisionObject2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CollisionObject2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CollisionObject2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CollisionObject3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CollisionObject3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CollisionObject3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CollisionObject3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CollisionPolygon2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CollisionPolygon2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CollisionPolygon2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CollisionPolygon2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CollisionPolygon3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CollisionPolygon3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CollisionPolygon3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CollisionPolygon3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CollisionShape2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CollisionShape2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CollisionShape2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CollisionShape2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CollisionShape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CollisionShape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CollisionShape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CollisionShape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ColorPicker(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ColorPicker(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ColorPicker(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ColorPicker;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ColorPickerButton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ColorPickerButton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ColorPickerButton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ColorPickerButton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ColorRect(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ColorRect(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ColorRect(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ColorRect;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Compositor(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Compositor(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Compositor(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Compositor;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CompositorEffect(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CompositorEffect(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CompositorEffect(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CompositorEffect;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CompressedCubemap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CompressedCubemap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CompressedCubemap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CompressedCubemap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CompressedCubemapArray(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CompressedCubemapArray(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CompressedCubemapArray(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CompressedCubemapArray;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CompressedTexture2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CompressedTexture2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CompressedTexture2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CompressedTexture2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CompressedTexture2DArray(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CompressedTexture2DArray(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CompressedTexture2DArray(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CompressedTexture2DArray;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CompressedTexture3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CompressedTexture3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CompressedTexture3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CompressedTexture3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CompressedTextureLayered(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CompressedTextureLayered(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CompressedTextureLayered(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CompressedTextureLayered;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ConcavePolygonShape2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ConcavePolygonShape2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ConcavePolygonShape2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ConcavePolygonShape2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ConcavePolygonShape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ConcavePolygonShape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ConcavePolygonShape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ConcavePolygonShape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ConeTwistJoint3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ConeTwistJoint3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ConeTwistJoint3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ConeTwistJoint3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ConfigFile(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ConfigFile(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ConfigFile(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ConfigFile;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ConfirmationDialog(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ConfirmationDialog(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ConfirmationDialog(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ConfirmationDialog;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Container(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Container(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Container(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Container;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Control(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Control(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Control(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Control;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ConvexPolygonShape2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ConvexPolygonShape2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ConvexPolygonShape2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ConvexPolygonShape2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ConvexPolygonShape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ConvexPolygonShape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ConvexPolygonShape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ConvexPolygonShape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Crypto(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Crypto(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Crypto(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Crypto;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CryptoKey(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CryptoKey(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CryptoKey(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CryptoKey;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Cubemap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Cubemap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Cubemap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Cubemap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CubemapArray(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CubemapArray(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CubemapArray(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CubemapArray;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Curve(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Curve(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Curve(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Curve;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Curve2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Curve2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Curve2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Curve2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Curve3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Curve3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Curve3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Curve3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CurveTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CurveTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CurveTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CurveTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CurveXYZTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CurveXYZTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CurveXYZTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CurveXYZTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CylinderMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CylinderMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CylinderMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CylinderMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_CylinderShape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_CylinderShape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_CylinderShape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_CylinderShape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_DTLSServer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_DTLSServer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_DTLSServer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_DTLSServer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_DampedSpringJoint2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_DampedSpringJoint2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_DampedSpringJoint2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_DampedSpringJoint2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Decal(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Decal(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Decal(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Decal;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_DirAccess(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_DirAccess(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_DirAccess(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_DirAccess;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_DirectionalLight2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_DirectionalLight2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_DirectionalLight2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_DirectionalLight2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_DirectionalLight3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_DirectionalLight3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_DirectionalLight3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_DirectionalLight3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_DisplayServer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_DisplayServer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_DisplayServer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_DisplayServer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ENetConnection(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ENetConnection(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ENetConnection(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ENetConnection;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ENetMultiplayerPeer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ENetMultiplayerPeer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ENetMultiplayerPeer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ENetMultiplayerPeer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ENetPacketPeer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ENetPacketPeer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ENetPacketPeer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ENetPacketPeer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorCommandPalette(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorCommandPalette(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorCommandPalette(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorCommandPalette;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorDebuggerPlugin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorDebuggerPlugin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorDebuggerPlugin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorDebuggerPlugin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorDebuggerSession(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorDebuggerSession(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorDebuggerSession(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorDebuggerSession;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorExportPlatform(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorExportPlatform(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorExportPlatform(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorExportPlatform;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorExportPlatformAndroid(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorExportPlatformAndroid(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorExportPlatformAndroid(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorExportPlatformAndroid;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorExportPlatformIOS(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorExportPlatformIOS(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorExportPlatformIOS(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorExportPlatformIOS;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorExportPlatformLinuxBSD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorExportPlatformLinuxBSD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorExportPlatformLinuxBSD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorExportPlatformLinuxBSD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorExportPlatformMacOS(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorExportPlatformMacOS(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorExportPlatformMacOS(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorExportPlatformMacOS;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorExportPlatformPC(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorExportPlatformPC(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorExportPlatformPC(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorExportPlatformPC;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorExportPlatformWeb(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorExportPlatformWeb(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorExportPlatformWeb(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorExportPlatformWeb;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorExportPlatformWindows(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorExportPlatformWindows(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorExportPlatformWindows(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorExportPlatformWindows;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorExportPlugin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorExportPlugin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorExportPlugin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorExportPlugin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorFeatureProfile(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorFeatureProfile(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorFeatureProfile(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorFeatureProfile;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorFileDialog(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorFileDialog(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorFileDialog(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorFileDialog;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorFileSystem(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorFileSystem(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorFileSystem(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorFileSystem;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorFileSystemDirectory(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorFileSystemDirectory(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorFileSystemDirectory(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorFileSystemDirectory;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorFileSystemImportFormatSupportQuery(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorFileSystemImportFormatSupportQuery(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorFileSystemImportFormatSupportQuery(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorFileSystemImportFormatSupportQuery;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorImportPlugin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorImportPlugin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorImportPlugin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorImportPlugin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorInspector(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorInspector(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorInspector(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorInspector;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorInspectorPlugin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorInspectorPlugin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorInspectorPlugin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorInspectorPlugin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorInterface(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorInterface(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorInterface(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorInterface;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorNode3DGizmo(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorNode3DGizmo(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorNode3DGizmo(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorNode3DGizmo;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorNode3DGizmoPlugin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorNode3DGizmoPlugin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorNode3DGizmoPlugin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorNode3DGizmoPlugin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorPaths(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorPaths(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorPaths(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorPaths;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorPlugin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorPlugin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorPlugin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorPlugin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorProperty(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorProperty(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorProperty(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorProperty;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorResourceConversionPlugin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorResourceConversionPlugin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorResourceConversionPlugin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorResourceConversionPlugin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorResourcePicker(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorResourcePicker(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorResourcePicker(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorResourcePicker;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorResourcePreview(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorResourcePreview(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorResourcePreview(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorResourcePreview;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorResourcePreviewGenerator(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorResourcePreviewGenerator(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorResourcePreviewGenerator(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorResourcePreviewGenerator;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorResourceTooltipPlugin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorResourceTooltipPlugin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorResourceTooltipPlugin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorResourceTooltipPlugin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorSceneFormatImporter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorSceneFormatImporter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorSceneFormatImporter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorSceneFormatImporter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorSceneFormatImporterBlend(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorSceneFormatImporterBlend(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorSceneFormatImporterBlend(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorSceneFormatImporterBlend;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorSceneFormatImporterGLTF(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorSceneFormatImporterGLTF(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorSceneFormatImporterGLTF(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorSceneFormatImporterGLTF;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorScenePostImport(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorScenePostImport(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorScenePostImport(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorScenePostImport;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorScenePostImportPlugin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorScenePostImportPlugin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorScenePostImportPlugin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorScenePostImportPlugin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorScript(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorScript(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorScript(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorScript;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorScriptPicker(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorScriptPicker(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorScriptPicker(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorScriptPicker;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorSelection(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorSelection(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorSelection(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorSelection;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorSettings(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorSettings(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorSettings(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorSettings;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorSpinSlider(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorSpinSlider(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorSpinSlider(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorSpinSlider;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorSyntaxHighlighter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorSyntaxHighlighter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorSyntaxHighlighter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorSyntaxHighlighter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorTranslationParserPlugin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorTranslationParserPlugin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorTranslationParserPlugin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorTranslationParserPlugin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorUndoRedoManager(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorUndoRedoManager(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorUndoRedoManager(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorUndoRedoManager;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EditorVCSInterface(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EditorVCSInterface(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EditorVCSInterface(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EditorVCSInterface;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EncodedObjectAsID(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EncodedObjectAsID(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EncodedObjectAsID(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EncodedObjectAsID;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Engine(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Engine(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Engine(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Engine;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EngineDebugger(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EngineDebugger(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EngineDebugger(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EngineDebugger;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_EngineProfiler(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_EngineProfiler(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_EngineProfiler(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_EngineProfiler;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Environment(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Environment(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Environment(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Environment;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Expression(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Expression(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Expression(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Expression;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_FastNoiseLite(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_FastNoiseLite(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_FastNoiseLite(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_FastNoiseLite;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_FileAccess(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_FileAccess(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_FileAccess(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_FileAccess;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_FileDialog(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_FileDialog(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_FileDialog(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_FileDialog;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_FileSystemDock(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_FileSystemDock(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_FileSystemDock(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_FileSystemDock;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_FlowContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_FlowContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_FlowContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_FlowContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_FogMaterial(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_FogMaterial(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_FogMaterial(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_FogMaterial;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_FogVolume(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_FogVolume(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_FogVolume(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_FogVolume;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Font(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Font(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Font(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Font;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_FontFile(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_FontFile(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_FontFile(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_FontFile;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_FontVariation(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_FontVariation(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_FontVariation(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_FontVariation;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_FramebufferCacheRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_FramebufferCacheRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_FramebufferCacheRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_FramebufferCacheRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GDExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GDExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GDExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GDExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GDExtensionManager(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GDExtensionManager(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GDExtensionManager(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GDExtensionManager;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GDScript(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GDScript(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GDScript(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GDScript;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFAccessor(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFAccessor(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFAccessor(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFAccessor;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFAnimation(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFAnimation(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFAnimation(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFAnimation;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFBufferView(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFBufferView(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFBufferView(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFBufferView;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFCamera(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFCamera(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFCamera(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFCamera;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFDocument(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFDocument(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFDocument(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFDocument;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFDocumentExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFDocumentExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFDocumentExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFDocumentExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFDocumentExtensionConvertImporterMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFDocumentExtensionConvertImporterMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFDocumentExtensionConvertImporterMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFDocumentExtensionConvertImporterMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFLight(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFLight(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFLight(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFLight;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFNode(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFNode(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFNode(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFNode;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFPhysicsBody(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFPhysicsBody(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFPhysicsBody(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFPhysicsBody;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFPhysicsShape(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFPhysicsShape(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFPhysicsShape(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFPhysicsShape;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFSkeleton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFSkeleton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFSkeleton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFSkeleton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFSkin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFSkin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFSkin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFSkin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFSpecGloss(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFSpecGloss(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFSpecGloss(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFSpecGloss;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFState(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFState(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFState(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFState;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GLTFTextureSampler(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GLTFTextureSampler(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GLTFTextureSampler(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GLTFTextureSampler;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GPUParticles2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GPUParticles2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GPUParticles2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GPUParticles2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GPUParticles3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GPUParticles3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GPUParticles3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GPUParticles3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GPUParticlesAttractor3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GPUParticlesAttractor3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GPUParticlesAttractor3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GPUParticlesAttractor3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GPUParticlesAttractorBox3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GPUParticlesAttractorBox3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GPUParticlesAttractorBox3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GPUParticlesAttractorBox3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GPUParticlesAttractorSphere3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GPUParticlesAttractorSphere3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GPUParticlesAttractorSphere3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GPUParticlesAttractorSphere3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GPUParticlesAttractorVectorField3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GPUParticlesAttractorVectorField3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GPUParticlesAttractorVectorField3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GPUParticlesAttractorVectorField3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GPUParticlesCollision3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GPUParticlesCollision3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GPUParticlesCollision3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GPUParticlesCollision3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GPUParticlesCollisionBox3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GPUParticlesCollisionBox3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GPUParticlesCollisionBox3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GPUParticlesCollisionBox3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GPUParticlesCollisionHeightField3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GPUParticlesCollisionHeightField3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GPUParticlesCollisionHeightField3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GPUParticlesCollisionHeightField3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GPUParticlesCollisionSDF3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GPUParticlesCollisionSDF3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GPUParticlesCollisionSDF3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GPUParticlesCollisionSDF3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GPUParticlesCollisionSphere3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GPUParticlesCollisionSphere3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GPUParticlesCollisionSphere3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GPUParticlesCollisionSphere3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Generic6DOFJoint3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Generic6DOFJoint3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Generic6DOFJoint3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Generic6DOFJoint3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Geometry2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Geometry2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Geometry2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Geometry2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Geometry3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Geometry3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Geometry3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Geometry3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GeometryInstance3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GeometryInstance3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GeometryInstance3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GeometryInstance3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Gradient(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Gradient(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Gradient(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Gradient;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GradientTexture1D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GradientTexture1D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GradientTexture1D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GradientTexture1D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GradientTexture2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GradientTexture2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GradientTexture2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GradientTexture2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GraphEdit(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GraphEdit(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GraphEdit(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GraphEdit;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GraphElement(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GraphElement(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GraphElement(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GraphElement;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GraphFrame(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GraphFrame(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GraphFrame(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GraphFrame;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GraphNode(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GraphNode(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GraphNode(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GraphNode;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GridContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GridContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GridContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GridContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GridMap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GridMap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GridMap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GridMap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_GrooveJoint2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_GrooveJoint2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_GrooveJoint2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_GrooveJoint2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HBoxContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HBoxContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HBoxContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HBoxContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HFlowContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HFlowContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HFlowContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HFlowContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HMACContext(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HMACContext(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HMACContext(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HMACContext;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HScrollBar(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HScrollBar(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HScrollBar(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HScrollBar;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HSeparator(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HSeparator(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HSeparator(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HSeparator;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HSlider(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HSlider(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HSlider(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HSlider;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HSplitContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HSplitContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HSplitContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HSplitContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HTTPClient(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HTTPClient(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HTTPClient(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HTTPClient;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HTTPRequest(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HTTPRequest(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HTTPRequest(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HTTPRequest;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HashingContext(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HashingContext(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HashingContext(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HashingContext;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HeightMapShape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HeightMapShape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HeightMapShape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HeightMapShape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_HingeJoint3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_HingeJoint3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_HingeJoint3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_HingeJoint3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_IP(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_IP(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_IP(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_IP;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Image(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Image(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Image(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Image;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ImageFormatLoader(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ImageFormatLoader(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ImageFormatLoader(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ImageFormatLoader;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ImageFormatLoaderExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ImageFormatLoaderExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ImageFormatLoaderExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ImageFormatLoaderExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ImageTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ImageTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ImageTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ImageTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ImageTexture3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ImageTexture3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ImageTexture3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ImageTexture3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ImageTextureLayered(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ImageTextureLayered(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ImageTextureLayered(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ImageTextureLayered;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ImmediateMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ImmediateMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ImmediateMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ImmediateMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ImporterMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ImporterMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ImporterMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ImporterMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ImporterMeshInstance3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ImporterMeshInstance3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ImporterMeshInstance3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ImporterMeshInstance3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Input(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Input(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Input(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Input;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEvent(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEvent(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEvent(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEvent;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventAction(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventAction(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventAction(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventAction;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventFromWindow(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventFromWindow(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventFromWindow(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventFromWindow;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventGesture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventGesture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventGesture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventGesture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventJoypadButton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventJoypadButton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventJoypadButton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventJoypadButton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventJoypadMotion(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventJoypadMotion(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventJoypadMotion(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventJoypadMotion;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventKey(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventKey(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventKey(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventKey;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventMIDI(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventMIDI(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventMIDI(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventMIDI;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventMagnifyGesture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventMagnifyGesture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventMagnifyGesture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventMagnifyGesture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventMouse(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventMouse(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventMouse(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventMouse;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventMouseButton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventMouseButton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventMouseButton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventMouseButton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventMouseMotion(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventMouseMotion(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventMouseMotion(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventMouseMotion;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventPanGesture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventPanGesture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventPanGesture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventPanGesture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventScreenDrag(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventScreenDrag(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventScreenDrag(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventScreenDrag;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventScreenTouch(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventScreenTouch(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventScreenTouch(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventScreenTouch;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventShortcut(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventShortcut(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventShortcut(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventShortcut;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputEventWithModifiers(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputEventWithModifiers(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputEventWithModifiers(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputEventWithModifiers;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InputMap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InputMap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InputMap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InputMap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_InstancePlaceholder(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_InstancePlaceholder(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_InstancePlaceholder(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_InstancePlaceholder;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_IntervalTweener(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_IntervalTweener(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_IntervalTweener(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_IntervalTweener;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ItemList(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ItemList(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ItemList(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ItemList;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_JNISingleton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_JNISingleton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_JNISingleton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_JNISingleton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_JSON(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_JSON(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_JSON(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_JSON;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_JSONRPC(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_JSONRPC(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_JSONRPC(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_JSONRPC;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_JavaClass(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_JavaClass(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_JavaClass(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_JavaClass;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_JavaClassWrapper(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_JavaClassWrapper(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_JavaClassWrapper(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_JavaClassWrapper;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_JavaScriptBridge(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_JavaScriptBridge(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_JavaScriptBridge(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_JavaScriptBridge;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_JavaScriptObject(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_JavaScriptObject(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_JavaScriptObject(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_JavaScriptObject;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Joint2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Joint2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Joint2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Joint2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Joint3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Joint3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Joint3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Joint3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_KinematicCollision2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_KinematicCollision2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_KinematicCollision2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_KinematicCollision2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_KinematicCollision3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_KinematicCollision3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_KinematicCollision3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_KinematicCollision3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Label(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Label(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Label(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Label;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Label3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Label3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Label3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Label3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_LabelSettings(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_LabelSettings(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_LabelSettings(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_LabelSettings;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Light2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Light2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Light2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Light2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Light3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Light3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Light3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Light3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_LightOccluder2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_LightOccluder2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_LightOccluder2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_LightOccluder2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_LightmapGI(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_LightmapGI(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_LightmapGI(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_LightmapGI;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_LightmapGIData(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_LightmapGIData(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_LightmapGIData(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_LightmapGIData;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_LightmapProbe(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_LightmapProbe(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_LightmapProbe(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_LightmapProbe;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Lightmapper(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Lightmapper(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Lightmapper(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Lightmapper;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_LightmapperRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_LightmapperRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_LightmapperRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_LightmapperRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Line2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Line2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Line2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Line2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_LineEdit(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_LineEdit(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_LineEdit(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_LineEdit;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_LinkButton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_LinkButton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_LinkButton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_LinkButton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MainLoop(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MainLoop(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MainLoop(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MainLoop;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MarginContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MarginContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MarginContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MarginContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Marker2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Marker2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Marker2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Marker2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Marker3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Marker3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Marker3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Marker3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Marshalls(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Marshalls(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Marshalls(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Marshalls;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Material(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Material(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Material(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Material;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MenuBar(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MenuBar(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MenuBar(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MenuBar;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MenuButton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MenuButton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MenuButton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MenuButton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Mesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Mesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Mesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Mesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MeshConvexDecompositionSettings(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MeshConvexDecompositionSettings(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MeshConvexDecompositionSettings(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MeshConvexDecompositionSettings;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MeshDataTool(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MeshDataTool(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MeshDataTool(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MeshDataTool;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MeshInstance2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MeshInstance2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MeshInstance2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MeshInstance2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MeshInstance3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MeshInstance3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MeshInstance3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MeshInstance3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MeshLibrary(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MeshLibrary(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MeshLibrary(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MeshLibrary;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MeshTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MeshTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MeshTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MeshTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MethodTweener(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MethodTweener(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MethodTweener(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MethodTweener;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MissingNode(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MissingNode(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MissingNode(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MissingNode;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MissingResource(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MissingResource(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MissingResource(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MissingResource;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MobileVRInterface(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MobileVRInterface(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MobileVRInterface(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MobileVRInterface;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MovieWriter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MovieWriter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MovieWriter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MovieWriter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MultiMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MultiMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MultiMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MultiMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MultiMeshInstance2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MultiMeshInstance2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MultiMeshInstance2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MultiMeshInstance2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MultiMeshInstance3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MultiMeshInstance3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MultiMeshInstance3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MultiMeshInstance3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MultiplayerAPI(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MultiplayerAPI(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MultiplayerAPI(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MultiplayerAPI;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MultiplayerAPIExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MultiplayerAPIExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MultiplayerAPIExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MultiplayerAPIExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MultiplayerPeer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MultiplayerPeer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MultiplayerPeer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MultiplayerPeer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MultiplayerPeerExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MultiplayerPeerExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MultiplayerPeerExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MultiplayerPeerExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MultiplayerSpawner(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MultiplayerSpawner(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MultiplayerSpawner(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MultiplayerSpawner;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_MultiplayerSynchronizer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_MultiplayerSynchronizer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_MultiplayerSynchronizer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_MultiplayerSynchronizer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Mutex(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Mutex(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Mutex(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Mutex;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NativeMenu(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NativeMenu(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NativeMenu(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NativeMenu;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationAgent2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationAgent2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationAgent2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationAgent2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationAgent3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationAgent3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationAgent3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationAgent3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationLink2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationLink2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationLink2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationLink2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationLink3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationLink3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationLink3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationLink3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationMeshGenerator(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationMeshGenerator(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationMeshGenerator(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationMeshGenerator;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationMeshSourceGeometryData2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationMeshSourceGeometryData2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationMeshSourceGeometryData2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationMeshSourceGeometryData2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationMeshSourceGeometryData3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationMeshSourceGeometryData3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationMeshSourceGeometryData3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationMeshSourceGeometryData3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationObstacle2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationObstacle2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationObstacle2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationObstacle2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationObstacle3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationObstacle3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationObstacle3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationObstacle3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationPathQueryParameters2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationPathQueryParameters2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationPathQueryParameters2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationPathQueryParameters2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationPathQueryParameters3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationPathQueryParameters3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationPathQueryParameters3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationPathQueryParameters3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationPathQueryResult2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationPathQueryResult2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationPathQueryResult2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationPathQueryResult2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationPathQueryResult3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationPathQueryResult3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationPathQueryResult3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationPathQueryResult3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationPolygon(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationPolygon(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationPolygon(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationPolygon;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationRegion2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationRegion2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationRegion2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationRegion2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationRegion3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationRegion3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationRegion3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationRegion3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationServer2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationServer2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationServer2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationServer2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NavigationServer3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NavigationServer3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NavigationServer3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NavigationServer3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NinePatchRect(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NinePatchRect(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NinePatchRect(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NinePatchRect;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Node(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Node(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Node(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Node;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Node2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Node2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Node2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Node2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Node3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Node3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Node3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Node3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Node3DGizmo(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Node3DGizmo(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Node3DGizmo(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Node3DGizmo;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Noise(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Noise(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Noise(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Noise;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NoiseTexture2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NoiseTexture2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NoiseTexture2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NoiseTexture2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_NoiseTexture3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_NoiseTexture3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_NoiseTexture3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_NoiseTexture3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ORMMaterial3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ORMMaterial3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ORMMaterial3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ORMMaterial3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OS(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OS(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OS(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OS;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Object(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Object(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Object(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Object;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Occluder3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Occluder3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Occluder3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Occluder3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OccluderInstance3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OccluderInstance3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OccluderInstance3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OccluderInstance3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OccluderPolygon2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OccluderPolygon2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OccluderPolygon2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OccluderPolygon2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OfflineMultiplayerPeer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OfflineMultiplayerPeer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OfflineMultiplayerPeer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OfflineMultiplayerPeer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OggPacketSequence(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OggPacketSequence(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OggPacketSequence(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OggPacketSequence;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OggPacketSequencePlayback(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OggPacketSequencePlayback(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OggPacketSequencePlayback(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OggPacketSequencePlayback;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OmniLight3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OmniLight3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OmniLight3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OmniLight3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRAPIExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRAPIExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRAPIExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRAPIExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRAction(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRAction(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRAction(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRAction;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRActionMap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRActionMap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRActionMap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRActionMap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRActionSet(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRActionSet(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRActionSet(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRActionSet;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRCompositionLayer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRCompositionLayer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRCompositionLayer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRCompositionLayer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRCompositionLayerCylinder(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRCompositionLayerCylinder(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRCompositionLayerCylinder(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRCompositionLayerCylinder;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRCompositionLayerEquirect(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRCompositionLayerEquirect(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRCompositionLayerEquirect(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRCompositionLayerEquirect;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRCompositionLayerQuad(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRCompositionLayerQuad(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRCompositionLayerQuad(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRCompositionLayerQuad;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRExtensionWrapperExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRExtensionWrapperExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRExtensionWrapperExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRExtensionWrapperExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRHand(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRHand(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRHand(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRHand;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRIPBinding(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRIPBinding(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRIPBinding(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRIPBinding;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRInteractionProfile(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRInteractionProfile(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRInteractionProfile(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRInteractionProfile;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRInteractionProfileMetadata(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRInteractionProfileMetadata(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRInteractionProfileMetadata(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRInteractionProfileMetadata;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OpenXRInterface(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OpenXRInterface(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OpenXRInterface(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OpenXRInterface;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OptimizedTranslation(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OptimizedTranslation(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OptimizedTranslation(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OptimizedTranslation;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_OptionButton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_OptionButton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_OptionButton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_OptionButton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PCKPacker(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PCKPacker(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PCKPacker(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PCKPacker;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PackedDataContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PackedDataContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PackedDataContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PackedDataContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PackedDataContainerRef(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PackedDataContainerRef(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PackedDataContainerRef(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PackedDataContainerRef;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PackedScene(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PackedScene(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PackedScene(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PackedScene;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PacketPeer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PacketPeer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PacketPeer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PacketPeer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PacketPeerDTLS(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PacketPeerDTLS(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PacketPeerDTLS(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PacketPeerDTLS;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PacketPeerExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PacketPeerExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PacketPeerExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PacketPeerExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PacketPeerStream(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PacketPeerStream(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PacketPeerStream(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PacketPeerStream;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PacketPeerUDP(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PacketPeerUDP(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PacketPeerUDP(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PacketPeerUDP;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Panel(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Panel(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Panel(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Panel;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PanelContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PanelContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PanelContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PanelContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PanoramaSkyMaterial(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PanoramaSkyMaterial(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PanoramaSkyMaterial(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PanoramaSkyMaterial;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Parallax2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Parallax2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Parallax2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Parallax2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ParallaxBackground(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ParallaxBackground(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ParallaxBackground(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ParallaxBackground;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ParallaxLayer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ParallaxLayer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ParallaxLayer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ParallaxLayer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ParticleProcessMaterial(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ParticleProcessMaterial(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ParticleProcessMaterial(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ParticleProcessMaterial;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Path2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Path2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Path2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Path2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Path3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Path3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Path3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Path3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PathFollow2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PathFollow2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PathFollow2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PathFollow2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PathFollow3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PathFollow3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PathFollow3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PathFollow3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Performance(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Performance(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Performance(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Performance;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicalBone2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicalBone2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicalBone2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicalBone2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicalBone3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicalBone3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicalBone3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicalBone3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicalBoneSimulator3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicalBoneSimulator3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicalBoneSimulator3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicalBoneSimulator3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicalSkyMaterial(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicalSkyMaterial(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicalSkyMaterial(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicalSkyMaterial;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsBody2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsBody2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsBody2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsBody2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsBody3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsBody3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsBody3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsBody3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsDirectBodyState2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsDirectBodyState2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsDirectBodyState2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsDirectBodyState2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsDirectBodyState2DExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsDirectBodyState2DExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsDirectBodyState2DExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsDirectBodyState2DExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsDirectBodyState3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsDirectBodyState3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsDirectBodyState3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsDirectBodyState3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsDirectBodyState3DExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsDirectBodyState3DExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsDirectBodyState3DExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsDirectBodyState3DExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsDirectSpaceState2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsDirectSpaceState2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsDirectSpaceState2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsDirectSpaceState2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsDirectSpaceState2DExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsDirectSpaceState2DExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsDirectSpaceState2DExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsDirectSpaceState2DExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsDirectSpaceState3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsDirectSpaceState3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsDirectSpaceState3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsDirectSpaceState3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsDirectSpaceState3DExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsDirectSpaceState3DExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsDirectSpaceState3DExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsDirectSpaceState3DExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsMaterial(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsMaterial(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsMaterial(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsMaterial;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsPointQueryParameters2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsPointQueryParameters2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsPointQueryParameters2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsPointQueryParameters2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsPointQueryParameters3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsPointQueryParameters3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsPointQueryParameters3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsPointQueryParameters3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsRayQueryParameters2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsRayQueryParameters2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsRayQueryParameters2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsRayQueryParameters2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsRayQueryParameters3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsRayQueryParameters3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsRayQueryParameters3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsRayQueryParameters3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsServer2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsServer2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsServer2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsServer2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsServer2DExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsServer2DExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsServer2DExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsServer2DExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsServer2DManager(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsServer2DManager(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsServer2DManager(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsServer2DManager;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsServer3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsServer3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsServer3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsServer3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsServer3DExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsServer3DExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsServer3DExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsServer3DExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsServer3DManager(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsServer3DManager(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsServer3DManager(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsServer3DManager;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsServer3DRenderingServerHandler(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsServer3DRenderingServerHandler(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsServer3DRenderingServerHandler(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsServer3DRenderingServerHandler;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsShapeQueryParameters2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsShapeQueryParameters2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsShapeQueryParameters2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsShapeQueryParameters2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsShapeQueryParameters3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsShapeQueryParameters3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsShapeQueryParameters3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsShapeQueryParameters3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsTestMotionParameters2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsTestMotionParameters2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsTestMotionParameters2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsTestMotionParameters2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsTestMotionParameters3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsTestMotionParameters3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsTestMotionParameters3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsTestMotionParameters3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsTestMotionResult2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsTestMotionResult2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsTestMotionResult2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsTestMotionResult2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PhysicsTestMotionResult3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PhysicsTestMotionResult3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PhysicsTestMotionResult3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PhysicsTestMotionResult3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PinJoint2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PinJoint2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PinJoint2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PinJoint2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PinJoint3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PinJoint3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PinJoint3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PinJoint3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PlaceholderCubemap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PlaceholderCubemap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PlaceholderCubemap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PlaceholderCubemap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PlaceholderCubemapArray(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PlaceholderCubemapArray(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PlaceholderCubemapArray(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PlaceholderCubemapArray;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PlaceholderMaterial(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PlaceholderMaterial(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PlaceholderMaterial(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PlaceholderMaterial;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PlaceholderMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PlaceholderMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PlaceholderMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PlaceholderMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PlaceholderTexture2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PlaceholderTexture2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PlaceholderTexture2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PlaceholderTexture2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PlaceholderTexture2DArray(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PlaceholderTexture2DArray(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PlaceholderTexture2DArray(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PlaceholderTexture2DArray;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PlaceholderTexture3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PlaceholderTexture3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PlaceholderTexture3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PlaceholderTexture3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PlaceholderTextureLayered(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PlaceholderTextureLayered(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PlaceholderTextureLayered(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PlaceholderTextureLayered;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PlaneMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PlaneMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PlaneMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PlaneMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PointLight2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PointLight2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PointLight2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PointLight2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PointMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PointMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PointMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PointMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Polygon2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Polygon2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Polygon2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Polygon2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PolygonOccluder3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PolygonOccluder3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PolygonOccluder3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PolygonOccluder3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PolygonPathFinder(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PolygonPathFinder(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PolygonPathFinder(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PolygonPathFinder;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Popup(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Popup(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Popup(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Popup;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PopupMenu(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PopupMenu(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PopupMenu(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PopupMenu;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PopupPanel(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PopupPanel(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PopupPanel(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PopupPanel;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PortableCompressedTexture2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PortableCompressedTexture2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PortableCompressedTexture2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PortableCompressedTexture2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PrimitiveMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PrimitiveMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PrimitiveMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PrimitiveMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PrismMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PrismMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PrismMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PrismMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ProceduralSkyMaterial(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ProceduralSkyMaterial(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ProceduralSkyMaterial(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ProceduralSkyMaterial;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ProgressBar(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ProgressBar(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ProgressBar(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ProgressBar;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ProjectSettings(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ProjectSettings(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ProjectSettings(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ProjectSettings;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_PropertyTweener(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_PropertyTweener(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_PropertyTweener(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_PropertyTweener;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_QuadMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_QuadMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_QuadMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_QuadMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_QuadOccluder3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_QuadOccluder3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_QuadOccluder3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_QuadOccluder3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDAttachmentFormat(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDAttachmentFormat(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDAttachmentFormat(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDAttachmentFormat;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDFramebufferPass(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDFramebufferPass(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDFramebufferPass(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDFramebufferPass;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDPipelineColorBlendState(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDPipelineColorBlendState(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDPipelineColorBlendState(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDPipelineColorBlendState;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDPipelineColorBlendStateAttachment(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDPipelineColorBlendStateAttachment(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDPipelineColorBlendStateAttachment(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDPipelineColorBlendStateAttachment;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDPipelineDepthStencilState(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDPipelineDepthStencilState(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDPipelineDepthStencilState(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDPipelineDepthStencilState;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDPipelineMultisampleState(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDPipelineMultisampleState(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDPipelineMultisampleState(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDPipelineMultisampleState;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDPipelineRasterizationState(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDPipelineRasterizationState(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDPipelineRasterizationState(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDPipelineRasterizationState;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDPipelineSpecializationConstant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDPipelineSpecializationConstant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDPipelineSpecializationConstant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDPipelineSpecializationConstant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDSamplerState(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDSamplerState(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDSamplerState(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDSamplerState;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDShaderFile(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDShaderFile(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDShaderFile(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDShaderFile;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDShaderSPIRV(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDShaderSPIRV(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDShaderSPIRV(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDShaderSPIRV;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDShaderSource(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDShaderSource(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDShaderSource(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDShaderSource;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDTextureFormat(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDTextureFormat(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDTextureFormat(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDTextureFormat;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDTextureView(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDTextureView(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDTextureView(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDTextureView;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDUniform(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDUniform(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDUniform(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDUniform;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RDVertexAttribute(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RDVertexAttribute(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RDVertexAttribute(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RDVertexAttribute;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RandomNumberGenerator(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RandomNumberGenerator(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RandomNumberGenerator(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RandomNumberGenerator;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Range(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Range(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Range(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Range;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RayCast2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RayCast2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RayCast2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RayCast2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RayCast3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RayCast3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RayCast3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RayCast3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RectangleShape2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RectangleShape2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RectangleShape2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RectangleShape2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RefCounted(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RefCounted(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RefCounted(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RefCounted;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ReferenceRect(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ReferenceRect(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ReferenceRect(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ReferenceRect;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ReflectionProbe(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ReflectionProbe(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ReflectionProbe(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ReflectionProbe;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RegEx(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RegEx(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RegEx(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RegEx;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RegExMatch(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RegExMatch(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RegExMatch(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RegExMatch;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RemoteTransform2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RemoteTransform2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RemoteTransform2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RemoteTransform2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RemoteTransform3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RemoteTransform3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RemoteTransform3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RemoteTransform3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderData(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderData(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderData(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderData;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderDataExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderDataExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderDataExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderDataExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderDataRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderDataRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderDataRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderDataRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderSceneBuffers(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderSceneBuffers(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderSceneBuffers(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderSceneBuffers;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderSceneBuffersConfiguration(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderSceneBuffersConfiguration(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderSceneBuffersConfiguration(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderSceneBuffersConfiguration;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderSceneBuffersExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderSceneBuffersExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderSceneBuffersExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderSceneBuffersExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderSceneBuffersRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderSceneBuffersRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderSceneBuffersRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderSceneBuffersRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderSceneData(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderSceneData(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderSceneData(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderSceneData;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderSceneDataExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderSceneDataExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderSceneDataExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderSceneDataExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderSceneDataRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderSceneDataRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderSceneDataRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderSceneDataRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderingDevice(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderingDevice(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderingDevice(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderingDevice;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RenderingServer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RenderingServer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RenderingServer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RenderingServer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Resource(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Resource(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Resource(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Resource;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceFormatLoader(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceFormatLoader(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceFormatLoader(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceFormatLoader;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceFormatSaver(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceFormatSaver(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceFormatSaver(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceFormatSaver;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterBMFont(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterBMFont(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterBMFont(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterBMFont;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterBitMap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterBitMap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterBitMap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterBitMap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterCSVTranslation(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterCSVTranslation(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterCSVTranslation(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterCSVTranslation;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterDynamicFont(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterDynamicFont(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterDynamicFont(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterDynamicFont;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterImage(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterImage(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterImage(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterImage;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterImageFont(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterImageFont(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterImageFont(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterImageFont;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterLayeredTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterLayeredTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterLayeredTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterLayeredTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterMP3(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterMP3(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterMP3(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterMP3;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterOBJ(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterOBJ(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterOBJ(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterOBJ;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterOggVorbis(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterOggVorbis(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterOggVorbis(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterOggVorbis;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterScene(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterScene(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterScene(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterScene;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterShaderFile(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterShaderFile(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterShaderFile(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterShaderFile;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterTextureAtlas(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterTextureAtlas(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterTextureAtlas(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterTextureAtlas;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceImporterWAV(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceImporterWAV(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceImporterWAV(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceImporterWAV;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceLoader(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceLoader(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceLoader(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceLoader;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourcePreloader(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourcePreloader(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourcePreloader(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourcePreloader;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceSaver(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceSaver(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceSaver(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceSaver;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ResourceUID(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ResourceUID(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ResourceUID(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ResourceUID;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RibbonTrailMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RibbonTrailMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RibbonTrailMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RibbonTrailMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RichTextEffect(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RichTextEffect(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RichTextEffect(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RichTextEffect;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RichTextLabel(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RichTextLabel(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RichTextLabel(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RichTextLabel;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RigidBody2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RigidBody2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RigidBody2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RigidBody2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RigidBody3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RigidBody3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RigidBody3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RigidBody3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_RootMotionView(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_RootMotionView(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_RootMotionView(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_RootMotionView;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SceneMultiplayer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SceneMultiplayer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SceneMultiplayer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SceneMultiplayer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SceneReplicationConfig(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SceneReplicationConfig(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SceneReplicationConfig(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SceneReplicationConfig;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SceneState(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SceneState(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SceneState(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SceneState;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SceneTree(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SceneTree(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SceneTree(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SceneTree;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SceneTreeTimer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SceneTreeTimer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SceneTreeTimer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SceneTreeTimer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Script(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Script(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Script(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Script;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ScriptCreateDialog(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ScriptCreateDialog(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ScriptCreateDialog(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ScriptCreateDialog;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ScriptEditor(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ScriptEditor(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ScriptEditor(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ScriptEditor;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ScriptEditorBase(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ScriptEditorBase(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ScriptEditorBase(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ScriptEditorBase;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ScriptExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ScriptExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ScriptExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ScriptExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ScriptLanguage(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ScriptLanguage(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ScriptLanguage(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ScriptLanguage;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ScriptLanguageExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ScriptLanguageExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ScriptLanguageExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ScriptLanguageExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ScrollBar(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ScrollBar(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ScrollBar(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ScrollBar;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ScrollContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ScrollContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ScrollContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ScrollContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SegmentShape2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SegmentShape2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SegmentShape2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SegmentShape2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Semaphore(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Semaphore(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Semaphore(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Semaphore;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SeparationRayShape2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SeparationRayShape2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SeparationRayShape2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SeparationRayShape2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SeparationRayShape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SeparationRayShape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SeparationRayShape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SeparationRayShape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Separator(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Separator(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Separator(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Separator;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Shader(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Shader(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Shader(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Shader;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ShaderGlobalsOverride(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ShaderGlobalsOverride(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ShaderGlobalsOverride(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ShaderGlobalsOverride;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ShaderInclude(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ShaderInclude(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ShaderInclude(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ShaderInclude;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ShaderMaterial(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ShaderMaterial(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ShaderMaterial(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ShaderMaterial;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Shape2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Shape2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Shape2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Shape2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Shape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Shape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Shape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Shape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ShapeCast2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ShapeCast2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ShapeCast2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ShapeCast2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ShapeCast3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ShapeCast3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ShapeCast3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ShapeCast3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Shortcut(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Shortcut(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Shortcut(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Shortcut;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Skeleton2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Skeleton2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Skeleton2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Skeleton2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Skeleton3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Skeleton3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Skeleton3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Skeleton3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonIK3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonIK3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonIK3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonIK3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonModification2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonModification2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonModification2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonModification2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonModification2DCCDIK(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonModification2DCCDIK(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonModification2DCCDIK(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonModification2DCCDIK;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonModification2DFABRIK(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonModification2DFABRIK(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonModification2DFABRIK(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonModification2DFABRIK;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonModification2DJiggle(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonModification2DJiggle(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonModification2DJiggle(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonModification2DJiggle;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonModification2DLookAt(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonModification2DLookAt(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonModification2DLookAt(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonModification2DLookAt;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonModification2DPhysicalBones(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonModification2DPhysicalBones(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonModification2DPhysicalBones(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonModification2DPhysicalBones;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonModification2DStackHolder(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonModification2DStackHolder(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonModification2DStackHolder(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonModification2DStackHolder;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonModification2DTwoBoneIK(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonModification2DTwoBoneIK(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonModification2DTwoBoneIK(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonModification2DTwoBoneIK;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonModificationStack2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonModificationStack2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonModificationStack2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonModificationStack2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonModifier3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonModifier3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonModifier3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonModifier3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonProfile(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonProfile(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonProfile(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonProfile;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkeletonProfileHumanoid(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkeletonProfileHumanoid(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkeletonProfileHumanoid(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkeletonProfileHumanoid;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Skin(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Skin(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Skin(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Skin;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SkinReference(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SkinReference(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SkinReference(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SkinReference;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Sky(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Sky(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Sky(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Sky;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Slider(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Slider(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Slider(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Slider;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SliderJoint3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SliderJoint3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SliderJoint3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SliderJoint3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SoftBody3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SoftBody3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SoftBody3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SoftBody3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SphereMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SphereMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SphereMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SphereMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SphereOccluder3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SphereOccluder3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SphereOccluder3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SphereOccluder3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SphereShape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SphereShape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SphereShape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SphereShape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SpinBox(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SpinBox(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SpinBox(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SpinBox;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SplitContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SplitContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SplitContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SplitContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SpotLight3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SpotLight3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SpotLight3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SpotLight3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SpringArm3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SpringArm3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SpringArm3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SpringArm3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Sprite2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Sprite2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Sprite2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Sprite2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Sprite3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Sprite3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Sprite3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Sprite3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SpriteBase3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SpriteBase3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SpriteBase3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SpriteBase3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SpriteFrames(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SpriteFrames(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SpriteFrames(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SpriteFrames;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StandardMaterial3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StandardMaterial3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StandardMaterial3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StandardMaterial3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StaticBody2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StaticBody2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StaticBody2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StaticBody2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StaticBody3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StaticBody3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StaticBody3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StaticBody3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StatusIndicator(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StatusIndicator(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StatusIndicator(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StatusIndicator;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StreamPeer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StreamPeer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StreamPeer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StreamPeer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StreamPeerBuffer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StreamPeerBuffer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StreamPeerBuffer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StreamPeerBuffer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StreamPeerExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StreamPeerExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StreamPeerExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StreamPeerExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StreamPeerGZIP(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StreamPeerGZIP(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StreamPeerGZIP(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StreamPeerGZIP;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StreamPeerTCP(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StreamPeerTCP(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StreamPeerTCP(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StreamPeerTCP;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StreamPeerTLS(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StreamPeerTLS(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StreamPeerTLS(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StreamPeerTLS;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StyleBox(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StyleBox(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StyleBox(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StyleBox;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StyleBoxEmpty(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StyleBoxEmpty(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StyleBoxEmpty(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StyleBoxEmpty;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StyleBoxFlat(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StyleBoxFlat(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StyleBoxFlat(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StyleBoxFlat;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StyleBoxLine(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StyleBoxLine(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StyleBoxLine(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StyleBoxLine;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_StyleBoxTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_StyleBoxTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_StyleBoxTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_StyleBoxTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SubViewport(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SubViewport(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SubViewport(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SubViewport;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SubViewportContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SubViewportContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SubViewportContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SubViewportContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SurfaceTool(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SurfaceTool(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SurfaceTool(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SurfaceTool;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SyntaxHighlighter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SyntaxHighlighter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SyntaxHighlighter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SyntaxHighlighter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_SystemFont(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_SystemFont(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_SystemFont(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_SystemFont;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TCPServer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TCPServer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TCPServer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TCPServer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TLSOptions(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TLSOptions(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TLSOptions(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TLSOptions;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TabBar(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TabBar(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TabBar(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TabBar;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TabContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TabContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TabContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TabContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextEdit(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextEdit(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextEdit(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextEdit;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextLine(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextLine(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextLine(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextLine;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextParagraph(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextParagraph(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextParagraph(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextParagraph;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextServer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextServer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextServer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextServer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextServerAdvanced(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextServerAdvanced(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextServerAdvanced(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextServerAdvanced;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextServerDummy(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextServerDummy(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextServerDummy(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextServerDummy;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextServerExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextServerExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextServerExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextServerExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextServerManager(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextServerManager(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextServerManager(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextServerManager;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Texture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Texture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Texture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Texture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Texture2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Texture2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Texture2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Texture2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Texture2DArray(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Texture2DArray(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Texture2DArray(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Texture2DArray;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Texture2DArrayRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Texture2DArrayRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Texture2DArrayRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Texture2DArrayRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Texture2DRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Texture2DRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Texture2DRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Texture2DRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Texture3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Texture3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Texture3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Texture3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Texture3DRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Texture3DRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Texture3DRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Texture3DRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextureButton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextureButton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextureButton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextureButton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextureCubemapArrayRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextureCubemapArrayRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextureCubemapArrayRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextureCubemapArrayRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextureCubemapRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextureCubemapRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextureCubemapRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextureCubemapRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextureLayered(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextureLayered(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextureLayered(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextureLayered;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextureLayeredRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextureLayeredRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextureLayeredRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextureLayeredRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextureProgressBar(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextureProgressBar(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextureProgressBar(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextureProgressBar;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TextureRect(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TextureRect(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TextureRect(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TextureRect;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Theme(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Theme(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Theme(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Theme;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ThemeDB(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ThemeDB(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ThemeDB(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ThemeDB;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Thread(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Thread(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Thread(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Thread;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TileData(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TileData(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TileData(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TileData;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TileMap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TileMap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TileMap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TileMap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TileMapLayer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TileMapLayer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TileMapLayer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TileMapLayer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TileMapPattern(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TileMapPattern(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TileMapPattern(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TileMapPattern;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TileSet(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TileSet(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TileSet(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TileSet;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TileSetAtlasSource(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TileSetAtlasSource(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TileSetAtlasSource(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TileSetAtlasSource;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TileSetScenesCollectionSource(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TileSetScenesCollectionSource(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TileSetScenesCollectionSource(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TileSetScenesCollectionSource;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TileSetSource(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TileSetSource(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TileSetSource(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TileSetSource;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Time(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Time(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Time(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Time;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Timer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Timer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Timer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Timer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TorusMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TorusMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TorusMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TorusMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TouchScreenButton(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TouchScreenButton(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TouchScreenButton(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TouchScreenButton;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Translation(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Translation(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Translation(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Translation;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TranslationServer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TranslationServer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TranslationServer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TranslationServer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Tree(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Tree(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Tree(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Tree;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TreeItem(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TreeItem(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TreeItem(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TreeItem;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TriangleMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TriangleMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TriangleMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TriangleMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_TubeTrailMesh(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_TubeTrailMesh(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_TubeTrailMesh(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_TubeTrailMesh;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Tween(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Tween(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Tween(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Tween;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Tweener(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Tweener(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Tweener(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Tweener;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_UDPServer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_UDPServer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_UDPServer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_UDPServer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_UPNP(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_UPNP(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_UPNP(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_UPNP;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_UPNPDevice(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_UPNPDevice(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_UPNPDevice(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_UPNPDevice;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_UndoRedo(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_UndoRedo(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_UndoRedo(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_UndoRedo;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_UniformSetCacheRD(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_UniformSetCacheRD(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_UniformSetCacheRD(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_UniformSetCacheRD;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VBoxContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VBoxContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VBoxContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VBoxContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VFlowContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VFlowContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VFlowContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VFlowContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VScrollBar(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VScrollBar(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VScrollBar(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VScrollBar;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VSeparator(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VSeparator(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VSeparator(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VSeparator;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VSlider(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VSlider(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VSlider(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VSlider;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VSplitContainer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VSplitContainer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VSplitContainer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VSplitContainer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VehicleBody3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VehicleBody3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VehicleBody3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VehicleBody3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VehicleWheel3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VehicleWheel3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VehicleWheel3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VehicleWheel3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VideoStream(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VideoStream(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VideoStream(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VideoStream;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VideoStreamPlayback(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VideoStreamPlayback(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VideoStreamPlayback(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VideoStreamPlayback;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VideoStreamPlayer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VideoStreamPlayer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VideoStreamPlayer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VideoStreamPlayer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VideoStreamTheora(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VideoStreamTheora(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VideoStreamTheora(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VideoStreamTheora;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Viewport(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Viewport(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Viewport(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Viewport;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ViewportTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ViewportTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ViewportTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ViewportTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisibleOnScreenEnabler2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisibleOnScreenEnabler2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisibleOnScreenEnabler2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisibleOnScreenEnabler2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisibleOnScreenEnabler3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisibleOnScreenEnabler3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisibleOnScreenEnabler3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisibleOnScreenEnabler3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisibleOnScreenNotifier2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisibleOnScreenNotifier2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisibleOnScreenNotifier2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisibleOnScreenNotifier2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisibleOnScreenNotifier3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisibleOnScreenNotifier3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisibleOnScreenNotifier3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisibleOnScreenNotifier3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualInstance3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualInstance3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualInstance3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualInstance3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShader(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShader(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShader(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShader;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNode(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNode(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNode(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNode;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeBillboard(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeBillboard(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeBillboard(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeBillboard;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeBooleanConstant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeBooleanConstant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeBooleanConstant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeBooleanConstant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeBooleanParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeBooleanParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeBooleanParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeBooleanParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeClamp(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeClamp(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeClamp(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeClamp;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeColorConstant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeColorConstant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeColorConstant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeColorConstant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeColorFunc(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeColorFunc(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeColorFunc(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeColorFunc;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeColorOp(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeColorOp(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeColorOp(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeColorOp;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeColorParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeColorParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeColorParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeColorParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeComment(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeComment(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeComment(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeComment;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeCompare(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeCompare(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeCompare(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeCompare;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeConstant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeConstant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeConstant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeConstant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeCubemap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeCubemap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeCubemap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeCubemap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeCubemapParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeCubemapParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeCubemapParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeCubemapParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeCurveTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeCurveTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeCurveTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeCurveTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeCurveXYZTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeCurveXYZTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeCurveXYZTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeCurveXYZTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeCustom(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeCustom(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeCustom(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeCustom;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeDerivativeFunc(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeDerivativeFunc(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeDerivativeFunc(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeDerivativeFunc;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeDeterminant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeDeterminant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeDeterminant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeDeterminant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeDistanceFade(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeDistanceFade(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeDistanceFade(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeDistanceFade;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeDotProduct(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeDotProduct(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeDotProduct(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeDotProduct;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeExpression(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeExpression(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeExpression(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeExpression;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeFaceForward(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeFaceForward(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeFaceForward(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeFaceForward;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeFloatConstant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeFloatConstant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeFloatConstant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeFloatConstant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeFloatFunc(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeFloatFunc(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeFloatFunc(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeFloatFunc;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeFloatOp(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeFloatOp(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeFloatOp(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeFloatOp;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeFloatParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeFloatParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeFloatParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeFloatParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeFrame(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeFrame(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeFrame(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeFrame;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeFresnel(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeFresnel(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeFresnel(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeFresnel;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeGlobalExpression(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeGlobalExpression(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeGlobalExpression(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeGlobalExpression;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeGroupBase(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeGroupBase(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeGroupBase(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeGroupBase;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeIf(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeIf(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeIf(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeIf;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeInput(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeInput(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeInput(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeInput;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeIntConstant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeIntConstant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeIntConstant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeIntConstant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeIntFunc(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeIntFunc(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeIntFunc(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeIntFunc;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeIntOp(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeIntOp(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeIntOp(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeIntOp;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeIntParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeIntParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeIntParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeIntParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeIs(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeIs(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeIs(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeIs;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeLinearSceneDepth(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeLinearSceneDepth(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeLinearSceneDepth(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeLinearSceneDepth;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeMix(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeMix(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeMix(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeMix;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeMultiplyAdd(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeMultiplyAdd(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeMultiplyAdd(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeMultiplyAdd;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeOuterProduct(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeOuterProduct(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeOuterProduct(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeOuterProduct;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeOutput(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeOutput(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeOutput(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeOutput;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParameterRef(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParameterRef(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParameterRef(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParameterRef;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParticleAccelerator(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParticleAccelerator(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParticleAccelerator(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParticleAccelerator;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParticleBoxEmitter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParticleBoxEmitter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParticleBoxEmitter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParticleBoxEmitter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParticleConeVelocity(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParticleConeVelocity(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParticleConeVelocity(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParticleConeVelocity;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParticleEmit(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParticleEmit(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParticleEmit(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParticleEmit;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParticleEmitter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParticleEmitter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParticleEmitter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParticleEmitter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParticleMeshEmitter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParticleMeshEmitter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParticleMeshEmitter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParticleMeshEmitter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParticleMultiplyByAxisAngle(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParticleMultiplyByAxisAngle(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParticleMultiplyByAxisAngle(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParticleMultiplyByAxisAngle;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParticleOutput(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParticleOutput(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParticleOutput(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParticleOutput;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParticleRandomness(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParticleRandomness(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParticleRandomness(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParticleRandomness;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParticleRingEmitter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParticleRingEmitter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParticleRingEmitter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParticleRingEmitter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeParticleSphereEmitter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeParticleSphereEmitter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeParticleSphereEmitter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeParticleSphereEmitter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeProximityFade(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeProximityFade(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeProximityFade(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeProximityFade;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeRandomRange(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeRandomRange(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeRandomRange(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeRandomRange;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeRemap(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeRemap(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeRemap(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeRemap;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeReroute(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeReroute(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeReroute(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeReroute;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeResizableBase(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeResizableBase(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeResizableBase(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeResizableBase;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeRotationByAxis(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeRotationByAxis(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeRotationByAxis(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeRotationByAxis;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeSDFRaymarch(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeSDFRaymarch(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeSDFRaymarch(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeSDFRaymarch;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeSDFToScreenUV(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeSDFToScreenUV(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeSDFToScreenUV(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeSDFToScreenUV;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeSample3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeSample3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeSample3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeSample3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeScreenNormalWorldSpace(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeScreenNormalWorldSpace(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeScreenNormalWorldSpace(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeScreenNormalWorldSpace;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeScreenUVToSDF(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeScreenUVToSDF(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeScreenUVToSDF(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeScreenUVToSDF;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeSmoothStep(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeSmoothStep(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeSmoothStep(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeSmoothStep;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeStep(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeStep(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeStep(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeStep;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeSwitch(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeSwitch(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeSwitch(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeSwitch;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTexture(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTexture(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTexture(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTexture;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTexture2DArray(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTexture2DArray(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTexture2DArray(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTexture2DArray;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTexture2DArrayParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTexture2DArrayParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTexture2DArrayParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTexture2DArrayParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTexture2DParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTexture2DParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTexture2DParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTexture2DParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTexture3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTexture3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTexture3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTexture3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTexture3DParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTexture3DParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTexture3DParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTexture3DParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTextureParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTextureParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTextureParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTextureParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTextureParameterTriplanar(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTextureParameterTriplanar(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTextureParameterTriplanar(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTextureParameterTriplanar;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTextureSDF(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTextureSDF(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTextureSDF(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTextureSDF;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTextureSDFNormal(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTextureSDFNormal(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTextureSDFNormal(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTextureSDFNormal;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTransformCompose(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTransformCompose(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTransformCompose(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTransformCompose;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTransformConstant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTransformConstant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTransformConstant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTransformConstant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTransformDecompose(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTransformDecompose(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTransformDecompose(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTransformDecompose;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTransformFunc(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTransformFunc(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTransformFunc(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTransformFunc;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTransformOp(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTransformOp(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTransformOp(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTransformOp;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTransformParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTransformParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTransformParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTransformParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeTransformVecMult(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeTransformVecMult(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeTransformVecMult(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeTransformVecMult;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeUIntConstant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeUIntConstant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeUIntConstant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeUIntConstant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeUIntFunc(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeUIntFunc(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeUIntFunc(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeUIntFunc;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeUIntOp(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeUIntOp(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeUIntOp(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeUIntOp;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeUIntParameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeUIntParameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeUIntParameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeUIntParameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeUVFunc(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeUVFunc(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeUVFunc(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeUVFunc;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeUVPolarCoord(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeUVPolarCoord(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeUVPolarCoord(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeUVPolarCoord;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVarying(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVarying(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVarying(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVarying;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVaryingGetter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVaryingGetter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVaryingGetter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVaryingGetter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVaryingSetter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVaryingSetter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVaryingSetter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVaryingSetter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVec2Constant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVec2Constant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVec2Constant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVec2Constant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVec2Parameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVec2Parameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVec2Parameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVec2Parameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVec3Constant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVec3Constant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVec3Constant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVec3Constant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVec3Parameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVec3Parameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVec3Parameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVec3Parameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVec4Constant(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVec4Constant(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVec4Constant(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVec4Constant;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVec4Parameter(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVec4Parameter(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVec4Parameter(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVec4Parameter;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVectorBase(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVectorBase(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVectorBase(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVectorBase;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVectorCompose(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVectorCompose(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVectorCompose(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVectorCompose;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVectorDecompose(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVectorDecompose(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVectorDecompose(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVectorDecompose;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVectorDistance(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVectorDistance(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVectorDistance(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVectorDistance;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVectorFunc(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVectorFunc(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVectorFunc(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVectorFunc;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVectorLen(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVectorLen(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVectorLen(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVectorLen;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVectorOp(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVectorOp(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVectorOp(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVectorOp;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeVectorRefract(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeVectorRefract(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeVectorRefract(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeVectorRefract;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VisualShaderNodeWorldPositionFromDepth(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VisualShaderNodeWorldPositionFromDepth(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VisualShaderNodeWorldPositionFromDepth(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VisualShaderNodeWorldPositionFromDepth;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VoxelGI(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VoxelGI(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VoxelGI(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VoxelGI;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_VoxelGIData(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_VoxelGIData(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_VoxelGIData(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_VoxelGIData;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WeakRef(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WeakRef(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WeakRef(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WeakRef;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WebRTCDataChannel(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WebRTCDataChannel(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WebRTCDataChannel(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WebRTCDataChannel;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WebRTCDataChannelExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WebRTCDataChannelExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WebRTCDataChannelExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WebRTCDataChannelExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WebRTCMultiplayerPeer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WebRTCMultiplayerPeer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WebRTCMultiplayerPeer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WebRTCMultiplayerPeer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WebRTCPeerConnection(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WebRTCPeerConnection(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WebRTCPeerConnection(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WebRTCPeerConnection;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WebRTCPeerConnectionExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WebRTCPeerConnectionExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WebRTCPeerConnectionExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WebRTCPeerConnectionExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WebSocketMultiplayerPeer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WebSocketMultiplayerPeer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WebSocketMultiplayerPeer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WebSocketMultiplayerPeer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WebSocketPeer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WebSocketPeer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WebSocketPeer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WebSocketPeer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WebXRInterface(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WebXRInterface(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WebXRInterface(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WebXRInterface;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_Window(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_Window(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_Window(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_Window;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WorkerThreadPool(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WorkerThreadPool(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WorkerThreadPool(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WorkerThreadPool;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_World2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_World2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_World2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_World2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_World3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_World3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_World3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_World3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WorldBoundaryShape2D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WorldBoundaryShape2D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WorldBoundaryShape2D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WorldBoundaryShape2D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WorldBoundaryShape3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WorldBoundaryShape3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WorldBoundaryShape3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WorldBoundaryShape3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_WorldEnvironment(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_WorldEnvironment(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_WorldEnvironment(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_WorldEnvironment;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_X509Certificate(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_X509Certificate(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_X509Certificate(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_X509Certificate;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XMLParser(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XMLParser(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XMLParser(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XMLParser;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRAnchor3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRAnchor3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRAnchor3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRAnchor3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRBodyModifier3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRBodyModifier3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRBodyModifier3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRBodyModifier3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRBodyTracker(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRBodyTracker(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRBodyTracker(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRBodyTracker;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRCamera3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRCamera3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRCamera3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRCamera3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRController3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRController3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRController3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRController3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRControllerTracker(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRControllerTracker(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRControllerTracker(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRControllerTracker;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRFaceModifier3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRFaceModifier3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRFaceModifier3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRFaceModifier3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRFaceTracker(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRFaceTracker(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRFaceTracker(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRFaceTracker;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRHandModifier3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRHandModifier3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRHandModifier3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRHandModifier3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRHandTracker(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRHandTracker(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRHandTracker(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRHandTracker;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRInterface(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRInterface(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRInterface(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRInterface;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRInterfaceExtension(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRInterfaceExtension(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRInterfaceExtension(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRInterfaceExtension;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRNode3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRNode3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRNode3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRNode3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XROrigin3D(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XROrigin3D(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XROrigin3D(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XROrigin3D;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRPose(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRPose(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRPose(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRPose;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRPositionalTracker(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRPositionalTracker(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRPositionalTracker(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRPositionalTracker;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRServer(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRServer(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRServer(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRServer;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRTracker(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRTracker(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRTracker(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRTracker;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_XRVRS(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_XRVRS(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_XRVRS(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_XRVRS;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ZIPPacker(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ZIPPacker(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ZIPPacker(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ZIPPacker;

extern void *GoCallback_GDExtensionBindingCreate(char *p_type_name, void *p_token, void *p_instance);
extern void GoCallback_GDExtensionBindingFree(char *p_type_name, void *p_token, void *p_instance, void *p_binding);
extern GDExtensionBool GoCallback_GDExtensionBindingReference(char *p_type_name, void *p_token, void *p_instance, bool p_reference);

void *cgo_gdextension_class_binding_create_callback_ZIPReader(void *p_token, void *p_instance);
void cgo_gdextension_class_binding_free_callback_ZIPReader(void *p_token, void *p_instance, void *p_binding);
GDExtensionBool cgo_gdextension_class_binding_reference_callback_ZIPReader(void *p_token, void *p_instance, GDExtensionBool p_reference);

// extern GDExtensionInstanceBindingCallbacks ___binding_callbacks_ZIPReader;



#endif
