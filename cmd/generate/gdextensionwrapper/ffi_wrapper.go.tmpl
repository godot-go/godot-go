/*------------------------------------------------------------------------------
//   This code was generated by template ffi_wrapper.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "ffi_wrapper.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
{{ $view := . -}}

package gdextensionffi

//revive:disable

// #include <godot/gdextension_interface.h>
// #include "ffi_wrapper.gen.h"
// #include <stdint.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
	"unsafe"

	"github.com/godot-go/godot-go/pkg/log"
)

// aliases
type Uint64T C.uint64_t
type Uint32T C.uint32_t
type Uint16T C.uint16_t
type Uint8T C.uint8_t
type Int32T C.int32_t
type Int16T C.int16_t
type Int8T C.int8_t
type Char C.char
type WcharT C.wchar_t
{{ range $i, $t := $view.CollectAliases -}}
	type {{ camelCase $t.Name }} C.{{ $t.Name }}
{{ end -}}

// enums
{{ range $i, $e := $view.CollectEnums -}}
type {{ $e.Name }} C.{{ $e.Name }}
const (
	{{ range $j, $v := $e.Values -}}
	{{ $v.Name }} {{ if eq $j 0 }}{{ $e.Name }}{{ end }} {{ with $z := (goEnumValue $v $j) -}} = {{ $z }} {{- end }}
	{{ end -}}
)
{{ end }}

// functions
{{ range $i, $f := $view.CollectFunctions -}}
	type {{ $f.Name }} C.{{ $f.Name }}
{{ end -}}

// custom functions
func CallFunc_GDExtensionPtrConstructor(
	cb GDExtensionPtrConstructor,
	p_base GDExtensionTypePtr,
	p_args *GDExtensionConstTypePtr,
) {
	log.Debug("called CallFunc_GDExtensionPtrConstructor")
	C.cgo_callfn_GDExtensionPtrConstructor(
		(C.GDExtensionPtrConstructor)(cb),
		(C.GDExtensionTypePtr)(p_base),
		(*C.GDExtensionConstTypePtr)(p_args),
	)
}

func CallFunc_GDExtensionPtrDestructor(
	cb GDExtensionPtrDestructor,
	ptr GDExtensionTypePtr,
) {
	log.Debug("called C.cgo_callfn_GDExtensionPtrDestructor")
	C.cgo_callfn_GDExtensionPtrDestructor(
		(C.GDExtensionPtrDestructor)(cb),
		(C.GDExtensionTypePtr)(ptr),
	)
}

func CallFunc_GDExtensionPtrOperatorEvaluator(
	cb GDExtensionPtrOperatorEvaluator,
	p_left GDExtensionConstTypePtr,
	p_right GDExtensionConstTypePtr,
	r_result GDExtensionTypePtr,
) {
	log.Debug("called C.cgo_callfn_GDExtensionPtrOperatorEvaluator")
	C.cgo_callfn_GDExtensionPtrOperatorEvaluator(
		(C.GDExtensionPtrOperatorEvaluator)(cb),
		(C.GDExtensionConstTypePtr)(p_left),
		(C.GDExtensionConstTypePtr)(p_right),
		(C.GDExtensionTypePtr)(r_result),
	)
}

func CallFunc_GDExtensionPtrBuiltInMethod(
	cb GDExtensionPtrBuiltInMethod,
	p_base GDExtensionTypePtr,
	p_args *GDExtensionConstTypePtr,
	r_return GDExtensionTypePtr,
	p_argument_count int32,
) {
	log.Debug("called C.cgo_callfn_GDExtensionPtrBuiltInMethod")
	C.cgo_callfn_GDExtensionPtrBuiltInMethod(
		(C.GDExtensionPtrBuiltInMethod)(cb),
		(C.GDExtensionTypePtr)(p_base),
		(*C.GDExtensionConstTypePtr)(p_args),
		(C.GDExtensionTypePtr)(r_return),
		(C.int)(p_argument_count),
	);
}

func CallFunc_GDExtensionPtrUtilityFunction(
	cb GDExtensionPtrUtilityFunction,
	r_return GDExtensionTypePtr,
	p_arguments *GDExtensionConstTypePtr,
	p_argument_count int32,
) {
	log.Debug("called C.cgo_callfn_GDExtensionPtrUtilityFunction")
	C.cgo_callfn_GDExtensionPtrUtilityFunction(
		(C.GDExtensionPtrUtilityFunction)(cb),
		(C.GDExtensionTypePtr)(r_return),
		(*C.GDExtensionConstTypePtr)(p_arguments),
		(C.int)(p_argument_count),
	)
}

func CallFunc_GDExtensionPtrGetter(
	cb GDExtensionPtrGetter,
	p_base GDExtensionConstTypePtr,
	r_value GDExtensionTypePtr,
) {
	log.Debug("called C.cgo_callfn_GDExtensionPtrGetter")
	C.cgo_callfn_GDExtensionPtrGetter(
		(C.GDExtensionPtrGetter)(cb),
		(C.GDExtensionConstTypePtr)(p_base),
		(C.GDExtensionTypePtr)(r_value),
	)
}

func CallFunc_GDExtensionPtrSetter(
	cb GDExtensionPtrSetter,
	p_base GDExtensionTypePtr,
	p_value GDExtensionConstTypePtr,
) {
	log.Debug("called C.cgo_callfn_GDExtensionPtrSetter")
	C.cgo_callfn_GDExtensionPtrSetter(
		(C.GDExtensionPtrSetter)(cb),
		(C.GDExtensionTypePtr)(p_base),
		(C.GDExtensionConstTypePtr)(p_value),
	)
}

func CallFunc_GDExtensionPtrIndexedGetter(
	cb GDExtensionPtrIndexedGetter,
	p_base GDExtensionConstTypePtr,
	p_index GDExtensionInt,
	r_value GDExtensionTypePtr,
) {
	log.Debug("called C.cgo_callfn_GDExtensionPtrIndexedGetter")
	C.cgo_callfn_GDExtensionPtrIndexedGetter(
		(C.GDExtensionPtrIndexedGetter)(cb),
		(C.GDExtensionConstTypePtr)(p_base),
		(C.GDExtensionInt)(p_index),
		(C.GDExtensionTypePtr)(r_value),
	)
}

func CallFunc_GDExtensionPtrIndexedSetter(
	cb GDExtensionPtrIndexedSetter,
	p_base GDExtensionTypePtr,
	p_index GDExtensionInt,
	p_value GDExtensionConstTypePtr,
) {
	log.Debug("called C.cgo_callfn_GDExtensionPtrIndexedSetter")
	C.cgo_callfn_GDExtensionPtrIndexedSetter(
		(C.GDExtensionPtrIndexedSetter)(cb),
		(C.GDExtensionTypePtr)(p_base),
		(C.GDExtensionInt)(p_index),
		(C.GDExtensionConstTypePtr)(p_value),
	)
}

func CallFunc_GDExtensionVariantFromTypeConstructorFunc(
	cb GDExtensionVariantFromTypeConstructorFunc,
	arg_0 GDExtensionVariantPtr,
    arg_1 GDExtensionTypePtr,
) {
	log.Debug("called C.cgo_callfn_GDExtensionVariantFromTypeConstructorFunc")
	C.cgo_callfn_GDExtensionVariantFromTypeConstructorFunc(
		(C.GDExtensionVariantFromTypeConstructorFunc)(cb),
		(C.GDExtensionVariantPtr)(arg_0),
		(C.GDExtensionTypePtr)(arg_1),
	)
}

func CallFunc_GDExtensionTypeFromVariantConstructorFunc(
	cb GDExtensionTypeFromVariantConstructorFunc,
	arg_0 GDExtensionTypePtr,
    arg_1 GDExtensionVariantPtr,
) {
	log.Debug("called C.cgo_callfn_GDExtensionTypeFromVariantConstructorFunc")
	C.cgo_callfn_GDExtensionTypeFromVariantConstructorFunc(
		(C.GDExtensionTypeFromVariantConstructorFunc)(cb),
		(C.GDExtensionTypePtr)(arg_0),
		(C.GDExtensionVariantPtr)(arg_1),
	)
}

{{/*
	func Call{{ $f.Name }}(cb {{ $f.Name }}
		{{- range $j, $arg := $f.Arguments -}}
			, {{ if $arg.Name }}{{ $arg.Name }}{{ else }}arg_{{ $j }}{{ end }} {{ goArgumentType $arg.Type $arg.Name }}
		{{- end -}}
	) {{ goReturnType $f.ReturnType }} {
		{{ if (gt (len (goReturnType $f.ReturnType)) 0) }}return {{ end }}  C.cgo_{{ $f.Name -}}
			((C.{{ $f.Name }})(cb)
			{{- range $j, $arg := $f.Arguments -}}
				, (C.{{ goArgumentType $arg.Type $arg.Name }})({{ if $arg.Name }}{{ $arg.Name }}{{ else }}arg_{{ $j }}{{ end }})
			{{- end -}}
		)
	}
*/}}

// structs
{{ range $i, $t := $view.CollectStructs -}}
	type {{ $t.Name }} C.{{ $t.Name }}
{{ end -}}

// struct functions
{{ range $i, $t := $view.CollectStructs -}}
	{{- $fns := $t.CollectFunctions -}}

	{{- if gt (len $fns) 0 -}}
		/* struct ({{ $i }}) {{ $t.Name }} */
		{{ range $j, $f := $fns -}}
			{{ $rt := goReturnType $f.ReturnType }}
			func {{ $t.Name }}_{{ $f.Name }}(p_struct *{{ $t.Name }}
				{{- range $j, $arg := $f.Arguments -}}
					, {{ $arg.Name }} {{ goArgumentType $arg.Type $arg.Name }}
				{{- end -}}
			) {{ $rt }} {
				arg0 := (*C.{{ $t.Name }})(p_struct) // {{ $t.Name }}
				{{ range $j, $arg := $f.Arguments -}}
					arg{{ add $j 1 }} := {{ cgoCastArgument $arg }} // {{ $arg.Type.String }}
				{{ end }}

				log.Debug("called C.cgo_callfn_{{ $t.Name }}_{{ $f.Name }}")

				{{ if $rt }}ret := {{ end -}}
				C.cgo_callfn_{{ $t.Name }}_{{ $f.Name }}(arg0
					{{- range $j, $arg := $f.Arguments -}}
						, arg{{ add $j 1 }}
					{{- end -}}
				)

				{{ range $j, $arg := $f.Arguments -}}
					{{ cgoCleanUpArgument $arg (add $j 1) }}
				{{ end }}

				{{- if $rt }}

				// {{ $f.ReturnType.String }}
				return {{ cgoCastReturnType $f.ReturnType "ret" }}
				{{ end -}}
			}
		{{ end -}}
	{{ end -}}
{{ end -}}
