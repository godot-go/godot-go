package gdextension

/*------------------------------------------------------------------------------
//   This code was generated by template builtinclasses.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "builtinclasses.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//revive:disable

// #include <godot/gdnative_interface.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
    "unsafe"

	. "github.com/godot-go/godot-go/pkg/gdnative"
)

// built-in classes
/*
 * String
 * indexingReturnType: String
 * isKeyed: true
 * hasDestructor: true
 */
type String struct {
    opaque [8]uint8
}

type stringMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_casecmp_to GDNativePtrBuiltInMethod
    method_nocasecmp_to GDNativePtrBuiltInMethod
    method_naturalnocasecmp_to GDNativePtrBuiltInMethod
    method_length GDNativePtrBuiltInMethod
    method_substr GDNativePtrBuiltInMethod
    method_get_slice GDNativePtrBuiltInMethod
    method_get_slicec GDNativePtrBuiltInMethod
    method_get_slice_count GDNativePtrBuiltInMethod
    method_find GDNativePtrBuiltInMethod
    method_count GDNativePtrBuiltInMethod
    method_countn GDNativePtrBuiltInMethod
    method_findn GDNativePtrBuiltInMethod
    method_rfind GDNativePtrBuiltInMethod
    method_rfindn GDNativePtrBuiltInMethod
    method_match GDNativePtrBuiltInMethod
    method_matchn GDNativePtrBuiltInMethod
    method_begins_with GDNativePtrBuiltInMethod
    method_ends_with GDNativePtrBuiltInMethod
    method_is_subsequence_of GDNativePtrBuiltInMethod
    method_is_subsequence_ofn GDNativePtrBuiltInMethod
    method_bigrams GDNativePtrBuiltInMethod
    method_similarity GDNativePtrBuiltInMethod
    method_format GDNativePtrBuiltInMethod
    method_replace GDNativePtrBuiltInMethod
    method_replacen GDNativePtrBuiltInMethod
    method_repeat GDNativePtrBuiltInMethod
    method_insert GDNativePtrBuiltInMethod
    method_capitalize GDNativePtrBuiltInMethod
    method_to_camel_case GDNativePtrBuiltInMethod
    method_to_pascal_case GDNativePtrBuiltInMethod
    method_to_snake_case GDNativePtrBuiltInMethod
    method_split GDNativePtrBuiltInMethod
    method_rsplit GDNativePtrBuiltInMethod
    method_split_floats GDNativePtrBuiltInMethod
    method_join GDNativePtrBuiltInMethod
    method_to_upper GDNativePtrBuiltInMethod
    method_to_lower GDNativePtrBuiltInMethod
    method_left GDNativePtrBuiltInMethod
    method_right GDNativePtrBuiltInMethod
    method_strip_edges GDNativePtrBuiltInMethod
    method_strip_escapes GDNativePtrBuiltInMethod
    method_lstrip GDNativePtrBuiltInMethod
    method_rstrip GDNativePtrBuiltInMethod
    method_get_extension GDNativePtrBuiltInMethod
    method_get_basename GDNativePtrBuiltInMethod
    method_path_join GDNativePtrBuiltInMethod
    method_unicode_at GDNativePtrBuiltInMethod
    method_indent GDNativePtrBuiltInMethod
    method_dedent GDNativePtrBuiltInMethod
    method_hash GDNativePtrBuiltInMethod
    method_md5_text GDNativePtrBuiltInMethod
    method_sha1_text GDNativePtrBuiltInMethod
    method_sha256_text GDNativePtrBuiltInMethod
    method_md5_buffer GDNativePtrBuiltInMethod
    method_sha1_buffer GDNativePtrBuiltInMethod
    method_sha256_buffer GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_contains GDNativePtrBuiltInMethod
    method_is_absolute_path GDNativePtrBuiltInMethod
    method_is_relative_path GDNativePtrBuiltInMethod
    method_simplify_path GDNativePtrBuiltInMethod
    method_get_base_dir GDNativePtrBuiltInMethod
    method_get_file GDNativePtrBuiltInMethod
    method_xml_escape GDNativePtrBuiltInMethod
    method_xml_unescape GDNativePtrBuiltInMethod
    method_uri_encode GDNativePtrBuiltInMethod
    method_uri_decode GDNativePtrBuiltInMethod
    method_c_escape GDNativePtrBuiltInMethod
    method_c_unescape GDNativePtrBuiltInMethod
    method_json_escape GDNativePtrBuiltInMethod
    method_validate_node_name GDNativePtrBuiltInMethod
    method_is_valid_identifier GDNativePtrBuiltInMethod
    method_is_valid_int GDNativePtrBuiltInMethod
    method_is_valid_float GDNativePtrBuiltInMethod
    method_is_valid_hex_number GDNativePtrBuiltInMethod
    method_is_valid_html_color GDNativePtrBuiltInMethod
    method_is_valid_ip_address GDNativePtrBuiltInMethod
    method_is_valid_filename GDNativePtrBuiltInMethod
    method_to_int GDNativePtrBuiltInMethod
    method_to_float GDNativePtrBuiltInMethod
    method_hex_to_int GDNativePtrBuiltInMethod
    method_bin_to_int GDNativePtrBuiltInMethod
    method_lpad GDNativePtrBuiltInMethod
    method_rpad GDNativePtrBuiltInMethod
    method_pad_decimals GDNativePtrBuiltInMethod
    method_pad_zeros GDNativePtrBuiltInMethod
    method_trim_prefix GDNativePtrBuiltInMethod
    method_trim_suffix GDNativePtrBuiltInMethod
    method_to_ascii_buffer GDNativePtrBuiltInMethod
    method_to_utf8_buffer GDNativePtrBuiltInMethod
    method_to_utf16_buffer GDNativePtrBuiltInMethod
    method_to_utf32_buffer GDNativePtrBuiltInMethod
    method_num_scientific GDNativePtrBuiltInMethod
    method_num GDNativePtrBuiltInMethod
    method_num_int64 GDNativePtrBuiltInMethod
    method_num_uint64 GDNativePtrBuiltInMethod
    method_chr GDNativePtrBuiltInMethod
    method_humanize_size GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_module_Nil GDNativePtrOperatorEvaluator
        operator_module_bool GDNativePtrOperatorEvaluator
        operator_add_int GDNativePtrOperatorEvaluator
        operator_module_int GDNativePtrOperatorEvaluator
        operator_module_float GDNativePtrOperatorEvaluator
        operator_equal_String GDNativePtrOperatorEvaluator
        operator_not_equal_String GDNativePtrOperatorEvaluator
        operator_less_String GDNativePtrOperatorEvaluator
        operator_less_equal_String GDNativePtrOperatorEvaluator
        operator_greater_String GDNativePtrOperatorEvaluator
        operator_greater_equal_String GDNativePtrOperatorEvaluator
        operator_add_String GDNativePtrOperatorEvaluator
        operator_module_String GDNativePtrOperatorEvaluator
        operator_in_String GDNativePtrOperatorEvaluator
        operator_module_Vector2 GDNativePtrOperatorEvaluator
        operator_module_Vector2i GDNativePtrOperatorEvaluator
        operator_module_Rect2 GDNativePtrOperatorEvaluator
        operator_module_Rect2i GDNativePtrOperatorEvaluator
        operator_module_Vector3 GDNativePtrOperatorEvaluator
        operator_module_Vector3i GDNativePtrOperatorEvaluator
        operator_module_Transform2D GDNativePtrOperatorEvaluator
        operator_module_Vector4 GDNativePtrOperatorEvaluator
        operator_module_Vector4i GDNativePtrOperatorEvaluator
        operator_module_Plane GDNativePtrOperatorEvaluator
        operator_module_Quaternion GDNativePtrOperatorEvaluator
        operator_module_AABB GDNativePtrOperatorEvaluator
        operator_module_Basis GDNativePtrOperatorEvaluator
        operator_module_Transform3D GDNativePtrOperatorEvaluator
        operator_module_Projection GDNativePtrOperatorEvaluator
        operator_module_Color GDNativePtrOperatorEvaluator
        operator_equal_StringName GDNativePtrOperatorEvaluator
        operator_not_equal_StringName GDNativePtrOperatorEvaluator
        operator_module_StringName GDNativePtrOperatorEvaluator
        operator_in_StringName GDNativePtrOperatorEvaluator
        operator_module_NodePath GDNativePtrOperatorEvaluator
        operator_module_Object GDNativePtrOperatorEvaluator
        operator_in_Object GDNativePtrOperatorEvaluator
        operator_module_Callable GDNativePtrOperatorEvaluator
        operator_module_Signal GDNativePtrOperatorEvaluator
        operator_module_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_module_Array GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_module_PackedByteArray GDNativePtrOperatorEvaluator
        operator_module_PackedInt32Array GDNativePtrOperatorEvaluator
        operator_module_PackedInt64Array GDNativePtrOperatorEvaluator
        operator_module_PackedFloat32Array GDNativePtrOperatorEvaluator
        operator_module_PackedFloat64Array GDNativePtrOperatorEvaluator
        operator_module_PackedStringArray GDNativePtrOperatorEvaluator
        operator_in_PackedStringArray GDNativePtrOperatorEvaluator
        operator_module_PackedVector2Array GDNativePtrOperatorEvaluator
        operator_module_PackedVector3Array GDNativePtrOperatorEvaluator
        operator_module_PackedColorArray GDNativePtrOperatorEvaluator
        }

var globalStringMethodBindings stringMethodBindings

func stringInitBindings() {
    globalStringMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, 0)
    globalStringMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, 1)
    globalStringMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, 2)
    globalStringMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, 3)
    globalStringMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING)
    globalStringMethodBindings.method_casecmp_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "casecmp_to", 2920860731)
    globalStringMethodBindings.method_nocasecmp_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "nocasecmp_to", 2920860731)
    globalStringMethodBindings.method_naturalnocasecmp_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "naturalnocasecmp_to", 2920860731)
    globalStringMethodBindings.method_length = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "length", 3173160232)
    globalStringMethodBindings.method_substr = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "substr", 787537301)
    globalStringMethodBindings.method_get_slice = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "get_slice", 3535100402)
    globalStringMethodBindings.method_get_slicec = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "get_slicec", 787537301)
    globalStringMethodBindings.method_get_slice_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "get_slice_count", 2920860731)
    globalStringMethodBindings.method_find = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "find", 1760645412)
    globalStringMethodBindings.method_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "count", 2343087891)
    globalStringMethodBindings.method_countn = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "countn", 2343087891)
    globalStringMethodBindings.method_findn = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "findn", 1760645412)
    globalStringMethodBindings.method_rfind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "rfind", 1760645412)
    globalStringMethodBindings.method_rfindn = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "rfindn", 1760645412)
    globalStringMethodBindings.method_match = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "match", 2566493496)
    globalStringMethodBindings.method_matchn = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "matchn", 2566493496)
    globalStringMethodBindings.method_begins_with = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "begins_with", 2566493496)
    globalStringMethodBindings.method_ends_with = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "ends_with", 2566493496)
    globalStringMethodBindings.method_is_subsequence_of = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_subsequence_of", 2566493496)
    globalStringMethodBindings.method_is_subsequence_ofn = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_subsequence_ofn", 2566493496)
    globalStringMethodBindings.method_bigrams = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "bigrams", 747180633)
    globalStringMethodBindings.method_similarity = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "similarity", 2697460964)
    globalStringMethodBindings.method_format = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "format", 3212199029)
    globalStringMethodBindings.method_replace = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "replace", 1340436205)
    globalStringMethodBindings.method_replacen = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "replacen", 1340436205)
    globalStringMethodBindings.method_repeat = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "repeat", 2162347432)
    globalStringMethodBindings.method_insert = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "insert", 248737229)
    globalStringMethodBindings.method_capitalize = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "capitalize", 3942272618)
    globalStringMethodBindings.method_to_camel_case = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "to_camel_case", 3942272618)
    globalStringMethodBindings.method_to_pascal_case = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "to_pascal_case", 3942272618)
    globalStringMethodBindings.method_to_snake_case = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "to_snake_case", 3942272618)
    globalStringMethodBindings.method_split = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "split", 1252735785)
    globalStringMethodBindings.method_rsplit = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "rsplit", 1252735785)
    globalStringMethodBindings.method_split_floats = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "split_floats", 1089991737)
    globalStringMethodBindings.method_join = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "join", 3595973238)
    globalStringMethodBindings.method_to_upper = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "to_upper", 3942272618)
    globalStringMethodBindings.method_to_lower = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "to_lower", 3942272618)
    globalStringMethodBindings.method_left = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "left", 2162347432)
    globalStringMethodBindings.method_right = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "right", 2162347432)
    globalStringMethodBindings.method_strip_edges = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "strip_edges", 907855311)
    globalStringMethodBindings.method_strip_escapes = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "strip_escapes", 3942272618)
    globalStringMethodBindings.method_lstrip = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "lstrip", 3134094431)
    globalStringMethodBindings.method_rstrip = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "rstrip", 3134094431)
    globalStringMethodBindings.method_get_extension = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "get_extension", 3942272618)
    globalStringMethodBindings.method_get_basename = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "get_basename", 3942272618)
    globalStringMethodBindings.method_path_join = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "path_join", 3134094431)
    globalStringMethodBindings.method_unicode_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "unicode_at", 4103005248)
    globalStringMethodBindings.method_indent = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "indent", 3134094431)
    globalStringMethodBindings.method_dedent = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "dedent", 3942272618)
    globalStringMethodBindings.method_hash = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "hash", 3173160232)
    globalStringMethodBindings.method_md5_text = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "md5_text", 3942272618)
    globalStringMethodBindings.method_sha1_text = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "sha1_text", 3942272618)
    globalStringMethodBindings.method_sha256_text = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "sha256_text", 3942272618)
    globalStringMethodBindings.method_md5_buffer = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "md5_buffer", 247621236)
    globalStringMethodBindings.method_sha1_buffer = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "sha1_buffer", 247621236)
    globalStringMethodBindings.method_sha256_buffer = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "sha256_buffer", 247621236)
    globalStringMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_empty", 3918633141)
    globalStringMethodBindings.method_contains = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "contains", 2566493496)
    globalStringMethodBindings.method_is_absolute_path = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_absolute_path", 3918633141)
    globalStringMethodBindings.method_is_relative_path = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_relative_path", 3918633141)
    globalStringMethodBindings.method_simplify_path = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "simplify_path", 3942272618)
    globalStringMethodBindings.method_get_base_dir = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "get_base_dir", 3942272618)
    globalStringMethodBindings.method_get_file = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "get_file", 3942272618)
    globalStringMethodBindings.method_xml_escape = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "xml_escape", 3429816538)
    globalStringMethodBindings.method_xml_unescape = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "xml_unescape", 3942272618)
    globalStringMethodBindings.method_uri_encode = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "uri_encode", 3942272618)
    globalStringMethodBindings.method_uri_decode = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "uri_decode", 3942272618)
    globalStringMethodBindings.method_c_escape = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "c_escape", 3942272618)
    globalStringMethodBindings.method_c_unescape = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "c_unescape", 3942272618)
    globalStringMethodBindings.method_json_escape = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "json_escape", 3942272618)
    globalStringMethodBindings.method_validate_node_name = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "validate_node_name", 3942272618)
    globalStringMethodBindings.method_is_valid_identifier = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_valid_identifier", 3918633141)
    globalStringMethodBindings.method_is_valid_int = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_valid_int", 3918633141)
    globalStringMethodBindings.method_is_valid_float = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_valid_float", 3918633141)
    globalStringMethodBindings.method_is_valid_hex_number = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_valid_hex_number", 593672999)
    globalStringMethodBindings.method_is_valid_html_color = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_valid_html_color", 3918633141)
    globalStringMethodBindings.method_is_valid_ip_address = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_valid_ip_address", 3918633141)
    globalStringMethodBindings.method_is_valid_filename = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "is_valid_filename", 3918633141)
    globalStringMethodBindings.method_to_int = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "to_int", 3173160232)
    globalStringMethodBindings.method_to_float = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "to_float", 466405837)
    globalStringMethodBindings.method_hex_to_int = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "hex_to_int", 3173160232)
    globalStringMethodBindings.method_bin_to_int = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "bin_to_int", 3173160232)
    globalStringMethodBindings.method_lpad = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "lpad", 248737229)
    globalStringMethodBindings.method_rpad = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "rpad", 248737229)
    globalStringMethodBindings.method_pad_decimals = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "pad_decimals", 2162347432)
    globalStringMethodBindings.method_pad_zeros = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "pad_zeros", 2162347432)
    globalStringMethodBindings.method_trim_prefix = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "trim_prefix", 3134094431)
    globalStringMethodBindings.method_trim_suffix = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "trim_suffix", 3134094431)
    globalStringMethodBindings.method_to_ascii_buffer = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "to_ascii_buffer", 247621236)
    globalStringMethodBindings.method_to_utf8_buffer = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "to_utf8_buffer", 247621236)
    globalStringMethodBindings.method_to_utf16_buffer = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "to_utf16_buffer", 247621236)
    globalStringMethodBindings.method_to_utf32_buffer = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "to_utf32_buffer", 247621236)
    globalStringMethodBindings.method_num_scientific = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "num_scientific", 2710373411)
    globalStringMethodBindings.method_num = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "num", 1555901022)
    globalStringMethodBindings.method_num_int64 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "num_int64", 2111271071)
    globalStringMethodBindings.method_num_uint64 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "num_uint64", 2111271071)
    globalStringMethodBindings.method_chr = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "chr", 897497541)
    globalStringMethodBindings.method_humanize_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING, "humanize_size", 897497541)
    globalStringMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING)
    globalStringMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING)
    globalStringMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING)
    globalStringMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING)
    globalStringMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING)
    globalStringMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_NIL)
        globalStringMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_NIL)
        globalStringMethodBindings.operator_module_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_NIL)
        globalStringMethodBindings.operator_module_bool = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_BOOL)
        globalStringMethodBindings.operator_add_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_INT)
        globalStringMethodBindings.operator_module_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_INT)
        globalStringMethodBindings.operator_module_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalStringMethodBindings.operator_equal_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringMethodBindings.operator_not_equal_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringMethodBindings.operator_less_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringMethodBindings.operator_less_equal_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS_EQUAL, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringMethodBindings.operator_greater_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringMethodBindings.operator_greater_equal_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER_EQUAL, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringMethodBindings.operator_add_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringMethodBindings.operator_module_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringMethodBindings.operator_in_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringMethodBindings.operator_module_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalStringMethodBindings.operator_module_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalStringMethodBindings.operator_module_Rect2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_RECT2)
        globalStringMethodBindings.operator_module_Rect2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_RECT2I)
        globalStringMethodBindings.operator_module_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalStringMethodBindings.operator_module_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalStringMethodBindings.operator_module_Transform2D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
        globalStringMethodBindings.operator_module_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalStringMethodBindings.operator_module_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalStringMethodBindings.operator_module_Plane = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PLANE)
        globalStringMethodBindings.operator_module_Quaternion = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_QUATERNION)
        globalStringMethodBindings.operator_module_AABB = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_AABB)
        globalStringMethodBindings.operator_module_Basis = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_BASIS)
        globalStringMethodBindings.operator_module_Transform3D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
        globalStringMethodBindings.operator_module_Projection = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PROJECTION)
        globalStringMethodBindings.operator_module_Color = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_COLOR)
        globalStringMethodBindings.operator_equal_StringName = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING_NAME)
        globalStringMethodBindings.operator_not_equal_StringName = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING_NAME)
        globalStringMethodBindings.operator_module_StringName = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING_NAME)
        globalStringMethodBindings.operator_in_StringName = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_STRING_NAME)
        globalStringMethodBindings.operator_module_NodePath = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_NODE_PATH)
        globalStringMethodBindings.operator_module_Object = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_OBJECT)
        globalStringMethodBindings.operator_in_Object = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_OBJECT)
        globalStringMethodBindings.operator_module_Callable = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_CALLABLE)
        globalStringMethodBindings.operator_module_Signal = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_SIGNAL)
        globalStringMethodBindings.operator_module_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalStringMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalStringMethodBindings.operator_module_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalStringMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalStringMethodBindings.operator_module_PackedByteArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY)
        globalStringMethodBindings.operator_module_PackedInt32Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY)
        globalStringMethodBindings.operator_module_PackedInt64Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY)
        globalStringMethodBindings.operator_module_PackedFloat32Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
        globalStringMethodBindings.operator_module_PackedFloat64Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
        globalStringMethodBindings.operator_module_PackedStringArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY)
        globalStringMethodBindings.operator_in_PackedStringArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY)
        globalStringMethodBindings.operator_module_PackedVector2Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
        globalStringMethodBindings.operator_module_PackedVector3Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
        globalStringMethodBindings.operator_module_PackedColorArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_STRING, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY)
        }

func (c *String) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewString, index: 0
func NewString() String {
    cx := String{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalStringMethodBindings.constructor_0, ptr, )

    return cx
}
// NewString, index: 2
func NewStringWithStringName(from StringName,) String {
    cx := String{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // StringName
        args[0] = from.ptr()
        callBuiltinConstructor(globalStringMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewString, index: 3
func NewStringWithNodePath(from NodePath,) String {
    cx := String{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // NodePath
        args[0] = from.ptr()
        callBuiltinConstructor(globalStringMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *String) Destroy() {
    md := (GDNativePtrDestructor)(globalStringMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* CasecmpTo : casecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) CasecmpTo(to String,) int64 {
    mb := globalStringMethodBindings.method_casecmp_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* NocasecmpTo : nocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) NocasecmpTo(to String,) int64 {
    mb := globalStringMethodBindings.method_nocasecmp_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* NaturalnocasecmpTo : naturalnocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) NaturalnocasecmpTo(to String,) int64 {
    mb := globalStringMethodBindings.method_naturalnocasecmp_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Length() int64 {
    mb := globalStringMethodBindings.method_length

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Substr : substr
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Substr(from int64,len int64,) String {
    mb := globalStringMethodBindings.method_substr

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&len))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetSlice : get_slice
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetSlice(delimiter String,slice int64,) String {
    mb := globalStringMethodBindings.method_get_slice

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&delimiter))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&slice))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetSlicec : get_slicec
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetSlicec(delimiter int64,slice int64,) String {
    mb := globalStringMethodBindings.method_get_slicec

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&delimiter))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&slice))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetSliceCount : get_slice_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) GetSliceCount(delimiter String,) int64 {
    mb := globalStringMethodBindings.method_get_slice_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&delimiter))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Find(what String,from int64,) int64 {
    mb := globalStringMethodBindings.method_find

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Count(what String,from int64,to int64,) int64 {
    mb := globalStringMethodBindings.method_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(3)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    
    // Int64Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Countn : countn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Countn(what String,from int64,to int64,) int64 {
    mb := globalStringMethodBindings.method_countn

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(3)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    
    // Int64Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Findn : findn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Findn(what String,from int64,) int64 {
    mb := globalStringMethodBindings.method_findn

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Rfind(what String,from int64,) int64 {
    mb := globalStringMethodBindings.method_rfind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfindn : rfindn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Rfindn(what String,from int64,) int64 {
    mb := globalStringMethodBindings.method_rfindn

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Match : match
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) Match(expr String,) bool {
    mb := globalStringMethodBindings.method_match

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&expr))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Matchn : matchn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) Matchn(expr String,) bool {
    mb := globalStringMethodBindings.method_matchn

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&expr))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* BeginsWith : begins_with
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) BeginsWith(text String,) bool {
    mb := globalStringMethodBindings.method_begins_with

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&text))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* EndsWith : ends_with
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) EndsWith(text String,) bool {
    mb := globalStringMethodBindings.method_ends_with

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&text))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsSubsequenceOf : is_subsequence_of
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsSubsequenceOf(text String,) bool {
    mb := globalStringMethodBindings.method_is_subsequence_of

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&text))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsSubsequenceOfn : is_subsequence_ofn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsSubsequenceOfn(text String,) bool {
    mb := globalStringMethodBindings.method_is_subsequence_ofn

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&text))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Bigrams : bigrams
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *String) Bigrams() PackedStringArray {
    mb := globalStringMethodBindings.method_bigrams

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, nil)

    return ret
    

    
}


/* Similarity : similarity
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *String) Similarity(text String,) float32 {
    mb := globalStringMethodBindings.method_similarity

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&text))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Format : format
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Format(values Variant,placeholder String,) String {
    mb := globalStringMethodBindings.method_format

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&values))
    
    
    // StringEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&placeholder))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Replace : replace
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Replace(what String,forwhat String,) String {
    mb := globalStringMethodBindings.method_replace

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    
    // StringEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&forwhat))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Replacen : replacen
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Replacen(what String,forwhat String,) String {
    mb := globalStringMethodBindings.method_replacen

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    
    // StringEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&forwhat))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Repeat : repeat
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Repeat(count int64,) String {
    mb := globalStringMethodBindings.method_repeat

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&count))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Insert(position int64,what String,) String {
    mb := globalStringMethodBindings.method_insert

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&position))
    
    
    // StringEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Capitalize : capitalize
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Capitalize() String {
    mb := globalStringMethodBindings.method_capitalize

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* ToCamelCase : to_camel_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToCamelCase() String {
    mb := globalStringMethodBindings.method_to_camel_case

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* ToPascalCase : to_pascal_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToPascalCase() String {
    mb := globalStringMethodBindings.method_to_pascal_case

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* ToSnakeCase : to_snake_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToSnakeCase() String {
    mb := globalStringMethodBindings.method_to_snake_case

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* Split : split
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *String) Split(delimiter String,allow_empty bool,maxsplit int64,) PackedStringArray {
    mb := globalStringMethodBindings.method_split

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(3)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&delimiter))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&allow_empty))
    
    
    // Int64Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&maxsplit))
    
    

    ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rsplit : rsplit
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *String) Rsplit(delimiter String,allow_empty bool,maxsplit int64,) PackedStringArray {
    mb := globalStringMethodBindings.method_rsplit

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(3)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&delimiter))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&allow_empty))
    
    
    // Int64Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&maxsplit))
    
    

    ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* SplitFloats : split_floats
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat32Array) -> PackedFloat32Array
 */
func (cx *String) SplitFloats(delimiter String,allow_empty bool,) PackedFloat32Array {
    mb := globalStringMethodBindings.method_split_floats

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&delimiter))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&allow_empty))
    
    

    ret := callBuiltinMethodPtrRet[PackedFloat32Array](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Join : join
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Join(parts PackedStringArray,) String {
    mb := globalStringMethodBindings.method_join

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PackedStringArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&parts))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ToUpper : to_upper
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToUpper() String {
    mb := globalStringMethodBindings.method_to_upper

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* ToLower : to_lower
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToLower() String {
    mb := globalStringMethodBindings.method_to_lower

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* Left : left
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Left(length int64,) String {
    mb := globalStringMethodBindings.method_left

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&length))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Right : right
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Right(length int64,) String {
    mb := globalStringMethodBindings.method_right

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&length))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* StripEdges : strip_edges
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) StripEdges(left bool,right bool,) String {
    mb := globalStringMethodBindings.method_strip_edges

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // BoolEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&left))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&right))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* StripEscapes : strip_escapes
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) StripEscapes() String {
    mb := globalStringMethodBindings.method_strip_escapes

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* Lstrip : lstrip
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Lstrip(chars String,) String {
    mb := globalStringMethodBindings.method_lstrip

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&chars))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rstrip : rstrip
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Rstrip(chars String,) String {
    mb := globalStringMethodBindings.method_rstrip

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&chars))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetExtension : get_extension
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetExtension() String {
    mb := globalStringMethodBindings.method_get_extension

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* GetBasename : get_basename
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetBasename() String {
    mb := globalStringMethodBindings.method_get_basename

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* PathJoin : path_join
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) PathJoin(file String,) String {
    mb := globalStringMethodBindings.method_path_join

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&file))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* UnicodeAt : unicode_at
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) UnicodeAt(at int64,) int64 {
    mb := globalStringMethodBindings.method_unicode_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&at))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Indent : indent
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Indent(prefix String,) String {
    mb := globalStringMethodBindings.method_indent

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&prefix))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Dedent : dedent
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Dedent() String {
    mb := globalStringMethodBindings.method_dedent

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Hash() int64 {
    mb := globalStringMethodBindings.method_hash

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Md5Text : md5_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Md5Text() String {
    mb := globalStringMethodBindings.method_md5_text

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* Sha1Text : sha1_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Sha1Text() String {
    mb := globalStringMethodBindings.method_sha1_text

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* Sha256Text : sha256_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Sha256Text() String {
    mb := globalStringMethodBindings.method_sha256_text

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* Md5Buffer : md5_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) Md5Buffer() PackedByteArray {
    mb := globalStringMethodBindings.method_md5_buffer

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* Sha1Buffer : sha1_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) Sha1Buffer() PackedByteArray {
    mb := globalStringMethodBindings.method_sha1_buffer

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* Sha256Buffer : sha256_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) Sha256Buffer() PackedByteArray {
    mb := globalStringMethodBindings.method_sha256_buffer

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsEmpty() bool {
    mb := globalStringMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Contains : contains
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) Contains(what String,) bool {
    mb := globalStringMethodBindings.method_contains

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsAbsolutePath : is_absolute_path
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsAbsolutePath() bool {
    mb := globalStringMethodBindings.method_is_absolute_path

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsRelativePath : is_relative_path
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsRelativePath() bool {
    mb := globalStringMethodBindings.method_is_relative_path

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* SimplifyPath : simplify_path
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) SimplifyPath() String {
    mb := globalStringMethodBindings.method_simplify_path

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* GetBaseDir : get_base_dir
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetBaseDir() String {
    mb := globalStringMethodBindings.method_get_base_dir

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* GetFile : get_file
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetFile() String {
    mb := globalStringMethodBindings.method_get_file

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* XmlEscape : xml_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) XmlEscape(escape_quotes bool,) String {
    mb := globalStringMethodBindings.method_xml_escape

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // BoolEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&escape_quotes))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* XmlUnescape : xml_unescape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) XmlUnescape() String {
    mb := globalStringMethodBindings.method_xml_unescape

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* UriEncode : uri_encode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) UriEncode() String {
    mb := globalStringMethodBindings.method_uri_encode

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* UriDecode : uri_decode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) UriDecode() String {
    mb := globalStringMethodBindings.method_uri_decode

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* CEscape : c_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) CEscape() String {
    mb := globalStringMethodBindings.method_c_escape

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* CUnescape : c_unescape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) CUnescape() String {
    mb := globalStringMethodBindings.method_c_unescape

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* JsonEscape : json_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) JsonEscape() String {
    mb := globalStringMethodBindings.method_json_escape

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* ValidateNodeName : validate_node_name
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ValidateNodeName() String {
    mb := globalStringMethodBindings.method_validate_node_name

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* IsValidIdentifier : is_valid_identifier
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidIdentifier() bool {
    mb := globalStringMethodBindings.method_is_valid_identifier

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsValidInt : is_valid_int
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidInt() bool {
    mb := globalStringMethodBindings.method_is_valid_int

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsValidFloat : is_valid_float
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidFloat() bool {
    mb := globalStringMethodBindings.method_is_valid_float

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsValidHexNumber : is_valid_hex_number
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidHexNumber(with_prefix bool,) bool {
    mb := globalStringMethodBindings.method_is_valid_hex_number

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // BoolEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with_prefix))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsValidHtmlColor : is_valid_html_color
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidHtmlColor() bool {
    mb := globalStringMethodBindings.method_is_valid_html_color

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsValidIpAddress : is_valid_ip_address
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidIpAddress() bool {
    mb := globalStringMethodBindings.method_is_valid_ip_address

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsValidFilename : is_valid_filename
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidFilename() bool {
    mb := globalStringMethodBindings.method_is_valid_filename

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* ToInt : to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) ToInt() int64 {
    mb := globalStringMethodBindings.method_to_int

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* ToFloat : to_float
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *String) ToFloat() float32 {
    mb := globalStringMethodBindings.method_to_float

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* HexToInt : hex_to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) HexToInt() int64 {
    mb := globalStringMethodBindings.method_hex_to_int

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* BinToInt : bin_to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) BinToInt() int64 {
    mb := globalStringMethodBindings.method_bin_to_int

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Lpad : lpad
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Lpad(min_length int64,character String,) String {
    mb := globalStringMethodBindings.method_lpad

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&min_length))
    
    
    // StringEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&character))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rpad : rpad
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Rpad(min_length int64,character String,) String {
    mb := globalStringMethodBindings.method_rpad

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&min_length))
    
    
    // StringEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&character))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* PadDecimals : pad_decimals
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) PadDecimals(digits int64,) String {
    mb := globalStringMethodBindings.method_pad_decimals

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&digits))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* PadZeros : pad_zeros
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) PadZeros(digits int64,) String {
    mb := globalStringMethodBindings.method_pad_zeros

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&digits))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TrimPrefix : trim_prefix
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) TrimPrefix(prefix String,) String {
    mb := globalStringMethodBindings.method_trim_prefix

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&prefix))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TrimSuffix : trim_suffix
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) TrimSuffix(suffix String,) String {
    mb := globalStringMethodBindings.method_trim_suffix

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&suffix))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ToAsciiBuffer : to_ascii_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToAsciiBuffer() PackedByteArray {
    mb := globalStringMethodBindings.method_to_ascii_buffer

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* ToUtf8Buffer : to_utf8_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToUtf8Buffer() PackedByteArray {
    mb := globalStringMethodBindings.method_to_utf8_buffer

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* ToUtf16Buffer : to_utf16_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToUtf16Buffer() PackedByteArray {
    mb := globalStringMethodBindings.method_to_utf16_buffer

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* ToUtf32Buffer : to_utf32_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToUtf32Buffer() PackedByteArray {
    mb := globalStringMethodBindings.method_to_utf32_buffer

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* NumScientific : num_scientific
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) NumScientific(number float32,) String {
    mb := globalStringMethodBindings.method_num_scientific

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&number))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Num : num
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) Num(number float32,decimals int64,) String {
    mb := globalStringMethodBindings.method_num

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&number))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&decimals))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* NumInt64 : num_int64
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) NumInt64(number int64,base int64,capitalize_hex bool,) String {
    mb := globalStringMethodBindings.method_num_int64

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(3)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&number))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&base))
    
    
    // BoolEncoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&capitalize_hex))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* NumUint64 : num_uint64
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) NumUint64(number int64,base int64,capitalize_hex bool,) String {
    mb := globalStringMethodBindings.method_num_uint64

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(3)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&number))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&base))
    
    
    // BoolEncoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&capitalize_hex))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Chr : chr
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) Chr(char int64,) String {
    mb := globalStringMethodBindings.method_chr

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&char))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* HumanizeSize : humanize_size
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) HumanizeSize(size int64,) String {
    mb := globalStringMethodBindings.method_humanize_size

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&size))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *String) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *String) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *String) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Module_Nil operator
func (cx *String) Module_Nil(right Variant) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Nil, lt, rt)
    }
// Module_bool operator
func (cx *String) Module_bool(right bool) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_bool, lt, rt)
    }
// Add_int operator
func (cx *String) Add_int(right int64) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_add_int, lt, rt)
    }
// Module_int operator
func (cx *String) Module_int(right int64) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_int, lt, rt)
    }
// Module_float operator
func (cx *String) Module_float(right float32) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_float, lt, rt)
    }
// Equal_String operator
func (cx *String) Equal_String(right String) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_equal_String, lt, rt)
    }
// Not_equal_String operator
func (cx *String) Not_equal_String(right String) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_not_equal_String, lt, rt)
    }
// Less_String operator
func (cx *String) Less_String(right String) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_less_String, lt, rt)
    }
// Less_equal_String operator
func (cx *String) Less_equal_String(right String) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_less_equal_String, lt, rt)
    }
// Greater_String operator
func (cx *String) Greater_String(right String) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_greater_String, lt, rt)
    }
// Greater_equal_String operator
func (cx *String) Greater_equal_String(right String) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_greater_equal_String, lt, rt)
    }
// Add_String operator
func (cx *String) Add_String(right String) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_add_String, lt, rt)
    }
// Module_String operator
func (cx *String) Module_String(right String) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_String, lt, rt)
    }
// In_String operator
func (cx *String) In_String(right String) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_String, lt, rt)
    }
// Module_Vector2 operator
func (cx *String) Module_Vector2(right Vector2) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector2, lt, rt)
    }
// Module_Vector2i operator
func (cx *String) Module_Vector2i(right Vector2i) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector2i, lt, rt)
    }
// Module_Rect2 operator
func (cx *String) Module_Rect2(right Rect2) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Rect2, lt, rt)
    }
// Module_Rect2i operator
func (cx *String) Module_Rect2i(right Rect2i) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Rect2i, lt, rt)
    }
// Module_Vector3 operator
func (cx *String) Module_Vector3(right Vector3) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector3, lt, rt)
    }
// Module_Vector3i operator
func (cx *String) Module_Vector3i(right Vector3i) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector3i, lt, rt)
    }
// Module_Transform2D operator
func (cx *String) Module_Transform2D(right Transform2D) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Transform2D, lt, rt)
    }
// Module_Vector4 operator
func (cx *String) Module_Vector4(right Vector4) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector4, lt, rt)
    }
// Module_Vector4i operator
func (cx *String) Module_Vector4i(right Vector4i) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector4i, lt, rt)
    }
// Module_Plane operator
func (cx *String) Module_Plane(right Plane) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Plane, lt, rt)
    }
// Module_Quaternion operator
func (cx *String) Module_Quaternion(right Quaternion) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Quaternion, lt, rt)
    }
// Module_AABB operator
func (cx *String) Module_AABB(right AABB) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_AABB, lt, rt)
    }
// Module_Basis operator
func (cx *String) Module_Basis(right Basis) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Basis, lt, rt)
    }
// Module_Transform3D operator
func (cx *String) Module_Transform3D(right Transform3D) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Transform3D, lt, rt)
    }
// Module_Projection operator
func (cx *String) Module_Projection(right Projection) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Projection, lt, rt)
    }
// Module_Color operator
func (cx *String) Module_Color(right Color) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Color, lt, rt)
    }
// Equal_StringName operator
func (cx *String) Equal_StringName(right StringName) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_equal_StringName, lt, rt)
    }
// Not_equal_StringName operator
func (cx *String) Not_equal_StringName(right StringName) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_not_equal_StringName, lt, rt)
    }
// Module_StringName operator
func (cx *String) Module_StringName(right StringName) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_StringName, lt, rt)
    }
// In_StringName operator
func (cx *String) In_StringName(right StringName) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_StringName, lt, rt)
    }
// Module_NodePath operator
func (cx *String) Module_NodePath(right NodePath) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_NodePath, lt, rt)
    }
// Module_Object operator
func (cx *String) Module_Object(right Object) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Object, lt, rt)
    }
// In_Object operator
func (cx *String) In_Object(right Object) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_Object, lt, rt)
    }
// Module_Callable operator
func (cx *String) Module_Callable(right Callable) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Callable, lt, rt)
    }
// Module_Signal operator
func (cx *String) Module_Signal(right Signal) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Signal, lt, rt)
    }
// Module_Dictionary operator
func (cx *String) Module_Dictionary(right Dictionary) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Dictionary, lt, rt)
    }
// In_Dictionary operator
func (cx *String) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_Dictionary, lt, rt)
    }
// Module_Array operator
func (cx *String) Module_Array(right Array) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Array, lt, rt)
    }
// In_Array operator
func (cx *String) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_Array, lt, rt)
    }
// Module_PackedByteArray operator
func (cx *String) Module_PackedByteArray(right PackedByteArray) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedByteArray, lt, rt)
    }
// Module_PackedInt32Array operator
func (cx *String) Module_PackedInt32Array(right PackedInt32Array) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedInt32Array, lt, rt)
    }
// Module_PackedInt64Array operator
func (cx *String) Module_PackedInt64Array(right PackedInt64Array) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedInt64Array, lt, rt)
    }
// Module_PackedFloat32Array operator
func (cx *String) Module_PackedFloat32Array(right PackedFloat32Array) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedFloat32Array, lt, rt)
    }
// Module_PackedFloat64Array operator
func (cx *String) Module_PackedFloat64Array(right PackedFloat64Array) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedFloat64Array, lt, rt)
    }
// Module_PackedStringArray operator
func (cx *String) Module_PackedStringArray(right PackedStringArray) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedStringArray, lt, rt)
    }
// In_PackedStringArray operator
func (cx *String) In_PackedStringArray(right PackedStringArray) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_PackedStringArray, lt, rt)
    }
// Module_PackedVector2Array operator
func (cx *String) Module_PackedVector2Array(right PackedVector2Array) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedVector2Array, lt, rt)
    }
// Module_PackedVector3Array operator
func (cx *String) Module_PackedVector3Array(right PackedVector3Array) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedVector3Array, lt, rt)
    }
// Module_PackedColorArray operator
func (cx *String) Module_PackedColorArray(right PackedColorArray) String {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedColorArray, lt, rt)
    }
/*
 * Vector2
 * indexingReturnType: float
 * isKeyed: true
 * hasDestructor: false
 */
type Vector2 struct {
    opaque [8]uint8
}

type vector2MethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    method_angle GDNativePtrBuiltInMethod
    method_angle_to GDNativePtrBuiltInMethod
    method_angle_to_point GDNativePtrBuiltInMethod
    method_direction_to GDNativePtrBuiltInMethod
    method_distance_to GDNativePtrBuiltInMethod
    method_distance_squared_to GDNativePtrBuiltInMethod
    method_length GDNativePtrBuiltInMethod
    method_length_squared GDNativePtrBuiltInMethod
    method_limit_length GDNativePtrBuiltInMethod
    method_normalized GDNativePtrBuiltInMethod
    method_is_normalized GDNativePtrBuiltInMethod
    method_is_equal_approx GDNativePtrBuiltInMethod
    method_is_zero_approx GDNativePtrBuiltInMethod
    method_posmod GDNativePtrBuiltInMethod
    method_posmodv GDNativePtrBuiltInMethod
    method_project GDNativePtrBuiltInMethod
    method_lerp GDNativePtrBuiltInMethod
    method_slerp GDNativePtrBuiltInMethod
    method_cubic_interpolate GDNativePtrBuiltInMethod
    method_cubic_interpolate_in_time GDNativePtrBuiltInMethod
    method_bezier_interpolate GDNativePtrBuiltInMethod
    method_max_axis_index GDNativePtrBuiltInMethod
    method_min_axis_index GDNativePtrBuiltInMethod
    method_move_toward GDNativePtrBuiltInMethod
    method_rotated GDNativePtrBuiltInMethod
    method_orthogonal GDNativePtrBuiltInMethod
    method_floor GDNativePtrBuiltInMethod
    method_ceil GDNativePtrBuiltInMethod
    method_round GDNativePtrBuiltInMethod
    method_aspect GDNativePtrBuiltInMethod
    method_dot GDNativePtrBuiltInMethod
    method_slide GDNativePtrBuiltInMethod
    method_bounce GDNativePtrBuiltInMethod
    method_reflect GDNativePtrBuiltInMethod
    method_cross GDNativePtrBuiltInMethod
    method_abs GDNativePtrBuiltInMethod
    method_sign GDNativePtrBuiltInMethod
    method_clamp GDNativePtrBuiltInMethod
    method_snapped GDNativePtrBuiltInMethod
    method_from_angle GDNativePtrBuiltInMethod
    member_x_setter GDNativePtrSetter
    member_x_getter GDNativePtrGetter
    member_y_setter GDNativePtrSetter
    member_y_getter GDNativePtrGetter
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_negate GDNativePtrOperatorEvaluator
        operator_positive GDNativePtrOperatorEvaluator
        operator_multiply_int GDNativePtrOperatorEvaluator
        operator_divide_int GDNativePtrOperatorEvaluator
        operator_multiply_float GDNativePtrOperatorEvaluator
        operator_divide_float GDNativePtrOperatorEvaluator
        operator_equal_Vector2 GDNativePtrOperatorEvaluator
        operator_not_equal_Vector2 GDNativePtrOperatorEvaluator
        operator_less_Vector2 GDNativePtrOperatorEvaluator
        operator_less_equal_Vector2 GDNativePtrOperatorEvaluator
        operator_greater_Vector2 GDNativePtrOperatorEvaluator
        operator_greater_equal_Vector2 GDNativePtrOperatorEvaluator
        operator_add_Vector2 GDNativePtrOperatorEvaluator
        operator_subtract_Vector2 GDNativePtrOperatorEvaluator
        operator_multiply_Vector2 GDNativePtrOperatorEvaluator
        operator_divide_Vector2 GDNativePtrOperatorEvaluator
        operator_multiply_Transform2D GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_in_PackedVector2Array GDNativePtrOperatorEvaluator
        }

var globalVector2MethodBindings vector2MethodBindings

func vector2InitBindings() {
    globalVector2MethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, 0)
    globalVector2MethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, 1)
    globalVector2MethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, 2)
    globalVector2MethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, 3)
    globalVector2MethodBindings.method_angle = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "angle", 466405837)
    globalVector2MethodBindings.method_angle_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "angle_to", 3819070308)
    globalVector2MethodBindings.method_angle_to_point = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "angle_to_point", 3819070308)
    globalVector2MethodBindings.method_direction_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "direction_to", 2026743667)
    globalVector2MethodBindings.method_distance_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "distance_to", 3819070308)
    globalVector2MethodBindings.method_distance_squared_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "distance_squared_to", 3819070308)
    globalVector2MethodBindings.method_length = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "length", 466405837)
    globalVector2MethodBindings.method_length_squared = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "length_squared", 466405837)
    globalVector2MethodBindings.method_limit_length = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "limit_length", 2544004089)
    globalVector2MethodBindings.method_normalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "normalized", 2428350749)
    globalVector2MethodBindings.method_is_normalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "is_normalized", 3918633141)
    globalVector2MethodBindings.method_is_equal_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "is_equal_approx", 3190634762)
    globalVector2MethodBindings.method_is_zero_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "is_zero_approx", 3918633141)
    globalVector2MethodBindings.method_posmod = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "posmod", 2544004089)
    globalVector2MethodBindings.method_posmodv = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "posmodv", 2026743667)
    globalVector2MethodBindings.method_project = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "project", 2026743667)
    globalVector2MethodBindings.method_lerp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "lerp", 4250033116)
    globalVector2MethodBindings.method_slerp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "slerp", 4250033116)
    globalVector2MethodBindings.method_cubic_interpolate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "cubic_interpolate", 193522989)
    globalVector2MethodBindings.method_cubic_interpolate_in_time = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "cubic_interpolate_in_time", 1957055074)
    globalVector2MethodBindings.method_bezier_interpolate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "bezier_interpolate", 193522989)
    globalVector2MethodBindings.method_max_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "max_axis_index", 3173160232)
    globalVector2MethodBindings.method_min_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "min_axis_index", 3173160232)
    globalVector2MethodBindings.method_move_toward = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "move_toward", 4250033116)
    globalVector2MethodBindings.method_rotated = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "rotated", 2544004089)
    globalVector2MethodBindings.method_orthogonal = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "orthogonal", 2428350749)
    globalVector2MethodBindings.method_floor = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "floor", 2428350749)
    globalVector2MethodBindings.method_ceil = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "ceil", 2428350749)
    globalVector2MethodBindings.method_round = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "round", 2428350749)
    globalVector2MethodBindings.method_aspect = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "aspect", 466405837)
    globalVector2MethodBindings.method_dot = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "dot", 3819070308)
    globalVector2MethodBindings.method_slide = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "slide", 2026743667)
    globalVector2MethodBindings.method_bounce = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "bounce", 2026743667)
    globalVector2MethodBindings.method_reflect = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "reflect", 2026743667)
    globalVector2MethodBindings.method_cross = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "cross", 3819070308)
    globalVector2MethodBindings.method_abs = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "abs", 2428350749)
    globalVector2MethodBindings.method_sign = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "sign", 2428350749)
    globalVector2MethodBindings.method_clamp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "clamp", 318031021)
    globalVector2MethodBindings.method_snapped = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "snapped", 2026743667)
    globalVector2MethodBindings.method_from_angle = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "from_angle", 889263119)
    globalVector2MethodBindings.member_x_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "x")
    globalVector2MethodBindings.member_x_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "x")
    globalVector2MethodBindings.member_y_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "y")
    globalVector2MethodBindings.member_y_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2, "y")
    globalVector2MethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2)
    globalVector2MethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2)
    globalVector2MethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2)
    globalVector2MethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2)
    globalVector2MethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2)
    globalVector2MethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector2MethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector2MethodBindings.operator_negate = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NEGATE, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector2MethodBindings.operator_positive = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_POSITIVE, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector2MethodBindings.operator_multiply_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_INT)
        globalVector2MethodBindings.operator_divide_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_INT)
        globalVector2MethodBindings.operator_multiply_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector2MethodBindings.operator_divide_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector2MethodBindings.operator_equal_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalVector2MethodBindings.operator_not_equal_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalVector2MethodBindings.operator_less_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalVector2MethodBindings.operator_less_equal_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalVector2MethodBindings.operator_greater_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalVector2MethodBindings.operator_greater_equal_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalVector2MethodBindings.operator_add_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalVector2MethodBindings.operator_subtract_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_SUBTRACT, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalVector2MethodBindings.operator_multiply_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalVector2MethodBindings.operator_divide_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalVector2MethodBindings.operator_multiply_Transform2D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
        globalVector2MethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalVector2MethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalVector2MethodBindings.operator_in_PackedVector2Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR2, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
        }

func (c *Vector2) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector2, index: 0
func NewVector2() Vector2 {
    cx := Vector2{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalVector2MethodBindings.constructor_0, ptr, )

    return cx
}
// NewVector2, index: 1
func NewVector2WithVector2(from Vector2,) Vector2 {
    cx := Vector2{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector2
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector2MethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewVector2, index: 2
func NewVector2WithVector2i(from Vector2i,) Vector2 {
    cx := Vector2{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector2i
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector2MethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewVector2, index: 3
func NewVector2WithFloat32Float32(x float32,y float32,) Vector2 {
    cx := Vector2{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // float
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&x))
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&y))
        callBuiltinConstructor(globalVector2MethodBindings.constructor_3, ptr, args[0],args[1],)

    return cx
}




// methods


/* Angle : angle
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Angle() float32 {
    mb := globalVector2MethodBindings.method_angle

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* AngleTo : angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) AngleTo(to Vector2,) float32 {
    mb := globalVector2MethodBindings.method_angle_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* AngleToPoint : angle_to_point
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) AngleToPoint(to Vector2,) float32 {
    mb := globalVector2MethodBindings.method_angle_to_point

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DirectionTo : direction_to
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) DirectionTo(to Vector2,) Vector2 {
    mb := globalVector2MethodBindings.method_direction_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) DistanceTo(to Vector2,) float32 {
    mb := globalVector2MethodBindings.method_distance_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) DistanceSquaredTo(to Vector2,) float32 {
    mb := globalVector2MethodBindings.method_distance_squared_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Length() float32 {
    mb := globalVector2MethodBindings.method_length

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) LengthSquared() float32 {
    mb := globalVector2MethodBindings.method_length_squared

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* LimitLength : limit_length
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) LimitLength(length float32,) Vector2 {
    mb := globalVector2MethodBindings.method_limit_length

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&length))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Normalized() Vector2 {
    mb := globalVector2MethodBindings.method_normalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector2) IsNormalized() bool {
    mb := globalVector2MethodBindings.method_is_normalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector2) IsEqualApprox(to Vector2,) bool {
    mb := globalVector2MethodBindings.method_is_equal_approx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsZeroApprox : is_zero_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector2) IsZeroApprox() bool {
    mb := globalVector2MethodBindings.method_is_zero_approx

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Posmod : posmod
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Posmod(mod float32,) Vector2 {
    mb := globalVector2MethodBindings.method_posmod

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&mod))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Posmodv : posmodv
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Posmodv(modv Vector2,) Vector2 {
    mb := globalVector2MethodBindings.method_posmodv

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&modv))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Project : project
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Project(b Vector2,) Vector2 {
    mb := globalVector2MethodBindings.method_project

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Lerp(to Vector2,weight float32,) Vector2 {
    mb := globalVector2MethodBindings.method_lerp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Slerp(to Vector2,weight float32,) Vector2 {
    mb := globalVector2MethodBindings.method_slerp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CubicInterpolate : cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) CubicInterpolate(b Vector2,pre_a Vector2,post_b Vector2,weight float32,) Vector2 {
    mb := globalVector2MethodBindings.method_cubic_interpolate

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(4)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    
    // Vector2Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a))
    
    
    // Vector2Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&post_b))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CubicInterpolateInTime : cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) CubicInterpolateInTime(b Vector2,pre_a Vector2,post_b Vector2,weight float32,b_t float32,pre_a_t float32,post_b_t float32,) Vector2 {
    mb := globalVector2MethodBindings.method_cubic_interpolate_in_time

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(7)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    
    // Vector2Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a))
    
    
    // Vector2Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&post_b))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    
    // Float32Encoder
    args[4] = (GDNativeTypePtr)(unsafe.Pointer(&b_t))
    
    
    // Float32Encoder
    args[5] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a_t))
    
    
    // Float32Encoder
    args[6] = (GDNativeTypePtr)(unsafe.Pointer(&post_b_t))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* BezierInterpolate : bezier_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) BezierInterpolate(control_1 Vector2,control_2 Vector2,end Vector2,t float32,) Vector2 {
    mb := globalVector2MethodBindings.method_bezier_interpolate

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(4)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&control_1))
    
    
    // Vector2Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&control_2))
    
    
    // Vector2Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&t))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector2) MaxAxisIndex() int64 {
    mb := globalVector2MethodBindings.method_max_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector2) MinAxisIndex() int64 {
    mb := globalVector2MethodBindings.method_min_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* MoveToward : move_toward
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) MoveToward(to Vector2,delta float32,) Vector2 {
    mb := globalVector2MethodBindings.method_move_toward

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&delta))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Rotated(angle float32,) Vector2 {
    mb := globalVector2MethodBindings.method_rotated

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&angle))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Orthogonal : orthogonal
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Orthogonal() Vector2 {
    mb := globalVector2MethodBindings.method_orthogonal

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* Floor : floor
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Floor() Vector2 {
    mb := globalVector2MethodBindings.method_floor

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* Ceil : ceil
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Ceil() Vector2 {
    mb := globalVector2MethodBindings.method_ceil

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* Round : round
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Round() Vector2 {
    mb := globalVector2MethodBindings.method_round

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* Aspect : aspect
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Aspect() float32 {
    mb := globalVector2MethodBindings.method_aspect

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Dot(with Vector2,) float32 {
    mb := globalVector2MethodBindings.method_dot

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Slide : slide
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Slide(n Vector2,) Vector2 {
    mb := globalVector2MethodBindings.method_slide

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&n))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Bounce : bounce
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Bounce(n Vector2,) Vector2 {
    mb := globalVector2MethodBindings.method_bounce

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&n))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reflect : reflect
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Reflect(n Vector2,) Vector2 {
    mb := globalVector2MethodBindings.method_reflect

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&n))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Cross : cross
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Cross(with Vector2,) float32 {
    mb := globalVector2MethodBindings.method_cross

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Abs() Vector2 {
    mb := globalVector2MethodBindings.method_abs

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Sign() Vector2 {
    mb := globalVector2MethodBindings.method_sign

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Clamp(min Vector2,max Vector2,) Vector2 {
    mb := globalVector2MethodBindings.method_clamp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&min))
    
    
    // Vector2Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&max))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Snapped(step Vector2,) Vector2 {
    mb := globalVector2MethodBindings.method_snapped

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&step))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* FromAngle : from_angle
 * is_vararg = false, is_static = true
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) FromAngle(angle float32,) Vector2 {
    mb := globalVector2MethodBindings.method_from_angle

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&angle))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Vector2) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Vector2) MemberGetx() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalVector2MethodBindings.member_x_getter, bx)
}

func (cx *Vector2) MemberGety() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalVector2MethodBindings.member_y_getter, bx)
}


// Equal_Nil operator
func (cx *Vector2) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Vector2) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Negate operator
func (cx *Vector2) Negate() Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_negate, lt, rt)
    }
// Positive operator
func (cx *Vector2) Positive() Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_positive, lt, rt)
    }
// Multiply_int operator
func (cx *Vector2) Multiply_int(right int64) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_int, lt, rt)
    }
// Divide_int operator
func (cx *Vector2) Divide_int(right int64) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_divide_int, lt, rt)
    }
// Multiply_float operator
func (cx *Vector2) Multiply_float(right float32) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_float, lt, rt)
    }
// Divide_float operator
func (cx *Vector2) Divide_float(right float32) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_divide_float, lt, rt)
    }
// Equal_Vector2 operator
func (cx *Vector2) Equal_Vector2(right Vector2) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_equal_Vector2, lt, rt)
    }
// Not_equal_Vector2 operator
func (cx *Vector2) Not_equal_Vector2(right Vector2) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_not_equal_Vector2, lt, rt)
    }
// Less_Vector2 operator
func (cx *Vector2) Less_Vector2(right Vector2) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_less_Vector2, lt, rt)
    }
// Less_equal_Vector2 operator
func (cx *Vector2) Less_equal_Vector2(right Vector2) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_less_equal_Vector2, lt, rt)
    }
// Greater_Vector2 operator
func (cx *Vector2) Greater_Vector2(right Vector2) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_greater_Vector2, lt, rt)
    }
// Greater_equal_Vector2 operator
func (cx *Vector2) Greater_equal_Vector2(right Vector2) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_greater_equal_Vector2, lt, rt)
    }
// Add_Vector2 operator
func (cx *Vector2) Add_Vector2(right Vector2) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_add_Vector2, lt, rt)
    }
// Subtract_Vector2 operator
func (cx *Vector2) Subtract_Vector2(right Vector2) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_subtract_Vector2, lt, rt)
    }
// Multiply_Vector2 operator
func (cx *Vector2) Multiply_Vector2(right Vector2) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_Vector2, lt, rt)
    }
// Divide_Vector2 operator
func (cx *Vector2) Divide_Vector2(right Vector2) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_divide_Vector2, lt, rt)
    }
// Multiply_Transform2D operator
func (cx *Vector2) Multiply_Transform2D(right Transform2D) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_Transform2D, lt, rt)
    }
// In_Dictionary operator
func (cx *Vector2) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Vector2) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_in_Array, lt, rt)
    }
// In_PackedVector2Array operator
func (cx *Vector2) In_PackedVector2Array(right PackedVector2Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_in_PackedVector2Array, lt, rt)
    }
/*
 * Vector2i
 * indexingReturnType: int
 * isKeyed: true
 * hasDestructor: false
 */
type Vector2i struct {
    opaque [8]uint8
}

type vector2iMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    method_aspect GDNativePtrBuiltInMethod
    method_max_axis_index GDNativePtrBuiltInMethod
    method_min_axis_index GDNativePtrBuiltInMethod
    method_length GDNativePtrBuiltInMethod
    method_length_squared GDNativePtrBuiltInMethod
    method_sign GDNativePtrBuiltInMethod
    method_abs GDNativePtrBuiltInMethod
    method_clamp GDNativePtrBuiltInMethod
    member_x_setter GDNativePtrSetter
    member_x_getter GDNativePtrGetter
    member_y_setter GDNativePtrSetter
    member_y_getter GDNativePtrGetter
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_negate GDNativePtrOperatorEvaluator
        operator_positive GDNativePtrOperatorEvaluator
        operator_multiply_int GDNativePtrOperatorEvaluator
        operator_divide_int GDNativePtrOperatorEvaluator
        operator_module_int GDNativePtrOperatorEvaluator
        operator_multiply_float GDNativePtrOperatorEvaluator
        operator_divide_float GDNativePtrOperatorEvaluator
        operator_equal_Vector2i GDNativePtrOperatorEvaluator
        operator_not_equal_Vector2i GDNativePtrOperatorEvaluator
        operator_less_Vector2i GDNativePtrOperatorEvaluator
        operator_less_equal_Vector2i GDNativePtrOperatorEvaluator
        operator_greater_Vector2i GDNativePtrOperatorEvaluator
        operator_greater_equal_Vector2i GDNativePtrOperatorEvaluator
        operator_add_Vector2i GDNativePtrOperatorEvaluator
        operator_subtract_Vector2i GDNativePtrOperatorEvaluator
        operator_multiply_Vector2i GDNativePtrOperatorEvaluator
        operator_divide_Vector2i GDNativePtrOperatorEvaluator
        operator_module_Vector2i GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalVector2iMethodBindings vector2iMethodBindings

func vector2iInitBindings() {
    globalVector2iMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, 0)
    globalVector2iMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, 1)
    globalVector2iMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, 2)
    globalVector2iMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, 3)
    globalVector2iMethodBindings.method_aspect = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "aspect", 466405837)
    globalVector2iMethodBindings.method_max_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "max_axis_index", 3173160232)
    globalVector2iMethodBindings.method_min_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "min_axis_index", 3173160232)
    globalVector2iMethodBindings.method_length = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "length", 466405837)
    globalVector2iMethodBindings.method_length_squared = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "length_squared", 3173160232)
    globalVector2iMethodBindings.method_sign = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "sign", 3444277866)
    globalVector2iMethodBindings.method_abs = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "abs", 3444277866)
    globalVector2iMethodBindings.method_clamp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "clamp", 186568249)
    globalVector2iMethodBindings.member_x_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "x")
    globalVector2iMethodBindings.member_x_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "x")
    globalVector2iMethodBindings.member_y_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "y")
    globalVector2iMethodBindings.member_y_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I, "y")
    globalVector2iMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I)
    globalVector2iMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I)
    globalVector2iMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I)
    globalVector2iMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I)
    globalVector2iMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR2I)
    globalVector2iMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector2iMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector2iMethodBindings.operator_negate = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NEGATE, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector2iMethodBindings.operator_positive = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_POSITIVE, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector2iMethodBindings.operator_multiply_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_INT)
        globalVector2iMethodBindings.operator_divide_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_INT)
        globalVector2iMethodBindings.operator_module_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_INT)
        globalVector2iMethodBindings.operator_multiply_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector2iMethodBindings.operator_divide_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector2iMethodBindings.operator_equal_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalVector2iMethodBindings.operator_not_equal_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalVector2iMethodBindings.operator_less_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalVector2iMethodBindings.operator_less_equal_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalVector2iMethodBindings.operator_greater_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalVector2iMethodBindings.operator_greater_equal_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalVector2iMethodBindings.operator_add_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalVector2iMethodBindings.operator_subtract_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_SUBTRACT, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalVector2iMethodBindings.operator_multiply_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalVector2iMethodBindings.operator_divide_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalVector2iMethodBindings.operator_module_Vector2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_VECTOR2I)
        globalVector2iMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalVector2iMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR2I, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Vector2i) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector2i, index: 0
func NewVector2i() Vector2i {
    cx := Vector2i{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalVector2iMethodBindings.constructor_0, ptr, )

    return cx
}
// NewVector2i, index: 1
func NewVector2iWithVector2i(from Vector2i,) Vector2i {
    cx := Vector2i{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector2i
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector2iMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewVector2i, index: 2
func NewVector2iWithVector2(from Vector2,) Vector2i {
    cx := Vector2i{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector2
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector2iMethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewVector2i, index: 3
func NewVector2iWithInt64Int64(x int64,y int64,) Vector2i {
    cx := Vector2i{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // int
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&x))
        // int
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&y))
        callBuiltinConstructor(globalVector2iMethodBindings.constructor_3, ptr, args[0],args[1],)

    return cx
}




// methods


/* Aspect : aspect
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2i) Aspect() float32 {
    mb := globalVector2iMethodBindings.method_aspect

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector2i) MaxAxisIndex() int64 {
    mb := globalVector2iMethodBindings.method_max_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector2i) MinAxisIndex() int64 {
    mb := globalVector2iMethodBindings.method_min_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2i) Length() float32 {
    mb := globalVector2iMethodBindings.method_length

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector2i) LengthSquared() int64 {
    mb := globalVector2iMethodBindings.method_length_squared

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Sign() Vector2i {
    mb := globalVector2iMethodBindings.method_sign

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2i](mb, bx, nil)

    return ret
    

    
}


/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Abs() Vector2i {
    mb := globalVector2iMethodBindings.method_abs

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2i](mb, bx, nil)

    return ret
    

    
}


/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Clamp(min Vector2i,max Vector2i,) Vector2i {
    mb := globalVector2iMethodBindings.method_clamp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2iEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&min))
    
    
    // Vector2iEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&max))
    
    

    ret := callBuiltinMethodPtrRet[Vector2i](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Vector2i) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Vector2i) MemberGetx() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalVector2iMethodBindings.member_x_getter, bx)
}

func (cx *Vector2i) MemberGety() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalVector2iMethodBindings.member_y_getter, bx)
}


// Equal_Nil operator
func (cx *Vector2i) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Vector2i) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Negate operator
func (cx *Vector2i) Negate() Vector2i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_negate, lt, rt)
    }
// Positive operator
func (cx *Vector2i) Positive() Vector2i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_positive, lt, rt)
    }
// Multiply_int operator
func (cx *Vector2i) Multiply_int(right int64) Vector2i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_multiply_int, lt, rt)
    }
// Divide_int operator
func (cx *Vector2i) Divide_int(right int64) Vector2i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_divide_int, lt, rt)
    }
// Module_int operator
func (cx *Vector2i) Module_int(right int64) Vector2i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_module_int, lt, rt)
    }
// Multiply_float operator
func (cx *Vector2i) Multiply_float(right float32) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalVector2iMethodBindings.operator_multiply_float, lt, rt)
    }
// Divide_float operator
func (cx *Vector2i) Divide_float(right float32) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalVector2iMethodBindings.operator_divide_float, lt, rt)
    }
// Equal_Vector2i operator
func (cx *Vector2i) Equal_Vector2i(right Vector2i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_equal_Vector2i, lt, rt)
    }
// Not_equal_Vector2i operator
func (cx *Vector2i) Not_equal_Vector2i(right Vector2i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_not_equal_Vector2i, lt, rt)
    }
// Less_Vector2i operator
func (cx *Vector2i) Less_Vector2i(right Vector2i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_less_Vector2i, lt, rt)
    }
// Less_equal_Vector2i operator
func (cx *Vector2i) Less_equal_Vector2i(right Vector2i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_less_equal_Vector2i, lt, rt)
    }
// Greater_Vector2i operator
func (cx *Vector2i) Greater_Vector2i(right Vector2i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_greater_Vector2i, lt, rt)
    }
// Greater_equal_Vector2i operator
func (cx *Vector2i) Greater_equal_Vector2i(right Vector2i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_greater_equal_Vector2i, lt, rt)
    }
// Add_Vector2i operator
func (cx *Vector2i) Add_Vector2i(right Vector2i) Vector2i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_add_Vector2i, lt, rt)
    }
// Subtract_Vector2i operator
func (cx *Vector2i) Subtract_Vector2i(right Vector2i) Vector2i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_subtract_Vector2i, lt, rt)
    }
// Multiply_Vector2i operator
func (cx *Vector2i) Multiply_Vector2i(right Vector2i) Vector2i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_multiply_Vector2i, lt, rt)
    }
// Divide_Vector2i operator
func (cx *Vector2i) Divide_Vector2i(right Vector2i) Vector2i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_divide_Vector2i, lt, rt)
    }
// Module_Vector2i operator
func (cx *Vector2i) Module_Vector2i(right Vector2i) Vector2i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_module_Vector2i, lt, rt)
    }
// In_Dictionary operator
func (cx *Vector2i) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Vector2i) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Rect2
 * indexingReturnType: 
 * isKeyed: true
 * hasDestructor: false
 */
type Rect2 struct {
    opaque [16]uint8
}

type rect2MethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    constructor_4 GDNativePtrConstructor
    method_get_center GDNativePtrBuiltInMethod
    method_get_area GDNativePtrBuiltInMethod
    method_has_area GDNativePtrBuiltInMethod
    method_has_point GDNativePtrBuiltInMethod
    method_is_equal_approx GDNativePtrBuiltInMethod
    method_intersects GDNativePtrBuiltInMethod
    method_encloses GDNativePtrBuiltInMethod
    method_intersection GDNativePtrBuiltInMethod
    method_merge GDNativePtrBuiltInMethod
    method_expand GDNativePtrBuiltInMethod
    method_grow GDNativePtrBuiltInMethod
    method_grow_side GDNativePtrBuiltInMethod
    method_grow_individual GDNativePtrBuiltInMethod
    method_abs GDNativePtrBuiltInMethod
    member_position_setter GDNativePtrSetter
    member_position_getter GDNativePtrGetter
    member_size_setter GDNativePtrSetter
    member_size_getter GDNativePtrGetter
    member_end_setter GDNativePtrSetter
    member_end_getter GDNativePtrGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_equal_Rect2 GDNativePtrOperatorEvaluator
        operator_not_equal_Rect2 GDNativePtrOperatorEvaluator
        operator_multiply_Transform2D GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalRect2MethodBindings rect2MethodBindings

func rect2InitBindings() {
    globalRect2MethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, 0)
    globalRect2MethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, 1)
    globalRect2MethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, 2)
    globalRect2MethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, 3)
    globalRect2MethodBindings.constructor_4 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, 4)
    globalRect2MethodBindings.method_get_center = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "get_center", 2428350749)
    globalRect2MethodBindings.method_get_area = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "get_area", 466405837)
    globalRect2MethodBindings.method_has_area = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "has_area", 3918633141)
    globalRect2MethodBindings.method_has_point = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "has_point", 3190634762)
    globalRect2MethodBindings.method_is_equal_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "is_equal_approx", 1908192260)
    globalRect2MethodBindings.method_intersects = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "intersects", 819294880)
    globalRect2MethodBindings.method_encloses = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "encloses", 1908192260)
    globalRect2MethodBindings.method_intersection = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "intersection", 2282977743)
    globalRect2MethodBindings.method_merge = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "merge", 2282977743)
    globalRect2MethodBindings.method_expand = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "expand", 293272265)
    globalRect2MethodBindings.method_grow = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "grow", 39664498)
    globalRect2MethodBindings.method_grow_side = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "grow_side", 4177736158)
    globalRect2MethodBindings.method_grow_individual = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "grow_individual", 3203390369)
    globalRect2MethodBindings.method_abs = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "abs", 3107653634)
    globalRect2MethodBindings.member_position_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "position")
    globalRect2MethodBindings.member_position_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "position")
    globalRect2MethodBindings.member_size_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "size")
    globalRect2MethodBindings.member_size_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "size")
    globalRect2MethodBindings.member_end_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "end")
    globalRect2MethodBindings.member_end_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2, "end")
    globalRect2MethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2)
    globalRect2MethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2)
    globalRect2MethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2)
    globalRect2MethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_RECT2, GDNATIVE_VARIANT_TYPE_NIL)
        globalRect2MethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_RECT2, GDNATIVE_VARIANT_TYPE_NIL)
        globalRect2MethodBindings.operator_equal_Rect2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_RECT2, GDNATIVE_VARIANT_TYPE_RECT2)
        globalRect2MethodBindings.operator_not_equal_Rect2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_RECT2, GDNATIVE_VARIANT_TYPE_RECT2)
        globalRect2MethodBindings.operator_multiply_Transform2D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_RECT2, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
        globalRect2MethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_RECT2, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalRect2MethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_RECT2, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Rect2) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewRect2, index: 0
func NewRect2() Rect2 {
    cx := Rect2{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalRect2MethodBindings.constructor_0, ptr, )

    return cx
}
// NewRect2, index: 1
func NewRect2WithRect2(from Rect2,) Rect2 {
    cx := Rect2{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Rect2
        args[0] = from.ptr()
        callBuiltinConstructor(globalRect2MethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewRect2, index: 2
func NewRect2WithRect2i(from Rect2i,) Rect2 {
    cx := Rect2{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Rect2i
        args[0] = from.ptr()
        callBuiltinConstructor(globalRect2MethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewRect2, index: 3
func NewRect2WithVector2Vector2(position Vector2,size Vector2,) Rect2 {
    cx := Rect2{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Vector2
        args[0] = position.ptr()
        // Vector2
        args[1] = size.ptr()
        callBuiltinConstructor(globalRect2MethodBindings.constructor_3, ptr, args[0],args[1],)

    return cx
}
// NewRect2, index: 4
func NewRect2WithFloat32Float32Float32Float32(x float32,y float32,width float32,height float32,) Rect2 {
    cx := Rect2{}

    ptr := cx.ptr()

    var args [4]GDNativeTypePtr

    // float
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&x))
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&y))
        // float
        args[2] = (GDNativeTypePtr)(unsafe.Pointer(&width))
        // float
        args[3] = (GDNativeTypePtr)(unsafe.Pointer(&height))
        callBuiltinConstructor(globalRect2MethodBindings.constructor_4, ptr, args[0],args[1],args[2],args[3],)

    return cx
}




// methods


/* GetCenter : get_center
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Rect2) GetCenter() Vector2 {
    mb := globalRect2MethodBindings.method_get_center

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* GetArea : get_area
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Rect2) GetArea() float32 {
    mb := globalRect2MethodBindings.method_get_area

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* HasArea : has_area
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) HasArea() bool {
    mb := globalRect2MethodBindings.method_has_area

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) HasPoint(point Vector2,) bool {
    mb := globalRect2MethodBindings.method_has_point

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&point))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) IsEqualApprox(rect Rect2,) bool {
    mb := globalRect2MethodBindings.method_is_equal_approx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Rect2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&rect))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Intersects : intersects
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) Intersects(b Rect2,include_borders bool,) bool {
    mb := globalRect2MethodBindings.method_intersects

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Rect2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&include_borders))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Encloses : encloses
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) Encloses(b Rect2,) bool {
    mb := globalRect2MethodBindings.method_encloses

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Rect2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Intersection : intersection
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Intersection(b Rect2,) Rect2 {
    mb := globalRect2MethodBindings.method_intersection

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Rect2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    

    ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Merge(b Rect2,) Rect2 {
    mb := globalRect2MethodBindings.method_merge

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Rect2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    

    ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Expand : expand
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Expand(to Vector2,) Rect2 {
    mb := globalRect2MethodBindings.method_expand

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Grow : grow
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Grow(amount float32,) Rect2 {
    mb := globalRect2MethodBindings.method_grow

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&amount))
    
    

    ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GrowSide : grow_side
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) GrowSide(side int64,amount float32,) Rect2 {
    mb := globalRect2MethodBindings.method_grow_side

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&side))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&amount))
    
    

    ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GrowIndividual : grow_individual
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) GrowIndividual(left float32,top float32,right float32,bottom float32,) Rect2 {
    mb := globalRect2MethodBindings.method_grow_individual

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(4)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&left))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&top))
    
    
    // Float32Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&right))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&bottom))
    
    

    ret := callBuiltinMethodPtrRet[Rect2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Abs() Rect2 {
    mb := globalRect2MethodBindings.method_abs

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Rect2](mb, bx, nil)

    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Rect2) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Rect2) MemberGetposition() Vector2 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector2](globalRect2MethodBindings.member_position_getter, bx)
}

func (cx *Rect2) MemberGetsize() Vector2 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector2](globalRect2MethodBindings.member_size_getter, bx)
}

func (cx *Rect2) MemberGetend() Vector2 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector2](globalRect2MethodBindings.member_end_getter, bx)
}


// Equal_Nil operator
func (cx *Rect2) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Rect2) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Equal_Rect2 operator
func (cx *Rect2) Equal_Rect2(right Rect2) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_equal_Rect2, lt, rt)
    }
// Not_equal_Rect2 operator
func (cx *Rect2) Not_equal_Rect2(right Rect2) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_not_equal_Rect2, lt, rt)
    }
// Multiply_Transform2D operator
func (cx *Rect2) Multiply_Transform2D(right Transform2D) Rect2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Rect2](globalRect2MethodBindings.operator_multiply_Transform2D, lt, rt)
    }
// In_Dictionary operator
func (cx *Rect2) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Rect2) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Rect2i
 * indexingReturnType: 
 * isKeyed: true
 * hasDestructor: false
 */
type Rect2i struct {
    opaque [16]uint8
}

type rect2iMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    constructor_4 GDNativePtrConstructor
    method_get_center GDNativePtrBuiltInMethod
    method_get_area GDNativePtrBuiltInMethod
    method_has_area GDNativePtrBuiltInMethod
    method_has_point GDNativePtrBuiltInMethod
    method_intersects GDNativePtrBuiltInMethod
    method_encloses GDNativePtrBuiltInMethod
    method_intersection GDNativePtrBuiltInMethod
    method_merge GDNativePtrBuiltInMethod
    method_expand GDNativePtrBuiltInMethod
    method_grow GDNativePtrBuiltInMethod
    method_grow_side GDNativePtrBuiltInMethod
    method_grow_individual GDNativePtrBuiltInMethod
    method_abs GDNativePtrBuiltInMethod
    member_position_setter GDNativePtrSetter
    member_position_getter GDNativePtrGetter
    member_size_setter GDNativePtrSetter
    member_size_getter GDNativePtrGetter
    member_end_setter GDNativePtrSetter
    member_end_getter GDNativePtrGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_equal_Rect2i GDNativePtrOperatorEvaluator
        operator_not_equal_Rect2i GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalRect2iMethodBindings rect2iMethodBindings

func rect2iInitBindings() {
    globalRect2iMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, 0)
    globalRect2iMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, 1)
    globalRect2iMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, 2)
    globalRect2iMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, 3)
    globalRect2iMethodBindings.constructor_4 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, 4)
    globalRect2iMethodBindings.method_get_center = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "get_center", 3444277866)
    globalRect2iMethodBindings.method_get_area = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "get_area", 3173160232)
    globalRect2iMethodBindings.method_has_area = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "has_area", 3918633141)
    globalRect2iMethodBindings.method_has_point = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "has_point", 328189994)
    globalRect2iMethodBindings.method_intersects = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "intersects", 3434691493)
    globalRect2iMethodBindings.method_encloses = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "encloses", 3434691493)
    globalRect2iMethodBindings.method_intersection = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "intersection", 717431873)
    globalRect2iMethodBindings.method_merge = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "merge", 717431873)
    globalRect2iMethodBindings.method_expand = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "expand", 1355196872)
    globalRect2iMethodBindings.method_grow = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "grow", 1578070074)
    globalRect2iMethodBindings.method_grow_side = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "grow_side", 3191154199)
    globalRect2iMethodBindings.method_grow_individual = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "grow_individual", 1893743416)
    globalRect2iMethodBindings.method_abs = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "abs", 1469025700)
    globalRect2iMethodBindings.member_position_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "position")
    globalRect2iMethodBindings.member_position_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "position")
    globalRect2iMethodBindings.member_size_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "size")
    globalRect2iMethodBindings.member_size_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "size")
    globalRect2iMethodBindings.member_end_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "end")
    globalRect2iMethodBindings.member_end_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I, "end")
    globalRect2iMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I)
    globalRect2iMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I)
    globalRect2iMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RECT2I)
    globalRect2iMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_RECT2I, GDNATIVE_VARIANT_TYPE_NIL)
        globalRect2iMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_RECT2I, GDNATIVE_VARIANT_TYPE_NIL)
        globalRect2iMethodBindings.operator_equal_Rect2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_RECT2I, GDNATIVE_VARIANT_TYPE_RECT2I)
        globalRect2iMethodBindings.operator_not_equal_Rect2i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_RECT2I, GDNATIVE_VARIANT_TYPE_RECT2I)
        globalRect2iMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_RECT2I, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalRect2iMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_RECT2I, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Rect2i) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewRect2i, index: 0
func NewRect2i() Rect2i {
    cx := Rect2i{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalRect2iMethodBindings.constructor_0, ptr, )

    return cx
}
// NewRect2i, index: 1
func NewRect2iWithRect2i(from Rect2i,) Rect2i {
    cx := Rect2i{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Rect2i
        args[0] = from.ptr()
        callBuiltinConstructor(globalRect2iMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewRect2i, index: 2
func NewRect2iWithRect2(from Rect2,) Rect2i {
    cx := Rect2i{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Rect2
        args[0] = from.ptr()
        callBuiltinConstructor(globalRect2iMethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewRect2i, index: 3
func NewRect2iWithVector2iVector2i(position Vector2i,size Vector2i,) Rect2i {
    cx := Rect2i{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Vector2i
        args[0] = position.ptr()
        // Vector2i
        args[1] = size.ptr()
        callBuiltinConstructor(globalRect2iMethodBindings.constructor_3, ptr, args[0],args[1],)

    return cx
}
// NewRect2i, index: 4
func NewRect2iWithInt64Int64Int64Int64(x int64,y int64,width int64,height int64,) Rect2i {
    cx := Rect2i{}

    ptr := cx.ptr()

    var args [4]GDNativeTypePtr

    // int
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&x))
        // int
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&y))
        // int
        args[2] = (GDNativeTypePtr)(unsafe.Pointer(&width))
        // int
        args[3] = (GDNativeTypePtr)(unsafe.Pointer(&height))
        callBuiltinConstructor(globalRect2iMethodBindings.constructor_4, ptr, args[0],args[1],args[2],args[3],)

    return cx
}




// methods


/* GetCenter : get_center
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Rect2i) GetCenter() Vector2i {
    mb := globalRect2iMethodBindings.method_get_center

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2i](mb, bx, nil)

    return ret
    

    
}


/* GetArea : get_area
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Rect2i) GetArea() int64 {
    mb := globalRect2iMethodBindings.method_get_area

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* HasArea : has_area
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) HasArea() bool {
    mb := globalRect2iMethodBindings.method_has_area

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) HasPoint(point Vector2i,) bool {
    mb := globalRect2iMethodBindings.method_has_point

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2iEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&point))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Intersects : intersects
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) Intersects(b Rect2i,) bool {
    mb := globalRect2iMethodBindings.method_intersects

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Rect2iEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Encloses : encloses
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) Encloses(b Rect2i,) bool {
    mb := globalRect2iMethodBindings.method_encloses

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Rect2iEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Intersection : intersection
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Intersection(b Rect2i,) Rect2i {
    mb := globalRect2iMethodBindings.method_intersection

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Rect2iEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    

    ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Merge(b Rect2i,) Rect2i {
    mb := globalRect2iMethodBindings.method_merge

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Rect2iEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    

    ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Expand : expand
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Expand(to Vector2i,) Rect2i {
    mb := globalRect2iMethodBindings.method_expand

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2iEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Grow : grow
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Grow(amount int64,) Rect2i {
    mb := globalRect2iMethodBindings.method_grow

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&amount))
    
    

    ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GrowSide : grow_side
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) GrowSide(side int64,amount int64,) Rect2i {
    mb := globalRect2iMethodBindings.method_grow_side

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&side))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&amount))
    
    

    ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GrowIndividual : grow_individual
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) GrowIndividual(left int64,top int64,right int64,bottom int64,) Rect2i {
    mb := globalRect2iMethodBindings.method_grow_individual

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(4)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&left))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&top))
    
    
    // Int64Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&right))
    
    
    // Int64Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&bottom))
    
    

    ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Abs() Rect2i {
    mb := globalRect2iMethodBindings.method_abs

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Rect2i](mb, bx, nil)

    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Rect2i) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Rect2i) MemberGetposition() Vector2i {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector2i](globalRect2iMethodBindings.member_position_getter, bx)
}

func (cx *Rect2i) MemberGetsize() Vector2i {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector2i](globalRect2iMethodBindings.member_size_getter, bx)
}

func (cx *Rect2i) MemberGetend() Vector2i {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector2i](globalRect2iMethodBindings.member_end_getter, bx)
}


// Equal_Nil operator
func (cx *Rect2i) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Rect2i) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Equal_Rect2i operator
func (cx *Rect2i) Equal_Rect2i(right Rect2i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_equal_Rect2i, lt, rt)
    }
// Not_equal_Rect2i operator
func (cx *Rect2i) Not_equal_Rect2i(right Rect2i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_not_equal_Rect2i, lt, rt)
    }
// In_Dictionary operator
func (cx *Rect2i) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Rect2i) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Vector3
 * indexingReturnType: float
 * isKeyed: true
 * hasDestructor: false
 */
type Vector3 struct {
    opaque [12]uint8
}

type vector3MethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    method_min_axis_index GDNativePtrBuiltInMethod
    method_max_axis_index GDNativePtrBuiltInMethod
    method_angle_to GDNativePtrBuiltInMethod
    method_signed_angle_to GDNativePtrBuiltInMethod
    method_direction_to GDNativePtrBuiltInMethod
    method_distance_to GDNativePtrBuiltInMethod
    method_distance_squared_to GDNativePtrBuiltInMethod
    method_length GDNativePtrBuiltInMethod
    method_length_squared GDNativePtrBuiltInMethod
    method_limit_length GDNativePtrBuiltInMethod
    method_normalized GDNativePtrBuiltInMethod
    method_is_normalized GDNativePtrBuiltInMethod
    method_is_equal_approx GDNativePtrBuiltInMethod
    method_is_zero_approx GDNativePtrBuiltInMethod
    method_inverse GDNativePtrBuiltInMethod
    method_clamp GDNativePtrBuiltInMethod
    method_snapped GDNativePtrBuiltInMethod
    method_rotated GDNativePtrBuiltInMethod
    method_lerp GDNativePtrBuiltInMethod
    method_slerp GDNativePtrBuiltInMethod
    method_cubic_interpolate GDNativePtrBuiltInMethod
    method_cubic_interpolate_in_time GDNativePtrBuiltInMethod
    method_bezier_interpolate GDNativePtrBuiltInMethod
    method_move_toward GDNativePtrBuiltInMethod
    method_dot GDNativePtrBuiltInMethod
    method_cross GDNativePtrBuiltInMethod
    method_outer GDNativePtrBuiltInMethod
    method_abs GDNativePtrBuiltInMethod
    method_floor GDNativePtrBuiltInMethod
    method_ceil GDNativePtrBuiltInMethod
    method_round GDNativePtrBuiltInMethod
    method_posmod GDNativePtrBuiltInMethod
    method_posmodv GDNativePtrBuiltInMethod
    method_project GDNativePtrBuiltInMethod
    method_slide GDNativePtrBuiltInMethod
    method_bounce GDNativePtrBuiltInMethod
    method_reflect GDNativePtrBuiltInMethod
    method_sign GDNativePtrBuiltInMethod
    method_octahedron_encode GDNativePtrBuiltInMethod
    method_octahedron_decode GDNativePtrBuiltInMethod
    member_x_setter GDNativePtrSetter
    member_x_getter GDNativePtrGetter
    member_y_setter GDNativePtrSetter
    member_y_getter GDNativePtrGetter
    member_z_setter GDNativePtrSetter
    member_z_getter GDNativePtrGetter
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_negate GDNativePtrOperatorEvaluator
        operator_positive GDNativePtrOperatorEvaluator
        operator_multiply_int GDNativePtrOperatorEvaluator
        operator_divide_int GDNativePtrOperatorEvaluator
        operator_multiply_float GDNativePtrOperatorEvaluator
        operator_divide_float GDNativePtrOperatorEvaluator
        operator_equal_Vector3 GDNativePtrOperatorEvaluator
        operator_not_equal_Vector3 GDNativePtrOperatorEvaluator
        operator_less_Vector3 GDNativePtrOperatorEvaluator
        operator_less_equal_Vector3 GDNativePtrOperatorEvaluator
        operator_greater_Vector3 GDNativePtrOperatorEvaluator
        operator_greater_equal_Vector3 GDNativePtrOperatorEvaluator
        operator_add_Vector3 GDNativePtrOperatorEvaluator
        operator_subtract_Vector3 GDNativePtrOperatorEvaluator
        operator_multiply_Vector3 GDNativePtrOperatorEvaluator
        operator_divide_Vector3 GDNativePtrOperatorEvaluator
        operator_multiply_Quaternion GDNativePtrOperatorEvaluator
        operator_multiply_Basis GDNativePtrOperatorEvaluator
        operator_multiply_Transform3D GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_in_PackedVector3Array GDNativePtrOperatorEvaluator
        }

var globalVector3MethodBindings vector3MethodBindings

func vector3InitBindings() {
    globalVector3MethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, 0)
    globalVector3MethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, 1)
    globalVector3MethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, 2)
    globalVector3MethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, 3)
    globalVector3MethodBindings.method_min_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "min_axis_index", 3173160232)
    globalVector3MethodBindings.method_max_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "max_axis_index", 3173160232)
    globalVector3MethodBindings.method_angle_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "angle_to", 1047977935)
    globalVector3MethodBindings.method_signed_angle_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "signed_angle_to", 2781412522)
    globalVector3MethodBindings.method_direction_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "direction_to", 2923479887)
    globalVector3MethodBindings.method_distance_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "distance_to", 1047977935)
    globalVector3MethodBindings.method_distance_squared_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "distance_squared_to", 1047977935)
    globalVector3MethodBindings.method_length = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "length", 466405837)
    globalVector3MethodBindings.method_length_squared = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "length_squared", 466405837)
    globalVector3MethodBindings.method_limit_length = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "limit_length", 514930144)
    globalVector3MethodBindings.method_normalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "normalized", 1776574132)
    globalVector3MethodBindings.method_is_normalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "is_normalized", 3918633141)
    globalVector3MethodBindings.method_is_equal_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "is_equal_approx", 1749054343)
    globalVector3MethodBindings.method_is_zero_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "is_zero_approx", 3918633141)
    globalVector3MethodBindings.method_inverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "inverse", 1776574132)
    globalVector3MethodBindings.method_clamp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "clamp", 4145107892)
    globalVector3MethodBindings.method_snapped = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "snapped", 2923479887)
    globalVector3MethodBindings.method_rotated = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "rotated", 1682608829)
    globalVector3MethodBindings.method_lerp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "lerp", 1682608829)
    globalVector3MethodBindings.method_slerp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "slerp", 1682608829)
    globalVector3MethodBindings.method_cubic_interpolate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "cubic_interpolate", 2597922253)
    globalVector3MethodBindings.method_cubic_interpolate_in_time = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "cubic_interpolate_in_time", 3256682901)
    globalVector3MethodBindings.method_bezier_interpolate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "bezier_interpolate", 2597922253)
    globalVector3MethodBindings.method_move_toward = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "move_toward", 1682608829)
    globalVector3MethodBindings.method_dot = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "dot", 1047977935)
    globalVector3MethodBindings.method_cross = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "cross", 2923479887)
    globalVector3MethodBindings.method_outer = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "outer", 3934786792)
    globalVector3MethodBindings.method_abs = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "abs", 1776574132)
    globalVector3MethodBindings.method_floor = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "floor", 1776574132)
    globalVector3MethodBindings.method_ceil = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "ceil", 1776574132)
    globalVector3MethodBindings.method_round = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "round", 1776574132)
    globalVector3MethodBindings.method_posmod = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "posmod", 514930144)
    globalVector3MethodBindings.method_posmodv = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "posmodv", 2923479887)
    globalVector3MethodBindings.method_project = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "project", 2923479887)
    globalVector3MethodBindings.method_slide = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "slide", 2923479887)
    globalVector3MethodBindings.method_bounce = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "bounce", 2923479887)
    globalVector3MethodBindings.method_reflect = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "reflect", 2923479887)
    globalVector3MethodBindings.method_sign = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "sign", 1776574132)
    globalVector3MethodBindings.method_octahedron_encode = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "octahedron_encode", 2428350749)
    globalVector3MethodBindings.method_octahedron_decode = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "octahedron_decode", 3991820552)
    globalVector3MethodBindings.member_x_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "x")
    globalVector3MethodBindings.member_x_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "x")
    globalVector3MethodBindings.member_y_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "y")
    globalVector3MethodBindings.member_y_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "y")
    globalVector3MethodBindings.member_z_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "z")
    globalVector3MethodBindings.member_z_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3, "z")
    globalVector3MethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3)
    globalVector3MethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3)
    globalVector3MethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3)
    globalVector3MethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3)
    globalVector3MethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3)
    globalVector3MethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector3MethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector3MethodBindings.operator_negate = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NEGATE, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector3MethodBindings.operator_positive = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_POSITIVE, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector3MethodBindings.operator_multiply_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_INT)
        globalVector3MethodBindings.operator_divide_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_INT)
        globalVector3MethodBindings.operator_multiply_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector3MethodBindings.operator_divide_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector3MethodBindings.operator_equal_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalVector3MethodBindings.operator_not_equal_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalVector3MethodBindings.operator_less_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalVector3MethodBindings.operator_less_equal_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalVector3MethodBindings.operator_greater_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalVector3MethodBindings.operator_greater_equal_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalVector3MethodBindings.operator_add_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalVector3MethodBindings.operator_subtract_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_SUBTRACT, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalVector3MethodBindings.operator_multiply_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalVector3MethodBindings.operator_divide_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalVector3MethodBindings.operator_multiply_Quaternion = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_QUATERNION)
        globalVector3MethodBindings.operator_multiply_Basis = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_BASIS)
        globalVector3MethodBindings.operator_multiply_Transform3D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
        globalVector3MethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalVector3MethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalVector3MethodBindings.operator_in_PackedVector3Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR3, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
        }

func (c *Vector3) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector3, index: 0
func NewVector3() Vector3 {
    cx := Vector3{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalVector3MethodBindings.constructor_0, ptr, )

    return cx
}
// NewVector3, index: 1
func NewVector3WithVector3(from Vector3,) Vector3 {
    cx := Vector3{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector3
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector3MethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewVector3, index: 2
func NewVector3WithVector3i(from Vector3i,) Vector3 {
    cx := Vector3{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector3i
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector3MethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewVector3, index: 3
func NewVector3WithFloat32Float32Float32(x float32,y float32,z float32,) Vector3 {
    cx := Vector3{}

    ptr := cx.ptr()

    var args [3]GDNativeTypePtr

    // float
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&x))
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&y))
        // float
        args[2] = (GDNativeTypePtr)(unsafe.Pointer(&z))
        callBuiltinConstructor(globalVector3MethodBindings.constructor_3, ptr, args[0],args[1],args[2],)

    return cx
}




// methods


/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector3) MinAxisIndex() int64 {
    mb := globalVector3MethodBindings.method_min_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector3) MaxAxisIndex() int64 {
    mb := globalVector3MethodBindings.method_max_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* AngleTo : angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) AngleTo(to Vector3,) float32 {
    mb := globalVector3MethodBindings.method_angle_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* SignedAngleTo : signed_angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) SignedAngleTo(to Vector3,axis Vector3,) float32 {
    mb := globalVector3MethodBindings.method_signed_angle_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&axis))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DirectionTo : direction_to
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) DirectionTo(to Vector3,) Vector3 {
    mb := globalVector3MethodBindings.method_direction_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) DistanceTo(to Vector3,) float32 {
    mb := globalVector3MethodBindings.method_distance_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) DistanceSquaredTo(to Vector3,) float32 {
    mb := globalVector3MethodBindings.method_distance_squared_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) Length() float32 {
    mb := globalVector3MethodBindings.method_length

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) LengthSquared() float32 {
    mb := globalVector3MethodBindings.method_length_squared

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* LimitLength : limit_length
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) LimitLength(length float32,) Vector3 {
    mb := globalVector3MethodBindings.method_limit_length

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&length))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Normalized() Vector3 {
    mb := globalVector3MethodBindings.method_normalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector3) IsNormalized() bool {
    mb := globalVector3MethodBindings.method_is_normalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector3) IsEqualApprox(to Vector3,) bool {
    mb := globalVector3MethodBindings.method_is_equal_approx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsZeroApprox : is_zero_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector3) IsZeroApprox() bool {
    mb := globalVector3MethodBindings.method_is_zero_approx

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Inverse() Vector3 {
    mb := globalVector3MethodBindings.method_inverse

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Clamp(min Vector3,max Vector3,) Vector3 {
    mb := globalVector3MethodBindings.method_clamp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&min))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&max))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Snapped(step Vector3,) Vector3 {
    mb := globalVector3MethodBindings.method_snapped

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&step))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Rotated(axis Vector3,angle float32,) Vector3 {
    mb := globalVector3MethodBindings.method_rotated

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&axis))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&angle))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Lerp(to Vector3,weight float32,) Vector3 {
    mb := globalVector3MethodBindings.method_lerp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Slerp(to Vector3,weight float32,) Vector3 {
    mb := globalVector3MethodBindings.method_slerp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CubicInterpolate : cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) CubicInterpolate(b Vector3,pre_a Vector3,post_b Vector3,weight float32,) Vector3 {
    mb := globalVector3MethodBindings.method_cubic_interpolate

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(4)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a))
    
    
    // Vector3Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&post_b))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CubicInterpolateInTime : cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) CubicInterpolateInTime(b Vector3,pre_a Vector3,post_b Vector3,weight float32,b_t float32,pre_a_t float32,post_b_t float32,) Vector3 {
    mb := globalVector3MethodBindings.method_cubic_interpolate_in_time

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(7)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a))
    
    
    // Vector3Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&post_b))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    
    // Float32Encoder
    args[4] = (GDNativeTypePtr)(unsafe.Pointer(&b_t))
    
    
    // Float32Encoder
    args[5] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a_t))
    
    
    // Float32Encoder
    args[6] = (GDNativeTypePtr)(unsafe.Pointer(&post_b_t))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* BezierInterpolate : bezier_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) BezierInterpolate(control_1 Vector3,control_2 Vector3,end Vector3,t float32,) Vector3 {
    mb := globalVector3MethodBindings.method_bezier_interpolate

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(4)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&control_1))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&control_2))
    
    
    // Vector3Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&t))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* MoveToward : move_toward
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) MoveToward(to Vector3,delta float32,) Vector3 {
    mb := globalVector3MethodBindings.method_move_toward

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&delta))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) Dot(with Vector3,) float32 {
    mb := globalVector3MethodBindings.method_dot

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Cross : cross
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Cross(with Vector3,) Vector3 {
    mb := globalVector3MethodBindings.method_cross

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Outer : outer
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Vector3) Outer(with Vector3,) Basis {
    mb := globalVector3MethodBindings.method_outer

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[Basis](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Abs() Vector3 {
    mb := globalVector3MethodBindings.method_abs

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* Floor : floor
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Floor() Vector3 {
    mb := globalVector3MethodBindings.method_floor

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* Ceil : ceil
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Ceil() Vector3 {
    mb := globalVector3MethodBindings.method_ceil

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* Round : round
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Round() Vector3 {
    mb := globalVector3MethodBindings.method_round

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* Posmod : posmod
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Posmod(mod float32,) Vector3 {
    mb := globalVector3MethodBindings.method_posmod

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&mod))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Posmodv : posmodv
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Posmodv(modv Vector3,) Vector3 {
    mb := globalVector3MethodBindings.method_posmodv

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&modv))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Project : project
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Project(b Vector3,) Vector3 {
    mb := globalVector3MethodBindings.method_project

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Slide : slide
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Slide(n Vector3,) Vector3 {
    mb := globalVector3MethodBindings.method_slide

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&n))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Bounce : bounce
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Bounce(n Vector3,) Vector3 {
    mb := globalVector3MethodBindings.method_bounce

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&n))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reflect : reflect
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Reflect(n Vector3,) Vector3 {
    mb := globalVector3MethodBindings.method_reflect

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&n))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Sign() Vector3 {
    mb := globalVector3MethodBindings.method_sign

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* OctahedronEncode : octahedron_encode
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector3) OctahedronEncode() Vector2 {
    mb := globalVector3MethodBindings.method_octahedron_encode

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* OctahedronDecode : octahedron_decode
 * is_vararg = false, is_static = true
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) OctahedronDecode(uv Vector2,) Vector3 {
    mb := globalVector3MethodBindings.method_octahedron_decode

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&uv))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Vector3) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Vector3) MemberGetx() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalVector3MethodBindings.member_x_getter, bx)
}

func (cx *Vector3) MemberGety() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalVector3MethodBindings.member_y_getter, bx)
}

func (cx *Vector3) MemberGetz() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalVector3MethodBindings.member_z_getter, bx)
}


// Equal_Nil operator
func (cx *Vector3) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Vector3) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Negate operator
func (cx *Vector3) Negate() Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_negate, lt, rt)
    }
// Positive operator
func (cx *Vector3) Positive() Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_positive, lt, rt)
    }
// Multiply_int operator
func (cx *Vector3) Multiply_int(right int64) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_int, lt, rt)
    }
// Divide_int operator
func (cx *Vector3) Divide_int(right int64) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_divide_int, lt, rt)
    }
// Multiply_float operator
func (cx *Vector3) Multiply_float(right float32) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_float, lt, rt)
    }
// Divide_float operator
func (cx *Vector3) Divide_float(right float32) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_divide_float, lt, rt)
    }
// Equal_Vector3 operator
func (cx *Vector3) Equal_Vector3(right Vector3) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_equal_Vector3, lt, rt)
    }
// Not_equal_Vector3 operator
func (cx *Vector3) Not_equal_Vector3(right Vector3) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_not_equal_Vector3, lt, rt)
    }
// Less_Vector3 operator
func (cx *Vector3) Less_Vector3(right Vector3) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_less_Vector3, lt, rt)
    }
// Less_equal_Vector3 operator
func (cx *Vector3) Less_equal_Vector3(right Vector3) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_less_equal_Vector3, lt, rt)
    }
// Greater_Vector3 operator
func (cx *Vector3) Greater_Vector3(right Vector3) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_greater_Vector3, lt, rt)
    }
// Greater_equal_Vector3 operator
func (cx *Vector3) Greater_equal_Vector3(right Vector3) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_greater_equal_Vector3, lt, rt)
    }
// Add_Vector3 operator
func (cx *Vector3) Add_Vector3(right Vector3) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_add_Vector3, lt, rt)
    }
// Subtract_Vector3 operator
func (cx *Vector3) Subtract_Vector3(right Vector3) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_subtract_Vector3, lt, rt)
    }
// Multiply_Vector3 operator
func (cx *Vector3) Multiply_Vector3(right Vector3) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Vector3, lt, rt)
    }
// Divide_Vector3 operator
func (cx *Vector3) Divide_Vector3(right Vector3) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_divide_Vector3, lt, rt)
    }
// Multiply_Quaternion operator
func (cx *Vector3) Multiply_Quaternion(right Quaternion) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Quaternion, lt, rt)
    }
// Multiply_Basis operator
func (cx *Vector3) Multiply_Basis(right Basis) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Basis, lt, rt)
    }
// Multiply_Transform3D operator
func (cx *Vector3) Multiply_Transform3D(right Transform3D) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Transform3D, lt, rt)
    }
// In_Dictionary operator
func (cx *Vector3) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Vector3) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_in_Array, lt, rt)
    }
// In_PackedVector3Array operator
func (cx *Vector3) In_PackedVector3Array(right PackedVector3Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_in_PackedVector3Array, lt, rt)
    }
/*
 * Vector3i
 * indexingReturnType: int
 * isKeyed: true
 * hasDestructor: false
 */
type Vector3i struct {
    opaque [12]uint8
}

type vector3iMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    method_min_axis_index GDNativePtrBuiltInMethod
    method_max_axis_index GDNativePtrBuiltInMethod
    method_length GDNativePtrBuiltInMethod
    method_length_squared GDNativePtrBuiltInMethod
    method_sign GDNativePtrBuiltInMethod
    method_abs GDNativePtrBuiltInMethod
    method_clamp GDNativePtrBuiltInMethod
    member_x_setter GDNativePtrSetter
    member_x_getter GDNativePtrGetter
    member_y_setter GDNativePtrSetter
    member_y_getter GDNativePtrGetter
    member_z_setter GDNativePtrSetter
    member_z_getter GDNativePtrGetter
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_negate GDNativePtrOperatorEvaluator
        operator_positive GDNativePtrOperatorEvaluator
        operator_multiply_int GDNativePtrOperatorEvaluator
        operator_divide_int GDNativePtrOperatorEvaluator
        operator_module_int GDNativePtrOperatorEvaluator
        operator_multiply_float GDNativePtrOperatorEvaluator
        operator_divide_float GDNativePtrOperatorEvaluator
        operator_equal_Vector3i GDNativePtrOperatorEvaluator
        operator_not_equal_Vector3i GDNativePtrOperatorEvaluator
        operator_less_Vector3i GDNativePtrOperatorEvaluator
        operator_less_equal_Vector3i GDNativePtrOperatorEvaluator
        operator_greater_Vector3i GDNativePtrOperatorEvaluator
        operator_greater_equal_Vector3i GDNativePtrOperatorEvaluator
        operator_add_Vector3i GDNativePtrOperatorEvaluator
        operator_subtract_Vector3i GDNativePtrOperatorEvaluator
        operator_multiply_Vector3i GDNativePtrOperatorEvaluator
        operator_divide_Vector3i GDNativePtrOperatorEvaluator
        operator_module_Vector3i GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalVector3iMethodBindings vector3iMethodBindings

func vector3iInitBindings() {
    globalVector3iMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, 0)
    globalVector3iMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, 1)
    globalVector3iMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, 2)
    globalVector3iMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, 3)
    globalVector3iMethodBindings.method_min_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "min_axis_index", 3173160232)
    globalVector3iMethodBindings.method_max_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "max_axis_index", 3173160232)
    globalVector3iMethodBindings.method_length = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "length", 466405837)
    globalVector3iMethodBindings.method_length_squared = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "length_squared", 3173160232)
    globalVector3iMethodBindings.method_sign = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "sign", 3729604559)
    globalVector3iMethodBindings.method_abs = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "abs", 3729604559)
    globalVector3iMethodBindings.method_clamp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "clamp", 1086892323)
    globalVector3iMethodBindings.member_x_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "x")
    globalVector3iMethodBindings.member_x_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "x")
    globalVector3iMethodBindings.member_y_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "y")
    globalVector3iMethodBindings.member_y_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "y")
    globalVector3iMethodBindings.member_z_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "z")
    globalVector3iMethodBindings.member_z_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I, "z")
    globalVector3iMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I)
    globalVector3iMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I)
    globalVector3iMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I)
    globalVector3iMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I)
    globalVector3iMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR3I)
    globalVector3iMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector3iMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector3iMethodBindings.operator_negate = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NEGATE, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector3iMethodBindings.operator_positive = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_POSITIVE, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector3iMethodBindings.operator_multiply_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_INT)
        globalVector3iMethodBindings.operator_divide_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_INT)
        globalVector3iMethodBindings.operator_module_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_INT)
        globalVector3iMethodBindings.operator_multiply_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector3iMethodBindings.operator_divide_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector3iMethodBindings.operator_equal_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalVector3iMethodBindings.operator_not_equal_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalVector3iMethodBindings.operator_less_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalVector3iMethodBindings.operator_less_equal_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalVector3iMethodBindings.operator_greater_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalVector3iMethodBindings.operator_greater_equal_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalVector3iMethodBindings.operator_add_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalVector3iMethodBindings.operator_subtract_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_SUBTRACT, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalVector3iMethodBindings.operator_multiply_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalVector3iMethodBindings.operator_divide_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalVector3iMethodBindings.operator_module_Vector3i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_VECTOR3I)
        globalVector3iMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalVector3iMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR3I, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Vector3i) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector3i, index: 0
func NewVector3i() Vector3i {
    cx := Vector3i{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalVector3iMethodBindings.constructor_0, ptr, )

    return cx
}
// NewVector3i, index: 1
func NewVector3iWithVector3i(from Vector3i,) Vector3i {
    cx := Vector3i{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector3i
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector3iMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewVector3i, index: 2
func NewVector3iWithVector3(from Vector3,) Vector3i {
    cx := Vector3i{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector3
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector3iMethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewVector3i, index: 3
func NewVector3iWithInt64Int64Int64(x int64,y int64,z int64,) Vector3i {
    cx := Vector3i{}

    ptr := cx.ptr()

    var args [3]GDNativeTypePtr

    // int
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&x))
        // int
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&y))
        // int
        args[2] = (GDNativeTypePtr)(unsafe.Pointer(&z))
        callBuiltinConstructor(globalVector3iMethodBindings.constructor_3, ptr, args[0],args[1],args[2],)

    return cx
}




// methods


/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector3i) MinAxisIndex() int64 {
    mb := globalVector3iMethodBindings.method_min_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector3i) MaxAxisIndex() int64 {
    mb := globalVector3iMethodBindings.method_max_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3i) Length() float32 {
    mb := globalVector3iMethodBindings.method_length

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector3i) LengthSquared() int64 {
    mb := globalVector3iMethodBindings.method_length_squared

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Sign() Vector3i {
    mb := globalVector3iMethodBindings.method_sign

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3i](mb, bx, nil)

    return ret
    

    
}


/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Abs() Vector3i {
    mb := globalVector3iMethodBindings.method_abs

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3i](mb, bx, nil)

    return ret
    

    
}


/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Clamp(min Vector3i,max Vector3i,) Vector3i {
    mb := globalVector3iMethodBindings.method_clamp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3iEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&min))
    
    
    // Vector3iEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&max))
    
    

    ret := callBuiltinMethodPtrRet[Vector3i](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Vector3i) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Vector3i) MemberGetx() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalVector3iMethodBindings.member_x_getter, bx)
}

func (cx *Vector3i) MemberGety() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalVector3iMethodBindings.member_y_getter, bx)
}

func (cx *Vector3i) MemberGetz() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalVector3iMethodBindings.member_z_getter, bx)
}


// Equal_Nil operator
func (cx *Vector3i) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Vector3i) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Negate operator
func (cx *Vector3i) Negate() Vector3i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_negate, lt, rt)
    }
// Positive operator
func (cx *Vector3i) Positive() Vector3i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_positive, lt, rt)
    }
// Multiply_int operator
func (cx *Vector3i) Multiply_int(right int64) Vector3i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_multiply_int, lt, rt)
    }
// Divide_int operator
func (cx *Vector3i) Divide_int(right int64) Vector3i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_divide_int, lt, rt)
    }
// Module_int operator
func (cx *Vector3i) Module_int(right int64) Vector3i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_module_int, lt, rt)
    }
// Multiply_float operator
func (cx *Vector3i) Multiply_float(right float32) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3iMethodBindings.operator_multiply_float, lt, rt)
    }
// Divide_float operator
func (cx *Vector3i) Divide_float(right float32) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalVector3iMethodBindings.operator_divide_float, lt, rt)
    }
// Equal_Vector3i operator
func (cx *Vector3i) Equal_Vector3i(right Vector3i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_equal_Vector3i, lt, rt)
    }
// Not_equal_Vector3i operator
func (cx *Vector3i) Not_equal_Vector3i(right Vector3i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_not_equal_Vector3i, lt, rt)
    }
// Less_Vector3i operator
func (cx *Vector3i) Less_Vector3i(right Vector3i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_less_Vector3i, lt, rt)
    }
// Less_equal_Vector3i operator
func (cx *Vector3i) Less_equal_Vector3i(right Vector3i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_less_equal_Vector3i, lt, rt)
    }
// Greater_Vector3i operator
func (cx *Vector3i) Greater_Vector3i(right Vector3i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_greater_Vector3i, lt, rt)
    }
// Greater_equal_Vector3i operator
func (cx *Vector3i) Greater_equal_Vector3i(right Vector3i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_greater_equal_Vector3i, lt, rt)
    }
// Add_Vector3i operator
func (cx *Vector3i) Add_Vector3i(right Vector3i) Vector3i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_add_Vector3i, lt, rt)
    }
// Subtract_Vector3i operator
func (cx *Vector3i) Subtract_Vector3i(right Vector3i) Vector3i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_subtract_Vector3i, lt, rt)
    }
// Multiply_Vector3i operator
func (cx *Vector3i) Multiply_Vector3i(right Vector3i) Vector3i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_multiply_Vector3i, lt, rt)
    }
// Divide_Vector3i operator
func (cx *Vector3i) Divide_Vector3i(right Vector3i) Vector3i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_divide_Vector3i, lt, rt)
    }
// Module_Vector3i operator
func (cx *Vector3i) Module_Vector3i(right Vector3i) Vector3i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_module_Vector3i, lt, rt)
    }
// In_Dictionary operator
func (cx *Vector3i) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Vector3i) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Transform2D
 * indexingReturnType: Vector2
 * isKeyed: true
 * hasDestructor: true
 */
type Transform2D struct {
    opaque [24]uint8
}

type transform2DMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    constructor_4 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_inverse GDNativePtrBuiltInMethod
    method_affine_inverse GDNativePtrBuiltInMethod
    method_get_rotation GDNativePtrBuiltInMethod
    method_get_origin GDNativePtrBuiltInMethod
    method_get_scale GDNativePtrBuiltInMethod
    method_get_skew GDNativePtrBuiltInMethod
    method_orthonormalized GDNativePtrBuiltInMethod
    method_rotated GDNativePtrBuiltInMethod
    method_rotated_local GDNativePtrBuiltInMethod
    method_scaled GDNativePtrBuiltInMethod
    method_scaled_local GDNativePtrBuiltInMethod
    method_translated GDNativePtrBuiltInMethod
    method_translated_local GDNativePtrBuiltInMethod
    method_basis_xform GDNativePtrBuiltInMethod
    method_basis_xform_inv GDNativePtrBuiltInMethod
    method_interpolate_with GDNativePtrBuiltInMethod
    method_is_equal_approx GDNativePtrBuiltInMethod
    method_set_rotation GDNativePtrBuiltInMethod
    method_set_scale GDNativePtrBuiltInMethod
    method_set_skew GDNativePtrBuiltInMethod
    method_looking_at GDNativePtrBuiltInMethod
    member_x_setter GDNativePtrSetter
    member_x_getter GDNativePtrGetter
    member_y_setter GDNativePtrSetter
    member_y_getter GDNativePtrGetter
    member_origin_setter GDNativePtrSetter
    member_origin_getter GDNativePtrGetter
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_multiply_int GDNativePtrOperatorEvaluator
        operator_multiply_float GDNativePtrOperatorEvaluator
        operator_multiply_Vector2 GDNativePtrOperatorEvaluator
        operator_multiply_Rect2 GDNativePtrOperatorEvaluator
        operator_equal_Transform2D GDNativePtrOperatorEvaluator
        operator_not_equal_Transform2D GDNativePtrOperatorEvaluator
        operator_multiply_Transform2D GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_multiply_PackedVector2Array GDNativePtrOperatorEvaluator
        }

var globalTransform2DMethodBindings transform2DMethodBindings

func transform2DInitBindings() {
    globalTransform2DMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, 0)
    globalTransform2DMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, 1)
    globalTransform2DMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, 2)
    globalTransform2DMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, 3)
    globalTransform2DMethodBindings.constructor_4 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, 4)
    globalTransform2DMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
    globalTransform2DMethodBindings.method_inverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "inverse", 1420440541)
    globalTransform2DMethodBindings.method_affine_inverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "affine_inverse", 1420440541)
    globalTransform2DMethodBindings.method_get_rotation = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "get_rotation", 466405837)
    globalTransform2DMethodBindings.method_get_origin = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "get_origin", 2428350749)
    globalTransform2DMethodBindings.method_get_scale = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "get_scale", 2428350749)
    globalTransform2DMethodBindings.method_get_skew = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "get_skew", 466405837)
    globalTransform2DMethodBindings.method_orthonormalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "orthonormalized", 1420440541)
    globalTransform2DMethodBindings.method_rotated = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "rotated", 729597514)
    globalTransform2DMethodBindings.method_rotated_local = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "rotated_local", 729597514)
    globalTransform2DMethodBindings.method_scaled = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "scaled", 1446323263)
    globalTransform2DMethodBindings.method_scaled_local = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "scaled_local", 1446323263)
    globalTransform2DMethodBindings.method_translated = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "translated", 1446323263)
    globalTransform2DMethodBindings.method_translated_local = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "translated_local", 1446323263)
    globalTransform2DMethodBindings.method_basis_xform = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "basis_xform", 2026743667)
    globalTransform2DMethodBindings.method_basis_xform_inv = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "basis_xform_inv", 2026743667)
    globalTransform2DMethodBindings.method_interpolate_with = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "interpolate_with", 359399686)
    globalTransform2DMethodBindings.method_is_equal_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "is_equal_approx", 3837431929)
    globalTransform2DMethodBindings.method_set_rotation = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "set_rotation", 833936903)
    globalTransform2DMethodBindings.method_set_scale = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "set_scale", 3790411178)
    globalTransform2DMethodBindings.method_set_skew = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "set_skew", 833936903)
    globalTransform2DMethodBindings.method_looking_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "looking_at", 1446323263)
    globalTransform2DMethodBindings.member_x_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "x")
    globalTransform2DMethodBindings.member_x_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "x")
    globalTransform2DMethodBindings.member_y_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "y")
    globalTransform2DMethodBindings.member_y_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "y")
    globalTransform2DMethodBindings.member_origin_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "origin")
    globalTransform2DMethodBindings.member_origin_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, "origin")
    globalTransform2DMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
    globalTransform2DMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
    globalTransform2DMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
    globalTransform2DMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
    globalTransform2DMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
    globalTransform2DMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_NIL)
        globalTransform2DMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_NIL)
        globalTransform2DMethodBindings.operator_multiply_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_INT)
        globalTransform2DMethodBindings.operator_multiply_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalTransform2DMethodBindings.operator_multiply_Vector2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_VECTOR2)
        globalTransform2DMethodBindings.operator_multiply_Rect2 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_RECT2)
        globalTransform2DMethodBindings.operator_equal_Transform2D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
        globalTransform2DMethodBindings.operator_not_equal_Transform2D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
        globalTransform2DMethodBindings.operator_multiply_Transform2D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
        globalTransform2DMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalTransform2DMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalTransform2DMethodBindings.operator_multiply_PackedVector2Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM2D, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
        }

func (c *Transform2D) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewTransform2D, index: 0
func NewTransform2D() Transform2D {
    cx := Transform2D{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalTransform2DMethodBindings.constructor_0, ptr, )

    return cx
}
// NewTransform2D, index: 1
func NewTransform2DWithTransform2D(from Transform2D,) Transform2D {
    cx := Transform2D{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Transform2D
        args[0] = from.ptr()
        callBuiltinConstructor(globalTransform2DMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewTransform2D, index: 2
func NewTransform2DWithFloat32Vector2(rotation float32,position Vector2,) Transform2D {
    cx := Transform2D{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // float
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&rotation))
        // Vector2
        args[1] = position.ptr()
        callBuiltinConstructor(globalTransform2DMethodBindings.constructor_2, ptr, args[0],args[1],)

    return cx
}
// NewTransform2D, index: 3
func NewTransform2DWithFloat32Vector2Float32Vector2(rotation float32,scale Vector2,skew float32,position Vector2,) Transform2D {
    cx := Transform2D{}

    ptr := cx.ptr()

    var args [4]GDNativeTypePtr

    // float
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&rotation))
        // Vector2
        args[1] = scale.ptr()
        // float
        args[2] = (GDNativeTypePtr)(unsafe.Pointer(&skew))
        // Vector2
        args[3] = position.ptr()
        callBuiltinConstructor(globalTransform2DMethodBindings.constructor_3, ptr, args[0],args[1],args[2],args[3],)

    return cx
}
// NewTransform2D, index: 4
func NewTransform2DWithVector2Vector2Vector2(x_axis Vector2,y_axis Vector2,origin Vector2,) Transform2D {
    cx := Transform2D{}

    ptr := cx.ptr()

    var args [3]GDNativeTypePtr

    // Vector2
        args[0] = x_axis.ptr()
        // Vector2
        args[1] = y_axis.ptr()
        // Vector2
        args[2] = origin.ptr()
        callBuiltinConstructor(globalTransform2DMethodBindings.constructor_4, ptr, args[0],args[1],args[2],)

    return cx
}


func (cx *Transform2D) Destroy() {
    md := (GDNativePtrDestructor)(globalTransform2DMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Inverse() Transform2D {
    mb := globalTransform2DMethodBindings.method_inverse

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, nil)

    return ret
    

    
}


/* AffineInverse : affine_inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) AffineInverse() Transform2D {
    mb := globalTransform2DMethodBindings.method_affine_inverse

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, nil)

    return ret
    

    
}


/* GetRotation : get_rotation
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Transform2D) GetRotation() float32 {
    mb := globalTransform2DMethodBindings.method_get_rotation

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* GetOrigin : get_origin
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) GetOrigin() Vector2 {
    mb := globalTransform2DMethodBindings.method_get_origin

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* GetScale : get_scale
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) GetScale() Vector2 {
    mb := globalTransform2DMethodBindings.method_get_scale

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* GetSkew : get_skew
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Transform2D) GetSkew() float32 {
    mb := globalTransform2DMethodBindings.method_get_skew

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* Orthonormalized : orthonormalized
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Orthonormalized() Transform2D {
    mb := globalTransform2DMethodBindings.method_orthonormalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, nil)

    return ret
    

    
}


/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Rotated(angle float32,) Transform2D {
    mb := globalTransform2DMethodBindings.method_rotated

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&angle))
    
    

    ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* RotatedLocal : rotated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) RotatedLocal(angle float32,) Transform2D {
    mb := globalTransform2DMethodBindings.method_rotated_local

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&angle))
    
    

    ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Scaled : scaled
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Scaled(scale Vector2,) Transform2D {
    mb := globalTransform2DMethodBindings.method_scaled

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&scale))
    
    

    ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ScaledLocal : scaled_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) ScaledLocal(scale Vector2,) Transform2D {
    mb := globalTransform2DMethodBindings.method_scaled_local

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&scale))
    
    

    ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Translated : translated
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Translated(offset Vector2,) Transform2D {
    mb := globalTransform2DMethodBindings.method_translated

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&offset))
    
    

    ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TranslatedLocal : translated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) TranslatedLocal(offset Vector2,) Transform2D {
    mb := globalTransform2DMethodBindings.method_translated_local

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&offset))
    
    

    ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* BasisXform : basis_xform
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) BasisXform(v Vector2,) Vector2 {
    mb := globalTransform2DMethodBindings.method_basis_xform

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&v))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* BasisXformInv : basis_xform_inv
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) BasisXformInv(v Vector2,) Vector2 {
    mb := globalTransform2DMethodBindings.method_basis_xform_inv

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&v))
    
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* InterpolateWith : interpolate_with
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) InterpolateWith(xform Transform2D,weight float32,) Transform2D {
    mb := globalTransform2DMethodBindings.method_interpolate_with

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Transform2DEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&xform))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Transform2D) IsEqualApprox(xform Transform2D,) bool {
    mb := globalTransform2DMethodBindings.method_is_equal_approx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Transform2DEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&xform))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* SetRotation : set_rotation
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Transform2D) SetRotation(rotation float32,)  {
    mb := globalTransform2DMethodBindings.method_set_rotation

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&rotation))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* SetScale : set_scale
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Transform2D) SetScale(scale Vector2,)  {
    mb := globalTransform2DMethodBindings.method_set_scale

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&scale))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* SetSkew : set_skew
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Transform2D) SetSkew(skew float32,)  {
    mb := globalTransform2DMethodBindings.method_set_skew

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&skew))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* LookingAt : looking_at
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) LookingAt(target Vector2,) Transform2D {
    mb := globalTransform2DMethodBindings.method_looking_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&target))
    
    

    ret := callBuiltinMethodPtrRet[Transform2D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Transform2D) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Transform2D) MemberGetx() Vector2 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector2](globalTransform2DMethodBindings.member_x_getter, bx)
}

func (cx *Transform2D) MemberGety() Vector2 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector2](globalTransform2DMethodBindings.member_y_getter, bx)
}

func (cx *Transform2D) MemberGetorigin() Vector2 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector2](globalTransform2DMethodBindings.member_origin_getter, bx)
}


// Equal_Nil operator
func (cx *Transform2D) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Transform2D) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Multiply_int operator
func (cx *Transform2D) Multiply_int(right int64) Transform2D {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Transform2D](globalTransform2DMethodBindings.operator_multiply_int, lt, rt)
    }
// Multiply_float operator
func (cx *Transform2D) Multiply_float(right float32) Transform2D {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Transform2D](globalTransform2DMethodBindings.operator_multiply_float, lt, rt)
    }
// Multiply_Vector2 operator
func (cx *Transform2D) Multiply_Vector2(right Vector2) Vector2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector2](globalTransform2DMethodBindings.operator_multiply_Vector2, lt, rt)
    }
// Multiply_Rect2 operator
func (cx *Transform2D) Multiply_Rect2(right Rect2) Rect2 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Rect2](globalTransform2DMethodBindings.operator_multiply_Rect2, lt, rt)
    }
// Equal_Transform2D operator
func (cx *Transform2D) Equal_Transform2D(right Transform2D) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_equal_Transform2D, lt, rt)
    }
// Not_equal_Transform2D operator
func (cx *Transform2D) Not_equal_Transform2D(right Transform2D) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_not_equal_Transform2D, lt, rt)
    }
// Multiply_Transform2D operator
func (cx *Transform2D) Multiply_Transform2D(right Transform2D) Transform2D {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Transform2D](globalTransform2DMethodBindings.operator_multiply_Transform2D, lt, rt)
    }
// In_Dictionary operator
func (cx *Transform2D) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Transform2D) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_in_Array, lt, rt)
    }
// Multiply_PackedVector2Array operator
func (cx *Transform2D) Multiply_PackedVector2Array(right PackedVector2Array) PackedVector2Array {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedVector2Array](globalTransform2DMethodBindings.operator_multiply_PackedVector2Array, lt, rt)
    }
/*
 * Vector4
 * indexingReturnType: float
 * isKeyed: true
 * hasDestructor: false
 */
type Vector4 struct {
    opaque [16]uint8
}

type vector4MethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    method_min_axis_index GDNativePtrBuiltInMethod
    method_max_axis_index GDNativePtrBuiltInMethod
    method_length GDNativePtrBuiltInMethod
    method_length_squared GDNativePtrBuiltInMethod
    method_abs GDNativePtrBuiltInMethod
    method_sign GDNativePtrBuiltInMethod
    method_floor GDNativePtrBuiltInMethod
    method_ceil GDNativePtrBuiltInMethod
    method_round GDNativePtrBuiltInMethod
    method_lerp GDNativePtrBuiltInMethod
    method_cubic_interpolate GDNativePtrBuiltInMethod
    method_cubic_interpolate_in_time GDNativePtrBuiltInMethod
    method_posmod GDNativePtrBuiltInMethod
    method_posmodv GDNativePtrBuiltInMethod
    method_snapped GDNativePtrBuiltInMethod
    method_clamp GDNativePtrBuiltInMethod
    method_normalized GDNativePtrBuiltInMethod
    method_is_normalized GDNativePtrBuiltInMethod
    method_direction_to GDNativePtrBuiltInMethod
    method_distance_to GDNativePtrBuiltInMethod
    method_distance_squared_to GDNativePtrBuiltInMethod
    method_dot GDNativePtrBuiltInMethod
    method_inverse GDNativePtrBuiltInMethod
    method_is_equal_approx GDNativePtrBuiltInMethod
    method_is_zero_approx GDNativePtrBuiltInMethod
    member_x_setter GDNativePtrSetter
    member_x_getter GDNativePtrGetter
    member_y_setter GDNativePtrSetter
    member_y_getter GDNativePtrGetter
    member_z_setter GDNativePtrSetter
    member_z_getter GDNativePtrGetter
    member_w_setter GDNativePtrSetter
    member_w_getter GDNativePtrGetter
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_negate GDNativePtrOperatorEvaluator
        operator_positive GDNativePtrOperatorEvaluator
        operator_multiply_int GDNativePtrOperatorEvaluator
        operator_divide_int GDNativePtrOperatorEvaluator
        operator_multiply_float GDNativePtrOperatorEvaluator
        operator_divide_float GDNativePtrOperatorEvaluator
        operator_equal_Vector4 GDNativePtrOperatorEvaluator
        operator_not_equal_Vector4 GDNativePtrOperatorEvaluator
        operator_less_Vector4 GDNativePtrOperatorEvaluator
        operator_less_equal_Vector4 GDNativePtrOperatorEvaluator
        operator_greater_Vector4 GDNativePtrOperatorEvaluator
        operator_greater_equal_Vector4 GDNativePtrOperatorEvaluator
        operator_add_Vector4 GDNativePtrOperatorEvaluator
        operator_subtract_Vector4 GDNativePtrOperatorEvaluator
        operator_multiply_Vector4 GDNativePtrOperatorEvaluator
        operator_divide_Vector4 GDNativePtrOperatorEvaluator
        operator_multiply_Projection GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalVector4MethodBindings vector4MethodBindings

func vector4InitBindings() {
    globalVector4MethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, 0)
    globalVector4MethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, 1)
    globalVector4MethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, 2)
    globalVector4MethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, 3)
    globalVector4MethodBindings.method_min_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "min_axis_index", 3173160232)
    globalVector4MethodBindings.method_max_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "max_axis_index", 3173160232)
    globalVector4MethodBindings.method_length = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "length", 466405837)
    globalVector4MethodBindings.method_length_squared = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "length_squared", 466405837)
    globalVector4MethodBindings.method_abs = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "abs", 80860099)
    globalVector4MethodBindings.method_sign = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "sign", 80860099)
    globalVector4MethodBindings.method_floor = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "floor", 80860099)
    globalVector4MethodBindings.method_ceil = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "ceil", 80860099)
    globalVector4MethodBindings.method_round = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "round", 80860099)
    globalVector4MethodBindings.method_lerp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "lerp", 2329757942)
    globalVector4MethodBindings.method_cubic_interpolate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "cubic_interpolate", 726768410)
    globalVector4MethodBindings.method_cubic_interpolate_in_time = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "cubic_interpolate_in_time", 681631873)
    globalVector4MethodBindings.method_posmod = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "posmod", 3129671720)
    globalVector4MethodBindings.method_posmodv = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "posmodv", 2031281584)
    globalVector4MethodBindings.method_snapped = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "snapped", 2031281584)
    globalVector4MethodBindings.method_clamp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "clamp", 823915692)
    globalVector4MethodBindings.method_normalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "normalized", 80860099)
    globalVector4MethodBindings.method_is_normalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "is_normalized", 3918633141)
    globalVector4MethodBindings.method_direction_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "direction_to", 2031281584)
    globalVector4MethodBindings.method_distance_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "distance_to", 3770801042)
    globalVector4MethodBindings.method_distance_squared_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "distance_squared_to", 3770801042)
    globalVector4MethodBindings.method_dot = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "dot", 3770801042)
    globalVector4MethodBindings.method_inverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "inverse", 80860099)
    globalVector4MethodBindings.method_is_equal_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "is_equal_approx", 88913544)
    globalVector4MethodBindings.method_is_zero_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "is_zero_approx", 3918633141)
    globalVector4MethodBindings.member_x_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "x")
    globalVector4MethodBindings.member_x_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "x")
    globalVector4MethodBindings.member_y_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "y")
    globalVector4MethodBindings.member_y_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "y")
    globalVector4MethodBindings.member_z_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "z")
    globalVector4MethodBindings.member_z_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "z")
    globalVector4MethodBindings.member_w_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "w")
    globalVector4MethodBindings.member_w_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4, "w")
    globalVector4MethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4)
    globalVector4MethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4)
    globalVector4MethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4)
    globalVector4MethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4)
    globalVector4MethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4)
    globalVector4MethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector4MethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector4MethodBindings.operator_negate = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NEGATE, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector4MethodBindings.operator_positive = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_POSITIVE, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector4MethodBindings.operator_multiply_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_INT)
        globalVector4MethodBindings.operator_divide_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_INT)
        globalVector4MethodBindings.operator_multiply_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector4MethodBindings.operator_divide_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector4MethodBindings.operator_equal_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalVector4MethodBindings.operator_not_equal_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalVector4MethodBindings.operator_less_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalVector4MethodBindings.operator_less_equal_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalVector4MethodBindings.operator_greater_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalVector4MethodBindings.operator_greater_equal_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalVector4MethodBindings.operator_add_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalVector4MethodBindings.operator_subtract_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_SUBTRACT, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalVector4MethodBindings.operator_multiply_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalVector4MethodBindings.operator_divide_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalVector4MethodBindings.operator_multiply_Projection = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_PROJECTION)
        globalVector4MethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalVector4MethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR4, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Vector4) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector4, index: 0
func NewVector4() Vector4 {
    cx := Vector4{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalVector4MethodBindings.constructor_0, ptr, )

    return cx
}
// NewVector4, index: 1
func NewVector4WithVector4(from Vector4,) Vector4 {
    cx := Vector4{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector4
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector4MethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewVector4, index: 2
func NewVector4WithVector4i(from Vector4i,) Vector4 {
    cx := Vector4{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector4i
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector4MethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewVector4, index: 3
func NewVector4WithFloat32Float32Float32Float32(x float32,y float32,z float32,w float32,) Vector4 {
    cx := Vector4{}

    ptr := cx.ptr()

    var args [4]GDNativeTypePtr

    // float
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&x))
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&y))
        // float
        args[2] = (GDNativeTypePtr)(unsafe.Pointer(&z))
        // float
        args[3] = (GDNativeTypePtr)(unsafe.Pointer(&w))
        callBuiltinConstructor(globalVector4MethodBindings.constructor_3, ptr, args[0],args[1],args[2],args[3],)

    return cx
}




// methods


/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector4) MinAxisIndex() int64 {
    mb := globalVector4MethodBindings.method_min_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector4) MaxAxisIndex() int64 {
    mb := globalVector4MethodBindings.method_max_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) Length() float32 {
    mb := globalVector4MethodBindings.method_length

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) LengthSquared() float32 {
    mb := globalVector4MethodBindings.method_length_squared

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Abs() Vector4 {
    mb := globalVector4MethodBindings.method_abs

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)

    return ret
    

    
}


/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Sign() Vector4 {
    mb := globalVector4MethodBindings.method_sign

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)

    return ret
    

    
}


/* Floor : floor
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Floor() Vector4 {
    mb := globalVector4MethodBindings.method_floor

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)

    return ret
    

    
}


/* Ceil : ceil
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Ceil() Vector4 {
    mb := globalVector4MethodBindings.method_ceil

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)

    return ret
    

    
}


/* Round : round
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Round() Vector4 {
    mb := globalVector4MethodBindings.method_round

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)

    return ret
    

    
}


/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Lerp(to Vector4,weight float32,) Vector4 {
    mb := globalVector4MethodBindings.method_lerp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CubicInterpolate : cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) CubicInterpolate(b Vector4,pre_a Vector4,post_b Vector4,weight float32,) Vector4 {
    mb := globalVector4MethodBindings.method_cubic_interpolate

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(4)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    
    // Vector4Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a))
    
    
    // Vector4Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&post_b))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CubicInterpolateInTime : cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) CubicInterpolateInTime(b Vector4,pre_a Vector4,post_b Vector4,weight float32,b_t float32,pre_a_t float32,post_b_t float32,) Vector4 {
    mb := globalVector4MethodBindings.method_cubic_interpolate_in_time

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(7)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    
    // Vector4Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a))
    
    
    // Vector4Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&post_b))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    
    // Float32Encoder
    args[4] = (GDNativeTypePtr)(unsafe.Pointer(&b_t))
    
    
    // Float32Encoder
    args[5] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a_t))
    
    
    // Float32Encoder
    args[6] = (GDNativeTypePtr)(unsafe.Pointer(&post_b_t))
    
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Posmod : posmod
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Posmod(mod float32,) Vector4 {
    mb := globalVector4MethodBindings.method_posmod

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&mod))
    
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Posmodv : posmodv
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Posmodv(modv Vector4,) Vector4 {
    mb := globalVector4MethodBindings.method_posmodv

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&modv))
    
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Snapped(step Vector4,) Vector4 {
    mb := globalVector4MethodBindings.method_snapped

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&step))
    
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Clamp(min Vector4,max Vector4,) Vector4 {
    mb := globalVector4MethodBindings.method_clamp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&min))
    
    
    // Vector4Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&max))
    
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Normalized() Vector4 {
    mb := globalVector4MethodBindings.method_normalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)

    return ret
    

    
}


/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector4) IsNormalized() bool {
    mb := globalVector4MethodBindings.method_is_normalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* DirectionTo : direction_to
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) DirectionTo(to Vector4,) Vector4 {
    mb := globalVector4MethodBindings.method_direction_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) DistanceTo(to Vector4,) float32 {
    mb := globalVector4MethodBindings.method_distance_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) DistanceSquaredTo(to Vector4,) float32 {
    mb := globalVector4MethodBindings.method_distance_squared_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) Dot(with Vector4,) float32 {
    mb := globalVector4MethodBindings.method_dot

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Inverse() Vector4 {
    mb := globalVector4MethodBindings.method_inverse

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector4](mb, bx, nil)

    return ret
    

    
}


/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector4) IsEqualApprox(with Vector4,) bool {
    mb := globalVector4MethodBindings.method_is_equal_approx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsZeroApprox : is_zero_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector4) IsZeroApprox() bool {
    mb := globalVector4MethodBindings.method_is_zero_approx

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Vector4) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Vector4) MemberGetx() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalVector4MethodBindings.member_x_getter, bx)
}

func (cx *Vector4) MemberGety() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalVector4MethodBindings.member_y_getter, bx)
}

func (cx *Vector4) MemberGetz() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalVector4MethodBindings.member_z_getter, bx)
}

func (cx *Vector4) MemberGetw() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalVector4MethodBindings.member_w_getter, bx)
}


// Equal_Nil operator
func (cx *Vector4) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Vector4) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Negate operator
func (cx *Vector4) Negate() Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_negate, lt, rt)
    }
// Positive operator
func (cx *Vector4) Positive() Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_positive, lt, rt)
    }
// Multiply_int operator
func (cx *Vector4) Multiply_int(right int64) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_int, lt, rt)
    }
// Divide_int operator
func (cx *Vector4) Divide_int(right int64) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_divide_int, lt, rt)
    }
// Multiply_float operator
func (cx *Vector4) Multiply_float(right float32) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_float, lt, rt)
    }
// Divide_float operator
func (cx *Vector4) Divide_float(right float32) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_divide_float, lt, rt)
    }
// Equal_Vector4 operator
func (cx *Vector4) Equal_Vector4(right Vector4) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_equal_Vector4, lt, rt)
    }
// Not_equal_Vector4 operator
func (cx *Vector4) Not_equal_Vector4(right Vector4) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_not_equal_Vector4, lt, rt)
    }
// Less_Vector4 operator
func (cx *Vector4) Less_Vector4(right Vector4) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_less_Vector4, lt, rt)
    }
// Less_equal_Vector4 operator
func (cx *Vector4) Less_equal_Vector4(right Vector4) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_less_equal_Vector4, lt, rt)
    }
// Greater_Vector4 operator
func (cx *Vector4) Greater_Vector4(right Vector4) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_greater_Vector4, lt, rt)
    }
// Greater_equal_Vector4 operator
func (cx *Vector4) Greater_equal_Vector4(right Vector4) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_greater_equal_Vector4, lt, rt)
    }
// Add_Vector4 operator
func (cx *Vector4) Add_Vector4(right Vector4) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_add_Vector4, lt, rt)
    }
// Subtract_Vector4 operator
func (cx *Vector4) Subtract_Vector4(right Vector4) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_subtract_Vector4, lt, rt)
    }
// Multiply_Vector4 operator
func (cx *Vector4) Multiply_Vector4(right Vector4) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_Vector4, lt, rt)
    }
// Divide_Vector4 operator
func (cx *Vector4) Divide_Vector4(right Vector4) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_divide_Vector4, lt, rt)
    }
// Multiply_Projection operator
func (cx *Vector4) Multiply_Projection(right Projection) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_Projection, lt, rt)
    }
// In_Dictionary operator
func (cx *Vector4) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Vector4) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Vector4i
 * indexingReturnType: int
 * isKeyed: true
 * hasDestructor: false
 */
type Vector4i struct {
    opaque [16]uint8
}

type vector4iMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    method_min_axis_index GDNativePtrBuiltInMethod
    method_max_axis_index GDNativePtrBuiltInMethod
    method_length GDNativePtrBuiltInMethod
    method_length_squared GDNativePtrBuiltInMethod
    method_sign GDNativePtrBuiltInMethod
    method_abs GDNativePtrBuiltInMethod
    method_clamp GDNativePtrBuiltInMethod
    member_x_setter GDNativePtrSetter
    member_x_getter GDNativePtrGetter
    member_y_setter GDNativePtrSetter
    member_y_getter GDNativePtrGetter
    member_z_setter GDNativePtrSetter
    member_z_getter GDNativePtrGetter
    member_w_setter GDNativePtrSetter
    member_w_getter GDNativePtrGetter
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_negate GDNativePtrOperatorEvaluator
        operator_positive GDNativePtrOperatorEvaluator
        operator_multiply_int GDNativePtrOperatorEvaluator
        operator_divide_int GDNativePtrOperatorEvaluator
        operator_module_int GDNativePtrOperatorEvaluator
        operator_multiply_float GDNativePtrOperatorEvaluator
        operator_divide_float GDNativePtrOperatorEvaluator
        operator_equal_Vector4i GDNativePtrOperatorEvaluator
        operator_not_equal_Vector4i GDNativePtrOperatorEvaluator
        operator_less_Vector4i GDNativePtrOperatorEvaluator
        operator_less_equal_Vector4i GDNativePtrOperatorEvaluator
        operator_greater_Vector4i GDNativePtrOperatorEvaluator
        operator_greater_equal_Vector4i GDNativePtrOperatorEvaluator
        operator_add_Vector4i GDNativePtrOperatorEvaluator
        operator_subtract_Vector4i GDNativePtrOperatorEvaluator
        operator_multiply_Vector4i GDNativePtrOperatorEvaluator
        operator_divide_Vector4i GDNativePtrOperatorEvaluator
        operator_module_Vector4i GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalVector4iMethodBindings vector4iMethodBindings

func vector4iInitBindings() {
    globalVector4iMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, 0)
    globalVector4iMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, 1)
    globalVector4iMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, 2)
    globalVector4iMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, 3)
    globalVector4iMethodBindings.method_min_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "min_axis_index", 3173160232)
    globalVector4iMethodBindings.method_max_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "max_axis_index", 3173160232)
    globalVector4iMethodBindings.method_length = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "length", 466405837)
    globalVector4iMethodBindings.method_length_squared = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "length_squared", 3173160232)
    globalVector4iMethodBindings.method_sign = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "sign", 4134919947)
    globalVector4iMethodBindings.method_abs = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "abs", 4134919947)
    globalVector4iMethodBindings.method_clamp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "clamp", 3046490913)
    globalVector4iMethodBindings.member_x_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "x")
    globalVector4iMethodBindings.member_x_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "x")
    globalVector4iMethodBindings.member_y_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "y")
    globalVector4iMethodBindings.member_y_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "y")
    globalVector4iMethodBindings.member_z_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "z")
    globalVector4iMethodBindings.member_z_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "z")
    globalVector4iMethodBindings.member_w_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "w")
    globalVector4iMethodBindings.member_w_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I, "w")
    globalVector4iMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I)
    globalVector4iMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I)
    globalVector4iMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I)
    globalVector4iMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I)
    globalVector4iMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_VECTOR4I)
    globalVector4iMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector4iMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector4iMethodBindings.operator_negate = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NEGATE, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector4iMethodBindings.operator_positive = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_POSITIVE, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_NIL)
        globalVector4iMethodBindings.operator_multiply_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_INT)
        globalVector4iMethodBindings.operator_divide_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_INT)
        globalVector4iMethodBindings.operator_module_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_INT)
        globalVector4iMethodBindings.operator_multiply_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector4iMethodBindings.operator_divide_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalVector4iMethodBindings.operator_equal_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalVector4iMethodBindings.operator_not_equal_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalVector4iMethodBindings.operator_less_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalVector4iMethodBindings.operator_less_equal_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalVector4iMethodBindings.operator_greater_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalVector4iMethodBindings.operator_greater_equal_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER_EQUAL, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalVector4iMethodBindings.operator_add_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalVector4iMethodBindings.operator_subtract_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_SUBTRACT, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalVector4iMethodBindings.operator_multiply_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalVector4iMethodBindings.operator_divide_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalVector4iMethodBindings.operator_module_Vector4i = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MODULE, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_VECTOR4I)
        globalVector4iMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalVector4iMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_VECTOR4I, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Vector4i) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewVector4i, index: 0
func NewVector4i() Vector4i {
    cx := Vector4i{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalVector4iMethodBindings.constructor_0, ptr, )

    return cx
}
// NewVector4i, index: 1
func NewVector4iWithVector4i(from Vector4i,) Vector4i {
    cx := Vector4i{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector4i
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector4iMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewVector4i, index: 2
func NewVector4iWithVector4(from Vector4,) Vector4i {
    cx := Vector4i{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector4
        args[0] = from.ptr()
        callBuiltinConstructor(globalVector4iMethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewVector4i, index: 3
func NewVector4iWithInt64Int64Int64Int64(x int64,y int64,z int64,w int64,) Vector4i {
    cx := Vector4i{}

    ptr := cx.ptr()

    var args [4]GDNativeTypePtr

    // int
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&x))
        // int
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&y))
        // int
        args[2] = (GDNativeTypePtr)(unsafe.Pointer(&z))
        // int
        args[3] = (GDNativeTypePtr)(unsafe.Pointer(&w))
        callBuiltinConstructor(globalVector4iMethodBindings.constructor_3, ptr, args[0],args[1],args[2],args[3],)

    return cx
}




// methods


/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector4i) MinAxisIndex() int64 {
    mb := globalVector4iMethodBindings.method_min_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector4i) MaxAxisIndex() int64 {
    mb := globalVector4iMethodBindings.method_max_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4i) Length() float32 {
    mb := globalVector4iMethodBindings.method_length

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector4i) LengthSquared() int64 {
    mb := globalVector4iMethodBindings.method_length_squared

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Sign() Vector4i {
    mb := globalVector4iMethodBindings.method_sign

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector4i](mb, bx, nil)

    return ret
    

    
}


/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Abs() Vector4i {
    mb := globalVector4iMethodBindings.method_abs

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector4i](mb, bx, nil)

    return ret
    

    
}


/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Clamp(min Vector4i,max Vector4i,) Vector4i {
    mb := globalVector4iMethodBindings.method_clamp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector4iEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&min))
    
    
    // Vector4iEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&max))
    
    

    ret := callBuiltinMethodPtrRet[Vector4i](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Vector4i) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Vector4i) MemberGetx() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_x_getter, bx)
}

func (cx *Vector4i) MemberGety() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_y_getter, bx)
}

func (cx *Vector4i) MemberGetz() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_z_getter, bx)
}

func (cx *Vector4i) MemberGetw() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_w_getter, bx)
}


// Equal_Nil operator
func (cx *Vector4i) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Vector4i) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Negate operator
func (cx *Vector4i) Negate() Vector4i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_negate, lt, rt)
    }
// Positive operator
func (cx *Vector4i) Positive() Vector4i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_positive, lt, rt)
    }
// Multiply_int operator
func (cx *Vector4i) Multiply_int(right int64) Vector4i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_multiply_int, lt, rt)
    }
// Divide_int operator
func (cx *Vector4i) Divide_int(right int64) Vector4i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_divide_int, lt, rt)
    }
// Module_int operator
func (cx *Vector4i) Module_int(right int64) Vector4i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_module_int, lt, rt)
    }
// Multiply_float operator
func (cx *Vector4i) Multiply_float(right float32) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalVector4iMethodBindings.operator_multiply_float, lt, rt)
    }
// Divide_float operator
func (cx *Vector4i) Divide_float(right float32) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalVector4iMethodBindings.operator_divide_float, lt, rt)
    }
// Equal_Vector4i operator
func (cx *Vector4i) Equal_Vector4i(right Vector4i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_equal_Vector4i, lt, rt)
    }
// Not_equal_Vector4i operator
func (cx *Vector4i) Not_equal_Vector4i(right Vector4i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_not_equal_Vector4i, lt, rt)
    }
// Less_Vector4i operator
func (cx *Vector4i) Less_Vector4i(right Vector4i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_less_Vector4i, lt, rt)
    }
// Less_equal_Vector4i operator
func (cx *Vector4i) Less_equal_Vector4i(right Vector4i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_less_equal_Vector4i, lt, rt)
    }
// Greater_Vector4i operator
func (cx *Vector4i) Greater_Vector4i(right Vector4i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_greater_Vector4i, lt, rt)
    }
// Greater_equal_Vector4i operator
func (cx *Vector4i) Greater_equal_Vector4i(right Vector4i) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_greater_equal_Vector4i, lt, rt)
    }
// Add_Vector4i operator
func (cx *Vector4i) Add_Vector4i(right Vector4i) Vector4i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_add_Vector4i, lt, rt)
    }
// Subtract_Vector4i operator
func (cx *Vector4i) Subtract_Vector4i(right Vector4i) Vector4i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_subtract_Vector4i, lt, rt)
    }
// Multiply_Vector4i operator
func (cx *Vector4i) Multiply_Vector4i(right Vector4i) Vector4i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_multiply_Vector4i, lt, rt)
    }
// Divide_Vector4i operator
func (cx *Vector4i) Divide_Vector4i(right Vector4i) Vector4i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_divide_Vector4i, lt, rt)
    }
// Module_Vector4i operator
func (cx *Vector4i) Module_Vector4i(right Vector4i) Vector4i {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_module_Vector4i, lt, rt)
    }
// In_Dictionary operator
func (cx *Vector4i) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Vector4i) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Plane
 * indexingReturnType: 
 * isKeyed: true
 * hasDestructor: false
 */
type Plane struct {
    opaque [16]uint8
}

type planeMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    constructor_4 GDNativePtrConstructor
    constructor_5 GDNativePtrConstructor
    constructor_6 GDNativePtrConstructor
    method_normalized GDNativePtrBuiltInMethod
    method_center GDNativePtrBuiltInMethod
    method_is_equal_approx GDNativePtrBuiltInMethod
    method_is_point_over GDNativePtrBuiltInMethod
    method_distance_to GDNativePtrBuiltInMethod
    method_has_point GDNativePtrBuiltInMethod
    method_project GDNativePtrBuiltInMethod
    method_intersect_3 GDNativePtrBuiltInMethod
    method_intersects_ray GDNativePtrBuiltInMethod
    method_intersects_segment GDNativePtrBuiltInMethod
    member_x_setter GDNativePtrSetter
    member_x_getter GDNativePtrGetter
    member_y_setter GDNativePtrSetter
    member_y_getter GDNativePtrGetter
    member_z_setter GDNativePtrSetter
    member_z_getter GDNativePtrGetter
    member_d_setter GDNativePtrSetter
    member_d_getter GDNativePtrGetter
    member_normal_setter GDNativePtrSetter
    member_normal_getter GDNativePtrGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_negate GDNativePtrOperatorEvaluator
        operator_positive GDNativePtrOperatorEvaluator
        operator_equal_Plane GDNativePtrOperatorEvaluator
        operator_not_equal_Plane GDNativePtrOperatorEvaluator
        operator_multiply_Transform3D GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalPlaneMethodBindings planeMethodBindings

func planeInitBindings() {
    globalPlaneMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, 0)
    globalPlaneMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, 1)
    globalPlaneMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, 2)
    globalPlaneMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, 3)
    globalPlaneMethodBindings.constructor_4 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, 4)
    globalPlaneMethodBindings.constructor_5 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, 5)
    globalPlaneMethodBindings.constructor_6 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, 6)
    globalPlaneMethodBindings.method_normalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "normalized", 1051796340)
    globalPlaneMethodBindings.method_center = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "center", 1776574132)
    globalPlaneMethodBindings.method_is_equal_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "is_equal_approx", 1150170233)
    globalPlaneMethodBindings.method_is_point_over = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "is_point_over", 1749054343)
    globalPlaneMethodBindings.method_distance_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "distance_to", 1047977935)
    globalPlaneMethodBindings.method_has_point = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "has_point", 1258189072)
    globalPlaneMethodBindings.method_project = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "project", 2923479887)
    globalPlaneMethodBindings.method_intersect_3 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "intersect_3", 2012052692)
    globalPlaneMethodBindings.method_intersects_ray = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "intersects_ray", 2048133369)
    globalPlaneMethodBindings.method_intersects_segment = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "intersects_segment", 2048133369)
    globalPlaneMethodBindings.member_x_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "x")
    globalPlaneMethodBindings.member_x_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "x")
    globalPlaneMethodBindings.member_y_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "y")
    globalPlaneMethodBindings.member_y_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "y")
    globalPlaneMethodBindings.member_z_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "z")
    globalPlaneMethodBindings.member_z_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "z")
    globalPlaneMethodBindings.member_d_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "d")
    globalPlaneMethodBindings.member_d_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "d")
    globalPlaneMethodBindings.member_normal_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "normal")
    globalPlaneMethodBindings.member_normal_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE, "normal")
    globalPlaneMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE)
    globalPlaneMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE)
    globalPlaneMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PLANE)
    globalPlaneMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PLANE, GDNATIVE_VARIANT_TYPE_NIL)
        globalPlaneMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PLANE, GDNATIVE_VARIANT_TYPE_NIL)
        globalPlaneMethodBindings.operator_negate = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NEGATE, GDNATIVE_VARIANT_TYPE_PLANE, GDNATIVE_VARIANT_TYPE_NIL)
        globalPlaneMethodBindings.operator_positive = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_POSITIVE, GDNATIVE_VARIANT_TYPE_PLANE, GDNATIVE_VARIANT_TYPE_NIL)
        globalPlaneMethodBindings.operator_equal_Plane = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PLANE, GDNATIVE_VARIANT_TYPE_PLANE)
        globalPlaneMethodBindings.operator_not_equal_Plane = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PLANE, GDNATIVE_VARIANT_TYPE_PLANE)
        globalPlaneMethodBindings.operator_multiply_Transform3D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_PLANE, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
        globalPlaneMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PLANE, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalPlaneMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PLANE, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Plane) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPlane, index: 0
func NewPlane() Plane {
    cx := Plane{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalPlaneMethodBindings.constructor_0, ptr, )

    return cx
}
// NewPlane, index: 1
func NewPlaneWithPlane(from Plane,) Plane {
    cx := Plane{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Plane
        args[0] = from.ptr()
        callBuiltinConstructor(globalPlaneMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewPlane, index: 2
func NewPlaneWithVector3(normal Vector3,) Plane {
    cx := Plane{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector3
        args[0] = normal.ptr()
        callBuiltinConstructor(globalPlaneMethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewPlane, index: 3
func NewPlaneWithVector3Float32(normal Vector3,d float32,) Plane {
    cx := Plane{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Vector3
        args[0] = normal.ptr()
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&d))
        callBuiltinConstructor(globalPlaneMethodBindings.constructor_3, ptr, args[0],args[1],)

    return cx
}
// NewPlane, index: 4
func NewPlaneWithVector3Vector3(normal Vector3,point Vector3,) Plane {
    cx := Plane{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Vector3
        args[0] = normal.ptr()
        // Vector3
        args[1] = point.ptr()
        callBuiltinConstructor(globalPlaneMethodBindings.constructor_4, ptr, args[0],args[1],)

    return cx
}
// NewPlane, index: 5
func NewPlaneWithVector3Vector3Vector3(point1 Vector3,point2 Vector3,point3 Vector3,) Plane {
    cx := Plane{}

    ptr := cx.ptr()

    var args [3]GDNativeTypePtr

    // Vector3
        args[0] = point1.ptr()
        // Vector3
        args[1] = point2.ptr()
        // Vector3
        args[2] = point3.ptr()
        callBuiltinConstructor(globalPlaneMethodBindings.constructor_5, ptr, args[0],args[1],args[2],)

    return cx
}
// NewPlane, index: 6
func NewPlaneWithFloat32Float32Float32Float32(a float32,b float32,c float32,d float32,) Plane {
    cx := Plane{}

    ptr := cx.ptr()

    var args [4]GDNativeTypePtr

    // float
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&a))
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&b))
        // float
        args[2] = (GDNativeTypePtr)(unsafe.Pointer(&c))
        // float
        args[3] = (GDNativeTypePtr)(unsafe.Pointer(&d))
        callBuiltinConstructor(globalPlaneMethodBindings.constructor_6, ptr, args[0],args[1],args[2],args[3],)

    return cx
}




// methods


/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Plane) -> Plane
 */
func (cx *Plane) Normalized() Plane {
    mb := globalPlaneMethodBindings.method_normalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Plane](mb, bx, nil)

    return ret
    

    
}


/* Center : center
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Plane) Center() Vector3 {
    mb := globalPlaneMethodBindings.method_center

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Plane) IsEqualApprox(to_plane Plane,) bool {
    mb := globalPlaneMethodBindings.method_is_equal_approx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PlaneEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to_plane))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsPointOver : is_point_over
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Plane) IsPointOver(point Vector3,) bool {
    mb := globalPlaneMethodBindings.method_is_point_over

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&point))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Plane) DistanceTo(point Vector3,) float32 {
    mb := globalPlaneMethodBindings.method_distance_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&point))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Plane) HasPoint(point Vector3,tolerance float32,) bool {
    mb := globalPlaneMethodBindings.method_has_point

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&point))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&tolerance))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Project : project
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Plane) Project(point Vector3,) Vector3 {
    mb := globalPlaneMethodBindings.method_project

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&point))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Intersect3 : intersect_3
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Plane) Intersect3(b Plane,c Plane,) Variant {
    mb := globalPlaneMethodBindings.method_intersect_3

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PlaneEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    
    // PlaneEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&c))
    
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IntersectsRay : intersects_ray
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Plane) IntersectsRay(from Vector3,dir Vector3,) Variant {
    mb := globalPlaneMethodBindings.method_intersects_ray

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&dir))
    
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IntersectsSegment : intersects_segment
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Plane) IntersectsSegment(from Vector3,to Vector3,) Variant {
    mb := globalPlaneMethodBindings.method_intersects_segment

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Plane) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Plane) MemberGetx() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalPlaneMethodBindings.member_x_getter, bx)
}

func (cx *Plane) MemberGety() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalPlaneMethodBindings.member_y_getter, bx)
}

func (cx *Plane) MemberGetz() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalPlaneMethodBindings.member_z_getter, bx)
}

func (cx *Plane) MemberGetd() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalPlaneMethodBindings.member_d_getter, bx)
}

func (cx *Plane) MemberGetnormal() Vector3 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector3](globalPlaneMethodBindings.member_normal_getter, bx)
}


// Equal_Nil operator
func (cx *Plane) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Plane) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Negate operator
func (cx *Plane) Negate() Plane {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Plane](globalPlaneMethodBindings.operator_negate, lt, rt)
    }
// Positive operator
func (cx *Plane) Positive() Plane {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Plane](globalPlaneMethodBindings.operator_positive, lt, rt)
    }
// Equal_Plane operator
func (cx *Plane) Equal_Plane(right Plane) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_equal_Plane, lt, rt)
    }
// Not_equal_Plane operator
func (cx *Plane) Not_equal_Plane(right Plane) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_not_equal_Plane, lt, rt)
    }
// Multiply_Transform3D operator
func (cx *Plane) Multiply_Transform3D(right Transform3D) Plane {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Plane](globalPlaneMethodBindings.operator_multiply_Transform3D, lt, rt)
    }
// In_Dictionary operator
func (cx *Plane) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Plane) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Quaternion
 * indexingReturnType: float
 * isKeyed: true
 * hasDestructor: false
 */
type Quaternion struct {
    opaque [16]uint8
}

type quaternionMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    constructor_4 GDNativePtrConstructor
    constructor_5 GDNativePtrConstructor
    constructor_6 GDNativePtrConstructor
    method_length GDNativePtrBuiltInMethod
    method_length_squared GDNativePtrBuiltInMethod
    method_normalized GDNativePtrBuiltInMethod
    method_is_normalized GDNativePtrBuiltInMethod
    method_is_equal_approx GDNativePtrBuiltInMethod
    method_inverse GDNativePtrBuiltInMethod
    method_log GDNativePtrBuiltInMethod
    method_exp GDNativePtrBuiltInMethod
    method_angle_to GDNativePtrBuiltInMethod
    method_dot GDNativePtrBuiltInMethod
    method_slerp GDNativePtrBuiltInMethod
    method_slerpni GDNativePtrBuiltInMethod
    method_spherical_cubic_interpolate GDNativePtrBuiltInMethod
    method_spherical_cubic_interpolate_in_time GDNativePtrBuiltInMethod
    method_get_euler GDNativePtrBuiltInMethod
    method_get_axis GDNativePtrBuiltInMethod
    method_get_angle GDNativePtrBuiltInMethod
    member_x_setter GDNativePtrSetter
    member_x_getter GDNativePtrGetter
    member_y_setter GDNativePtrSetter
    member_y_getter GDNativePtrGetter
    member_z_setter GDNativePtrSetter
    member_z_getter GDNativePtrGetter
    member_w_setter GDNativePtrSetter
    member_w_getter GDNativePtrGetter
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_negate GDNativePtrOperatorEvaluator
        operator_positive GDNativePtrOperatorEvaluator
        operator_multiply_int GDNativePtrOperatorEvaluator
        operator_divide_int GDNativePtrOperatorEvaluator
        operator_multiply_float GDNativePtrOperatorEvaluator
        operator_divide_float GDNativePtrOperatorEvaluator
        operator_multiply_Vector3 GDNativePtrOperatorEvaluator
        operator_equal_Quaternion GDNativePtrOperatorEvaluator
        operator_not_equal_Quaternion GDNativePtrOperatorEvaluator
        operator_add_Quaternion GDNativePtrOperatorEvaluator
        operator_subtract_Quaternion GDNativePtrOperatorEvaluator
        operator_multiply_Quaternion GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalQuaternionMethodBindings quaternionMethodBindings

func quaternionInitBindings() {
    globalQuaternionMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, 0)
    globalQuaternionMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, 1)
    globalQuaternionMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, 2)
    globalQuaternionMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, 3)
    globalQuaternionMethodBindings.constructor_4 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, 4)
    globalQuaternionMethodBindings.constructor_5 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, 5)
    globalQuaternionMethodBindings.constructor_6 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, 6)
    globalQuaternionMethodBindings.method_length = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "length", 466405837)
    globalQuaternionMethodBindings.method_length_squared = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "length_squared", 466405837)
    globalQuaternionMethodBindings.method_normalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "normalized", 4274879941)
    globalQuaternionMethodBindings.method_is_normalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "is_normalized", 3918633141)
    globalQuaternionMethodBindings.method_is_equal_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "is_equal_approx", 1682156903)
    globalQuaternionMethodBindings.method_inverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "inverse", 4274879941)
    globalQuaternionMethodBindings.method_log = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "log", 4274879941)
    globalQuaternionMethodBindings.method_exp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "exp", 4274879941)
    globalQuaternionMethodBindings.method_angle_to = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "angle_to", 3244682419)
    globalQuaternionMethodBindings.method_dot = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "dot", 3244682419)
    globalQuaternionMethodBindings.method_slerp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "slerp", 1773590316)
    globalQuaternionMethodBindings.method_slerpni = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "slerpni", 1773590316)
    globalQuaternionMethodBindings.method_spherical_cubic_interpolate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "spherical_cubic_interpolate", 2150967576)
    globalQuaternionMethodBindings.method_spherical_cubic_interpolate_in_time = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "spherical_cubic_interpolate_in_time", 1436023539)
    globalQuaternionMethodBindings.method_get_euler = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "get_euler", 1776574132)
    globalQuaternionMethodBindings.method_get_axis = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "get_axis", 1776574132)
    globalQuaternionMethodBindings.method_get_angle = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "get_angle", 466405837)
    globalQuaternionMethodBindings.member_x_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "x")
    globalQuaternionMethodBindings.member_x_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "x")
    globalQuaternionMethodBindings.member_y_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "y")
    globalQuaternionMethodBindings.member_y_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "y")
    globalQuaternionMethodBindings.member_z_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "z")
    globalQuaternionMethodBindings.member_z_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "z")
    globalQuaternionMethodBindings.member_w_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "w")
    globalQuaternionMethodBindings.member_w_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION, "w")
    globalQuaternionMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION)
    globalQuaternionMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION)
    globalQuaternionMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION)
    globalQuaternionMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION)
    globalQuaternionMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_QUATERNION)
    globalQuaternionMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_NIL)
        globalQuaternionMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_NIL)
        globalQuaternionMethodBindings.operator_negate = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NEGATE, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_NIL)
        globalQuaternionMethodBindings.operator_positive = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_POSITIVE, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_NIL)
        globalQuaternionMethodBindings.operator_multiply_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_INT)
        globalQuaternionMethodBindings.operator_divide_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_INT)
        globalQuaternionMethodBindings.operator_multiply_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalQuaternionMethodBindings.operator_divide_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalQuaternionMethodBindings.operator_multiply_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalQuaternionMethodBindings.operator_equal_Quaternion = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_QUATERNION)
        globalQuaternionMethodBindings.operator_not_equal_Quaternion = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_QUATERNION)
        globalQuaternionMethodBindings.operator_add_Quaternion = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_QUATERNION)
        globalQuaternionMethodBindings.operator_subtract_Quaternion = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_SUBTRACT, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_QUATERNION)
        globalQuaternionMethodBindings.operator_multiply_Quaternion = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_QUATERNION)
        globalQuaternionMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalQuaternionMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_QUATERNION, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Quaternion) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewQuaternion, index: 0
func NewQuaternion() Quaternion {
    cx := Quaternion{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalQuaternionMethodBindings.constructor_0, ptr, )

    return cx
}
// NewQuaternion, index: 1
func NewQuaternionWithQuaternion(from Quaternion,) Quaternion {
    cx := Quaternion{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Quaternion
        args[0] = from.ptr()
        callBuiltinConstructor(globalQuaternionMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewQuaternion, index: 2
func NewQuaternionWithBasis(from Basis,) Quaternion {
    cx := Quaternion{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Basis
        args[0] = from.ptr()
        callBuiltinConstructor(globalQuaternionMethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewQuaternion, index: 3
func NewQuaternionWithVector3Float32(axis Vector3,angle float32,) Quaternion {
    cx := Quaternion{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Vector3
        args[0] = axis.ptr()
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&angle))
        callBuiltinConstructor(globalQuaternionMethodBindings.constructor_3, ptr, args[0],args[1],)

    return cx
}
// NewQuaternion, index: 4
func NewQuaternionWithVector3Vector3(arc_from Vector3,arc_to Vector3,) Quaternion {
    cx := Quaternion{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Vector3
        args[0] = arc_from.ptr()
        // Vector3
        args[1] = arc_to.ptr()
        callBuiltinConstructor(globalQuaternionMethodBindings.constructor_4, ptr, args[0],args[1],)

    return cx
}
// NewQuaternion, index: 5
func NewQuaternionWithFloat32Float32Float32Float32(x float32,y float32,z float32,w float32,) Quaternion {
    cx := Quaternion{}

    ptr := cx.ptr()

    var args [4]GDNativeTypePtr

    // float
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&x))
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&y))
        // float
        args[2] = (GDNativeTypePtr)(unsafe.Pointer(&z))
        // float
        args[3] = (GDNativeTypePtr)(unsafe.Pointer(&w))
        callBuiltinConstructor(globalQuaternionMethodBindings.constructor_5, ptr, args[0],args[1],args[2],args[3],)

    return cx
}
// NewQuaternion, index: 6
func NewQuaternionWithVector3(euler_yxz Vector3,) Quaternion {
    cx := Quaternion{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Vector3
        args[0] = euler_yxz.ptr()
        callBuiltinConstructor(globalQuaternionMethodBindings.constructor_6, ptr, args[0],)

    return cx
}




// methods


/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) Length() float32 {
    mb := globalQuaternionMethodBindings.method_length

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) LengthSquared() float32 {
    mb := globalQuaternionMethodBindings.method_length_squared

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Normalized() Quaternion {
    mb := globalQuaternionMethodBindings.method_normalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, nil)

    return ret
    

    
}


/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Quaternion) IsNormalized() bool {
    mb := globalQuaternionMethodBindings.method_is_normalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Quaternion) IsEqualApprox(to Quaternion,) bool {
    mb := globalQuaternionMethodBindings.method_is_equal_approx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // QuaternionEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Inverse() Quaternion {
    mb := globalQuaternionMethodBindings.method_inverse

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, nil)

    return ret
    

    
}


/* Log : log
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Log() Quaternion {
    mb := globalQuaternionMethodBindings.method_log

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, nil)

    return ret
    

    
}


/* Exp : exp
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Exp() Quaternion {
    mb := globalQuaternionMethodBindings.method_exp

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, nil)

    return ret
    

    
}


/* AngleTo : angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) AngleTo(to Quaternion,) float32 {
    mb := globalQuaternionMethodBindings.method_angle_to

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // QuaternionEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) Dot(with Quaternion,) float32 {
    mb := globalQuaternionMethodBindings.method_dot

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // QuaternionEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Slerp(to Quaternion,weight float32,) Quaternion {
    mb := globalQuaternionMethodBindings.method_slerp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // QuaternionEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Slerpni : slerpni
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Slerpni(to Quaternion,weight float32,) Quaternion {
    mb := globalQuaternionMethodBindings.method_slerpni

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // QuaternionEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* SphericalCubicInterpolate : spherical_cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) SphericalCubicInterpolate(b Quaternion,pre_a Quaternion,post_b Quaternion,weight float32,) Quaternion {
    mb := globalQuaternionMethodBindings.method_spherical_cubic_interpolate

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(4)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // QuaternionEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    
    // QuaternionEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a))
    
    
    // QuaternionEncoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&post_b))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* SphericalCubicInterpolateInTime : spherical_cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) SphericalCubicInterpolateInTime(b Quaternion,pre_a Quaternion,post_b Quaternion,weight float32,b_t float32,pre_a_t float32,post_b_t float32,) Quaternion {
    mb := globalQuaternionMethodBindings.method_spherical_cubic_interpolate_in_time

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(7)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // QuaternionEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    
    // QuaternionEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a))
    
    
    // QuaternionEncoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&post_b))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    
    // Float32Encoder
    args[4] = (GDNativeTypePtr)(unsafe.Pointer(&b_t))
    
    
    // Float32Encoder
    args[5] = (GDNativeTypePtr)(unsafe.Pointer(&pre_a_t))
    
    
    // Float32Encoder
    args[6] = (GDNativeTypePtr)(unsafe.Pointer(&post_b_t))
    
    

    ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetEuler : get_euler
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Quaternion) GetEuler() Vector3 {
    mb := globalQuaternionMethodBindings.method_get_euler

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* GetAxis : get_axis
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Quaternion) GetAxis() Vector3 {
    mb := globalQuaternionMethodBindings.method_get_axis

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* GetAngle : get_angle
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) GetAngle() float32 {
    mb := globalQuaternionMethodBindings.method_get_angle

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Quaternion) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Quaternion) MemberGetx() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalQuaternionMethodBindings.member_x_getter, bx)
}

func (cx *Quaternion) MemberGety() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalQuaternionMethodBindings.member_y_getter, bx)
}

func (cx *Quaternion) MemberGetz() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalQuaternionMethodBindings.member_z_getter, bx)
}

func (cx *Quaternion) MemberGetw() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalQuaternionMethodBindings.member_w_getter, bx)
}


// Equal_Nil operator
func (cx *Quaternion) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Quaternion) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Negate operator
func (cx *Quaternion) Negate() Quaternion {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_negate, lt, rt)
    }
// Positive operator
func (cx *Quaternion) Positive() Quaternion {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_positive, lt, rt)
    }
// Multiply_int operator
func (cx *Quaternion) Multiply_int(right int64) Quaternion {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_multiply_int, lt, rt)
    }
// Divide_int operator
func (cx *Quaternion) Divide_int(right int64) Quaternion {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_divide_int, lt, rt)
    }
// Multiply_float operator
func (cx *Quaternion) Multiply_float(right float32) Quaternion {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_multiply_float, lt, rt)
    }
// Divide_float operator
func (cx *Quaternion) Divide_float(right float32) Quaternion {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_divide_float, lt, rt)
    }
// Multiply_Vector3 operator
func (cx *Quaternion) Multiply_Vector3(right Vector3) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalQuaternionMethodBindings.operator_multiply_Vector3, lt, rt)
    }
// Equal_Quaternion operator
func (cx *Quaternion) Equal_Quaternion(right Quaternion) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_equal_Quaternion, lt, rt)
    }
// Not_equal_Quaternion operator
func (cx *Quaternion) Not_equal_Quaternion(right Quaternion) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_not_equal_Quaternion, lt, rt)
    }
// Add_Quaternion operator
func (cx *Quaternion) Add_Quaternion(right Quaternion) Quaternion {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_add_Quaternion, lt, rt)
    }
// Subtract_Quaternion operator
func (cx *Quaternion) Subtract_Quaternion(right Quaternion) Quaternion {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_subtract_Quaternion, lt, rt)
    }
// Multiply_Quaternion operator
func (cx *Quaternion) Multiply_Quaternion(right Quaternion) Quaternion {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_multiply_Quaternion, lt, rt)
    }
// In_Dictionary operator
func (cx *Quaternion) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Quaternion) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * AABB
 * indexingReturnType: 
 * isKeyed: true
 * hasDestructor: true
 */
type AABB struct {
    opaque [24]uint8
}

type aABBMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_abs GDNativePtrBuiltInMethod
    method_get_center GDNativePtrBuiltInMethod
    method_get_volume GDNativePtrBuiltInMethod
    method_has_volume GDNativePtrBuiltInMethod
    method_has_surface GDNativePtrBuiltInMethod
    method_has_point GDNativePtrBuiltInMethod
    method_is_equal_approx GDNativePtrBuiltInMethod
    method_intersects GDNativePtrBuiltInMethod
    method_encloses GDNativePtrBuiltInMethod
    method_intersects_plane GDNativePtrBuiltInMethod
    method_intersection GDNativePtrBuiltInMethod
    method_merge GDNativePtrBuiltInMethod
    method_expand GDNativePtrBuiltInMethod
    method_grow GDNativePtrBuiltInMethod
    method_get_support GDNativePtrBuiltInMethod
    method_get_longest_axis GDNativePtrBuiltInMethod
    method_get_longest_axis_index GDNativePtrBuiltInMethod
    method_get_longest_axis_size GDNativePtrBuiltInMethod
    method_get_shortest_axis GDNativePtrBuiltInMethod
    method_get_shortest_axis_index GDNativePtrBuiltInMethod
    method_get_shortest_axis_size GDNativePtrBuiltInMethod
    method_get_endpoint GDNativePtrBuiltInMethod
    method_intersects_segment GDNativePtrBuiltInMethod
    method_intersects_ray GDNativePtrBuiltInMethod
    member_position_setter GDNativePtrSetter
    member_position_getter GDNativePtrGetter
    member_size_setter GDNativePtrSetter
    member_size_getter GDNativePtrGetter
    member_end_setter GDNativePtrSetter
    member_end_getter GDNativePtrGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_equal_AABB GDNativePtrOperatorEvaluator
        operator_not_equal_AABB GDNativePtrOperatorEvaluator
        operator_multiply_Transform3D GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalAABBMethodBindings aABBMethodBindings

func aABBInitBindings() {
    globalAABBMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, 0)
    globalAABBMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, 1)
    globalAABBMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, 2)
    globalAABBMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB)
    globalAABBMethodBindings.method_abs = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "abs", 1576868580)
    globalAABBMethodBindings.method_get_center = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "get_center", 1776574132)
    globalAABBMethodBindings.method_get_volume = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "get_volume", 466405837)
    globalAABBMethodBindings.method_has_volume = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "has_volume", 3918633141)
    globalAABBMethodBindings.method_has_surface = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "has_surface", 3918633141)
    globalAABBMethodBindings.method_has_point = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "has_point", 1749054343)
    globalAABBMethodBindings.method_is_equal_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "is_equal_approx", 299946684)
    globalAABBMethodBindings.method_intersects = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "intersects", 299946684)
    globalAABBMethodBindings.method_encloses = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "encloses", 299946684)
    globalAABBMethodBindings.method_intersects_plane = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "intersects_plane", 1150170233)
    globalAABBMethodBindings.method_intersection = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "intersection", 1271470306)
    globalAABBMethodBindings.method_merge = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "merge", 1271470306)
    globalAABBMethodBindings.method_expand = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "expand", 2851643018)
    globalAABBMethodBindings.method_grow = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "grow", 239217291)
    globalAABBMethodBindings.method_get_support = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "get_support", 2923479887)
    globalAABBMethodBindings.method_get_longest_axis = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "get_longest_axis", 1776574132)
    globalAABBMethodBindings.method_get_longest_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "get_longest_axis_index", 3173160232)
    globalAABBMethodBindings.method_get_longest_axis_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "get_longest_axis_size", 466405837)
    globalAABBMethodBindings.method_get_shortest_axis = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "get_shortest_axis", 1776574132)
    globalAABBMethodBindings.method_get_shortest_axis_index = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "get_shortest_axis_index", 3173160232)
    globalAABBMethodBindings.method_get_shortest_axis_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "get_shortest_axis_size", 466405837)
    globalAABBMethodBindings.method_get_endpoint = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "get_endpoint", 1394941017)
    globalAABBMethodBindings.method_intersects_segment = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "intersects_segment", 2048133369)
    globalAABBMethodBindings.method_intersects_ray = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "intersects_ray", 2048133369)
    globalAABBMethodBindings.member_position_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "position")
    globalAABBMethodBindings.member_position_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "position")
    globalAABBMethodBindings.member_size_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "size")
    globalAABBMethodBindings.member_size_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "size")
    globalAABBMethodBindings.member_end_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "end")
    globalAABBMethodBindings.member_end_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB, "end")
    globalAABBMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB)
    globalAABBMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB)
    globalAABBMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_AABB)
    globalAABBMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_AABB, GDNATIVE_VARIANT_TYPE_NIL)
        globalAABBMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_AABB, GDNATIVE_VARIANT_TYPE_NIL)
        globalAABBMethodBindings.operator_equal_AABB = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_AABB, GDNATIVE_VARIANT_TYPE_AABB)
        globalAABBMethodBindings.operator_not_equal_AABB = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_AABB, GDNATIVE_VARIANT_TYPE_AABB)
        globalAABBMethodBindings.operator_multiply_Transform3D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_AABB, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
        globalAABBMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_AABB, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalAABBMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_AABB, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *AABB) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewAABB, index: 0
func NewAABB() AABB {
    cx := AABB{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalAABBMethodBindings.constructor_0, ptr, )

    return cx
}
// NewAABB, index: 1
func NewAABBWithAABB(from AABB,) AABB {
    cx := AABB{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // AABB
        args[0] = from.ptr()
        callBuiltinConstructor(globalAABBMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewAABB, index: 2
func NewAABBWithVector3Vector3(position Vector3,size Vector3,) AABB {
    cx := AABB{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Vector3
        args[0] = position.ptr()
        // Vector3
        args[1] = size.ptr()
        callBuiltinConstructor(globalAABBMethodBindings.constructor_2, ptr, args[0],args[1],)

    return cx
}


func (cx *AABB) Destroy() {
    md := (GDNativePtrDestructor)(globalAABBMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Abs() AABB {
    mb := globalAABBMethodBindings.method_abs

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[AABB](mb, bx, nil)

    return ret
    

    
}


/* GetCenter : get_center
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetCenter() Vector3 {
    mb := globalAABBMethodBindings.method_get_center

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* GetVolume : get_volume
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *AABB) GetVolume() float32 {
    mb := globalAABBMethodBindings.method_get_volume

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* HasVolume : has_volume
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) HasVolume() bool {
    mb := globalAABBMethodBindings.method_has_volume

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* HasSurface : has_surface
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) HasSurface() bool {
    mb := globalAABBMethodBindings.method_has_surface

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) HasPoint(point Vector3,) bool {
    mb := globalAABBMethodBindings.method_has_point

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&point))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) IsEqualApprox(aabb AABB,) bool {
    mb := globalAABBMethodBindings.method_is_equal_approx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // AABBEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&aabb))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Intersects : intersects
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) Intersects(with AABB,) bool {
    mb := globalAABBMethodBindings.method_intersects

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // AABBEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Encloses : encloses
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) Encloses(with AABB,) bool {
    mb := globalAABBMethodBindings.method_encloses

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // AABBEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IntersectsPlane : intersects_plane
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) IntersectsPlane(plane Plane,) bool {
    mb := globalAABBMethodBindings.method_intersects_plane

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PlaneEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&plane))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Intersection : intersection
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Intersection(with AABB,) AABB {
    mb := globalAABBMethodBindings.method_intersection

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // AABBEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[AABB](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Merge(with AABB,) AABB {
    mb := globalAABBMethodBindings.method_merge

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // AABBEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[AABB](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Expand : expand
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Expand(to_point Vector3,) AABB {
    mb := globalAABBMethodBindings.method_expand

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to_point))
    
    

    ret := callBuiltinMethodPtrRet[AABB](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Grow : grow
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Grow(by float32,) AABB {
    mb := globalAABBMethodBindings.method_grow

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&by))
    
    

    ret := callBuiltinMethodPtrRet[AABB](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetSupport : get_support
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetSupport(dir Vector3,) Vector3 {
    mb := globalAABBMethodBindings.method_get_support

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&dir))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetLongestAxis : get_longest_axis
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetLongestAxis() Vector3 {
    mb := globalAABBMethodBindings.method_get_longest_axis

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* GetLongestAxisIndex : get_longest_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *AABB) GetLongestAxisIndex() int64 {
    mb := globalAABBMethodBindings.method_get_longest_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* GetLongestAxisSize : get_longest_axis_size
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *AABB) GetLongestAxisSize() float32 {
    mb := globalAABBMethodBindings.method_get_longest_axis_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* GetShortestAxis : get_shortest_axis
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetShortestAxis() Vector3 {
    mb := globalAABBMethodBindings.method_get_shortest_axis

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* GetShortestAxisIndex : get_shortest_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *AABB) GetShortestAxisIndex() int64 {
    mb := globalAABBMethodBindings.method_get_shortest_axis_index

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* GetShortestAxisSize : get_shortest_axis_size
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *AABB) GetShortestAxisSize() float32 {
    mb := globalAABBMethodBindings.method_get_shortest_axis_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* GetEndpoint : get_endpoint
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetEndpoint(idx int64,) Vector3 {
    mb := globalAABBMethodBindings.method_get_endpoint

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&idx))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IntersectsSegment : intersects_segment
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *AABB) IntersectsSegment(from Vector3,to Vector3,) Variant {
    mb := globalAABBMethodBindings.method_intersects_segment

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IntersectsRay : intersects_ray
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *AABB) IntersectsRay(from Vector3,dir Vector3,) Variant {
    mb := globalAABBMethodBindings.method_intersects_ray

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&dir))
    
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *AABB) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *AABB) MemberGetposition() Vector3 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector3](globalAABBMethodBindings.member_position_getter, bx)
}

func (cx *AABB) MemberGetsize() Vector3 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector3](globalAABBMethodBindings.member_size_getter, bx)
}

func (cx *AABB) MemberGetend() Vector3 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector3](globalAABBMethodBindings.member_end_getter, bx)
}


// Equal_Nil operator
func (cx *AABB) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *AABB) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Equal_AABB operator
func (cx *AABB) Equal_AABB(right AABB) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_equal_AABB, lt, rt)
    }
// Not_equal_AABB operator
func (cx *AABB) Not_equal_AABB(right AABB) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_not_equal_AABB, lt, rt)
    }
// Multiply_Transform3D operator
func (cx *AABB) Multiply_Transform3D(right Transform3D) AABB {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[AABB](globalAABBMethodBindings.operator_multiply_Transform3D, lt, rt)
    }
// In_Dictionary operator
func (cx *AABB) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *AABB) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Basis
 * indexingReturnType: Vector3
 * isKeyed: true
 * hasDestructor: true
 */
type Basis struct {
    opaque [36]uint8
}

type basisMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    constructor_4 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_inverse GDNativePtrBuiltInMethod
    method_transposed GDNativePtrBuiltInMethod
    method_orthonormalized GDNativePtrBuiltInMethod
    method_determinant GDNativePtrBuiltInMethod
    method_rotated GDNativePtrBuiltInMethod
    method_scaled GDNativePtrBuiltInMethod
    method_get_scale GDNativePtrBuiltInMethod
    method_get_euler GDNativePtrBuiltInMethod
    method_tdotx GDNativePtrBuiltInMethod
    method_tdoty GDNativePtrBuiltInMethod
    method_tdotz GDNativePtrBuiltInMethod
    method_slerp GDNativePtrBuiltInMethod
    method_is_equal_approx GDNativePtrBuiltInMethod
    method_get_rotation_quaternion GDNativePtrBuiltInMethod
    method_looking_at GDNativePtrBuiltInMethod
    method_from_scale GDNativePtrBuiltInMethod
    method_from_euler GDNativePtrBuiltInMethod
    member_x_setter GDNativePtrSetter
    member_x_getter GDNativePtrGetter
    member_y_setter GDNativePtrSetter
    member_y_getter GDNativePtrGetter
    member_z_setter GDNativePtrSetter
    member_z_getter GDNativePtrGetter
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_multiply_int GDNativePtrOperatorEvaluator
        operator_multiply_float GDNativePtrOperatorEvaluator
        operator_multiply_Vector3 GDNativePtrOperatorEvaluator
        operator_equal_Basis GDNativePtrOperatorEvaluator
        operator_not_equal_Basis GDNativePtrOperatorEvaluator
        operator_multiply_Basis GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalBasisMethodBindings basisMethodBindings

func basisInitBindings() {
    globalBasisMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, 0)
    globalBasisMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, 1)
    globalBasisMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, 2)
    globalBasisMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, 3)
    globalBasisMethodBindings.constructor_4 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, 4)
    globalBasisMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS)
    globalBasisMethodBindings.method_inverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "inverse", 594669093)
    globalBasisMethodBindings.method_transposed = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "transposed", 594669093)
    globalBasisMethodBindings.method_orthonormalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "orthonormalized", 594669093)
    globalBasisMethodBindings.method_determinant = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "determinant", 466405837)
    globalBasisMethodBindings.method_rotated = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "rotated", 1998708965)
    globalBasisMethodBindings.method_scaled = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "scaled", 3934786792)
    globalBasisMethodBindings.method_get_scale = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "get_scale", 1776574132)
    globalBasisMethodBindings.method_get_euler = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "get_euler", 1394941017)
    globalBasisMethodBindings.method_tdotx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "tdotx", 1047977935)
    globalBasisMethodBindings.method_tdoty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "tdoty", 1047977935)
    globalBasisMethodBindings.method_tdotz = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "tdotz", 1047977935)
    globalBasisMethodBindings.method_slerp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "slerp", 3118673011)
    globalBasisMethodBindings.method_is_equal_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "is_equal_approx", 3165333982)
    globalBasisMethodBindings.method_get_rotation_quaternion = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "get_rotation_quaternion", 4274879941)
    globalBasisMethodBindings.method_looking_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "looking_at", 419916660)
    globalBasisMethodBindings.method_from_scale = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "from_scale", 3703240166)
    globalBasisMethodBindings.method_from_euler = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "from_euler", 2802321791)
    globalBasisMethodBindings.member_x_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "x")
    globalBasisMethodBindings.member_x_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "x")
    globalBasisMethodBindings.member_y_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "y")
    globalBasisMethodBindings.member_y_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "y")
    globalBasisMethodBindings.member_z_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "z")
    globalBasisMethodBindings.member_z_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS, "z")
    globalBasisMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS)
    globalBasisMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS)
    globalBasisMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS)
    globalBasisMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS)
    globalBasisMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_BASIS)
    globalBasisMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_BASIS, GDNATIVE_VARIANT_TYPE_NIL)
        globalBasisMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_BASIS, GDNATIVE_VARIANT_TYPE_NIL)
        globalBasisMethodBindings.operator_multiply_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_BASIS, GDNATIVE_VARIANT_TYPE_INT)
        globalBasisMethodBindings.operator_multiply_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_BASIS, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalBasisMethodBindings.operator_multiply_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_BASIS, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalBasisMethodBindings.operator_equal_Basis = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_BASIS, GDNATIVE_VARIANT_TYPE_BASIS)
        globalBasisMethodBindings.operator_not_equal_Basis = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_BASIS, GDNATIVE_VARIANT_TYPE_BASIS)
        globalBasisMethodBindings.operator_multiply_Basis = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_BASIS, GDNATIVE_VARIANT_TYPE_BASIS)
        globalBasisMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_BASIS, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalBasisMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_BASIS, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Basis) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewBasis, index: 0
func NewBasis() Basis {
    cx := Basis{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalBasisMethodBindings.constructor_0, ptr, )

    return cx
}
// NewBasis, index: 1
func NewBasisWithBasis(from Basis,) Basis {
    cx := Basis{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Basis
        args[0] = from.ptr()
        callBuiltinConstructor(globalBasisMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewBasis, index: 2
func NewBasisWithQuaternion(from Quaternion,) Basis {
    cx := Basis{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Quaternion
        args[0] = from.ptr()
        callBuiltinConstructor(globalBasisMethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewBasis, index: 3
func NewBasisWithVector3Float32(axis Vector3,angle float32,) Basis {
    cx := Basis{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Vector3
        args[0] = axis.ptr()
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&angle))
        callBuiltinConstructor(globalBasisMethodBindings.constructor_3, ptr, args[0],args[1],)

    return cx
}
// NewBasis, index: 4
func NewBasisWithVector3Vector3Vector3(x_axis Vector3,y_axis Vector3,z_axis Vector3,) Basis {
    cx := Basis{}

    ptr := cx.ptr()

    var args [3]GDNativeTypePtr

    // Vector3
        args[0] = x_axis.ptr()
        // Vector3
        args[1] = y_axis.ptr()
        // Vector3
        args[2] = z_axis.ptr()
        callBuiltinConstructor(globalBasisMethodBindings.constructor_4, ptr, args[0],args[1],args[2],)

    return cx
}


func (cx *Basis) Destroy() {
    md := (GDNativePtrDestructor)(globalBasisMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Inverse() Basis {
    mb := globalBasisMethodBindings.method_inverse

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Basis](mb, bx, nil)

    return ret
    

    
}


/* Transposed : transposed
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Transposed() Basis {
    mb := globalBasisMethodBindings.method_transposed

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Basis](mb, bx, nil)

    return ret
    

    
}


/* Orthonormalized : orthonormalized
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Orthonormalized() Basis {
    mb := globalBasisMethodBindings.method_orthonormalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Basis](mb, bx, nil)

    return ret
    

    
}


/* Determinant : determinant
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Determinant() float32 {
    mb := globalBasisMethodBindings.method_determinant

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Rotated(axis Vector3,angle float32,) Basis {
    mb := globalBasisMethodBindings.method_rotated

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&axis))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&angle))
    
    

    ret := callBuiltinMethodPtrRet[Basis](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Scaled : scaled
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Scaled(scale Vector3,) Basis {
    mb := globalBasisMethodBindings.method_scaled

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&scale))
    
    

    ret := callBuiltinMethodPtrRet[Basis](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetScale : get_scale
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Basis) GetScale() Vector3 {
    mb := globalBasisMethodBindings.method_get_scale

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, nil)

    return ret
    

    
}


/* GetEuler : get_euler
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Basis) GetEuler(order int64,) Vector3 {
    mb := globalBasisMethodBindings.method_get_euler

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&order))
    
    

    ret := callBuiltinMethodPtrRet[Vector3](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Tdotx : tdotx
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Tdotx(with Vector3,) float32 {
    mb := globalBasisMethodBindings.method_tdotx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Tdoty : tdoty
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Tdoty(with Vector3,) float32 {
    mb := globalBasisMethodBindings.method_tdoty

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Tdotz : tdotz
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Tdotz(with Vector3,) float32 {
    mb := globalBasisMethodBindings.method_tdotz

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Slerp(to Basis,weight float32,) Basis {
    mb := globalBasisMethodBindings.method_slerp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // BasisEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Basis](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Basis) IsEqualApprox(b Basis,) bool {
    mb := globalBasisMethodBindings.method_is_equal_approx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // BasisEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&b))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetRotationQuaternion : get_rotation_quaternion
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Basis) GetRotationQuaternion() Quaternion {
    mb := globalBasisMethodBindings.method_get_rotation_quaternion

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Quaternion](mb, bx, nil)

    return ret
    

    
}


/* LookingAt : looking_at
 * is_vararg = false, is_static = true
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) LookingAt(target Vector3,up Vector3,) Basis {
    mb := globalBasisMethodBindings.method_looking_at

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&target))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&up))
    
    

    ret := callBuiltinMethodPtrRet[Basis](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* FromScale : from_scale
 * is_vararg = false, is_static = true
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) FromScale(scale Vector3,) Basis {
    mb := globalBasisMethodBindings.method_from_scale

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&scale))
    
    

    ret := callBuiltinMethodPtrRet[Basis](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* FromEuler : from_euler
 * is_vararg = false, is_static = true
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) FromEuler(euler Vector3,order int64,) Basis {
    mb := globalBasisMethodBindings.method_from_euler

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&euler))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&order))
    
    

    ret := callBuiltinMethodPtrRet[Basis](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Basis) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Basis) MemberGetx() Vector3 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector3](globalBasisMethodBindings.member_x_getter, bx)
}

func (cx *Basis) MemberGety() Vector3 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector3](globalBasisMethodBindings.member_y_getter, bx)
}

func (cx *Basis) MemberGetz() Vector3 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector3](globalBasisMethodBindings.member_z_getter, bx)
}


// Equal_Nil operator
func (cx *Basis) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Basis) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Multiply_int operator
func (cx *Basis) Multiply_int(right int64) Basis {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Basis](globalBasisMethodBindings.operator_multiply_int, lt, rt)
    }
// Multiply_float operator
func (cx *Basis) Multiply_float(right float32) Basis {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Basis](globalBasisMethodBindings.operator_multiply_float, lt, rt)
    }
// Multiply_Vector3 operator
func (cx *Basis) Multiply_Vector3(right Vector3) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalBasisMethodBindings.operator_multiply_Vector3, lt, rt)
    }
// Equal_Basis operator
func (cx *Basis) Equal_Basis(right Basis) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_equal_Basis, lt, rt)
    }
// Not_equal_Basis operator
func (cx *Basis) Not_equal_Basis(right Basis) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_not_equal_Basis, lt, rt)
    }
// Multiply_Basis operator
func (cx *Basis) Multiply_Basis(right Basis) Basis {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Basis](globalBasisMethodBindings.operator_multiply_Basis, lt, rt)
    }
// In_Dictionary operator
func (cx *Basis) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Basis) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Transform3D
 * indexingReturnType: 
 * isKeyed: true
 * hasDestructor: true
 */
type Transform3D struct {
    opaque [48]uint8
}

type transform3DMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    constructor_4 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_inverse GDNativePtrBuiltInMethod
    method_affine_inverse GDNativePtrBuiltInMethod
    method_orthonormalized GDNativePtrBuiltInMethod
    method_rotated GDNativePtrBuiltInMethod
    method_rotated_local GDNativePtrBuiltInMethod
    method_scaled GDNativePtrBuiltInMethod
    method_scaled_local GDNativePtrBuiltInMethod
    method_translated GDNativePtrBuiltInMethod
    method_translated_local GDNativePtrBuiltInMethod
    method_looking_at GDNativePtrBuiltInMethod
    method_interpolate_with GDNativePtrBuiltInMethod
    method_is_equal_approx GDNativePtrBuiltInMethod
    member_basis_setter GDNativePtrSetter
    member_basis_getter GDNativePtrGetter
    member_origin_setter GDNativePtrSetter
    member_origin_getter GDNativePtrGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_multiply_int GDNativePtrOperatorEvaluator
        operator_multiply_float GDNativePtrOperatorEvaluator
        operator_multiply_Vector3 GDNativePtrOperatorEvaluator
        operator_multiply_Plane GDNativePtrOperatorEvaluator
        operator_multiply_AABB GDNativePtrOperatorEvaluator
        operator_equal_Transform3D GDNativePtrOperatorEvaluator
        operator_not_equal_Transform3D GDNativePtrOperatorEvaluator
        operator_multiply_Transform3D GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_multiply_PackedVector3Array GDNativePtrOperatorEvaluator
        }

var globalTransform3DMethodBindings transform3DMethodBindings

func transform3DInitBindings() {
    globalTransform3DMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, 0)
    globalTransform3DMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, 1)
    globalTransform3DMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, 2)
    globalTransform3DMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, 3)
    globalTransform3DMethodBindings.constructor_4 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, 4)
    globalTransform3DMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
    globalTransform3DMethodBindings.method_inverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "inverse", 3816817146)
    globalTransform3DMethodBindings.method_affine_inverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "affine_inverse", 3816817146)
    globalTransform3DMethodBindings.method_orthonormalized = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "orthonormalized", 3816817146)
    globalTransform3DMethodBindings.method_rotated = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "rotated", 1563203923)
    globalTransform3DMethodBindings.method_rotated_local = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "rotated_local", 1563203923)
    globalTransform3DMethodBindings.method_scaled = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "scaled", 1405596198)
    globalTransform3DMethodBindings.method_scaled_local = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "scaled_local", 1405596198)
    globalTransform3DMethodBindings.method_translated = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "translated", 1405596198)
    globalTransform3DMethodBindings.method_translated_local = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "translated_local", 1405596198)
    globalTransform3DMethodBindings.method_looking_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "looking_at", 806929180)
    globalTransform3DMethodBindings.method_interpolate_with = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "interpolate_with", 1786453358)
    globalTransform3DMethodBindings.method_is_equal_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "is_equal_approx", 696001652)
    globalTransform3DMethodBindings.member_basis_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "basis")
    globalTransform3DMethodBindings.member_basis_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "basis")
    globalTransform3DMethodBindings.member_origin_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "origin")
    globalTransform3DMethodBindings.member_origin_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, "origin")
    globalTransform3DMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
    globalTransform3DMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
    globalTransform3DMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
    globalTransform3DMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_NIL)
        globalTransform3DMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_NIL)
        globalTransform3DMethodBindings.operator_multiply_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_INT)
        globalTransform3DMethodBindings.operator_multiply_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalTransform3DMethodBindings.operator_multiply_Vector3 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_VECTOR3)
        globalTransform3DMethodBindings.operator_multiply_Plane = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_PLANE)
        globalTransform3DMethodBindings.operator_multiply_AABB = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_AABB)
        globalTransform3DMethodBindings.operator_equal_Transform3D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
        globalTransform3DMethodBindings.operator_not_equal_Transform3D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
        globalTransform3DMethodBindings.operator_multiply_Transform3D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
        globalTransform3DMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalTransform3DMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalTransform3DMethodBindings.operator_multiply_PackedVector3Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_TRANSFORM3D, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
        }

func (c *Transform3D) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewTransform3D, index: 0
func NewTransform3D() Transform3D {
    cx := Transform3D{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalTransform3DMethodBindings.constructor_0, ptr, )

    return cx
}
// NewTransform3D, index: 1
func NewTransform3DWithTransform3D(from Transform3D,) Transform3D {
    cx := Transform3D{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Transform3D
        args[0] = from.ptr()
        callBuiltinConstructor(globalTransform3DMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewTransform3D, index: 2
func NewTransform3DWithBasisVector3(basis Basis,origin Vector3,) Transform3D {
    cx := Transform3D{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Basis
        args[0] = basis.ptr()
        // Vector3
        args[1] = origin.ptr()
        callBuiltinConstructor(globalTransform3DMethodBindings.constructor_2, ptr, args[0],args[1],)

    return cx
}
// NewTransform3D, index: 3
func NewTransform3DWithVector3Vector3Vector3Vector3(x_axis Vector3,y_axis Vector3,z_axis Vector3,origin Vector3,) Transform3D {
    cx := Transform3D{}

    ptr := cx.ptr()

    var args [4]GDNativeTypePtr

    // Vector3
        args[0] = x_axis.ptr()
        // Vector3
        args[1] = y_axis.ptr()
        // Vector3
        args[2] = z_axis.ptr()
        // Vector3
        args[3] = origin.ptr()
        callBuiltinConstructor(globalTransform3DMethodBindings.constructor_3, ptr, args[0],args[1],args[2],args[3],)

    return cx
}
// NewTransform3D, index: 4
func NewTransform3DWithProjection(from Projection,) Transform3D {
    cx := Transform3D{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Projection
        args[0] = from.ptr()
        callBuiltinConstructor(globalTransform3DMethodBindings.constructor_4, ptr, args[0],)

    return cx
}


func (cx *Transform3D) Destroy() {
    md := (GDNativePtrDestructor)(globalTransform3DMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Inverse() Transform3D {
    mb := globalTransform3DMethodBindings.method_inverse

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, nil)

    return ret
    

    
}


/* AffineInverse : affine_inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) AffineInverse() Transform3D {
    mb := globalTransform3DMethodBindings.method_affine_inverse

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, nil)

    return ret
    

    
}


/* Orthonormalized : orthonormalized
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Orthonormalized() Transform3D {
    mb := globalTransform3DMethodBindings.method_orthonormalized

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, nil)

    return ret
    

    
}


/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Rotated(axis Vector3,angle float32,) Transform3D {
    mb := globalTransform3DMethodBindings.method_rotated

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&axis))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&angle))
    
    

    ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* RotatedLocal : rotated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) RotatedLocal(axis Vector3,angle float32,) Transform3D {
    mb := globalTransform3DMethodBindings.method_rotated_local

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&axis))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&angle))
    
    

    ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Scaled : scaled
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Scaled(scale Vector3,) Transform3D {
    mb := globalTransform3DMethodBindings.method_scaled

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&scale))
    
    

    ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ScaledLocal : scaled_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) ScaledLocal(scale Vector3,) Transform3D {
    mb := globalTransform3DMethodBindings.method_scaled_local

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&scale))
    
    

    ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Translated : translated
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Translated(offset Vector3,) Transform3D {
    mb := globalTransform3DMethodBindings.method_translated

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&offset))
    
    

    ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TranslatedLocal : translated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) TranslatedLocal(offset Vector3,) Transform3D {
    mb := globalTransform3DMethodBindings.method_translated_local

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&offset))
    
    

    ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* LookingAt : looking_at
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) LookingAt(target Vector3,up Vector3,) Transform3D {
    mb := globalTransform3DMethodBindings.method_looking_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&target))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&up))
    
    

    ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* InterpolateWith : interpolate_with
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) InterpolateWith(xform Transform3D,weight float32,) Transform3D {
    mb := globalTransform3DMethodBindings.method_interpolate_with

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Transform3DEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&xform))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Transform3D](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Transform3D) IsEqualApprox(xform Transform3D,) bool {
    mb := globalTransform3DMethodBindings.method_is_equal_approx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Transform3DEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&xform))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Transform3D) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Transform3D) MemberGetbasis() Basis {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Basis](globalTransform3DMethodBindings.member_basis_getter, bx)
}

func (cx *Transform3D) MemberGetorigin() Vector3 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector3](globalTransform3DMethodBindings.member_origin_getter, bx)
}


// Equal_Nil operator
func (cx *Transform3D) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Transform3D) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Multiply_int operator
func (cx *Transform3D) Multiply_int(right int64) Transform3D {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Transform3D](globalTransform3DMethodBindings.operator_multiply_int, lt, rt)
    }
// Multiply_float operator
func (cx *Transform3D) Multiply_float(right float32) Transform3D {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Transform3D](globalTransform3DMethodBindings.operator_multiply_float, lt, rt)
    }
// Multiply_Vector3 operator
func (cx *Transform3D) Multiply_Vector3(right Vector3) Vector3 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector3](globalTransform3DMethodBindings.operator_multiply_Vector3, lt, rt)
    }
// Multiply_Plane operator
func (cx *Transform3D) Multiply_Plane(right Plane) Plane {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Plane](globalTransform3DMethodBindings.operator_multiply_Plane, lt, rt)
    }
// Multiply_AABB operator
func (cx *Transform3D) Multiply_AABB(right AABB) AABB {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[AABB](globalTransform3DMethodBindings.operator_multiply_AABB, lt, rt)
    }
// Equal_Transform3D operator
func (cx *Transform3D) Equal_Transform3D(right Transform3D) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_equal_Transform3D, lt, rt)
    }
// Not_equal_Transform3D operator
func (cx *Transform3D) Not_equal_Transform3D(right Transform3D) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_not_equal_Transform3D, lt, rt)
    }
// Multiply_Transform3D operator
func (cx *Transform3D) Multiply_Transform3D(right Transform3D) Transform3D {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Transform3D](globalTransform3DMethodBindings.operator_multiply_Transform3D, lt, rt)
    }
// In_Dictionary operator
func (cx *Transform3D) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Transform3D) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_in_Array, lt, rt)
    }
// Multiply_PackedVector3Array operator
func (cx *Transform3D) Multiply_PackedVector3Array(right PackedVector3Array) PackedVector3Array {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedVector3Array](globalTransform3DMethodBindings.operator_multiply_PackedVector3Array, lt, rt)
    }
/*
 * Projection
 * indexingReturnType: Vector4
 * isKeyed: true
 * hasDestructor: false
 */
type Projection struct {
    opaque [64]uint8
}

type projectionMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    method_create_depth_correction GDNativePtrBuiltInMethod
    method_create_light_atlas_rect GDNativePtrBuiltInMethod
    method_create_perspective GDNativePtrBuiltInMethod
    method_create_perspective_hmd GDNativePtrBuiltInMethod
    method_create_for_hmd GDNativePtrBuiltInMethod
    method_create_orthogonal GDNativePtrBuiltInMethod
    method_create_orthogonal_aspect GDNativePtrBuiltInMethod
    method_create_frustum GDNativePtrBuiltInMethod
    method_create_frustum_aspect GDNativePtrBuiltInMethod
    method_create_fit_aabb GDNativePtrBuiltInMethod
    method_determinant GDNativePtrBuiltInMethod
    method_perspective_znear_adjusted GDNativePtrBuiltInMethod
    method_get_projection_plane GDNativePtrBuiltInMethod
    method_flipped_y GDNativePtrBuiltInMethod
    method_jitter_offseted GDNativePtrBuiltInMethod
    method_get_fovy GDNativePtrBuiltInMethod
    method_get_z_far GDNativePtrBuiltInMethod
    method_get_z_near GDNativePtrBuiltInMethod
    method_get_aspect GDNativePtrBuiltInMethod
    method_get_fov GDNativePtrBuiltInMethod
    method_is_orthogonal GDNativePtrBuiltInMethod
    method_get_viewport_half_extents GDNativePtrBuiltInMethod
    method_get_far_plane_half_extents GDNativePtrBuiltInMethod
    method_inverse GDNativePtrBuiltInMethod
    method_get_pixels_per_meter GDNativePtrBuiltInMethod
    method_get_lod_multiplier GDNativePtrBuiltInMethod
    member_x_setter GDNativePtrSetter
    member_x_getter GDNativePtrGetter
    member_y_setter GDNativePtrSetter
    member_y_getter GDNativePtrGetter
    member_z_setter GDNativePtrSetter
    member_z_getter GDNativePtrGetter
    member_w_setter GDNativePtrSetter
    member_w_getter GDNativePtrGetter
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_multiply_Vector4 GDNativePtrOperatorEvaluator
        operator_equal_Projection GDNativePtrOperatorEvaluator
        operator_not_equal_Projection GDNativePtrOperatorEvaluator
        operator_multiply_Projection GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalProjectionMethodBindings projectionMethodBindings

func projectionInitBindings() {
    globalProjectionMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, 0)
    globalProjectionMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, 1)
    globalProjectionMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, 2)
    globalProjectionMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, 3)
    globalProjectionMethodBindings.method_create_depth_correction = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "create_depth_correction", 1228516048)
    globalProjectionMethodBindings.method_create_light_atlas_rect = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "create_light_atlas_rect", 2654950662)
    globalProjectionMethodBindings.method_create_perspective = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "create_perspective", 390915442)
    globalProjectionMethodBindings.method_create_perspective_hmd = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "create_perspective_hmd", 2857674800)
    globalProjectionMethodBindings.method_create_for_hmd = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "create_for_hmd", 4184144994)
    globalProjectionMethodBindings.method_create_orthogonal = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "create_orthogonal", 3707929169)
    globalProjectionMethodBindings.method_create_orthogonal_aspect = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "create_orthogonal_aspect", 390915442)
    globalProjectionMethodBindings.method_create_frustum = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "create_frustum", 3707929169)
    globalProjectionMethodBindings.method_create_frustum_aspect = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "create_frustum_aspect", 1535076251)
    globalProjectionMethodBindings.method_create_fit_aabb = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "create_fit_aabb", 2264694907)
    globalProjectionMethodBindings.method_determinant = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "determinant", 466405837)
    globalProjectionMethodBindings.method_perspective_znear_adjusted = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "perspective_znear_adjusted", 3584785443)
    globalProjectionMethodBindings.method_get_projection_plane = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "get_projection_plane", 1551184160)
    globalProjectionMethodBindings.method_flipped_y = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "flipped_y", 4212530932)
    globalProjectionMethodBindings.method_jitter_offseted = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "jitter_offseted", 2448438599)
    globalProjectionMethodBindings.method_get_fovy = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "get_fovy", 3514207532)
    globalProjectionMethodBindings.method_get_z_far = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "get_z_far", 466405837)
    globalProjectionMethodBindings.method_get_z_near = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "get_z_near", 466405837)
    globalProjectionMethodBindings.method_get_aspect = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "get_aspect", 466405837)
    globalProjectionMethodBindings.method_get_fov = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "get_fov", 466405837)
    globalProjectionMethodBindings.method_is_orthogonal = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "is_orthogonal", 3918633141)
    globalProjectionMethodBindings.method_get_viewport_half_extents = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "get_viewport_half_extents", 2428350749)
    globalProjectionMethodBindings.method_get_far_plane_half_extents = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "get_far_plane_half_extents", 2428350749)
    globalProjectionMethodBindings.method_inverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "inverse", 4212530932)
    globalProjectionMethodBindings.method_get_pixels_per_meter = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "get_pixels_per_meter", 4103005248)
    globalProjectionMethodBindings.method_get_lod_multiplier = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "get_lod_multiplier", 466405837)
    globalProjectionMethodBindings.member_x_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "x")
    globalProjectionMethodBindings.member_x_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "x")
    globalProjectionMethodBindings.member_y_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "y")
    globalProjectionMethodBindings.member_y_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "y")
    globalProjectionMethodBindings.member_z_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "z")
    globalProjectionMethodBindings.member_z_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "z")
    globalProjectionMethodBindings.member_w_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "w")
    globalProjectionMethodBindings.member_w_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION, "w")
    globalProjectionMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION)
    globalProjectionMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION)
    globalProjectionMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION)
    globalProjectionMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION)
    globalProjectionMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PROJECTION)
    globalProjectionMethodBindings.operator_multiply_Vector4 = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_PROJECTION, GDNATIVE_VARIANT_TYPE_VECTOR4)
        globalProjectionMethodBindings.operator_equal_Projection = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PROJECTION, GDNATIVE_VARIANT_TYPE_PROJECTION)
        globalProjectionMethodBindings.operator_not_equal_Projection = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PROJECTION, GDNATIVE_VARIANT_TYPE_PROJECTION)
        globalProjectionMethodBindings.operator_multiply_Projection = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_PROJECTION, GDNATIVE_VARIANT_TYPE_PROJECTION)
        globalProjectionMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PROJECTION, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalProjectionMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PROJECTION, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Projection) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewProjection, index: 0
func NewProjection() Projection {
    cx := Projection{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalProjectionMethodBindings.constructor_0, ptr, )

    return cx
}
// NewProjection, index: 1
func NewProjectionWithProjection(from Projection,) Projection {
    cx := Projection{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Projection
        args[0] = from.ptr()
        callBuiltinConstructor(globalProjectionMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewProjection, index: 2
func NewProjectionWithTransform3D(from Transform3D,) Projection {
    cx := Projection{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Transform3D
        args[0] = from.ptr()
        callBuiltinConstructor(globalProjectionMethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewProjection, index: 3
func NewProjectionWithVector4Vector4Vector4Vector4(x_axis Vector4,y_axis Vector4,z_axis Vector4,w_axis Vector4,) Projection {
    cx := Projection{}

    ptr := cx.ptr()

    var args [4]GDNativeTypePtr

    // Vector4
        args[0] = x_axis.ptr()
        // Vector4
        args[1] = y_axis.ptr()
        // Vector4
        args[2] = z_axis.ptr()
        // Vector4
        args[3] = w_axis.ptr()
        callBuiltinConstructor(globalProjectionMethodBindings.constructor_3, ptr, args[0],args[1],args[2],args[3],)

    return cx
}




// methods


/* CreateDepthCorrection : create_depth_correction
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateDepthCorrection(flip_y bool,) Projection {
    mb := globalProjectionMethodBindings.method_create_depth_correction

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // BoolEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&flip_y))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CreateLightAtlasRect : create_light_atlas_rect
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateLightAtlasRect(rect Rect2,) Projection {
    mb := globalProjectionMethodBindings.method_create_light_atlas_rect

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Rect2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&rect))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CreatePerspective : create_perspective
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreatePerspective(fovy float32,aspect float32,z_near float32,z_far float32,flip_fov bool,) Projection {
    mb := globalProjectionMethodBindings.method_create_perspective

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(5)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&fovy))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&aspect))
    
    
    // Float32Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&z_near))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&z_far))
    
    
    // BoolEncoder
    args[4] = (GDNativeTypePtr)(unsafe.Pointer(&flip_fov))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CreatePerspectiveHmd : create_perspective_hmd
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreatePerspectiveHmd(fovy float32,aspect float32,z_near float32,z_far float32,flip_fov bool,eye int64,intraocular_dist float32, convergence_dist float32,) Projection {
    mb := globalProjectionMethodBindings.method_create_perspective_hmd

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(8)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&fovy))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&aspect))
    
    
    // Float32Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&z_near))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&z_far))
    
    
    // BoolEncoder
    args[4] = (GDNativeTypePtr)(unsafe.Pointer(&flip_fov))
    
    
    // Int64Encoder
    args[5] = (GDNativeTypePtr)(unsafe.Pointer(&eye))
    
    
    // Float32Encoder
    args[6] = (GDNativeTypePtr)(unsafe.Pointer(&intraocular_dist))
    
    
    // Float32Encoder
    args[7] = (GDNativeTypePtr)(unsafe.Pointer(& convergence_dist))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CreateForHmd : create_for_hmd
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateForHmd(eye int64,aspect float32,intraocular_dist float32,display_width float32,display_to_lens float32,oversample float32,z_near float32,z_far float32,) Projection {
    mb := globalProjectionMethodBindings.method_create_for_hmd

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(8)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&eye))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&aspect))
    
    
    // Float32Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&intraocular_dist))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&display_width))
    
    
    // Float32Encoder
    args[4] = (GDNativeTypePtr)(unsafe.Pointer(&display_to_lens))
    
    
    // Float32Encoder
    args[5] = (GDNativeTypePtr)(unsafe.Pointer(&oversample))
    
    
    // Float32Encoder
    args[6] = (GDNativeTypePtr)(unsafe.Pointer(&z_near))
    
    
    // Float32Encoder
    args[7] = (GDNativeTypePtr)(unsafe.Pointer(&z_far))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CreateOrthogonal : create_orthogonal
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateOrthogonal(left float32,right float32,bottom float32,top float32,z_near float32,z_far float32,) Projection {
    mb := globalProjectionMethodBindings.method_create_orthogonal

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(6)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&left))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&right))
    
    
    // Float32Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&bottom))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&top))
    
    
    // Float32Encoder
    args[4] = (GDNativeTypePtr)(unsafe.Pointer(&z_near))
    
    
    // Float32Encoder
    args[5] = (GDNativeTypePtr)(unsafe.Pointer(&z_far))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CreateOrthogonalAspect : create_orthogonal_aspect
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateOrthogonalAspect(size float32,aspect float32,z_near float32,z_far float32,flip_fov bool,) Projection {
    mb := globalProjectionMethodBindings.method_create_orthogonal_aspect

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(5)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&size))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&aspect))
    
    
    // Float32Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&z_near))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&z_far))
    
    
    // BoolEncoder
    args[4] = (GDNativeTypePtr)(unsafe.Pointer(&flip_fov))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CreateFrustum : create_frustum
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateFrustum(left float32,right float32,bottom float32,top float32,z_near float32,z_far float32,) Projection {
    mb := globalProjectionMethodBindings.method_create_frustum

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(6)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&left))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&right))
    
    
    // Float32Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&bottom))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&top))
    
    
    // Float32Encoder
    args[4] = (GDNativeTypePtr)(unsafe.Pointer(&z_near))
    
    
    // Float32Encoder
    args[5] = (GDNativeTypePtr)(unsafe.Pointer(&z_far))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CreateFrustumAspect : create_frustum_aspect
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateFrustumAspect(size float32,aspect float32,offset Vector2,z_near float32,z_far float32,flip_fov bool,) Projection {
    mb := globalProjectionMethodBindings.method_create_frustum_aspect

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(6)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&size))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&aspect))
    
    
    // Vector2Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&offset))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&z_near))
    
    
    // Float32Encoder
    args[4] = (GDNativeTypePtr)(unsafe.Pointer(&z_far))
    
    
    // BoolEncoder
    args[5] = (GDNativeTypePtr)(unsafe.Pointer(&flip_fov))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CreateFitAabb : create_fit_aabb
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateFitAabb(aabb AABB,) Projection {
    mb := globalProjectionMethodBindings.method_create_fit_aabb

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // AABBEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&aabb))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Determinant : determinant
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) Determinant() float32 {
    mb := globalProjectionMethodBindings.method_determinant

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* PerspectiveZnearAdjusted : perspective_znear_adjusted
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) PerspectiveZnearAdjusted(new_znear float32,) Projection {
    mb := globalProjectionMethodBindings.method_perspective_znear_adjusted

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&new_znear))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetProjectionPlane : get_projection_plane
 * is_vararg = false, is_static = false
 * goReturnType(Plane) -> Plane
 */
func (cx *Projection) GetProjectionPlane(plane int64,) Plane {
    mb := globalProjectionMethodBindings.method_get_projection_plane

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&plane))
    
    

    ret := callBuiltinMethodPtrRet[Plane](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* FlippedY : flipped_y
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) FlippedY() Projection {
    mb := globalProjectionMethodBindings.method_flipped_y

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, nil)

    return ret
    

    
}


/* JitterOffseted : jitter_offseted
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) JitterOffseted(offset Vector2,) Projection {
    mb := globalProjectionMethodBindings.method_jitter_offseted

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&offset))
    
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetFovy : get_fovy
 * is_vararg = false, is_static = true
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetFovy(fovx float32,aspect float32,) float32 {
    mb := globalProjectionMethodBindings.method_get_fovy

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&fovx))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&aspect))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetZFar : get_z_far
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetZFar() float32 {
    mb := globalProjectionMethodBindings.method_get_z_far

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* GetZNear : get_z_near
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetZNear() float32 {
    mb := globalProjectionMethodBindings.method_get_z_near

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* GetAspect : get_aspect
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetAspect() float32 {
    mb := globalProjectionMethodBindings.method_get_aspect

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* GetFov : get_fov
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetFov() float32 {
    mb := globalProjectionMethodBindings.method_get_fov

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* IsOrthogonal : is_orthogonal
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Projection) IsOrthogonal() bool {
    mb := globalProjectionMethodBindings.method_is_orthogonal

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* GetViewportHalfExtents : get_viewport_half_extents
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Projection) GetViewportHalfExtents() Vector2 {
    mb := globalProjectionMethodBindings.method_get_viewport_half_extents

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* GetFarPlaneHalfExtents : get_far_plane_half_extents
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Projection) GetFarPlaneHalfExtents() Vector2 {
    mb := globalProjectionMethodBindings.method_get_far_plane_half_extents

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Vector2](mb, bx, nil)

    return ret
    

    
}


/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) Inverse() Projection {
    mb := globalProjectionMethodBindings.method_inverse

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Projection](mb, bx, nil)

    return ret
    

    
}


/* GetPixelsPerMeter : get_pixels_per_meter
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Projection) GetPixelsPerMeter(for_pixel_width int64,) int64 {
    mb := globalProjectionMethodBindings.method_get_pixels_per_meter

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&for_pixel_width))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetLodMultiplier : get_lod_multiplier
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetLodMultiplier() float32 {
    mb := globalProjectionMethodBindings.method_get_lod_multiplier

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Projection) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Projection) MemberGetx() Vector4 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_x_getter, bx)
}

func (cx *Projection) MemberGety() Vector4 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_y_getter, bx)
}

func (cx *Projection) MemberGetz() Vector4 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_z_getter, bx)
}

func (cx *Projection) MemberGetw() Vector4 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_w_getter, bx)
}


// Multiply_Vector4 operator
func (cx *Projection) Multiply_Vector4(right Vector4) Vector4 {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Vector4](globalProjectionMethodBindings.operator_multiply_Vector4, lt, rt)
    }
// Equal_Projection operator
func (cx *Projection) Equal_Projection(right Projection) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_equal_Projection, lt, rt)
    }
// Not_equal_Projection operator
func (cx *Projection) Not_equal_Projection(right Projection) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_not_equal_Projection, lt, rt)
    }
// Multiply_Projection operator
func (cx *Projection) Multiply_Projection(right Projection) Projection {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Projection](globalProjectionMethodBindings.operator_multiply_Projection, lt, rt)
    }
// In_Dictionary operator
func (cx *Projection) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Projection) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Color
 * indexingReturnType: float
 * isKeyed: true
 * hasDestructor: false
 */
type Color struct {
    opaque [16]uint8
}

type colorMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    constructor_4 GDNativePtrConstructor
    constructor_5 GDNativePtrConstructor
    constructor_6 GDNativePtrConstructor
    method_to_argb32 GDNativePtrBuiltInMethod
    method_to_abgr32 GDNativePtrBuiltInMethod
    method_to_rgba32 GDNativePtrBuiltInMethod
    method_to_argb64 GDNativePtrBuiltInMethod
    method_to_abgr64 GDNativePtrBuiltInMethod
    method_to_rgba64 GDNativePtrBuiltInMethod
    method_to_html GDNativePtrBuiltInMethod
    method_clamp GDNativePtrBuiltInMethod
    method_inverted GDNativePtrBuiltInMethod
    method_lerp GDNativePtrBuiltInMethod
    method_lightened GDNativePtrBuiltInMethod
    method_darkened GDNativePtrBuiltInMethod
    method_blend GDNativePtrBuiltInMethod
    method_get_luminance GDNativePtrBuiltInMethod
    method_srgb_to_linear GDNativePtrBuiltInMethod
    method_linear_to_srgb GDNativePtrBuiltInMethod
    method_is_equal_approx GDNativePtrBuiltInMethod
    method_hex GDNativePtrBuiltInMethod
    method_hex64 GDNativePtrBuiltInMethod
    method_html GDNativePtrBuiltInMethod
    method_html_is_valid GDNativePtrBuiltInMethod
    method_find_named_color GDNativePtrBuiltInMethod
    method_get_named_color_count GDNativePtrBuiltInMethod
    method_get_named_color_name GDNativePtrBuiltInMethod
    method_get_named_color GDNativePtrBuiltInMethod
    method_from_string GDNativePtrBuiltInMethod
    method_from_hsv GDNativePtrBuiltInMethod
    method_from_ok_hsl GDNativePtrBuiltInMethod
    method_from_rgbe9995 GDNativePtrBuiltInMethod
    member_r_setter GDNativePtrSetter
    member_r_getter GDNativePtrGetter
    member_g_setter GDNativePtrSetter
    member_g_getter GDNativePtrGetter
    member_b_setter GDNativePtrSetter
    member_b_getter GDNativePtrGetter
    member_a_setter GDNativePtrSetter
    member_a_getter GDNativePtrGetter
    member_r8_setter GDNativePtrSetter
    member_r8_getter GDNativePtrGetter
    member_g8_setter GDNativePtrSetter
    member_g8_getter GDNativePtrGetter
    member_b8_setter GDNativePtrSetter
    member_b8_getter GDNativePtrGetter
    member_a8_setter GDNativePtrSetter
    member_a8_getter GDNativePtrGetter
    member_h_setter GDNativePtrSetter
    member_h_getter GDNativePtrGetter
    member_s_setter GDNativePtrSetter
    member_s_getter GDNativePtrGetter
    member_v_setter GDNativePtrSetter
    member_v_getter GDNativePtrGetter
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_negate GDNativePtrOperatorEvaluator
        operator_positive GDNativePtrOperatorEvaluator
        operator_multiply_int GDNativePtrOperatorEvaluator
        operator_divide_int GDNativePtrOperatorEvaluator
        operator_multiply_float GDNativePtrOperatorEvaluator
        operator_divide_float GDNativePtrOperatorEvaluator
        operator_equal_Color GDNativePtrOperatorEvaluator
        operator_not_equal_Color GDNativePtrOperatorEvaluator
        operator_add_Color GDNativePtrOperatorEvaluator
        operator_subtract_Color GDNativePtrOperatorEvaluator
        operator_multiply_Color GDNativePtrOperatorEvaluator
        operator_divide_Color GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_in_PackedColorArray GDNativePtrOperatorEvaluator
        }

var globalColorMethodBindings colorMethodBindings

func colorInitBindings() {
    globalColorMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, 0)
    globalColorMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, 1)
    globalColorMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, 2)
    globalColorMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, 3)
    globalColorMethodBindings.constructor_4 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, 4)
    globalColorMethodBindings.constructor_5 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, 5)
    globalColorMethodBindings.constructor_6 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, 6)
    globalColorMethodBindings.method_to_argb32 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "to_argb32", 3173160232)
    globalColorMethodBindings.method_to_abgr32 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "to_abgr32", 3173160232)
    globalColorMethodBindings.method_to_rgba32 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "to_rgba32", 3173160232)
    globalColorMethodBindings.method_to_argb64 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "to_argb64", 3173160232)
    globalColorMethodBindings.method_to_abgr64 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "to_abgr64", 3173160232)
    globalColorMethodBindings.method_to_rgba64 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "to_rgba64", 3173160232)
    globalColorMethodBindings.method_to_html = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "to_html", 3429816538)
    globalColorMethodBindings.method_clamp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "clamp", 105651410)
    globalColorMethodBindings.method_inverted = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "inverted", 3334027602)
    globalColorMethodBindings.method_lerp = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "lerp", 402949615)
    globalColorMethodBindings.method_lightened = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "lightened", 1466039168)
    globalColorMethodBindings.method_darkened = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "darkened", 1466039168)
    globalColorMethodBindings.method_blend = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "blend", 3803690977)
    globalColorMethodBindings.method_get_luminance = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "get_luminance", 466405837)
    globalColorMethodBindings.method_srgb_to_linear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "srgb_to_linear", 3334027602)
    globalColorMethodBindings.method_linear_to_srgb = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "linear_to_srgb", 3334027602)
    globalColorMethodBindings.method_is_equal_approx = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "is_equal_approx", 3167426256)
    globalColorMethodBindings.method_hex = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "hex", 351421375)
    globalColorMethodBindings.method_hex64 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "hex64", 351421375)
    globalColorMethodBindings.method_html = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "html", 2500054655)
    globalColorMethodBindings.method_html_is_valid = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "html_is_valid", 2942997125)
    globalColorMethodBindings.method_find_named_color = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "find_named_color", 1116350977)
    globalColorMethodBindings.method_get_named_color_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "get_named_color_count", 911363434)
    globalColorMethodBindings.method_get_named_color_name = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "get_named_color_name", 897497541)
    globalColorMethodBindings.method_get_named_color = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "get_named_color", 351421375)
    globalColorMethodBindings.method_from_string = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "from_string", 3755044230)
    globalColorMethodBindings.method_from_hsv = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "from_hsv", 1573799446)
    globalColorMethodBindings.method_from_ok_hsl = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "from_ok_hsl", 1573799446)
    globalColorMethodBindings.method_from_rgbe9995 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "from_rgbe9995", 351421375)
    globalColorMethodBindings.member_r_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "r")
    globalColorMethodBindings.member_r_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "r")
    globalColorMethodBindings.member_g_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "g")
    globalColorMethodBindings.member_g_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "g")
    globalColorMethodBindings.member_b_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "b")
    globalColorMethodBindings.member_b_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "b")
    globalColorMethodBindings.member_a_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "a")
    globalColorMethodBindings.member_a_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "a")
    globalColorMethodBindings.member_r8_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "r8")
    globalColorMethodBindings.member_r8_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "r8")
    globalColorMethodBindings.member_g8_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "g8")
    globalColorMethodBindings.member_g8_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "g8")
    globalColorMethodBindings.member_b8_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "b8")
    globalColorMethodBindings.member_b8_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "b8")
    globalColorMethodBindings.member_a8_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "a8")
    globalColorMethodBindings.member_a8_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "a8")
    globalColorMethodBindings.member_h_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "h")
    globalColorMethodBindings.member_h_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "h")
    globalColorMethodBindings.member_s_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "s")
    globalColorMethodBindings.member_s_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "s")
    globalColorMethodBindings.member_v_setter = GDNativeInterface_variant_get_ptr_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "v")
    globalColorMethodBindings.member_v_getter = GDNativeInterface_variant_get_ptr_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR, "v")
    globalColorMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR)
    globalColorMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR)
    globalColorMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR)
    globalColorMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR)
    globalColorMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_COLOR)
    globalColorMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_NIL)
        globalColorMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_NIL)
        globalColorMethodBindings.operator_negate = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NEGATE, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_NIL)
        globalColorMethodBindings.operator_positive = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_POSITIVE, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_NIL)
        globalColorMethodBindings.operator_multiply_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_INT)
        globalColorMethodBindings.operator_divide_int = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_INT)
        globalColorMethodBindings.operator_multiply_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalColorMethodBindings.operator_divide_float = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_FLOAT)
        globalColorMethodBindings.operator_equal_Color = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_COLOR)
        globalColorMethodBindings.operator_not_equal_Color = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_COLOR)
        globalColorMethodBindings.operator_add_Color = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_COLOR)
        globalColorMethodBindings.operator_subtract_Color = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_SUBTRACT, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_COLOR)
        globalColorMethodBindings.operator_multiply_Color = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_COLOR)
        globalColorMethodBindings.operator_divide_Color = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_DIVIDE, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_COLOR)
        globalColorMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalColorMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalColorMethodBindings.operator_in_PackedColorArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_COLOR, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY)
        }

func (c *Color) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewColor, index: 0
func NewColor() Color {
    cx := Color{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalColorMethodBindings.constructor_0, ptr, )

    return cx
}
// NewColor, index: 1
func NewColorWithColor(from Color,) Color {
    cx := Color{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Color
        args[0] = from.ptr()
        callBuiltinConstructor(globalColorMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewColor, index: 2
func NewColorWithColorFloat32(from Color,alpha float32,) Color {
    cx := Color{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Color
        args[0] = from.ptr()
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&alpha))
        callBuiltinConstructor(globalColorMethodBindings.constructor_2, ptr, args[0],args[1],)

    return cx
}
// NewColor, index: 3
func NewColorWithFloat32Float32Float32(r float32,g float32,b float32,) Color {
    cx := Color{}

    ptr := cx.ptr()

    var args [3]GDNativeTypePtr

    // float
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&r))
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&g))
        // float
        args[2] = (GDNativeTypePtr)(unsafe.Pointer(&b))
        callBuiltinConstructor(globalColorMethodBindings.constructor_3, ptr, args[0],args[1],args[2],)

    return cx
}
// NewColor, index: 4
func NewColorWithFloat32Float32Float32Float32(r float32,g float32,b float32,a float32,) Color {
    cx := Color{}

    ptr := cx.ptr()

    var args [4]GDNativeTypePtr

    // float
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&r))
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&g))
        // float
        args[2] = (GDNativeTypePtr)(unsafe.Pointer(&b))
        // float
        args[3] = (GDNativeTypePtr)(unsafe.Pointer(&a))
        callBuiltinConstructor(globalColorMethodBindings.constructor_4, ptr, args[0],args[1],args[2],args[3],)

    return cx
}
// NewColor, index: 5
func NewColorWithString(code String,) Color {
    cx := Color{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // String
        args[0] = code.ptr()
        callBuiltinConstructor(globalColorMethodBindings.constructor_5, ptr, args[0],)

    return cx
}
// NewColor, index: 6
func NewColorWithStringFloat32(code String,alpha float32,) Color {
    cx := Color{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // String
        args[0] = code.ptr()
        // float
        args[1] = (GDNativeTypePtr)(unsafe.Pointer(&alpha))
        callBuiltinConstructor(globalColorMethodBindings.constructor_6, ptr, args[0],args[1],)

    return cx
}




// methods


/* ToArgb32 : to_argb32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToArgb32() int64 {
    mb := globalColorMethodBindings.method_to_argb32

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* ToAbgr32 : to_abgr32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToAbgr32() int64 {
    mb := globalColorMethodBindings.method_to_abgr32

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* ToRgba32 : to_rgba32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToRgba32() int64 {
    mb := globalColorMethodBindings.method_to_rgba32

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* ToArgb64 : to_argb64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToArgb64() int64 {
    mb := globalColorMethodBindings.method_to_argb64

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* ToAbgr64 : to_abgr64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToAbgr64() int64 {
    mb := globalColorMethodBindings.method_to_abgr64

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* ToRgba64 : to_rgba64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToRgba64() int64 {
    mb := globalColorMethodBindings.method_to_rgba64

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* ToHtml : to_html
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *Color) ToHtml(with_alpha bool,) String {
    mb := globalColorMethodBindings.method_to_html

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // BoolEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&with_alpha))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Clamp(min Color,max Color,) Color {
    mb := globalColorMethodBindings.method_clamp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&min))
    
    
    // ColorEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&max))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Inverted : inverted
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Inverted() Color {
    mb := globalColorMethodBindings.method_inverted

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, nil)

    return ret
    

    
}


/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Lerp(to Color,weight float32,) Color {
    mb := globalColorMethodBindings.method_lerp

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&weight))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Lightened : lightened
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Lightened(amount float32,) Color {
    mb := globalColorMethodBindings.method_lightened

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&amount))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Darkened : darkened
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Darkened(amount float32,) Color {
    mb := globalColorMethodBindings.method_darkened

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&amount))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Blend : blend
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Blend(over Color,) Color {
    mb := globalColorMethodBindings.method_blend

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&over))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetLuminance : get_luminance
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Color) GetLuminance() float32 {
    mb := globalColorMethodBindings.method_get_luminance

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, nil)

    return ret
    

    
}


/* SrgbToLinear : srgb_to_linear
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) SrgbToLinear() Color {
    mb := globalColorMethodBindings.method_srgb_to_linear

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, nil)

    return ret
    

    
}


/* LinearToSrgb : linear_to_srgb
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) LinearToSrgb() Color {
    mb := globalColorMethodBindings.method_linear_to_srgb

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, nil)

    return ret
    

    
}


/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Color) IsEqualApprox(to Color,) bool {
    mb := globalColorMethodBindings.method_is_equal_approx

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&to))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Hex : hex
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) Hex(hex int64,) Color {
    mb := globalColorMethodBindings.method_hex

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&hex))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Hex64 : hex64
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) Hex64(hex int64,) Color {
    mb := globalColorMethodBindings.method_hex64

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&hex))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Html : html
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) Html(rgba String,) Color {
    mb := globalColorMethodBindings.method_html

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&rgba))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* HtmlIsValid : html_is_valid
 * is_vararg = false, is_static = true
 * goReturnType(bool) -> bool
 */
func (cx *Color) HtmlIsValid(color String,) bool {
    mb := globalColorMethodBindings.method_html_is_valid

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&color))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* FindNamedColor : find_named_color
 * is_vararg = false, is_static = true
 * goReturnType(int) -> int64
 */
func (cx *Color) FindNamedColor(name String,) int64 {
    mb := globalColorMethodBindings.method_find_named_color

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&name))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetNamedColorCount : get_named_color_count
 * is_vararg = false, is_static = true
 * goReturnType(int) -> int64
 */
func (cx *Color) GetNamedColorCount() int64 {
    mb := globalColorMethodBindings.method_get_named_color_count

    bx := (GDNativeTypePtr)(nullptr)
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* GetNamedColorName : get_named_color_name
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *Color) GetNamedColorName(idx int64,) String {
    mb := globalColorMethodBindings.method_get_named_color_name

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&idx))
    
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetNamedColor : get_named_color
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) GetNamedColor(idx int64,) Color {
    mb := globalColorMethodBindings.method_get_named_color

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&idx))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* FromString : from_string
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromString(str String,defaultName Color,) Color {
    mb := globalColorMethodBindings.method_from_string

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&str))
    
    
    // ColorEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&defaultName))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* FromHsv : from_hsv
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromHsv(h float32,s float32,v float32,alpha float32,) Color {
    mb := globalColorMethodBindings.method_from_hsv

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(4)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&h))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&s))
    
    
    // Float32Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&v))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&alpha))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* FromOkHsl : from_ok_hsl
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromOkHsl(h float32,s float32,l float32,alpha float32,) Color {
    mb := globalColorMethodBindings.method_from_ok_hsl

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(4)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&h))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&s))
    
    
    // Float32Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&l))
    
    
    // Float32Encoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&alpha))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* FromRgbe9995 : from_rgbe9995
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromRgbe9995(rgbe int64,) Color {
    mb := globalColorMethodBindings.method_from_rgbe9995

    bx := (GDNativeTypePtr)(nullptr)
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&rgbe))
    
    

    ret := callBuiltinMethodPtrRet[Color](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Color) SetKey(const Variant &p_key) Variant {

}
*/

// members

func (cx *Color) MemberGetr() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalColorMethodBindings.member_r_getter, bx)
}

func (cx *Color) MemberGetg() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalColorMethodBindings.member_g_getter, bx)
}

func (cx *Color) MemberGetb() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalColorMethodBindings.member_b_getter, bx)
}

func (cx *Color) MemberGeta() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalColorMethodBindings.member_a_getter, bx)
}

func (cx *Color) MemberGetr8() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalColorMethodBindings.member_r8_getter, bx)
}

func (cx *Color) MemberGetg8() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalColorMethodBindings.member_g8_getter, bx)
}

func (cx *Color) MemberGetb8() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalColorMethodBindings.member_b8_getter, bx)
}

func (cx *Color) MemberGeta8() int64 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[int64](globalColorMethodBindings.member_a8_getter, bx)
}

func (cx *Color) MemberGeth() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalColorMethodBindings.member_h_getter, bx)
}

func (cx *Color) MemberGets() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalColorMethodBindings.member_s_getter, bx)
}

func (cx *Color) MemberGetv() float32 {
    bx := cx.ptr()
    return callBuiltinPtrGetter[float32](globalColorMethodBindings.member_v_getter, bx)
}


// Equal_Nil operator
func (cx *Color) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Color) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Negate operator
func (cx *Color) Negate() Color {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_negate, lt, rt)
    }
// Positive operator
func (cx *Color) Positive() Color {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(nullptr)
    return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_positive, lt, rt)
    }
// Multiply_int operator
func (cx *Color) Multiply_int(right int64) Color {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_multiply_int, lt, rt)
    }
// Divide_int operator
func (cx *Color) Divide_int(right int64) Color {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_divide_int, lt, rt)
    }
// Multiply_float operator
func (cx *Color) Multiply_float(right float32) Color {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_multiply_float, lt, rt)
    }
// Divide_float operator
func (cx *Color) Divide_float(right float32) Color {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_divide_float, lt, rt)
    }
// Equal_Color operator
func (cx *Color) Equal_Color(right Color) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_equal_Color, lt, rt)
    }
// Not_equal_Color operator
func (cx *Color) Not_equal_Color(right Color) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_not_equal_Color, lt, rt)
    }
// Add_Color operator
func (cx *Color) Add_Color(right Color) Color {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_add_Color, lt, rt)
    }
// Subtract_Color operator
func (cx *Color) Subtract_Color(right Color) Color {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_subtract_Color, lt, rt)
    }
// Multiply_Color operator
func (cx *Color) Multiply_Color(right Color) Color {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_multiply_Color, lt, rt)
    }
// Divide_Color operator
func (cx *Color) Divide_Color(right Color) Color {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_divide_Color, lt, rt)
    }
// In_Dictionary operator
func (cx *Color) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Color) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_in_Array, lt, rt)
    }
// In_PackedColorArray operator
func (cx *Color) In_PackedColorArray(right PackedColorArray) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_in_PackedColorArray, lt, rt)
    }
/*
 * StringName
 * indexingReturnType: 
 * isKeyed: true
 * hasDestructor: true
 */
type StringName struct {
    opaque [8]uint8
}

type stringNameMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_hash GDNativePtrBuiltInMethod
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_equal_String GDNativePtrOperatorEvaluator
        operator_not_equal_String GDNativePtrOperatorEvaluator
        operator_in_String GDNativePtrOperatorEvaluator
        operator_equal_StringName GDNativePtrOperatorEvaluator
        operator_not_equal_StringName GDNativePtrOperatorEvaluator
        operator_less_StringName GDNativePtrOperatorEvaluator
        operator_less_equal_StringName GDNativePtrOperatorEvaluator
        operator_greater_StringName GDNativePtrOperatorEvaluator
        operator_greater_equal_StringName GDNativePtrOperatorEvaluator
        operator_in_StringName GDNativePtrOperatorEvaluator
        operator_in_Object GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalStringNameMethodBindings stringNameMethodBindings

func stringNameInitBindings() {
    globalStringNameMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING_NAME, 0)
    globalStringNameMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING_NAME, 1)
    globalStringNameMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING_NAME, 2)
    globalStringNameMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING_NAME)
    globalStringNameMethodBindings.method_hash = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING_NAME, "hash", 3173160232)
    globalStringNameMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING_NAME)
    globalStringNameMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING_NAME)
    globalStringNameMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_STRING_NAME)
    globalStringNameMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_NIL)
        globalStringNameMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_NIL)
        globalStringNameMethodBindings.operator_equal_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringNameMethodBindings.operator_not_equal_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringNameMethodBindings.operator_in_String = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_STRING)
        globalStringNameMethodBindings.operator_equal_StringName = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_STRING_NAME)
        globalStringNameMethodBindings.operator_not_equal_StringName = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_STRING_NAME)
        globalStringNameMethodBindings.operator_less_StringName = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_STRING_NAME)
        globalStringNameMethodBindings.operator_less_equal_StringName = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS_EQUAL, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_STRING_NAME)
        globalStringNameMethodBindings.operator_greater_StringName = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_STRING_NAME)
        globalStringNameMethodBindings.operator_greater_equal_StringName = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER_EQUAL, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_STRING_NAME)
        globalStringNameMethodBindings.operator_in_StringName = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_STRING_NAME)
        globalStringNameMethodBindings.operator_in_Object = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_OBJECT)
        globalStringNameMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalStringNameMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_STRING_NAME, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *StringName) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewStringName, index: 0
func NewStringName() StringName {
    cx := StringName{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalStringNameMethodBindings.constructor_0, ptr, )

    return cx
}
// NewStringName, index: 1
func NewStringNameWithStringName(from StringName,) StringName {
    cx := StringName{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // StringName
        args[0] = from.ptr()
        callBuiltinConstructor(globalStringNameMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewStringName, index: 2
func NewStringNameWithString(from String,) StringName {
    cx := StringName{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // String
        args[0] = from.ptr()
        callBuiltinConstructor(globalStringNameMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *StringName) Destroy() {
    md := (GDNativePtrDestructor)(globalStringNameMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) Hash() int64 {
    mb := globalStringNameMethodBindings.method_hash

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *StringName) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *StringName) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *StringName) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Equal_String operator
func (cx *StringName) Equal_String(right String) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_equal_String, lt, rt)
    }
// Not_equal_String operator
func (cx *StringName) Not_equal_String(right String) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_not_equal_String, lt, rt)
    }
// In_String operator
func (cx *StringName) In_String(right String) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_String, lt, rt)
    }
// Equal_StringName operator
func (cx *StringName) Equal_StringName(right StringName) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_equal_StringName, lt, rt)
    }
// Not_equal_StringName operator
func (cx *StringName) Not_equal_StringName(right StringName) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_not_equal_StringName, lt, rt)
    }
// Less_StringName operator
func (cx *StringName) Less_StringName(right StringName) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_less_StringName, lt, rt)
    }
// Less_equal_StringName operator
func (cx *StringName) Less_equal_StringName(right StringName) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_less_equal_StringName, lt, rt)
    }
// Greater_StringName operator
func (cx *StringName) Greater_StringName(right StringName) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_greater_StringName, lt, rt)
    }
// Greater_equal_StringName operator
func (cx *StringName) Greater_equal_StringName(right StringName) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_greater_equal_StringName, lt, rt)
    }
// In_StringName operator
func (cx *StringName) In_StringName(right StringName) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_StringName, lt, rt)
    }
// In_Object operator
func (cx *StringName) In_Object(right Object) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_Object, lt, rt)
    }
// In_Dictionary operator
func (cx *StringName) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *StringName) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * NodePath
 * indexingReturnType: 
 * isKeyed: true
 * hasDestructor: true
 */
type NodePath struct {
    opaque [8]uint8
}

type nodePathMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_is_absolute GDNativePtrBuiltInMethod
    method_get_name_count GDNativePtrBuiltInMethod
    method_get_name GDNativePtrBuiltInMethod
    method_get_subname_count GDNativePtrBuiltInMethod
    method_hash GDNativePtrBuiltInMethod
    method_get_subname GDNativePtrBuiltInMethod
    method_get_concatenated_names GDNativePtrBuiltInMethod
    method_get_concatenated_subnames GDNativePtrBuiltInMethod
    method_get_as_property_path GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_equal_NodePath GDNativePtrOperatorEvaluator
        operator_not_equal_NodePath GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalNodePathMethodBindings nodePathMethodBindings

func nodePathInitBindings() {
    globalNodePathMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, 0)
    globalNodePathMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, 1)
    globalNodePathMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, 2)
    globalNodePathMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH)
    globalNodePathMethodBindings.method_is_absolute = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, "is_absolute", 3918633141)
    globalNodePathMethodBindings.method_get_name_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, "get_name_count", 3173160232)
    globalNodePathMethodBindings.method_get_name = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, "get_name", 2948586938)
    globalNodePathMethodBindings.method_get_subname_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, "get_subname_count", 3173160232)
    globalNodePathMethodBindings.method_hash = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, "hash", 3173160232)
    globalNodePathMethodBindings.method_get_subname = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, "get_subname", 2948586938)
    globalNodePathMethodBindings.method_get_concatenated_names = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, "get_concatenated_names", 1825232092)
    globalNodePathMethodBindings.method_get_concatenated_subnames = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, "get_concatenated_subnames", 1825232092)
    globalNodePathMethodBindings.method_get_as_property_path = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, "get_as_property_path", 1598598043)
    globalNodePathMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH, "is_empty", 3918633141)
    globalNodePathMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH)
    globalNodePathMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH)
    globalNodePathMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_NODE_PATH)
    globalNodePathMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_NODE_PATH, GDNATIVE_VARIANT_TYPE_NIL)
        globalNodePathMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_NODE_PATH, GDNATIVE_VARIANT_TYPE_NIL)
        globalNodePathMethodBindings.operator_equal_NodePath = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_NODE_PATH, GDNATIVE_VARIANT_TYPE_NODE_PATH)
        globalNodePathMethodBindings.operator_not_equal_NodePath = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_NODE_PATH, GDNATIVE_VARIANT_TYPE_NODE_PATH)
        globalNodePathMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_NODE_PATH, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalNodePathMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_NODE_PATH, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *NodePath) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewNodePath, index: 0
func NewNodePath() NodePath {
    cx := NodePath{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalNodePathMethodBindings.constructor_0, ptr, )

    return cx
}
// NewNodePath, index: 1
func NewNodePathWithNodePath(from NodePath,) NodePath {
    cx := NodePath{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // NodePath
        args[0] = from.ptr()
        callBuiltinConstructor(globalNodePathMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewNodePath, index: 2
func NewNodePathWithString(from String,) NodePath {
    cx := NodePath{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // String
        args[0] = from.ptr()
        callBuiltinConstructor(globalNodePathMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *NodePath) Destroy() {
    md := (GDNativePtrDestructor)(globalNodePathMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* IsAbsolute : is_absolute
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *NodePath) IsAbsolute() bool {
    mb := globalNodePathMethodBindings.method_is_absolute

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* GetNameCount : get_name_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *NodePath) GetNameCount() int64 {
    mb := globalNodePathMethodBindings.method_get_name_count

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* GetName : get_name
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetName(idx int64,) StringName {
    mb := globalNodePathMethodBindings.method_get_name

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&idx))
    
    

    ret := callBuiltinMethodPtrRet[StringName](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetSubnameCount : get_subname_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *NodePath) GetSubnameCount() int64 {
    mb := globalNodePathMethodBindings.method_get_subname_count

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *NodePath) Hash() int64 {
    mb := globalNodePathMethodBindings.method_hash

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* GetSubname : get_subname
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetSubname(idx int64,) StringName {
    mb := globalNodePathMethodBindings.method_get_subname

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&idx))
    
    

    ret := callBuiltinMethodPtrRet[StringName](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetConcatenatedNames : get_concatenated_names
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetConcatenatedNames() StringName {
    mb := globalNodePathMethodBindings.method_get_concatenated_names

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[StringName](mb, bx, nil)

    return ret
    

    
}


/* GetConcatenatedSubnames : get_concatenated_subnames
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetConcatenatedSubnames() StringName {
    mb := globalNodePathMethodBindings.method_get_concatenated_subnames

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[StringName](mb, bx, nil)

    return ret
    

    
}


/* GetAsPropertyPath : get_as_property_path
 * is_vararg = false, is_static = false
 * goReturnType(NodePath) -> NodePath
 */
func (cx *NodePath) GetAsPropertyPath() NodePath {
    mb := globalNodePathMethodBindings.method_get_as_property_path

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[NodePath](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *NodePath) IsEmpty() bool {
    mb := globalNodePathMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *NodePath) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *NodePath) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *NodePath) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Equal_NodePath operator
func (cx *NodePath) Equal_NodePath(right NodePath) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_equal_NodePath, lt, rt)
    }
// Not_equal_NodePath operator
func (cx *NodePath) Not_equal_NodePath(right NodePath) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_not_equal_NodePath, lt, rt)
    }
// In_Dictionary operator
func (cx *NodePath) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *NodePath) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * RID
 * indexingReturnType: 
 * isKeyed: true
 * hasDestructor: true
 */
type RID struct {
    opaque [8]uint8
}

type rIDMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_is_valid GDNativePtrBuiltInMethod
    method_get_id GDNativePtrBuiltInMethod
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_equal_RID GDNativePtrOperatorEvaluator
        operator_not_equal_RID GDNativePtrOperatorEvaluator
        operator_less_RID GDNativePtrOperatorEvaluator
        operator_less_equal_RID GDNativePtrOperatorEvaluator
        operator_greater_RID GDNativePtrOperatorEvaluator
        operator_greater_equal_RID GDNativePtrOperatorEvaluator
        }

var globalRIDMethodBindings rIDMethodBindings

func rIDInitBindings() {
    globalRIDMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RID, 0)
    globalRIDMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RID, 1)
    globalRIDMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RID)
    globalRIDMethodBindings.method_is_valid = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RID, "is_valid", 3918633141)
    globalRIDMethodBindings.method_get_id = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RID, "get_id", 3173160232)
    globalRIDMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RID)
    globalRIDMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RID)
    globalRIDMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_RID)
    globalRIDMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_RID, GDNATIVE_VARIANT_TYPE_NIL)
        globalRIDMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_RID, GDNATIVE_VARIANT_TYPE_NIL)
        globalRIDMethodBindings.operator_equal_RID = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_RID, GDNATIVE_VARIANT_TYPE_RID)
        globalRIDMethodBindings.operator_not_equal_RID = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_RID, GDNATIVE_VARIANT_TYPE_RID)
        globalRIDMethodBindings.operator_less_RID = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS, GDNATIVE_VARIANT_TYPE_RID, GDNATIVE_VARIANT_TYPE_RID)
        globalRIDMethodBindings.operator_less_equal_RID = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS_EQUAL, GDNATIVE_VARIANT_TYPE_RID, GDNATIVE_VARIANT_TYPE_RID)
        globalRIDMethodBindings.operator_greater_RID = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER, GDNATIVE_VARIANT_TYPE_RID, GDNATIVE_VARIANT_TYPE_RID)
        globalRIDMethodBindings.operator_greater_equal_RID = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER_EQUAL, GDNATIVE_VARIANT_TYPE_RID, GDNATIVE_VARIANT_TYPE_RID)
        }

func (c *RID) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewRID, index: 0
func NewRID() RID {
    cx := RID{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalRIDMethodBindings.constructor_0, ptr, )

    return cx
}
// NewRID, index: 1
func NewRIDWithRID(from RID,) RID {
    cx := RID{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // RID
        args[0] = from.ptr()
        callBuiltinConstructor(globalRIDMethodBindings.constructor_1, ptr, args[0],)

    return cx
}


func (cx *RID) Destroy() {
    md := (GDNativePtrDestructor)(globalRIDMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* IsValid : is_valid
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *RID) IsValid() bool {
    mb := globalRIDMethodBindings.method_is_valid

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* GetId : get_id
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *RID) GetId() int64 {
    mb := globalRIDMethodBindings.method_get_id

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *RID) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *RID) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *RID) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Equal_RID operator
func (cx *RID) Equal_RID(right RID) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_equal_RID, lt, rt)
    }
// Not_equal_RID operator
func (cx *RID) Not_equal_RID(right RID) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_not_equal_RID, lt, rt)
    }
// Less_RID operator
func (cx *RID) Less_RID(right RID) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_less_RID, lt, rt)
    }
// Less_equal_RID operator
func (cx *RID) Less_equal_RID(right RID) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_less_equal_RID, lt, rt)
    }
// Greater_RID operator
func (cx *RID) Greater_RID(right RID) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_greater_RID, lt, rt)
    }
// Greater_equal_RID operator
func (cx *RID) Greater_equal_RID(right RID) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_greater_equal_RID, lt, rt)
    }
/*
 * Callable
 * indexingReturnType: 
 * isKeyed: true
 * hasDestructor: true
 */
type Callable struct {
    opaque [16]uint8
}

type callableMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_is_null GDNativePtrBuiltInMethod
    method_is_custom GDNativePtrBuiltInMethod
    method_is_standard GDNativePtrBuiltInMethod
    method_is_valid GDNativePtrBuiltInMethod
    method_get_object GDNativePtrBuiltInMethod
    method_get_object_id GDNativePtrBuiltInMethod
    method_get_method GDNativePtrBuiltInMethod
    method_hash GDNativePtrBuiltInMethod
    method_unbind GDNativePtrBuiltInMethod
    method_call GDNativePtrBuiltInMethod
    method_call_deferred GDNativePtrBuiltInMethod
    method_rpc GDNativePtrBuiltInMethod
    method_rpc_id GDNativePtrBuiltInMethod
    method_bind GDNativePtrBuiltInMethod
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_equal_Callable GDNativePtrOperatorEvaluator
        operator_not_equal_Callable GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalCallableMethodBindings callableMethodBindings

func callableInitBindings() {
    globalCallableMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, 0)
    globalCallableMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, 1)
    globalCallableMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, 2)
    globalCallableMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE)
    globalCallableMethodBindings.method_is_null = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "is_null", 3918633141)
    globalCallableMethodBindings.method_is_custom = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "is_custom", 3918633141)
    globalCallableMethodBindings.method_is_standard = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "is_standard", 3918633141)
    globalCallableMethodBindings.method_is_valid = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "is_valid", 3918633141)
    globalCallableMethodBindings.method_get_object = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "get_object", 4008621732)
    globalCallableMethodBindings.method_get_object_id = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "get_object_id", 3173160232)
    globalCallableMethodBindings.method_get_method = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "get_method", 1825232092)
    globalCallableMethodBindings.method_hash = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "hash", 3173160232)
    globalCallableMethodBindings.method_unbind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "unbind", 755001590)
    globalCallableMethodBindings.method_call = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "call", 3643564216)
    globalCallableMethodBindings.method_call_deferred = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "call_deferred", 3286317445)
    globalCallableMethodBindings.method_rpc = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "rpc", 3286317445)
    globalCallableMethodBindings.method_rpc_id = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "rpc_id", 2270047679)
    globalCallableMethodBindings.method_bind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE, "bind", 3224143119)
    globalCallableMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE)
    globalCallableMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE)
    globalCallableMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_CALLABLE)
    globalCallableMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_CALLABLE, GDNATIVE_VARIANT_TYPE_NIL)
        globalCallableMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_CALLABLE, GDNATIVE_VARIANT_TYPE_NIL)
        globalCallableMethodBindings.operator_equal_Callable = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_CALLABLE, GDNATIVE_VARIANT_TYPE_CALLABLE)
        globalCallableMethodBindings.operator_not_equal_Callable = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_CALLABLE, GDNATIVE_VARIANT_TYPE_CALLABLE)
        globalCallableMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_CALLABLE, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalCallableMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_CALLABLE, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Callable) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewCallable, index: 0
func NewCallable() Callable {
    cx := Callable{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalCallableMethodBindings.constructor_0, ptr, )

    return cx
}
// NewCallable, index: 1
func NewCallableWithCallable(from Callable,) Callable {
    cx := Callable{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Callable
        args[0] = from.ptr()
        callBuiltinConstructor(globalCallableMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewCallable, index: 2
func NewCallableWithObjectStringName(object Object,method StringName,) Callable {
    cx := Callable{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Object
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&object))
        // StringName
        args[1] = method.ptr()
        callBuiltinConstructor(globalCallableMethodBindings.constructor_2, ptr, args[0],args[1],)

    return cx
}


func (cx *Callable) Destroy() {
    md := (GDNativePtrDestructor)(globalCallableMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* IsNull : is_null
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsNull() bool {
    mb := globalCallableMethodBindings.method_is_null

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsCustom : is_custom
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsCustom() bool {
    mb := globalCallableMethodBindings.method_is_custom

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsStandard : is_standard
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsStandard() bool {
    mb := globalCallableMethodBindings.method_is_standard

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* IsValid : is_valid
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsValid() bool {
    mb := globalCallableMethodBindings.method_is_valid

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* GetObject : get_object
 * is_vararg = false, is_static = false
 * goReturnType(Object) -> Object
 */
func (cx *Callable) GetObject() Object {
    mb := globalCallableMethodBindings.method_get_object

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Object](mb, bx, nil)

    return ret
    

    
}


/* GetObjectId : get_object_id
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Callable) GetObjectId() int64 {
    mb := globalCallableMethodBindings.method_get_object_id

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* GetMethod : get_method
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *Callable) GetMethod() StringName {
    mb := globalCallableMethodBindings.method_get_method

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[StringName](mb, bx, nil)

    return ret
    

    
}


/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Callable) Hash() int64 {
    mb := globalCallableMethodBindings.method_hash

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Unbind : unbind
 * is_vararg = false, is_static = false
 * goReturnType(Callable) -> Callable
 */
func (cx *Callable) Unbind(argcount int64,) Callable {
    mb := globalCallableMethodBindings.method_unbind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&argcount))
    
    

    ret := callBuiltinMethodPtrRet[Callable](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Call : call
 * is_vararg = true, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Callable) Call(varargs ...Variant) Variant {
    mb := globalCallableMethodBindings.method_call

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(0+ len(varargs) + 1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    

    for i := range varargs {
        args[i + 0] = (GDNativeTypePtr)(unsafe.Pointer(&varargs[i]))
    }
    ret := callBuiltinMethodPtrRet[Variant](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* CallDeferred : call_deferred
 * is_vararg = true, is_static = false
 * goReturnType() -> 
 */
func (cx *Callable) CallDeferred(varargs ...Variant)  {
    mb := globalCallableMethodBindings.method_call_deferred

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(0+ len(varargs) + 1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    

    for i := range varargs {
        args[i + 0] = (GDNativeTypePtr)(unsafe.Pointer(&varargs[i]))
    }
    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Rpc : rpc
 * is_vararg = true, is_static = false
 * goReturnType() -> 
 */
func (cx *Callable) Rpc(varargs ...Variant)  {
    mb := globalCallableMethodBindings.method_rpc

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(0+ len(varargs) + 1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    

    for i := range varargs {
        args[i + 0] = (GDNativeTypePtr)(unsafe.Pointer(&varargs[i]))
    }
    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* RpcId : rpc_id
 * is_vararg = true, is_static = false
 * goReturnType() -> 
 */
func (cx *Callable) RpcId(peer_id int64,varargs ...Variant)  {
    mb := globalCallableMethodBindings.method_rpc_id

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1+ len(varargs) + 1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&peer_id))
    
    

    for i := range varargs {
        args[i + 1] = (GDNativeTypePtr)(unsafe.Pointer(&varargs[i]))
    }
    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Bind : bind
 * is_vararg = true, is_static = false
 * goReturnType(Callable) -> Callable
 */
func (cx *Callable) Bind(varargs ...Variant) Callable {
    mb := globalCallableMethodBindings.method_bind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(0+ len(varargs) + 1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    

    for i := range varargs {
        args[i + 0] = (GDNativeTypePtr)(unsafe.Pointer(&varargs[i]))
    }
    ret := callBuiltinMethodPtrRet[Callable](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Callable) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *Callable) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Callable) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Equal_Callable operator
func (cx *Callable) Equal_Callable(right Callable) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_equal_Callable, lt, rt)
    }
// Not_equal_Callable operator
func (cx *Callable) Not_equal_Callable(right Callable) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_not_equal_Callable, lt, rt)
    }
// In_Dictionary operator
func (cx *Callable) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Callable) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Signal
 * indexingReturnType: 
 * isKeyed: true
 * hasDestructor: true
 */
type Signal struct {
    opaque [16]uint8
}

type signalMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_is_null GDNativePtrBuiltInMethod
    method_get_object GDNativePtrBuiltInMethod
    method_get_object_id GDNativePtrBuiltInMethod
    method_get_name GDNativePtrBuiltInMethod
    method_connect GDNativePtrBuiltInMethod
    method_disconnect GDNativePtrBuiltInMethod
    method_is_connected GDNativePtrBuiltInMethod
    method_get_connections GDNativePtrBuiltInMethod
    method_emit GDNativePtrBuiltInMethod
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_equal_Signal GDNativePtrOperatorEvaluator
        operator_not_equal_Signal GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalSignalMethodBindings signalMethodBindings

func signalInitBindings() {
    globalSignalMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, 0)
    globalSignalMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, 1)
    globalSignalMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, 2)
    globalSignalMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL)
    globalSignalMethodBindings.method_is_null = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, "is_null", 3918633141)
    globalSignalMethodBindings.method_get_object = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, "get_object", 4008621732)
    globalSignalMethodBindings.method_get_object_id = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, "get_object_id", 3173160232)
    globalSignalMethodBindings.method_get_name = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, "get_name", 1825232092)
    globalSignalMethodBindings.method_connect = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, "connect", 979702392)
    globalSignalMethodBindings.method_disconnect = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, "disconnect", 3470848906)
    globalSignalMethodBindings.method_is_connected = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, "is_connected", 4129521963)
    globalSignalMethodBindings.method_get_connections = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, "get_connections", 4144163970)
    globalSignalMethodBindings.method_emit = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL, "emit", 3286317445)
    globalSignalMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL)
    globalSignalMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL)
    globalSignalMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_SIGNAL)
    globalSignalMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_SIGNAL, GDNATIVE_VARIANT_TYPE_NIL)
        globalSignalMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_SIGNAL, GDNATIVE_VARIANT_TYPE_NIL)
        globalSignalMethodBindings.operator_equal_Signal = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_SIGNAL, GDNATIVE_VARIANT_TYPE_SIGNAL)
        globalSignalMethodBindings.operator_not_equal_Signal = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_SIGNAL, GDNATIVE_VARIANT_TYPE_SIGNAL)
        globalSignalMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_SIGNAL, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalSignalMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_SIGNAL, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Signal) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewSignal, index: 0
func NewSignal() Signal {
    cx := Signal{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalSignalMethodBindings.constructor_0, ptr, )

    return cx
}
// NewSignal, index: 1
func NewSignalWithSignal(from Signal,) Signal {
    cx := Signal{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Signal
        args[0] = from.ptr()
        callBuiltinConstructor(globalSignalMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewSignal, index: 2
func NewSignalWithObjectStringName(object Object,signal StringName,) Signal {
    cx := Signal{}

    ptr := cx.ptr()

    var args [2]GDNativeTypePtr

    // Object
        args[0] = (GDNativeTypePtr)(unsafe.Pointer(&object))
        // StringName
        args[1] = signal.ptr()
        callBuiltinConstructor(globalSignalMethodBindings.constructor_2, ptr, args[0],args[1],)

    return cx
}


func (cx *Signal) Destroy() {
    md := (GDNativePtrDestructor)(globalSignalMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* IsNull : is_null
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Signal) IsNull() bool {
    mb := globalSignalMethodBindings.method_is_null

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* GetObject : get_object
 * is_vararg = false, is_static = false
 * goReturnType(Object) -> Object
 */
func (cx *Signal) GetObject() Object {
    mb := globalSignalMethodBindings.method_get_object

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Object](mb, bx, nil)

    return ret
    

    
}


/* GetObjectId : get_object_id
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Signal) GetObjectId() int64 {
    mb := globalSignalMethodBindings.method_get_object_id

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* GetName : get_name
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *Signal) GetName() StringName {
    mb := globalSignalMethodBindings.method_get_name

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[StringName](mb, bx, nil)

    return ret
    

    
}


/* Connect : connect
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Signal) Connect(callable Callable,flags int64,) int64 {
    mb := globalSignalMethodBindings.method_connect

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // CallableEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&callable))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&flags))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Disconnect : disconnect
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Signal) Disconnect(callable Callable,)  {
    mb := globalSignalMethodBindings.method_disconnect

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // CallableEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&callable))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* IsConnected : is_connected
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Signal) IsConnected(callable Callable,) bool {
    mb := globalSignalMethodBindings.method_is_connected

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // CallableEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&callable))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetConnections : get_connections
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Signal) GetConnections() Array {
    mb := globalSignalMethodBindings.method_get_connections

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Array](mb, bx, nil)

    return ret
    

    
}


/* Emit : emit
 * is_vararg = true, is_static = false
 * goReturnType() -> 
 */
func (cx *Signal) Emit(varargs ...Variant)  {
    mb := globalSignalMethodBindings.method_emit

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(0+ len(varargs) + 1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    

    for i := range varargs {
        args[i + 0] = (GDNativeTypePtr)(unsafe.Pointer(&varargs[i]))
    }
    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Signal) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *Signal) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Signal) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Equal_Signal operator
func (cx *Signal) Equal_Signal(right Signal) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_equal_Signal, lt, rt)
    }
// Not_equal_Signal operator
func (cx *Signal) Not_equal_Signal(right Signal) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_not_equal_Signal, lt, rt)
    }
// In_Dictionary operator
func (cx *Signal) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Signal) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Dictionary
 * indexingReturnType: Variant
 * isKeyed: true
 * hasDestructor: true
 */
type Dictionary struct {
    opaque [8]uint8
}

type dictionaryMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_size GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_clear GDNativePtrBuiltInMethod
    method_merge GDNativePtrBuiltInMethod
    method_has GDNativePtrBuiltInMethod
    method_has_all GDNativePtrBuiltInMethod
    method_find_key GDNativePtrBuiltInMethod
    method_erase GDNativePtrBuiltInMethod
    method_hash GDNativePtrBuiltInMethod
    method_keys GDNativePtrBuiltInMethod
    method_values GDNativePtrBuiltInMethod
    method_duplicate GDNativePtrBuiltInMethod
    method_get GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_equal_Dictionary GDNativePtrOperatorEvaluator
        operator_not_equal_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalDictionaryMethodBindings dictionaryMethodBindings

func dictionaryInitBindings() {
    globalDictionaryMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, 0)
    globalDictionaryMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, 1)
    globalDictionaryMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY)
    globalDictionaryMethodBindings.method_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "size", 3173160232)
    globalDictionaryMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "is_empty", 3918633141)
    globalDictionaryMethodBindings.method_clear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "clear", 3218959716)
    globalDictionaryMethodBindings.method_merge = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "merge", 2079548978)
    globalDictionaryMethodBindings.method_has = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "has", 3680194679)
    globalDictionaryMethodBindings.method_has_all = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "has_all", 2988181878)
    globalDictionaryMethodBindings.method_find_key = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "find_key", 1988825835)
    globalDictionaryMethodBindings.method_erase = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "erase", 1776646889)
    globalDictionaryMethodBindings.method_hash = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "hash", 3173160232)
    globalDictionaryMethodBindings.method_keys = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "keys", 4144163970)
    globalDictionaryMethodBindings.method_values = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "values", 4144163970)
    globalDictionaryMethodBindings.method_duplicate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "duplicate", 830099069)
    globalDictionaryMethodBindings.method_get = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY, "get", 2205440559)
    globalDictionaryMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY)
    globalDictionaryMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY)
    globalDictionaryMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY)
    globalDictionaryMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY)
    globalDictionaryMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_DICTIONARY)
    globalDictionaryMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_DICTIONARY, GDNATIVE_VARIANT_TYPE_NIL)
        globalDictionaryMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_DICTIONARY, GDNATIVE_VARIANT_TYPE_NIL)
        globalDictionaryMethodBindings.operator_equal_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_DICTIONARY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalDictionaryMethodBindings.operator_not_equal_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_DICTIONARY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalDictionaryMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_DICTIONARY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalDictionaryMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_DICTIONARY, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Dictionary) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewDictionary, index: 0
func NewDictionary() Dictionary {
    cx := Dictionary{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalDictionaryMethodBindings.constructor_0, ptr, )

    return cx
}
// NewDictionary, index: 1
func NewDictionaryWithDictionary(from Dictionary,) Dictionary {
    cx := Dictionary{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Dictionary
        args[0] = from.ptr()
        callBuiltinConstructor(globalDictionaryMethodBindings.constructor_1, ptr, args[0],)

    return cx
}


func (cx *Dictionary) Destroy() {
    md := (GDNativePtrDestructor)(globalDictionaryMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Dictionary) Size() int64 {
    mb := globalDictionaryMethodBindings.method_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) IsEmpty() bool {
    mb := globalDictionaryMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Dictionary) Clear()  {
    mb := globalDictionaryMethodBindings.method_clear

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Dictionary) Merge(dictionary Dictionary,overwrite bool,)  {
    mb := globalDictionaryMethodBindings.method_merge

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // DictionaryEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&dictionary))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&overwrite))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) Has(key Variant,) bool {
    mb := globalDictionaryMethodBindings.method_has

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&key))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* HasAll : has_all
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) HasAll(keys Array,) bool {
    mb := globalDictionaryMethodBindings.method_has_all

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&keys))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* FindKey : find_key
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Dictionary) FindKey(value Variant,) Variant {
    mb := globalDictionaryMethodBindings.method_find_key

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) Erase(key Variant,) bool {
    mb := globalDictionaryMethodBindings.method_erase

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&key))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Dictionary) Hash() int64 {
    mb := globalDictionaryMethodBindings.method_hash

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* Keys : keys
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Dictionary) Keys() Array {
    mb := globalDictionaryMethodBindings.method_keys

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Array](mb, bx, nil)

    return ret
    

    
}


/* Values : values
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Dictionary) Values() Array {
    mb := globalDictionaryMethodBindings.method_values

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Array](mb, bx, nil)

    return ret
    

    
}


/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(Dictionary) -> Dictionary
 */
func (cx *Dictionary) Duplicate(deep bool,) Dictionary {
    mb := globalDictionaryMethodBindings.method_duplicate

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // BoolEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&deep))
    
    

    ret := callBuiltinMethodPtrRet[Dictionary](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Dictionary) Get(key Variant,defaultName Variant,) Variant {
    mb := globalDictionaryMethodBindings.method_get

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&key))
    
    
    // VariantEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&defaultName))
    
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Dictionary) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *Dictionary) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Dictionary) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Equal_Dictionary operator
func (cx *Dictionary) Equal_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_equal_Dictionary, lt, rt)
    }
// Not_equal_Dictionary operator
func (cx *Dictionary) Not_equal_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_not_equal_Dictionary, lt, rt)
    }
// In_Dictionary operator
func (cx *Dictionary) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *Dictionary) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * Array
 * indexingReturnType: Variant
 * isKeyed: true
 * hasDestructor: true
 */
type Array struct {
    opaque [8]uint8
}

type arrayMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    constructor_3 GDNativePtrConstructor
    constructor_4 GDNativePtrConstructor
    constructor_5 GDNativePtrConstructor
    constructor_6 GDNativePtrConstructor
    constructor_7 GDNativePtrConstructor
    constructor_8 GDNativePtrConstructor
    constructor_9 GDNativePtrConstructor
    constructor_10 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_size GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_clear GDNativePtrBuiltInMethod
    method_hash GDNativePtrBuiltInMethod
    method_push_back GDNativePtrBuiltInMethod
    method_push_front GDNativePtrBuiltInMethod
    method_append GDNativePtrBuiltInMethod
    method_append_array GDNativePtrBuiltInMethod
    method_resize GDNativePtrBuiltInMethod
    method_insert GDNativePtrBuiltInMethod
    method_remove_at GDNativePtrBuiltInMethod
    method_fill GDNativePtrBuiltInMethod
    method_erase GDNativePtrBuiltInMethod
    method_front GDNativePtrBuiltInMethod
    method_back GDNativePtrBuiltInMethod
    method_find GDNativePtrBuiltInMethod
    method_rfind GDNativePtrBuiltInMethod
    method_find_last GDNativePtrBuiltInMethod
    method_count GDNativePtrBuiltInMethod
    method_has GDNativePtrBuiltInMethod
    method_pop_back GDNativePtrBuiltInMethod
    method_pop_front GDNativePtrBuiltInMethod
    method_pop_at GDNativePtrBuiltInMethod
    method_sort GDNativePtrBuiltInMethod
    method_sort_custom GDNativePtrBuiltInMethod
    method_shuffle GDNativePtrBuiltInMethod
    method_bsearch GDNativePtrBuiltInMethod
    method_bsearch_custom GDNativePtrBuiltInMethod
    method_reverse GDNativePtrBuiltInMethod
    method_duplicate GDNativePtrBuiltInMethod
    method_slice GDNativePtrBuiltInMethod
    method_filter GDNativePtrBuiltInMethod
    method_map GDNativePtrBuiltInMethod
    method_reduce GDNativePtrBuiltInMethod
    method_any GDNativePtrBuiltInMethod
    method_all GDNativePtrBuiltInMethod
    method_max GDNativePtrBuiltInMethod
    method_min GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_equal_Array GDNativePtrOperatorEvaluator
        operator_not_equal_Array GDNativePtrOperatorEvaluator
        operator_less_Array GDNativePtrOperatorEvaluator
        operator_less_equal_Array GDNativePtrOperatorEvaluator
        operator_greater_Array GDNativePtrOperatorEvaluator
        operator_greater_equal_Array GDNativePtrOperatorEvaluator
        operator_add_Array GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        }

var globalArrayMethodBindings arrayMethodBindings

func arrayInitBindings() {
    globalArrayMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, 0)
    globalArrayMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, 1)
    globalArrayMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, 2)
    globalArrayMethodBindings.constructor_3 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, 3)
    globalArrayMethodBindings.constructor_4 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, 4)
    globalArrayMethodBindings.constructor_5 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, 5)
    globalArrayMethodBindings.constructor_6 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, 6)
    globalArrayMethodBindings.constructor_7 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, 7)
    globalArrayMethodBindings.constructor_8 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, 8)
    globalArrayMethodBindings.constructor_9 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, 9)
    globalArrayMethodBindings.constructor_10 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, 10)
    globalArrayMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY)
    globalArrayMethodBindings.method_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "size", 3173160232)
    globalArrayMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "is_empty", 3918633141)
    globalArrayMethodBindings.method_clear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "clear", 3218959716)
    globalArrayMethodBindings.method_hash = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "hash", 3173160232)
    globalArrayMethodBindings.method_push_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "push_back", 3316032543)
    globalArrayMethodBindings.method_push_front = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "push_front", 3316032543)
    globalArrayMethodBindings.method_append = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "append", 3316032543)
    globalArrayMethodBindings.method_append_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "append_array", 2307260970)
    globalArrayMethodBindings.method_resize = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "resize", 848867239)
    globalArrayMethodBindings.method_insert = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "insert", 3176316662)
    globalArrayMethodBindings.method_remove_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "remove_at", 2823966027)
    globalArrayMethodBindings.method_fill = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "fill", 3316032543)
    globalArrayMethodBindings.method_erase = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "erase", 3316032543)
    globalArrayMethodBindings.method_front = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "front", 1460142086)
    globalArrayMethodBindings.method_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "back", 1460142086)
    globalArrayMethodBindings.method_find = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "find", 2336346817)
    globalArrayMethodBindings.method_rfind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "rfind", 2336346817)
    globalArrayMethodBindings.method_find_last = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "find_last", 1481661226)
    globalArrayMethodBindings.method_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "count", 1481661226)
    globalArrayMethodBindings.method_has = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "has", 3680194679)
    globalArrayMethodBindings.method_pop_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "pop_back", 1321915136)
    globalArrayMethodBindings.method_pop_front = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "pop_front", 1321915136)
    globalArrayMethodBindings.method_pop_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "pop_at", 3518259424)
    globalArrayMethodBindings.method_sort = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "sort", 3218959716)
    globalArrayMethodBindings.method_sort_custom = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "sort_custom", 3470848906)
    globalArrayMethodBindings.method_shuffle = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "shuffle", 3218959716)
    globalArrayMethodBindings.method_bsearch = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "bsearch", 2634019015)
    globalArrayMethodBindings.method_bsearch_custom = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "bsearch_custom", 135832563)
    globalArrayMethodBindings.method_reverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "reverse", 3218959716)
    globalArrayMethodBindings.method_duplicate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "duplicate", 636440122)
    globalArrayMethodBindings.method_slice = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "slice", 1393718243)
    globalArrayMethodBindings.method_filter = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "filter", 4075186556)
    globalArrayMethodBindings.method_map = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "map", 4075186556)
    globalArrayMethodBindings.method_reduce = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "reduce", 4272450342)
    globalArrayMethodBindings.method_any = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "any", 4129521963)
    globalArrayMethodBindings.method_all = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "all", 4129521963)
    globalArrayMethodBindings.method_max = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "max", 1460142086)
    globalArrayMethodBindings.method_min = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY, "min", 1460142086)
    globalArrayMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY)
    globalArrayMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY)
    globalArrayMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY)
    globalArrayMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY)
    globalArrayMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_ARRAY)
    globalArrayMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalArrayMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalArrayMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_ARRAY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalArrayMethodBindings.operator_equal_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalArrayMethodBindings.operator_not_equal_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalArrayMethodBindings.operator_less_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS, GDNATIVE_VARIANT_TYPE_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalArrayMethodBindings.operator_less_equal_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_LESS_EQUAL, GDNATIVE_VARIANT_TYPE_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalArrayMethodBindings.operator_greater_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER, GDNATIVE_VARIANT_TYPE_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalArrayMethodBindings.operator_greater_equal_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_GREATER_EQUAL, GDNATIVE_VARIANT_TYPE_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalArrayMethodBindings.operator_add_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalArrayMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        }

func (c *Array) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewArray, index: 0
func NewArray() Array {
    cx := Array{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalArrayMethodBindings.constructor_0, ptr, )

    return cx
}
// NewArray, index: 1
func NewArrayWithArray(from Array,) Array {
    cx := Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalArrayMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewArray, index: 2
func NewArrayWithPackedByteArray(from PackedByteArray,) Array {
    cx := Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedByteArray
        args[0] = from.ptr()
        callBuiltinConstructor(globalArrayMethodBindings.constructor_2, ptr, args[0],)

    return cx
}
// NewArray, index: 3
func NewArrayWithPackedInt32Array(from PackedInt32Array,) Array {
    cx := Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedInt32Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalArrayMethodBindings.constructor_3, ptr, args[0],)

    return cx
}
// NewArray, index: 4
func NewArrayWithPackedInt64Array(from PackedInt64Array,) Array {
    cx := Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedInt64Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalArrayMethodBindings.constructor_4, ptr, args[0],)

    return cx
}
// NewArray, index: 5
func NewArrayWithPackedFloat32Array(from PackedFloat32Array,) Array {
    cx := Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedFloat32Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalArrayMethodBindings.constructor_5, ptr, args[0],)

    return cx
}
// NewArray, index: 6
func NewArrayWithPackedFloat64Array(from PackedFloat64Array,) Array {
    cx := Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedFloat64Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalArrayMethodBindings.constructor_6, ptr, args[0],)

    return cx
}
// NewArray, index: 7
func NewArrayWithPackedStringArray(from PackedStringArray,) Array {
    cx := Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedStringArray
        args[0] = from.ptr()
        callBuiltinConstructor(globalArrayMethodBindings.constructor_7, ptr, args[0],)

    return cx
}
// NewArray, index: 8
func NewArrayWithPackedVector2Array(from PackedVector2Array,) Array {
    cx := Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedVector2Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalArrayMethodBindings.constructor_8, ptr, args[0],)

    return cx
}
// NewArray, index: 9
func NewArrayWithPackedVector3Array(from PackedVector3Array,) Array {
    cx := Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedVector3Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalArrayMethodBindings.constructor_9, ptr, args[0],)

    return cx
}
// NewArray, index: 10
func NewArrayWithPackedColorArray(from PackedColorArray,) Array {
    cx := Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedColorArray
        args[0] = from.ptr()
        callBuiltinConstructor(globalArrayMethodBindings.constructor_10, ptr, args[0],)

    return cx
}


func (cx *Array) Destroy() {
    md := (GDNativePtrDestructor)(globalArrayMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Size() int64 {
    mb := globalArrayMethodBindings.method_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) IsEmpty() bool {
    mb := globalArrayMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) Clear()  {
    mb := globalArrayMethodBindings.method_clear

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Hash() int64 {
    mb := globalArrayMethodBindings.method_hash

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) PushBack(value Variant,)  {
    mb := globalArrayMethodBindings.method_push_back

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* PushFront : push_front
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) PushFront(value Variant,)  {
    mb := globalArrayMethodBindings.method_push_front

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) Append(value Variant,)  {
    mb := globalArrayMethodBindings.method_append

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) AppendArray(array Array,)  {
    mb := globalArrayMethodBindings.method_append_array

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&array))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Resize(size int64,) int64 {
    mb := globalArrayMethodBindings.method_resize

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&size))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Insert(position int64,value Variant,) int64 {
    mb := globalArrayMethodBindings.method_insert

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&position))
    
    
    // VariantEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) RemoveAt(position int64,)  {
    mb := globalArrayMethodBindings.method_remove_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&position))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) Fill(value Variant,)  {
    mb := globalArrayMethodBindings.method_fill

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) Erase(value Variant,)  {
    mb := globalArrayMethodBindings.method_erase

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Front : front
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Front() Variant {
    mb := globalArrayMethodBindings.method_front

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)

    return ret
    

    
}


/* Back : back
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Back() Variant {
    mb := globalArrayMethodBindings.method_back

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)

    return ret
    

    
}


/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Find(what Variant,from int64,) int64 {
    mb := globalArrayMethodBindings.method_find

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Rfind(what Variant,from int64,) int64 {
    mb := globalArrayMethodBindings.method_rfind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&what))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* FindLast : find_last
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) FindLast(value Variant,) int64 {
    mb := globalArrayMethodBindings.method_find_last

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Count(value Variant,) int64 {
    mb := globalArrayMethodBindings.method_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) Has(value Variant,) bool {
    mb := globalArrayMethodBindings.method_has

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* PopBack : pop_back
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) PopBack() Variant {
    mb := globalArrayMethodBindings.method_pop_back

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)

    return ret
    

    
}


/* PopFront : pop_front
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) PopFront() Variant {
    mb := globalArrayMethodBindings.method_pop_front

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)

    return ret
    

    
}


/* PopAt : pop_at
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) PopAt(position int64,) Variant {
    mb := globalArrayMethodBindings.method_pop_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&position))
    
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) Sort()  {
    mb := globalArrayMethodBindings.method_sort

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* SortCustom : sort_custom
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) SortCustom(callbackFunc Callable,)  {
    mb := globalArrayMethodBindings.method_sort_custom

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // CallableEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&callbackFunc))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Shuffle : shuffle
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) Shuffle()  {
    mb := globalArrayMethodBindings.method_shuffle

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Bsearch(value Variant,before bool,) int64 {
    mb := globalArrayMethodBindings.method_bsearch

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&before))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* BsearchCustom : bsearch_custom
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) BsearchCustom(value Variant,callbackFunc Callable,before bool,) int64 {
    mb := globalArrayMethodBindings.method_bsearch_custom

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(3)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // VariantEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // CallableEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&callbackFunc))
    
    
    // BoolEncoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&before))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *Array) Reverse()  {
    mb := globalArrayMethodBindings.method_reverse

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Duplicate(deep bool,) Array {
    mb := globalArrayMethodBindings.method_duplicate

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // BoolEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&deep))
    
    

    ret := callBuiltinMethodPtrRet[Array](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Slice(begin int64,end int64,step int64,deep bool,) Array {
    mb := globalArrayMethodBindings.method_slice

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(4)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&begin))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    
    // Int64Encoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&step))
    
    
    // BoolEncoder
    args[3] = (GDNativeTypePtr)(unsafe.Pointer(&deep))
    
    

    ret := callBuiltinMethodPtrRet[Array](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Filter : filter
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Filter(method Callable,) Array {
    mb := globalArrayMethodBindings.method_filter

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // CallableEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&method))
    
    

    ret := callBuiltinMethodPtrRet[Array](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Map : map
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Map(method Callable,) Array {
    mb := globalArrayMethodBindings.method_map

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // CallableEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&method))
    
    

    ret := callBuiltinMethodPtrRet[Array](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reduce : reduce
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Reduce(method Callable,accum Variant,) Variant {
    mb := globalArrayMethodBindings.method_reduce

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // CallableEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&method))
    
    
    // VariantEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&accum))
    
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Any : any
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) Any(method Callable,) bool {
    mb := globalArrayMethodBindings.method_any

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // CallableEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&method))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* All : all
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) All(method Callable,) bool {
    mb := globalArrayMethodBindings.method_all

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // CallableEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&method))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Max : max
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Max() Variant {
    mb := globalArrayMethodBindings.method_max

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)

    return ret
    

    
}


/* Min : min
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Min() Variant {
    mb := globalArrayMethodBindings.method_min

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, nil)

    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *Array) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *Array) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *Array) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// In_Dictionary operator
func (cx *Array) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_in_Dictionary, lt, rt)
    }
// Equal_Array operator
func (cx *Array) Equal_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_equal_Array, lt, rt)
    }
// Not_equal_Array operator
func (cx *Array) Not_equal_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_not_equal_Array, lt, rt)
    }
// Less_Array operator
func (cx *Array) Less_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_less_Array, lt, rt)
    }
// Less_equal_Array operator
func (cx *Array) Less_equal_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_less_equal_Array, lt, rt)
    }
// Greater_Array operator
func (cx *Array) Greater_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_greater_Array, lt, rt)
    }
// Greater_equal_Array operator
func (cx *Array) Greater_equal_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_greater_equal_Array, lt, rt)
    }
// Add_Array operator
func (cx *Array) Add_Array(right Array) Array {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[Array](globalArrayMethodBindings.operator_add_Array, lt, rt)
    }
// In_Array operator
func (cx *Array) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_in_Array, lt, rt)
    }
/*
 * PackedByteArray
 * indexingReturnType: int
 * isKeyed: true
 * hasDestructor: true
 */
type PackedByteArray struct {
    opaque [16]uint8
}

type packedByteArrayMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_size GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_set GDNativePtrBuiltInMethod
    method_push_back GDNativePtrBuiltInMethod
    method_append GDNativePtrBuiltInMethod
    method_append_array GDNativePtrBuiltInMethod
    method_remove_at GDNativePtrBuiltInMethod
    method_insert GDNativePtrBuiltInMethod
    method_fill GDNativePtrBuiltInMethod
    method_resize GDNativePtrBuiltInMethod
    method_clear GDNativePtrBuiltInMethod
    method_has GDNativePtrBuiltInMethod
    method_reverse GDNativePtrBuiltInMethod
    method_slice GDNativePtrBuiltInMethod
    method_sort GDNativePtrBuiltInMethod
    method_bsearch GDNativePtrBuiltInMethod
    method_duplicate GDNativePtrBuiltInMethod
    method_find GDNativePtrBuiltInMethod
    method_rfind GDNativePtrBuiltInMethod
    method_count GDNativePtrBuiltInMethod
    method_get_string_from_ascii GDNativePtrBuiltInMethod
    method_get_string_from_utf8 GDNativePtrBuiltInMethod
    method_get_string_from_utf16 GDNativePtrBuiltInMethod
    method_get_string_from_utf32 GDNativePtrBuiltInMethod
    method_hex_encode GDNativePtrBuiltInMethod
    method_compress GDNativePtrBuiltInMethod
    method_decompress GDNativePtrBuiltInMethod
    method_decompress_dynamic GDNativePtrBuiltInMethod
    method_decode_u8 GDNativePtrBuiltInMethod
    method_decode_s8 GDNativePtrBuiltInMethod
    method_decode_u16 GDNativePtrBuiltInMethod
    method_decode_s16 GDNativePtrBuiltInMethod
    method_decode_u32 GDNativePtrBuiltInMethod
    method_decode_s32 GDNativePtrBuiltInMethod
    method_decode_u64 GDNativePtrBuiltInMethod
    method_decode_s64 GDNativePtrBuiltInMethod
    method_decode_half GDNativePtrBuiltInMethod
    method_decode_float GDNativePtrBuiltInMethod
    method_decode_double GDNativePtrBuiltInMethod
    method_has_encoded_var GDNativePtrBuiltInMethod
    method_decode_var GDNativePtrBuiltInMethod
    method_decode_var_size GDNativePtrBuiltInMethod
    method_to_int32_array GDNativePtrBuiltInMethod
    method_to_int64_array GDNativePtrBuiltInMethod
    method_to_float32_array GDNativePtrBuiltInMethod
    method_to_float64_array GDNativePtrBuiltInMethod
    method_encode_u8 GDNativePtrBuiltInMethod
    method_encode_s8 GDNativePtrBuiltInMethod
    method_encode_u16 GDNativePtrBuiltInMethod
    method_encode_s16 GDNativePtrBuiltInMethod
    method_encode_u32 GDNativePtrBuiltInMethod
    method_encode_s32 GDNativePtrBuiltInMethod
    method_encode_u64 GDNativePtrBuiltInMethod
    method_encode_s64 GDNativePtrBuiltInMethod
    method_encode_half GDNativePtrBuiltInMethod
    method_encode_float GDNativePtrBuiltInMethod
    method_encode_double GDNativePtrBuiltInMethod
    method_encode_var GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_equal_PackedByteArray GDNativePtrOperatorEvaluator
        operator_not_equal_PackedByteArray GDNativePtrOperatorEvaluator
        operator_add_PackedByteArray GDNativePtrOperatorEvaluator
        }

var globalPackedByteArrayMethodBindings packedByteArrayMethodBindings

func packedByteArrayInitBindings() {
    globalPackedByteArrayMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, 0)
    globalPackedByteArrayMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, 1)
    globalPackedByteArrayMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, 2)
    globalPackedByteArrayMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY)
    globalPackedByteArrayMethodBindings.method_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "size", 3173160232)
    globalPackedByteArrayMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "is_empty", 3918633141)
    globalPackedByteArrayMethodBindings.method_set = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "set", 3638975848)
    globalPackedByteArrayMethodBindings.method_push_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "push_back", 694024632)
    globalPackedByteArrayMethodBindings.method_append = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "append", 694024632)
    globalPackedByteArrayMethodBindings.method_append_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "append_array", 791097111)
    globalPackedByteArrayMethodBindings.method_remove_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "remove_at", 2823966027)
    globalPackedByteArrayMethodBindings.method_insert = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "insert", 1487112728)
    globalPackedByteArrayMethodBindings.method_fill = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "fill", 2823966027)
    globalPackedByteArrayMethodBindings.method_resize = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "resize", 848867239)
    globalPackedByteArrayMethodBindings.method_clear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "clear", 3218959716)
    globalPackedByteArrayMethodBindings.method_has = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "has", 931488181)
    globalPackedByteArrayMethodBindings.method_reverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "reverse", 3218959716)
    globalPackedByteArrayMethodBindings.method_slice = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "slice", 2278869132)
    globalPackedByteArrayMethodBindings.method_sort = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "sort", 3218959716)
    globalPackedByteArrayMethodBindings.method_bsearch = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "bsearch", 3380005890)
    globalPackedByteArrayMethodBindings.method_duplicate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "duplicate", 851781288)
    globalPackedByteArrayMethodBindings.method_find = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "find", 2984303840)
    globalPackedByteArrayMethodBindings.method_rfind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "rfind", 2984303840)
    globalPackedByteArrayMethodBindings.method_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "count", 4103005248)
    globalPackedByteArrayMethodBindings.method_get_string_from_ascii = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "get_string_from_ascii", 3942272618)
    globalPackedByteArrayMethodBindings.method_get_string_from_utf8 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "get_string_from_utf8", 3942272618)
    globalPackedByteArrayMethodBindings.method_get_string_from_utf16 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "get_string_from_utf16", 3942272618)
    globalPackedByteArrayMethodBindings.method_get_string_from_utf32 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "get_string_from_utf32", 3942272618)
    globalPackedByteArrayMethodBindings.method_hex_encode = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "hex_encode", 3942272618)
    globalPackedByteArrayMethodBindings.method_compress = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "compress", 1845905913)
    globalPackedByteArrayMethodBindings.method_decompress = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decompress", 2278869132)
    globalPackedByteArrayMethodBindings.method_decompress_dynamic = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decompress_dynamic", 2278869132)
    globalPackedByteArrayMethodBindings.method_decode_u8 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_u8", 4103005248)
    globalPackedByteArrayMethodBindings.method_decode_s8 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_s8", 4103005248)
    globalPackedByteArrayMethodBindings.method_decode_u16 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_u16", 4103005248)
    globalPackedByteArrayMethodBindings.method_decode_s16 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_s16", 4103005248)
    globalPackedByteArrayMethodBindings.method_decode_u32 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_u32", 4103005248)
    globalPackedByteArrayMethodBindings.method_decode_s32 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_s32", 4103005248)
    globalPackedByteArrayMethodBindings.method_decode_u64 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_u64", 4103005248)
    globalPackedByteArrayMethodBindings.method_decode_s64 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_s64", 4103005248)
    globalPackedByteArrayMethodBindings.method_decode_half = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_half", 1401583798)
    globalPackedByteArrayMethodBindings.method_decode_float = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_float", 1401583798)
    globalPackedByteArrayMethodBindings.method_decode_double = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_double", 1401583798)
    globalPackedByteArrayMethodBindings.method_has_encoded_var = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "has_encoded_var", 2914632957)
    globalPackedByteArrayMethodBindings.method_decode_var = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_var", 1740420038)
    globalPackedByteArrayMethodBindings.method_decode_var_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "decode_var_size", 954237325)
    globalPackedByteArrayMethodBindings.method_to_int32_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "to_int32_array", 3158844420)
    globalPackedByteArrayMethodBindings.method_to_int64_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "to_int64_array", 1961294120)
    globalPackedByteArrayMethodBindings.method_to_float32_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "to_float32_array", 3575107827)
    globalPackedByteArrayMethodBindings.method_to_float64_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "to_float64_array", 1627308337)
    globalPackedByteArrayMethodBindings.method_encode_u8 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_u8", 3638975848)
    globalPackedByteArrayMethodBindings.method_encode_s8 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_s8", 3638975848)
    globalPackedByteArrayMethodBindings.method_encode_u16 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_u16", 3638975848)
    globalPackedByteArrayMethodBindings.method_encode_s16 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_s16", 3638975848)
    globalPackedByteArrayMethodBindings.method_encode_u32 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_u32", 3638975848)
    globalPackedByteArrayMethodBindings.method_encode_s32 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_s32", 3638975848)
    globalPackedByteArrayMethodBindings.method_encode_u64 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_u64", 3638975848)
    globalPackedByteArrayMethodBindings.method_encode_s64 = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_s64", 3638975848)
    globalPackedByteArrayMethodBindings.method_encode_half = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_half", 1113000516)
    globalPackedByteArrayMethodBindings.method_encode_float = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_float", 1113000516)
    globalPackedByteArrayMethodBindings.method_encode_double = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_double", 1113000516)
    globalPackedByteArrayMethodBindings.method_encode_var = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, "encode_var", 2604460497)
    globalPackedByteArrayMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY)
    globalPackedByteArrayMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY)
    globalPackedByteArrayMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY)
    globalPackedByteArrayMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY)
    globalPackedByteArrayMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY)
    globalPackedByteArrayMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedByteArrayMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedByteArrayMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalPackedByteArrayMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalPackedByteArrayMethodBindings.operator_equal_PackedByteArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY)
        globalPackedByteArrayMethodBindings.operator_not_equal_PackedByteArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY)
        globalPackedByteArrayMethodBindings.operator_add_PackedByteArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_BYTE_ARRAY)
        }

func (c *PackedByteArray) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedByteArray, index: 0
func NewPackedByteArray() PackedByteArray {
    cx := PackedByteArray{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalPackedByteArrayMethodBindings.constructor_0, ptr, )

    return cx
}
// NewPackedByteArray, index: 1
func NewPackedByteArrayWithPackedByteArray(from PackedByteArray,) PackedByteArray {
    cx := PackedByteArray{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedByteArray
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedByteArrayMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewPackedByteArray, index: 2
func NewPackedByteArrayWithArray(from Array,) PackedByteArray {
    cx := PackedByteArray{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedByteArrayMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *PackedByteArray) Destroy() {
    md := (GDNativePtrDestructor)(globalPackedByteArrayMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Size() int64 {
    mb := globalPackedByteArrayMethodBindings.method_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) IsEmpty() bool {
    mb := globalPackedByteArrayMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) Set(index int64,value int64,)  {
    mb := globalPackedByteArrayMethodBindings.method_set

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) PushBack(value int64,) bool {
    mb := globalPackedByteArrayMethodBindings.method_push_back

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) Append(value int64,) bool {
    mb := globalPackedByteArrayMethodBindings.method_append

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) AppendArray(array PackedByteArray,)  {
    mb := globalPackedByteArrayMethodBindings.method_append_array

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PackedByteArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&array))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) RemoveAt(index int64,)  {
    mb := globalPackedByteArrayMethodBindings.method_remove_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Insert(at_index int64,value int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_insert

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&at_index))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) Fill(value int64,)  {
    mb := globalPackedByteArrayMethodBindings.method_fill

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Resize(new_size int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_resize

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&new_size))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) Clear()  {
    mb := globalPackedByteArrayMethodBindings.method_clear

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) Has(value int64,) bool {
    mb := globalPackedByteArrayMethodBindings.method_has

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) Reverse()  {
    mb := globalPackedByteArrayMethodBindings.method_reverse

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Slice(begin int64,end int64,) PackedByteArray {
    mb := globalPackedByteArrayMethodBindings.method_slice

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&begin))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) Sort()  {
    mb := globalPackedByteArrayMethodBindings.method_sort

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Bsearch(value int64,before bool,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_bsearch

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&before))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Duplicate() PackedByteArray {
    mb := globalPackedByteArrayMethodBindings.method_duplicate

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Find(value int64,from int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_find

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Rfind(value int64,from int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_rfind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Count(value int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* GetStringFromAscii : get_string_from_ascii
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromAscii() String {
    mb := globalPackedByteArrayMethodBindings.method_get_string_from_ascii

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* GetStringFromUtf8 : get_string_from_utf8
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromUtf8() String {
    mb := globalPackedByteArrayMethodBindings.method_get_string_from_utf8

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* GetStringFromUtf16 : get_string_from_utf16
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromUtf16() String {
    mb := globalPackedByteArrayMethodBindings.method_get_string_from_utf16

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* GetStringFromUtf32 : get_string_from_utf32
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromUtf32() String {
    mb := globalPackedByteArrayMethodBindings.method_get_string_from_utf32

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* HexEncode : hex_encode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) HexEncode() String {
    mb := globalPackedByteArrayMethodBindings.method_hex_encode

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[String](mb, bx, nil)

    return ret
    

    
}


/* Compress : compress
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Compress(compression_mode int64,) PackedByteArray {
    mb := globalPackedByteArrayMethodBindings.method_compress

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&compression_mode))
    
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Decompress : decompress
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Decompress(buffer_size int64,compression_mode int64,) PackedByteArray {
    mb := globalPackedByteArrayMethodBindings.method_decompress

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&buffer_size))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&compression_mode))
    
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecompressDynamic : decompress_dynamic
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) DecompressDynamic(max_output_size int64,compression_mode int64,) PackedByteArray {
    mb := globalPackedByteArrayMethodBindings.method_decompress_dynamic

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&max_output_size))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&compression_mode))
    
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeU8 : decode_u8
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeU8(byte_offset int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_decode_u8

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeS8 : decode_s8
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeS8(byte_offset int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_decode_s8

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeU16 : decode_u16
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeU16(byte_offset int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_decode_u16

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeS16 : decode_s16
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeS16(byte_offset int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_decode_s16

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeU32 : decode_u32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeU32(byte_offset int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_decode_u32

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeS32 : decode_s32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeS32(byte_offset int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_decode_s32

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeU64 : decode_u64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeU64(byte_offset int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_decode_u64

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeS64 : decode_s64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeS64(byte_offset int64,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_decode_s64

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeHalf : decode_half
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *PackedByteArray) DecodeHalf(byte_offset int64,) float32 {
    mb := globalPackedByteArrayMethodBindings.method_decode_half

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeFloat : decode_float
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *PackedByteArray) DecodeFloat(byte_offset int64,) float32 {
    mb := globalPackedByteArrayMethodBindings.method_decode_float

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeDouble : decode_double
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *PackedByteArray) DecodeDouble(byte_offset int64,) float32 {
    mb := globalPackedByteArrayMethodBindings.method_decode_double

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    

    ret := callBuiltinMethodPtrRet[float32](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* HasEncodedVar : has_encoded_var
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) HasEncodedVar(byte_offset int64,allow_objects bool,) bool {
    mb := globalPackedByteArrayMethodBindings.method_has_encoded_var

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&allow_objects))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeVar : decode_var
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *PackedByteArray) DecodeVar(byte_offset int64,allow_objects bool,) Variant {
    mb := globalPackedByteArrayMethodBindings.method_decode_var

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&allow_objects))
    
    

    ret := callBuiltinMethodPtrRet[Variant](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* DecodeVarSize : decode_var_size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeVarSize(byte_offset int64,allow_objects bool,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_decode_var_size

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&allow_objects))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ToInt32Array : to_int32_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt32Array) -> PackedInt32Array
 */
func (cx *PackedByteArray) ToInt32Array() PackedInt32Array {
    mb := globalPackedByteArrayMethodBindings.method_to_int32_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedInt32Array](mb, bx, nil)

    return ret
    

    
}


/* ToInt64Array : to_int64_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt64Array) -> PackedInt64Array
 */
func (cx *PackedByteArray) ToInt64Array() PackedInt64Array {
    mb := globalPackedByteArrayMethodBindings.method_to_int64_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedInt64Array](mb, bx, nil)

    return ret
    

    
}


/* ToFloat32Array : to_float32_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat32Array) -> PackedFloat32Array
 */
func (cx *PackedByteArray) ToFloat32Array() PackedFloat32Array {
    mb := globalPackedByteArrayMethodBindings.method_to_float32_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedFloat32Array](mb, bx, nil)

    return ret
    

    
}


/* ToFloat64Array : to_float64_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *PackedByteArray) ToFloat64Array() PackedFloat64Array {
    mb := globalPackedByteArrayMethodBindings.method_to_float64_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, nil)

    return ret
    

    
}


/* EncodeU8 : encode_u8
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) EncodeU8(byte_offset int64,value int64,)  {
    mb := globalPackedByteArrayMethodBindings.method_encode_u8

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* EncodeS8 : encode_s8
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) EncodeS8(byte_offset int64,value int64,)  {
    mb := globalPackedByteArrayMethodBindings.method_encode_s8

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* EncodeU16 : encode_u16
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) EncodeU16(byte_offset int64,value int64,)  {
    mb := globalPackedByteArrayMethodBindings.method_encode_u16

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* EncodeS16 : encode_s16
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) EncodeS16(byte_offset int64,value int64,)  {
    mb := globalPackedByteArrayMethodBindings.method_encode_s16

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* EncodeU32 : encode_u32
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) EncodeU32(byte_offset int64,value int64,)  {
    mb := globalPackedByteArrayMethodBindings.method_encode_u32

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* EncodeS32 : encode_s32
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) EncodeS32(byte_offset int64,value int64,)  {
    mb := globalPackedByteArrayMethodBindings.method_encode_s32

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* EncodeU64 : encode_u64
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) EncodeU64(byte_offset int64,value int64,)  {
    mb := globalPackedByteArrayMethodBindings.method_encode_u64

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* EncodeS64 : encode_s64
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) EncodeS64(byte_offset int64,value int64,)  {
    mb := globalPackedByteArrayMethodBindings.method_encode_s64

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* EncodeHalf : encode_half
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) EncodeHalf(byte_offset int64,value float32,)  {
    mb := globalPackedByteArrayMethodBindings.method_encode_half

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* EncodeFloat : encode_float
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) EncodeFloat(byte_offset int64,value float32,)  {
    mb := globalPackedByteArrayMethodBindings.method_encode_float

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* EncodeDouble : encode_double
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedByteArray) EncodeDouble(byte_offset int64,value float32,)  {
    mb := globalPackedByteArrayMethodBindings.method_encode_double

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* EncodeVar : encode_var
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) EncodeVar(byte_offset int64,value Variant,allow_objects bool,) int64 {
    mb := globalPackedByteArrayMethodBindings.method_encode_var

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(3)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&byte_offset))
    
    
    // VariantEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // BoolEncoder
    args[2] = (GDNativeTypePtr)(unsafe.Pointer(&allow_objects))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *PackedByteArray) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *PackedByteArray) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *PackedByteArray) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// In_Dictionary operator
func (cx *PackedByteArray) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *PackedByteArray) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_in_Array, lt, rt)
    }
// Equal_PackedByteArray operator
func (cx *PackedByteArray) Equal_PackedByteArray(right PackedByteArray) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_equal_PackedByteArray, lt, rt)
    }
// Not_equal_PackedByteArray operator
func (cx *PackedByteArray) Not_equal_PackedByteArray(right PackedByteArray) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_not_equal_PackedByteArray, lt, rt)
    }
// Add_PackedByteArray operator
func (cx *PackedByteArray) Add_PackedByteArray(right PackedByteArray) PackedByteArray {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedByteArray](globalPackedByteArrayMethodBindings.operator_add_PackedByteArray, lt, rt)
    }
/*
 * PackedInt32Array
 * indexingReturnType: int
 * isKeyed: true
 * hasDestructor: true
 */
type PackedInt32Array struct {
    opaque [16]uint8
}

type packedInt32ArrayMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_size GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_set GDNativePtrBuiltInMethod
    method_push_back GDNativePtrBuiltInMethod
    method_append GDNativePtrBuiltInMethod
    method_append_array GDNativePtrBuiltInMethod
    method_remove_at GDNativePtrBuiltInMethod
    method_insert GDNativePtrBuiltInMethod
    method_fill GDNativePtrBuiltInMethod
    method_resize GDNativePtrBuiltInMethod
    method_clear GDNativePtrBuiltInMethod
    method_has GDNativePtrBuiltInMethod
    method_reverse GDNativePtrBuiltInMethod
    method_slice GDNativePtrBuiltInMethod
    method_to_byte_array GDNativePtrBuiltInMethod
    method_sort GDNativePtrBuiltInMethod
    method_bsearch GDNativePtrBuiltInMethod
    method_duplicate GDNativePtrBuiltInMethod
    method_find GDNativePtrBuiltInMethod
    method_rfind GDNativePtrBuiltInMethod
    method_count GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_equal_PackedInt32Array GDNativePtrOperatorEvaluator
        operator_not_equal_PackedInt32Array GDNativePtrOperatorEvaluator
        operator_add_PackedInt32Array GDNativePtrOperatorEvaluator
        }

var globalPackedInt32ArrayMethodBindings packedInt32ArrayMethodBindings

func packedInt32ArrayInitBindings() {
    globalPackedInt32ArrayMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, 0)
    globalPackedInt32ArrayMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, 1)
    globalPackedInt32ArrayMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, 2)
    globalPackedInt32ArrayMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY)
    globalPackedInt32ArrayMethodBindings.method_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "size", 3173160232)
    globalPackedInt32ArrayMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "is_empty", 3918633141)
    globalPackedInt32ArrayMethodBindings.method_set = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "set", 3638975848)
    globalPackedInt32ArrayMethodBindings.method_push_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "push_back", 694024632)
    globalPackedInt32ArrayMethodBindings.method_append = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "append", 694024632)
    globalPackedInt32ArrayMethodBindings.method_append_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "append_array", 1087733270)
    globalPackedInt32ArrayMethodBindings.method_remove_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "remove_at", 2823966027)
    globalPackedInt32ArrayMethodBindings.method_insert = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "insert", 1487112728)
    globalPackedInt32ArrayMethodBindings.method_fill = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "fill", 2823966027)
    globalPackedInt32ArrayMethodBindings.method_resize = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "resize", 848867239)
    globalPackedInt32ArrayMethodBindings.method_clear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "clear", 3218959716)
    globalPackedInt32ArrayMethodBindings.method_has = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "has", 931488181)
    globalPackedInt32ArrayMethodBindings.method_reverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "reverse", 3218959716)
    globalPackedInt32ArrayMethodBindings.method_slice = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "slice", 1216021098)
    globalPackedInt32ArrayMethodBindings.method_to_byte_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "to_byte_array", 247621236)
    globalPackedInt32ArrayMethodBindings.method_sort = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "sort", 3218959716)
    globalPackedInt32ArrayMethodBindings.method_bsearch = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "bsearch", 3380005890)
    globalPackedInt32ArrayMethodBindings.method_duplicate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "duplicate", 1997843129)
    globalPackedInt32ArrayMethodBindings.method_find = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "find", 2984303840)
    globalPackedInt32ArrayMethodBindings.method_rfind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "rfind", 2984303840)
    globalPackedInt32ArrayMethodBindings.method_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, "count", 4103005248)
    globalPackedInt32ArrayMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY)
    globalPackedInt32ArrayMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY)
    globalPackedInt32ArrayMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY)
    globalPackedInt32ArrayMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY)
    globalPackedInt32ArrayMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY)
    globalPackedInt32ArrayMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedInt32ArrayMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedInt32ArrayMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalPackedInt32ArrayMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalPackedInt32ArrayMethodBindings.operator_equal_PackedInt32Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY)
        globalPackedInt32ArrayMethodBindings.operator_not_equal_PackedInt32Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY)
        globalPackedInt32ArrayMethodBindings.operator_add_PackedInt32Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_INT32_ARRAY)
        }

func (c *PackedInt32Array) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedInt32Array, index: 0
func NewPackedInt32Array() PackedInt32Array {
    cx := PackedInt32Array{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalPackedInt32ArrayMethodBindings.constructor_0, ptr, )

    return cx
}
// NewPackedInt32Array, index: 1
func NewPackedInt32ArrayWithPackedInt32Array(from PackedInt32Array,) PackedInt32Array {
    cx := PackedInt32Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedInt32Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedInt32ArrayMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewPackedInt32Array, index: 2
func NewPackedInt32ArrayWithArray(from Array,) PackedInt32Array {
    cx := PackedInt32Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedInt32ArrayMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *PackedInt32Array) Destroy() {
    md := (GDNativePtrDestructor)(globalPackedInt32ArrayMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Size() int64 {
    mb := globalPackedInt32ArrayMethodBindings.method_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) IsEmpty() bool {
    mb := globalPackedInt32ArrayMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt32Array) Set(index int64,value int64,)  {
    mb := globalPackedInt32ArrayMethodBindings.method_set

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) PushBack(value int64,) bool {
    mb := globalPackedInt32ArrayMethodBindings.method_push_back

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) Append(value int64,) bool {
    mb := globalPackedInt32ArrayMethodBindings.method_append

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt32Array) AppendArray(array PackedInt32Array,)  {
    mb := globalPackedInt32ArrayMethodBindings.method_append_array

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PackedInt32ArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&array))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt32Array) RemoveAt(index int64,)  {
    mb := globalPackedInt32ArrayMethodBindings.method_remove_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Insert(at_index int64,value int64,) int64 {
    mb := globalPackedInt32ArrayMethodBindings.method_insert

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&at_index))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt32Array) Fill(value int64,)  {
    mb := globalPackedInt32ArrayMethodBindings.method_fill

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Resize(new_size int64,) int64 {
    mb := globalPackedInt32ArrayMethodBindings.method_resize

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&new_size))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt32Array) Clear()  {
    mb := globalPackedInt32ArrayMethodBindings.method_clear

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) Has(value int64,) bool {
    mb := globalPackedInt32ArrayMethodBindings.method_has

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt32Array) Reverse()  {
    mb := globalPackedInt32ArrayMethodBindings.method_reverse

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt32Array) -> PackedInt32Array
 */
func (cx *PackedInt32Array) Slice(begin int64,end int64,) PackedInt32Array {
    mb := globalPackedInt32ArrayMethodBindings.method_slice

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&begin))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    

    ret := callBuiltinMethodPtrRet[PackedInt32Array](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedInt32Array) ToByteArray() PackedByteArray {
    mb := globalPackedInt32ArrayMethodBindings.method_to_byte_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt32Array) Sort()  {
    mb := globalPackedInt32ArrayMethodBindings.method_sort

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Bsearch(value int64,before bool,) int64 {
    mb := globalPackedInt32ArrayMethodBindings.method_bsearch

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&before))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt32Array) -> PackedInt32Array
 */
func (cx *PackedInt32Array) Duplicate() PackedInt32Array {
    mb := globalPackedInt32ArrayMethodBindings.method_duplicate

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedInt32Array](mb, bx, nil)

    return ret
    

    
}


/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Find(value int64,from int64,) int64 {
    mb := globalPackedInt32ArrayMethodBindings.method_find

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Rfind(value int64,from int64,) int64 {
    mb := globalPackedInt32ArrayMethodBindings.method_rfind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Count(value int64,) int64 {
    mb := globalPackedInt32ArrayMethodBindings.method_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *PackedInt32Array) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *PackedInt32Array) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *PackedInt32Array) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// In_Dictionary operator
func (cx *PackedInt32Array) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *PackedInt32Array) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_in_Array, lt, rt)
    }
// Equal_PackedInt32Array operator
func (cx *PackedInt32Array) Equal_PackedInt32Array(right PackedInt32Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_equal_PackedInt32Array, lt, rt)
    }
// Not_equal_PackedInt32Array operator
func (cx *PackedInt32Array) Not_equal_PackedInt32Array(right PackedInt32Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_not_equal_PackedInt32Array, lt, rt)
    }
// Add_PackedInt32Array operator
func (cx *PackedInt32Array) Add_PackedInt32Array(right PackedInt32Array) PackedInt32Array {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedInt32Array](globalPackedInt32ArrayMethodBindings.operator_add_PackedInt32Array, lt, rt)
    }
/*
 * PackedInt64Array
 * indexingReturnType: int
 * isKeyed: true
 * hasDestructor: true
 */
type PackedInt64Array struct {
    opaque [16]uint8
}

type packedInt64ArrayMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_size GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_set GDNativePtrBuiltInMethod
    method_push_back GDNativePtrBuiltInMethod
    method_append GDNativePtrBuiltInMethod
    method_append_array GDNativePtrBuiltInMethod
    method_remove_at GDNativePtrBuiltInMethod
    method_insert GDNativePtrBuiltInMethod
    method_fill GDNativePtrBuiltInMethod
    method_resize GDNativePtrBuiltInMethod
    method_clear GDNativePtrBuiltInMethod
    method_has GDNativePtrBuiltInMethod
    method_reverse GDNativePtrBuiltInMethod
    method_slice GDNativePtrBuiltInMethod
    method_to_byte_array GDNativePtrBuiltInMethod
    method_sort GDNativePtrBuiltInMethod
    method_bsearch GDNativePtrBuiltInMethod
    method_duplicate GDNativePtrBuiltInMethod
    method_find GDNativePtrBuiltInMethod
    method_rfind GDNativePtrBuiltInMethod
    method_count GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_equal_PackedInt64Array GDNativePtrOperatorEvaluator
        operator_not_equal_PackedInt64Array GDNativePtrOperatorEvaluator
        operator_add_PackedInt64Array GDNativePtrOperatorEvaluator
        }

var globalPackedInt64ArrayMethodBindings packedInt64ArrayMethodBindings

func packedInt64ArrayInitBindings() {
    globalPackedInt64ArrayMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, 0)
    globalPackedInt64ArrayMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, 1)
    globalPackedInt64ArrayMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, 2)
    globalPackedInt64ArrayMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY)
    globalPackedInt64ArrayMethodBindings.method_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "size", 3173160232)
    globalPackedInt64ArrayMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "is_empty", 3918633141)
    globalPackedInt64ArrayMethodBindings.method_set = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "set", 3638975848)
    globalPackedInt64ArrayMethodBindings.method_push_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "push_back", 694024632)
    globalPackedInt64ArrayMethodBindings.method_append = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "append", 694024632)
    globalPackedInt64ArrayMethodBindings.method_append_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "append_array", 2090311302)
    globalPackedInt64ArrayMethodBindings.method_remove_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "remove_at", 2823966027)
    globalPackedInt64ArrayMethodBindings.method_insert = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "insert", 1487112728)
    globalPackedInt64ArrayMethodBindings.method_fill = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "fill", 2823966027)
    globalPackedInt64ArrayMethodBindings.method_resize = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "resize", 848867239)
    globalPackedInt64ArrayMethodBindings.method_clear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "clear", 3218959716)
    globalPackedInt64ArrayMethodBindings.method_has = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "has", 931488181)
    globalPackedInt64ArrayMethodBindings.method_reverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "reverse", 3218959716)
    globalPackedInt64ArrayMethodBindings.method_slice = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "slice", 1726550804)
    globalPackedInt64ArrayMethodBindings.method_to_byte_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "to_byte_array", 247621236)
    globalPackedInt64ArrayMethodBindings.method_sort = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "sort", 3218959716)
    globalPackedInt64ArrayMethodBindings.method_bsearch = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "bsearch", 3380005890)
    globalPackedInt64ArrayMethodBindings.method_duplicate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "duplicate", 2376370016)
    globalPackedInt64ArrayMethodBindings.method_find = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "find", 2984303840)
    globalPackedInt64ArrayMethodBindings.method_rfind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "rfind", 2984303840)
    globalPackedInt64ArrayMethodBindings.method_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, "count", 4103005248)
    globalPackedInt64ArrayMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY)
    globalPackedInt64ArrayMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY)
    globalPackedInt64ArrayMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY)
    globalPackedInt64ArrayMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY)
    globalPackedInt64ArrayMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY)
    globalPackedInt64ArrayMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedInt64ArrayMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedInt64ArrayMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalPackedInt64ArrayMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalPackedInt64ArrayMethodBindings.operator_equal_PackedInt64Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY)
        globalPackedInt64ArrayMethodBindings.operator_not_equal_PackedInt64Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY)
        globalPackedInt64ArrayMethodBindings.operator_add_PackedInt64Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_INT64_ARRAY)
        }

func (c *PackedInt64Array) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedInt64Array, index: 0
func NewPackedInt64Array() PackedInt64Array {
    cx := PackedInt64Array{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalPackedInt64ArrayMethodBindings.constructor_0, ptr, )

    return cx
}
// NewPackedInt64Array, index: 1
func NewPackedInt64ArrayWithPackedInt64Array(from PackedInt64Array,) PackedInt64Array {
    cx := PackedInt64Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedInt64Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedInt64ArrayMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewPackedInt64Array, index: 2
func NewPackedInt64ArrayWithArray(from Array,) PackedInt64Array {
    cx := PackedInt64Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedInt64ArrayMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *PackedInt64Array) Destroy() {
    md := (GDNativePtrDestructor)(globalPackedInt64ArrayMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Size() int64 {
    mb := globalPackedInt64ArrayMethodBindings.method_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) IsEmpty() bool {
    mb := globalPackedInt64ArrayMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt64Array) Set(index int64,value int64,)  {
    mb := globalPackedInt64ArrayMethodBindings.method_set

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) PushBack(value int64,) bool {
    mb := globalPackedInt64ArrayMethodBindings.method_push_back

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) Append(value int64,) bool {
    mb := globalPackedInt64ArrayMethodBindings.method_append

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt64Array) AppendArray(array PackedInt64Array,)  {
    mb := globalPackedInt64ArrayMethodBindings.method_append_array

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PackedInt64ArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&array))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt64Array) RemoveAt(index int64,)  {
    mb := globalPackedInt64ArrayMethodBindings.method_remove_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Insert(at_index int64,value int64,) int64 {
    mb := globalPackedInt64ArrayMethodBindings.method_insert

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&at_index))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt64Array) Fill(value int64,)  {
    mb := globalPackedInt64ArrayMethodBindings.method_fill

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Resize(new_size int64,) int64 {
    mb := globalPackedInt64ArrayMethodBindings.method_resize

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&new_size))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt64Array) Clear()  {
    mb := globalPackedInt64ArrayMethodBindings.method_clear

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) Has(value int64,) bool {
    mb := globalPackedInt64ArrayMethodBindings.method_has

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt64Array) Reverse()  {
    mb := globalPackedInt64ArrayMethodBindings.method_reverse

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt64Array) -> PackedInt64Array
 */
func (cx *PackedInt64Array) Slice(begin int64,end int64,) PackedInt64Array {
    mb := globalPackedInt64ArrayMethodBindings.method_slice

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&begin))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    

    ret := callBuiltinMethodPtrRet[PackedInt64Array](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedInt64Array) ToByteArray() PackedByteArray {
    mb := globalPackedInt64ArrayMethodBindings.method_to_byte_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedInt64Array) Sort()  {
    mb := globalPackedInt64ArrayMethodBindings.method_sort

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Bsearch(value int64,before bool,) int64 {
    mb := globalPackedInt64ArrayMethodBindings.method_bsearch

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&before))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt64Array) -> PackedInt64Array
 */
func (cx *PackedInt64Array) Duplicate() PackedInt64Array {
    mb := globalPackedInt64ArrayMethodBindings.method_duplicate

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedInt64Array](mb, bx, nil)

    return ret
    

    
}


/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Find(value int64,from int64,) int64 {
    mb := globalPackedInt64ArrayMethodBindings.method_find

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Rfind(value int64,from int64,) int64 {
    mb := globalPackedInt64ArrayMethodBindings.method_rfind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Count(value int64,) int64 {
    mb := globalPackedInt64ArrayMethodBindings.method_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *PackedInt64Array) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *PackedInt64Array) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *PackedInt64Array) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// In_Dictionary operator
func (cx *PackedInt64Array) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *PackedInt64Array) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_in_Array, lt, rt)
    }
// Equal_PackedInt64Array operator
func (cx *PackedInt64Array) Equal_PackedInt64Array(right PackedInt64Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_equal_PackedInt64Array, lt, rt)
    }
// Not_equal_PackedInt64Array operator
func (cx *PackedInt64Array) Not_equal_PackedInt64Array(right PackedInt64Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_not_equal_PackedInt64Array, lt, rt)
    }
// Add_PackedInt64Array operator
func (cx *PackedInt64Array) Add_PackedInt64Array(right PackedInt64Array) PackedInt64Array {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedInt64Array](globalPackedInt64ArrayMethodBindings.operator_add_PackedInt64Array, lt, rt)
    }
/*
 * PackedFloat32Array
 * indexingReturnType: float
 * isKeyed: true
 * hasDestructor: true
 */
type PackedFloat32Array struct {
    opaque [16]uint8
}

type packedFloat32ArrayMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_size GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_set GDNativePtrBuiltInMethod
    method_push_back GDNativePtrBuiltInMethod
    method_append GDNativePtrBuiltInMethod
    method_append_array GDNativePtrBuiltInMethod
    method_remove_at GDNativePtrBuiltInMethod
    method_insert GDNativePtrBuiltInMethod
    method_fill GDNativePtrBuiltInMethod
    method_resize GDNativePtrBuiltInMethod
    method_clear GDNativePtrBuiltInMethod
    method_has GDNativePtrBuiltInMethod
    method_reverse GDNativePtrBuiltInMethod
    method_slice GDNativePtrBuiltInMethod
    method_to_byte_array GDNativePtrBuiltInMethod
    method_sort GDNativePtrBuiltInMethod
    method_bsearch GDNativePtrBuiltInMethod
    method_duplicate GDNativePtrBuiltInMethod
    method_find GDNativePtrBuiltInMethod
    method_rfind GDNativePtrBuiltInMethod
    method_count GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_equal_PackedFloat32Array GDNativePtrOperatorEvaluator
        operator_not_equal_PackedFloat32Array GDNativePtrOperatorEvaluator
        operator_add_PackedFloat32Array GDNativePtrOperatorEvaluator
        }

var globalPackedFloat32ArrayMethodBindings packedFloat32ArrayMethodBindings

func packedFloat32ArrayInitBindings() {
    globalPackedFloat32ArrayMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, 0)
    globalPackedFloat32ArrayMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, 1)
    globalPackedFloat32ArrayMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, 2)
    globalPackedFloat32ArrayMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
    globalPackedFloat32ArrayMethodBindings.method_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "size", 3173160232)
    globalPackedFloat32ArrayMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "is_empty", 3918633141)
    globalPackedFloat32ArrayMethodBindings.method_set = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "set", 1113000516)
    globalPackedFloat32ArrayMethodBindings.method_push_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "push_back", 4094791666)
    globalPackedFloat32ArrayMethodBindings.method_append = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "append", 4094791666)
    globalPackedFloat32ArrayMethodBindings.method_append_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "append_array", 2981316639)
    globalPackedFloat32ArrayMethodBindings.method_remove_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "remove_at", 2823966027)
    globalPackedFloat32ArrayMethodBindings.method_insert = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "insert", 1379903876)
    globalPackedFloat32ArrayMethodBindings.method_fill = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "fill", 833936903)
    globalPackedFloat32ArrayMethodBindings.method_resize = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "resize", 848867239)
    globalPackedFloat32ArrayMethodBindings.method_clear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "clear", 3218959716)
    globalPackedFloat32ArrayMethodBindings.method_has = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "has", 1296369134)
    globalPackedFloat32ArrayMethodBindings.method_reverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "reverse", 3218959716)
    globalPackedFloat32ArrayMethodBindings.method_slice = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "slice", 1418229160)
    globalPackedFloat32ArrayMethodBindings.method_to_byte_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "to_byte_array", 247621236)
    globalPackedFloat32ArrayMethodBindings.method_sort = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "sort", 3218959716)
    globalPackedFloat32ArrayMethodBindings.method_bsearch = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "bsearch", 1188816338)
    globalPackedFloat32ArrayMethodBindings.method_duplicate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "duplicate", 831114784)
    globalPackedFloat32ArrayMethodBindings.method_find = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "find", 1343150241)
    globalPackedFloat32ArrayMethodBindings.method_rfind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "rfind", 1343150241)
    globalPackedFloat32ArrayMethodBindings.method_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, "count", 2859915090)
    globalPackedFloat32ArrayMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
    globalPackedFloat32ArrayMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
    globalPackedFloat32ArrayMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
    globalPackedFloat32ArrayMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
    globalPackedFloat32ArrayMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
    globalPackedFloat32ArrayMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedFloat32ArrayMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedFloat32ArrayMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalPackedFloat32ArrayMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalPackedFloat32ArrayMethodBindings.operator_equal_PackedFloat32Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
        globalPackedFloat32ArrayMethodBindings.operator_not_equal_PackedFloat32Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
        globalPackedFloat32ArrayMethodBindings.operator_add_PackedFloat32Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)
        }

func (c *PackedFloat32Array) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedFloat32Array, index: 0
func NewPackedFloat32Array() PackedFloat32Array {
    cx := PackedFloat32Array{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalPackedFloat32ArrayMethodBindings.constructor_0, ptr, )

    return cx
}
// NewPackedFloat32Array, index: 1
func NewPackedFloat32ArrayWithPackedFloat32Array(from PackedFloat32Array,) PackedFloat32Array {
    cx := PackedFloat32Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedFloat32Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedFloat32ArrayMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewPackedFloat32Array, index: 2
func NewPackedFloat32ArrayWithArray(from Array,) PackedFloat32Array {
    cx := PackedFloat32Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedFloat32ArrayMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *PackedFloat32Array) Destroy() {
    md := (GDNativePtrDestructor)(globalPackedFloat32ArrayMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Size() int64 {
    mb := globalPackedFloat32ArrayMethodBindings.method_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) IsEmpty() bool {
    mb := globalPackedFloat32ArrayMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat32Array) Set(index int64,value float32,)  {
    mb := globalPackedFloat32ArrayMethodBindings.method_set

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) PushBack(value float32,) bool {
    mb := globalPackedFloat32ArrayMethodBindings.method_push_back

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) Append(value float32,) bool {
    mb := globalPackedFloat32ArrayMethodBindings.method_append

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat32Array) AppendArray(array PackedFloat32Array,)  {
    mb := globalPackedFloat32ArrayMethodBindings.method_append_array

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PackedFloat32ArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&array))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat32Array) RemoveAt(index int64,)  {
    mb := globalPackedFloat32ArrayMethodBindings.method_remove_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Insert(at_index int64,value float32,) int64 {
    mb := globalPackedFloat32ArrayMethodBindings.method_insert

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&at_index))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat32Array) Fill(value float32,)  {
    mb := globalPackedFloat32ArrayMethodBindings.method_fill

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Resize(new_size int64,) int64 {
    mb := globalPackedFloat32ArrayMethodBindings.method_resize

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&new_size))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat32Array) Clear()  {
    mb := globalPackedFloat32ArrayMethodBindings.method_clear

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) Has(value float32,) bool {
    mb := globalPackedFloat32ArrayMethodBindings.method_has

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat32Array) Reverse()  {
    mb := globalPackedFloat32ArrayMethodBindings.method_reverse

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat32Array) -> PackedFloat32Array
 */
func (cx *PackedFloat32Array) Slice(begin int64,end int64,) PackedFloat32Array {
    mb := globalPackedFloat32ArrayMethodBindings.method_slice

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&begin))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    

    ret := callBuiltinMethodPtrRet[PackedFloat32Array](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedFloat32Array) ToByteArray() PackedByteArray {
    mb := globalPackedFloat32ArrayMethodBindings.method_to_byte_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat32Array) Sort()  {
    mb := globalPackedFloat32ArrayMethodBindings.method_sort

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Bsearch(value float32,before bool,) int64 {
    mb := globalPackedFloat32ArrayMethodBindings.method_bsearch

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&before))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat32Array) -> PackedFloat32Array
 */
func (cx *PackedFloat32Array) Duplicate() PackedFloat32Array {
    mb := globalPackedFloat32ArrayMethodBindings.method_duplicate

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedFloat32Array](mb, bx, nil)

    return ret
    

    
}


/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Find(value float32,from int64,) int64 {
    mb := globalPackedFloat32ArrayMethodBindings.method_find

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Rfind(value float32,from int64,) int64 {
    mb := globalPackedFloat32ArrayMethodBindings.method_rfind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Count(value float32,) int64 {
    mb := globalPackedFloat32ArrayMethodBindings.method_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *PackedFloat32Array) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *PackedFloat32Array) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *PackedFloat32Array) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// In_Dictionary operator
func (cx *PackedFloat32Array) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *PackedFloat32Array) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_in_Array, lt, rt)
    }
// Equal_PackedFloat32Array operator
func (cx *PackedFloat32Array) Equal_PackedFloat32Array(right PackedFloat32Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_equal_PackedFloat32Array, lt, rt)
    }
// Not_equal_PackedFloat32Array operator
func (cx *PackedFloat32Array) Not_equal_PackedFloat32Array(right PackedFloat32Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_not_equal_PackedFloat32Array, lt, rt)
    }
// Add_PackedFloat32Array operator
func (cx *PackedFloat32Array) Add_PackedFloat32Array(right PackedFloat32Array) PackedFloat32Array {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedFloat32Array](globalPackedFloat32ArrayMethodBindings.operator_add_PackedFloat32Array, lt, rt)
    }
/*
 * PackedFloat64Array
 * indexingReturnType: float
 * isKeyed: true
 * hasDestructor: true
 */
type PackedFloat64Array struct {
    opaque [16]uint8
}

type packedFloat64ArrayMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_size GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_set GDNativePtrBuiltInMethod
    method_push_back GDNativePtrBuiltInMethod
    method_append GDNativePtrBuiltInMethod
    method_append_array GDNativePtrBuiltInMethod
    method_remove_at GDNativePtrBuiltInMethod
    method_insert GDNativePtrBuiltInMethod
    method_fill GDNativePtrBuiltInMethod
    method_resize GDNativePtrBuiltInMethod
    method_clear GDNativePtrBuiltInMethod
    method_has GDNativePtrBuiltInMethod
    method_reverse GDNativePtrBuiltInMethod
    method_slice GDNativePtrBuiltInMethod
    method_to_byte_array GDNativePtrBuiltInMethod
    method_sort GDNativePtrBuiltInMethod
    method_bsearch GDNativePtrBuiltInMethod
    method_duplicate GDNativePtrBuiltInMethod
    method_find GDNativePtrBuiltInMethod
    method_rfind GDNativePtrBuiltInMethod
    method_count GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_equal_PackedFloat64Array GDNativePtrOperatorEvaluator
        operator_not_equal_PackedFloat64Array GDNativePtrOperatorEvaluator
        operator_add_PackedFloat64Array GDNativePtrOperatorEvaluator
        }

var globalPackedFloat64ArrayMethodBindings packedFloat64ArrayMethodBindings

func packedFloat64ArrayInitBindings() {
    globalPackedFloat64ArrayMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, 0)
    globalPackedFloat64ArrayMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, 1)
    globalPackedFloat64ArrayMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, 2)
    globalPackedFloat64ArrayMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
    globalPackedFloat64ArrayMethodBindings.method_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "size", 3173160232)
    globalPackedFloat64ArrayMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "is_empty", 3918633141)
    globalPackedFloat64ArrayMethodBindings.method_set = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "set", 1113000516)
    globalPackedFloat64ArrayMethodBindings.method_push_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "push_back", 4094791666)
    globalPackedFloat64ArrayMethodBindings.method_append = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "append", 4094791666)
    globalPackedFloat64ArrayMethodBindings.method_append_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "append_array", 792078629)
    globalPackedFloat64ArrayMethodBindings.method_remove_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "remove_at", 2823966027)
    globalPackedFloat64ArrayMethodBindings.method_insert = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "insert", 1379903876)
    globalPackedFloat64ArrayMethodBindings.method_fill = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "fill", 833936903)
    globalPackedFloat64ArrayMethodBindings.method_resize = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "resize", 848867239)
    globalPackedFloat64ArrayMethodBindings.method_clear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "clear", 3218959716)
    globalPackedFloat64ArrayMethodBindings.method_has = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "has", 1296369134)
    globalPackedFloat64ArrayMethodBindings.method_reverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "reverse", 3218959716)
    globalPackedFloat64ArrayMethodBindings.method_slice = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "slice", 2192974324)
    globalPackedFloat64ArrayMethodBindings.method_to_byte_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "to_byte_array", 247621236)
    globalPackedFloat64ArrayMethodBindings.method_sort = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "sort", 3218959716)
    globalPackedFloat64ArrayMethodBindings.method_bsearch = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "bsearch", 1188816338)
    globalPackedFloat64ArrayMethodBindings.method_duplicate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "duplicate", 949266573)
    globalPackedFloat64ArrayMethodBindings.method_find = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "find", 1343150241)
    globalPackedFloat64ArrayMethodBindings.method_rfind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "rfind", 1343150241)
    globalPackedFloat64ArrayMethodBindings.method_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, "count", 2859915090)
    globalPackedFloat64ArrayMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
    globalPackedFloat64ArrayMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
    globalPackedFloat64ArrayMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
    globalPackedFloat64ArrayMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
    globalPackedFloat64ArrayMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
    globalPackedFloat64ArrayMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedFloat64ArrayMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedFloat64ArrayMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalPackedFloat64ArrayMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalPackedFloat64ArrayMethodBindings.operator_equal_PackedFloat64Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
        globalPackedFloat64ArrayMethodBindings.operator_not_equal_PackedFloat64Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
        globalPackedFloat64ArrayMethodBindings.operator_add_PackedFloat64Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)
        }

func (c *PackedFloat64Array) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedFloat64Array, index: 0
func NewPackedFloat64Array() PackedFloat64Array {
    cx := PackedFloat64Array{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalPackedFloat64ArrayMethodBindings.constructor_0, ptr, )

    return cx
}
// NewPackedFloat64Array, index: 1
func NewPackedFloat64ArrayWithPackedFloat64Array(from PackedFloat64Array,) PackedFloat64Array {
    cx := PackedFloat64Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedFloat64Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedFloat64ArrayMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewPackedFloat64Array, index: 2
func NewPackedFloat64ArrayWithArray(from Array,) PackedFloat64Array {
    cx := PackedFloat64Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedFloat64ArrayMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *PackedFloat64Array) Destroy() {
    md := (GDNativePtrDestructor)(globalPackedFloat64ArrayMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Size() int64 {
    mb := globalPackedFloat64ArrayMethodBindings.method_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) IsEmpty() bool {
    mb := globalPackedFloat64ArrayMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat64Array) Set(index int64,value float32,)  {
    mb := globalPackedFloat64ArrayMethodBindings.method_set

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) PushBack(value float32,) bool {
    mb := globalPackedFloat64ArrayMethodBindings.method_push_back

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) Append(value float32,) bool {
    mb := globalPackedFloat64ArrayMethodBindings.method_append

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat64Array) AppendArray(array PackedFloat64Array,)  {
    mb := globalPackedFloat64ArrayMethodBindings.method_append_array

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PackedFloat64ArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&array))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat64Array) RemoveAt(index int64,)  {
    mb := globalPackedFloat64ArrayMethodBindings.method_remove_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Insert(at_index int64,value float32,) int64 {
    mb := globalPackedFloat64ArrayMethodBindings.method_insert

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&at_index))
    
    
    // Float32Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat64Array) Fill(value float32,)  {
    mb := globalPackedFloat64ArrayMethodBindings.method_fill

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Resize(new_size int64,) int64 {
    mb := globalPackedFloat64ArrayMethodBindings.method_resize

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&new_size))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat64Array) Clear()  {
    mb := globalPackedFloat64ArrayMethodBindings.method_clear

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) Has(value float32,) bool {
    mb := globalPackedFloat64ArrayMethodBindings.method_has

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat64Array) Reverse()  {
    mb := globalPackedFloat64ArrayMethodBindings.method_reverse

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *PackedFloat64Array) Slice(begin int64,end int64,) PackedFloat64Array {
    mb := globalPackedFloat64ArrayMethodBindings.method_slice

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&begin))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    

    ret := callBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedFloat64Array) ToByteArray() PackedByteArray {
    mb := globalPackedFloat64ArrayMethodBindings.method_to_byte_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedFloat64Array) Sort()  {
    mb := globalPackedFloat64ArrayMethodBindings.method_sort

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Bsearch(value float32,before bool,) int64 {
    mb := globalPackedFloat64ArrayMethodBindings.method_bsearch

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&before))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *PackedFloat64Array) Duplicate() PackedFloat64Array {
    mb := globalPackedFloat64ArrayMethodBindings.method_duplicate

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, nil)

    return ret
    

    
}


/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Find(value float32,from int64,) int64 {
    mb := globalPackedFloat64ArrayMethodBindings.method_find

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Rfind(value float32,from int64,) int64 {
    mb := globalPackedFloat64ArrayMethodBindings.method_rfind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Count(value float32,) int64 {
    mb := globalPackedFloat64ArrayMethodBindings.method_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Float32Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *PackedFloat64Array) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *PackedFloat64Array) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *PackedFloat64Array) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// In_Dictionary operator
func (cx *PackedFloat64Array) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *PackedFloat64Array) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_in_Array, lt, rt)
    }
// Equal_PackedFloat64Array operator
func (cx *PackedFloat64Array) Equal_PackedFloat64Array(right PackedFloat64Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_equal_PackedFloat64Array, lt, rt)
    }
// Not_equal_PackedFloat64Array operator
func (cx *PackedFloat64Array) Not_equal_PackedFloat64Array(right PackedFloat64Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_not_equal_PackedFloat64Array, lt, rt)
    }
// Add_PackedFloat64Array operator
func (cx *PackedFloat64Array) Add_PackedFloat64Array(right PackedFloat64Array) PackedFloat64Array {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedFloat64Array](globalPackedFloat64ArrayMethodBindings.operator_add_PackedFloat64Array, lt, rt)
    }
/*
 * PackedStringArray
 * indexingReturnType: String
 * isKeyed: true
 * hasDestructor: true
 */
type PackedStringArray struct {
    opaque [16]uint8
}

type packedStringArrayMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_size GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_set GDNativePtrBuiltInMethod
    method_push_back GDNativePtrBuiltInMethod
    method_append GDNativePtrBuiltInMethod
    method_append_array GDNativePtrBuiltInMethod
    method_remove_at GDNativePtrBuiltInMethod
    method_insert GDNativePtrBuiltInMethod
    method_fill GDNativePtrBuiltInMethod
    method_resize GDNativePtrBuiltInMethod
    method_clear GDNativePtrBuiltInMethod
    method_has GDNativePtrBuiltInMethod
    method_reverse GDNativePtrBuiltInMethod
    method_slice GDNativePtrBuiltInMethod
    method_to_byte_array GDNativePtrBuiltInMethod
    method_sort GDNativePtrBuiltInMethod
    method_bsearch GDNativePtrBuiltInMethod
    method_duplicate GDNativePtrBuiltInMethod
    method_find GDNativePtrBuiltInMethod
    method_rfind GDNativePtrBuiltInMethod
    method_count GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_equal_PackedStringArray GDNativePtrOperatorEvaluator
        operator_not_equal_PackedStringArray GDNativePtrOperatorEvaluator
        operator_add_PackedStringArray GDNativePtrOperatorEvaluator
        }

var globalPackedStringArrayMethodBindings packedStringArrayMethodBindings

func packedStringArrayInitBindings() {
    globalPackedStringArrayMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, 0)
    globalPackedStringArrayMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, 1)
    globalPackedStringArrayMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, 2)
    globalPackedStringArrayMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY)
    globalPackedStringArrayMethodBindings.method_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "size", 3173160232)
    globalPackedStringArrayMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "is_empty", 3918633141)
    globalPackedStringArrayMethodBindings.method_set = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "set", 725585539)
    globalPackedStringArrayMethodBindings.method_push_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "push_back", 816187996)
    globalPackedStringArrayMethodBindings.method_append = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "append", 816187996)
    globalPackedStringArrayMethodBindings.method_append_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "append_array", 1120103966)
    globalPackedStringArrayMethodBindings.method_remove_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "remove_at", 2823966027)
    globalPackedStringArrayMethodBindings.method_insert = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "insert", 2432393153)
    globalPackedStringArrayMethodBindings.method_fill = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "fill", 3174917410)
    globalPackedStringArrayMethodBindings.method_resize = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "resize", 848867239)
    globalPackedStringArrayMethodBindings.method_clear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "clear", 3218959716)
    globalPackedStringArrayMethodBindings.method_has = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "has", 2566493496)
    globalPackedStringArrayMethodBindings.method_reverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "reverse", 3218959716)
    globalPackedStringArrayMethodBindings.method_slice = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "slice", 2094601407)
    globalPackedStringArrayMethodBindings.method_to_byte_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "to_byte_array", 247621236)
    globalPackedStringArrayMethodBindings.method_sort = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "sort", 3218959716)
    globalPackedStringArrayMethodBindings.method_bsearch = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "bsearch", 328976671)
    globalPackedStringArrayMethodBindings.method_duplicate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "duplicate", 2991231410)
    globalPackedStringArrayMethodBindings.method_find = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "find", 1760645412)
    globalPackedStringArrayMethodBindings.method_rfind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "rfind", 1760645412)
    globalPackedStringArrayMethodBindings.method_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, "count", 2920860731)
    globalPackedStringArrayMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY)
    globalPackedStringArrayMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY)
    globalPackedStringArrayMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY)
    globalPackedStringArrayMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY)
    globalPackedStringArrayMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY)
    globalPackedStringArrayMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedStringArrayMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedStringArrayMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalPackedStringArrayMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalPackedStringArrayMethodBindings.operator_equal_PackedStringArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY)
        globalPackedStringArrayMethodBindings.operator_not_equal_PackedStringArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY)
        globalPackedStringArrayMethodBindings.operator_add_PackedStringArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_STRING_ARRAY)
        }

func (c *PackedStringArray) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedStringArray, index: 0
func NewPackedStringArray() PackedStringArray {
    cx := PackedStringArray{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalPackedStringArrayMethodBindings.constructor_0, ptr, )

    return cx
}
// NewPackedStringArray, index: 1
func NewPackedStringArrayWithPackedStringArray(from PackedStringArray,) PackedStringArray {
    cx := PackedStringArray{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedStringArray
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedStringArrayMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewPackedStringArray, index: 2
func NewPackedStringArrayWithArray(from Array,) PackedStringArray {
    cx := PackedStringArray{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedStringArrayMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *PackedStringArray) Destroy() {
    md := (GDNativePtrDestructor)(globalPackedStringArrayMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Size() int64 {
    mb := globalPackedStringArrayMethodBindings.method_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) IsEmpty() bool {
    mb := globalPackedStringArrayMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedStringArray) Set(index int64,value String,)  {
    mb := globalPackedStringArrayMethodBindings.method_set

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    
    // StringEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) PushBack(value String,) bool {
    mb := globalPackedStringArrayMethodBindings.method_push_back

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) Append(value String,) bool {
    mb := globalPackedStringArrayMethodBindings.method_append

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedStringArray) AppendArray(array PackedStringArray,)  {
    mb := globalPackedStringArrayMethodBindings.method_append_array

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PackedStringArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&array))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedStringArray) RemoveAt(index int64,)  {
    mb := globalPackedStringArrayMethodBindings.method_remove_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Insert(at_index int64,value String,) int64 {
    mb := globalPackedStringArrayMethodBindings.method_insert

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&at_index))
    
    
    // StringEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedStringArray) Fill(value String,)  {
    mb := globalPackedStringArrayMethodBindings.method_fill

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Resize(new_size int64,) int64 {
    mb := globalPackedStringArrayMethodBindings.method_resize

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&new_size))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedStringArray) Clear()  {
    mb := globalPackedStringArrayMethodBindings.method_clear

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) Has(value String,) bool {
    mb := globalPackedStringArrayMethodBindings.method_has

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedStringArray) Reverse()  {
    mb := globalPackedStringArrayMethodBindings.method_reverse

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *PackedStringArray) Slice(begin int64,end int64,) PackedStringArray {
    mb := globalPackedStringArrayMethodBindings.method_slice

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&begin))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    

    ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedStringArray) ToByteArray() PackedByteArray {
    mb := globalPackedStringArrayMethodBindings.method_to_byte_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedStringArray) Sort()  {
    mb := globalPackedStringArrayMethodBindings.method_sort

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Bsearch(value String,before bool,) int64 {
    mb := globalPackedStringArrayMethodBindings.method_bsearch

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&before))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *PackedStringArray) Duplicate() PackedStringArray {
    mb := globalPackedStringArrayMethodBindings.method_duplicate

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedStringArray](mb, bx, nil)

    return ret
    

    
}


/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Find(value String,from int64,) int64 {
    mb := globalPackedStringArrayMethodBindings.method_find

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Rfind(value String,from int64,) int64 {
    mb := globalPackedStringArrayMethodBindings.method_rfind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Count(value String,) int64 {
    mb := globalPackedStringArrayMethodBindings.method_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // StringEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *PackedStringArray) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *PackedStringArray) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *PackedStringArray) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// In_Dictionary operator
func (cx *PackedStringArray) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *PackedStringArray) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_in_Array, lt, rt)
    }
// Equal_PackedStringArray operator
func (cx *PackedStringArray) Equal_PackedStringArray(right PackedStringArray) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_equal_PackedStringArray, lt, rt)
    }
// Not_equal_PackedStringArray operator
func (cx *PackedStringArray) Not_equal_PackedStringArray(right PackedStringArray) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_not_equal_PackedStringArray, lt, rt)
    }
// Add_PackedStringArray operator
func (cx *PackedStringArray) Add_PackedStringArray(right PackedStringArray) PackedStringArray {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedStringArray](globalPackedStringArrayMethodBindings.operator_add_PackedStringArray, lt, rt)
    }
/*
 * PackedVector2Array
 * indexingReturnType: Vector2
 * isKeyed: true
 * hasDestructor: true
 */
type PackedVector2Array struct {
    opaque [16]uint8
}

type packedVector2ArrayMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_size GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_set GDNativePtrBuiltInMethod
    method_push_back GDNativePtrBuiltInMethod
    method_append GDNativePtrBuiltInMethod
    method_append_array GDNativePtrBuiltInMethod
    method_remove_at GDNativePtrBuiltInMethod
    method_insert GDNativePtrBuiltInMethod
    method_fill GDNativePtrBuiltInMethod
    method_resize GDNativePtrBuiltInMethod
    method_clear GDNativePtrBuiltInMethod
    method_has GDNativePtrBuiltInMethod
    method_reverse GDNativePtrBuiltInMethod
    method_slice GDNativePtrBuiltInMethod
    method_to_byte_array GDNativePtrBuiltInMethod
    method_sort GDNativePtrBuiltInMethod
    method_bsearch GDNativePtrBuiltInMethod
    method_duplicate GDNativePtrBuiltInMethod
    method_find GDNativePtrBuiltInMethod
    method_rfind GDNativePtrBuiltInMethod
    method_count GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_multiply_Transform2D GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_equal_PackedVector2Array GDNativePtrOperatorEvaluator
        operator_not_equal_PackedVector2Array GDNativePtrOperatorEvaluator
        operator_add_PackedVector2Array GDNativePtrOperatorEvaluator
        }

var globalPackedVector2ArrayMethodBindings packedVector2ArrayMethodBindings

func packedVector2ArrayInitBindings() {
    globalPackedVector2ArrayMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, 0)
    globalPackedVector2ArrayMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, 1)
    globalPackedVector2ArrayMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, 2)
    globalPackedVector2ArrayMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
    globalPackedVector2ArrayMethodBindings.method_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "size", 3173160232)
    globalPackedVector2ArrayMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "is_empty", 3918633141)
    globalPackedVector2ArrayMethodBindings.method_set = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "set", 635767250)
    globalPackedVector2ArrayMethodBindings.method_push_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "push_back", 4188891560)
    globalPackedVector2ArrayMethodBindings.method_append = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "append", 4188891560)
    globalPackedVector2ArrayMethodBindings.method_append_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "append_array", 3887534835)
    globalPackedVector2ArrayMethodBindings.method_remove_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "remove_at", 2823966027)
    globalPackedVector2ArrayMethodBindings.method_insert = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "insert", 2225629369)
    globalPackedVector2ArrayMethodBindings.method_fill = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "fill", 3790411178)
    globalPackedVector2ArrayMethodBindings.method_resize = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "resize", 848867239)
    globalPackedVector2ArrayMethodBindings.method_clear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "clear", 3218959716)
    globalPackedVector2ArrayMethodBindings.method_has = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "has", 3190634762)
    globalPackedVector2ArrayMethodBindings.method_reverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "reverse", 3218959716)
    globalPackedVector2ArrayMethodBindings.method_slice = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "slice", 3864005350)
    globalPackedVector2ArrayMethodBindings.method_to_byte_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "to_byte_array", 247621236)
    globalPackedVector2ArrayMethodBindings.method_sort = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "sort", 3218959716)
    globalPackedVector2ArrayMethodBindings.method_bsearch = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "bsearch", 3778035805)
    globalPackedVector2ArrayMethodBindings.method_duplicate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "duplicate", 3763646812)
    globalPackedVector2ArrayMethodBindings.method_find = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "find", 1469606149)
    globalPackedVector2ArrayMethodBindings.method_rfind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "rfind", 1469606149)
    globalPackedVector2ArrayMethodBindings.method_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, "count", 2798848307)
    globalPackedVector2ArrayMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
    globalPackedVector2ArrayMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
    globalPackedVector2ArrayMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
    globalPackedVector2ArrayMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
    globalPackedVector2ArrayMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
    globalPackedVector2ArrayMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedVector2ArrayMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedVector2ArrayMethodBindings.operator_multiply_Transform2D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDNATIVE_VARIANT_TYPE_TRANSFORM2D)
        globalPackedVector2ArrayMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalPackedVector2ArrayMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalPackedVector2ArrayMethodBindings.operator_equal_PackedVector2Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
        globalPackedVector2ArrayMethodBindings.operator_not_equal_PackedVector2Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
        globalPackedVector2ArrayMethodBindings.operator_add_PackedVector2Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)
        }

func (c *PackedVector2Array) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedVector2Array, index: 0
func NewPackedVector2Array() PackedVector2Array {
    cx := PackedVector2Array{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalPackedVector2ArrayMethodBindings.constructor_0, ptr, )

    return cx
}
// NewPackedVector2Array, index: 1
func NewPackedVector2ArrayWithPackedVector2Array(from PackedVector2Array,) PackedVector2Array {
    cx := PackedVector2Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedVector2Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedVector2ArrayMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewPackedVector2Array, index: 2
func NewPackedVector2ArrayWithArray(from Array,) PackedVector2Array {
    cx := PackedVector2Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedVector2ArrayMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *PackedVector2Array) Destroy() {
    md := (GDNativePtrDestructor)(globalPackedVector2ArrayMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Size() int64 {
    mb := globalPackedVector2ArrayMethodBindings.method_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) IsEmpty() bool {
    mb := globalPackedVector2ArrayMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector2Array) Set(index int64,value Vector2,)  {
    mb := globalPackedVector2ArrayMethodBindings.method_set

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    
    // Vector2Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) PushBack(value Vector2,) bool {
    mb := globalPackedVector2ArrayMethodBindings.method_push_back

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) Append(value Vector2,) bool {
    mb := globalPackedVector2ArrayMethodBindings.method_append

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector2Array) AppendArray(array PackedVector2Array,)  {
    mb := globalPackedVector2ArrayMethodBindings.method_append_array

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PackedVector2ArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&array))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector2Array) RemoveAt(index int64,)  {
    mb := globalPackedVector2ArrayMethodBindings.method_remove_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Insert(at_index int64,value Vector2,) int64 {
    mb := globalPackedVector2ArrayMethodBindings.method_insert

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&at_index))
    
    
    // Vector2Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector2Array) Fill(value Vector2,)  {
    mb := globalPackedVector2ArrayMethodBindings.method_fill

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Resize(new_size int64,) int64 {
    mb := globalPackedVector2ArrayMethodBindings.method_resize

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&new_size))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector2Array) Clear()  {
    mb := globalPackedVector2ArrayMethodBindings.method_clear

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) Has(value Vector2,) bool {
    mb := globalPackedVector2ArrayMethodBindings.method_has

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector2Array) Reverse()  {
    mb := globalPackedVector2ArrayMethodBindings.method_reverse

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector2Array) -> PackedVector2Array
 */
func (cx *PackedVector2Array) Slice(begin int64,end int64,) PackedVector2Array {
    mb := globalPackedVector2ArrayMethodBindings.method_slice

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&begin))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    

    ret := callBuiltinMethodPtrRet[PackedVector2Array](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedVector2Array) ToByteArray() PackedByteArray {
    mb := globalPackedVector2ArrayMethodBindings.method_to_byte_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector2Array) Sort()  {
    mb := globalPackedVector2ArrayMethodBindings.method_sort

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Bsearch(value Vector2,before bool,) int64 {
    mb := globalPackedVector2ArrayMethodBindings.method_bsearch

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&before))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector2Array) -> PackedVector2Array
 */
func (cx *PackedVector2Array) Duplicate() PackedVector2Array {
    mb := globalPackedVector2ArrayMethodBindings.method_duplicate

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedVector2Array](mb, bx, nil)

    return ret
    

    
}


/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Find(value Vector2,from int64,) int64 {
    mb := globalPackedVector2ArrayMethodBindings.method_find

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Rfind(value Vector2,from int64,) int64 {
    mb := globalPackedVector2ArrayMethodBindings.method_rfind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Count(value Vector2,) int64 {
    mb := globalPackedVector2ArrayMethodBindings.method_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector2Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *PackedVector2Array) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *PackedVector2Array) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *PackedVector2Array) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Multiply_Transform2D operator
func (cx *PackedVector2Array) Multiply_Transform2D(right Transform2D) PackedVector2Array {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedVector2Array](globalPackedVector2ArrayMethodBindings.operator_multiply_Transform2D, lt, rt)
    }
// In_Dictionary operator
func (cx *PackedVector2Array) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *PackedVector2Array) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_in_Array, lt, rt)
    }
// Equal_PackedVector2Array operator
func (cx *PackedVector2Array) Equal_PackedVector2Array(right PackedVector2Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_equal_PackedVector2Array, lt, rt)
    }
// Not_equal_PackedVector2Array operator
func (cx *PackedVector2Array) Not_equal_PackedVector2Array(right PackedVector2Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_not_equal_PackedVector2Array, lt, rt)
    }
// Add_PackedVector2Array operator
func (cx *PackedVector2Array) Add_PackedVector2Array(right PackedVector2Array) PackedVector2Array {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedVector2Array](globalPackedVector2ArrayMethodBindings.operator_add_PackedVector2Array, lt, rt)
    }
/*
 * PackedVector3Array
 * indexingReturnType: Vector3
 * isKeyed: true
 * hasDestructor: true
 */
type PackedVector3Array struct {
    opaque [16]uint8
}

type packedVector3ArrayMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_size GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_set GDNativePtrBuiltInMethod
    method_push_back GDNativePtrBuiltInMethod
    method_append GDNativePtrBuiltInMethod
    method_append_array GDNativePtrBuiltInMethod
    method_remove_at GDNativePtrBuiltInMethod
    method_insert GDNativePtrBuiltInMethod
    method_fill GDNativePtrBuiltInMethod
    method_resize GDNativePtrBuiltInMethod
    method_clear GDNativePtrBuiltInMethod
    method_has GDNativePtrBuiltInMethod
    method_reverse GDNativePtrBuiltInMethod
    method_slice GDNativePtrBuiltInMethod
    method_to_byte_array GDNativePtrBuiltInMethod
    method_sort GDNativePtrBuiltInMethod
    method_bsearch GDNativePtrBuiltInMethod
    method_duplicate GDNativePtrBuiltInMethod
    method_find GDNativePtrBuiltInMethod
    method_rfind GDNativePtrBuiltInMethod
    method_count GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_multiply_Transform3D GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_equal_PackedVector3Array GDNativePtrOperatorEvaluator
        operator_not_equal_PackedVector3Array GDNativePtrOperatorEvaluator
        operator_add_PackedVector3Array GDNativePtrOperatorEvaluator
        }

var globalPackedVector3ArrayMethodBindings packedVector3ArrayMethodBindings

func packedVector3ArrayInitBindings() {
    globalPackedVector3ArrayMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, 0)
    globalPackedVector3ArrayMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, 1)
    globalPackedVector3ArrayMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, 2)
    globalPackedVector3ArrayMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
    globalPackedVector3ArrayMethodBindings.method_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "size", 3173160232)
    globalPackedVector3ArrayMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "is_empty", 3918633141)
    globalPackedVector3ArrayMethodBindings.method_set = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "set", 3975343409)
    globalPackedVector3ArrayMethodBindings.method_push_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "push_back", 3295363524)
    globalPackedVector3ArrayMethodBindings.method_append = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "append", 3295363524)
    globalPackedVector3ArrayMethodBindings.method_append_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "append_array", 203538016)
    globalPackedVector3ArrayMethodBindings.method_remove_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "remove_at", 2823966027)
    globalPackedVector3ArrayMethodBindings.method_insert = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "insert", 3892262309)
    globalPackedVector3ArrayMethodBindings.method_fill = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "fill", 3726392409)
    globalPackedVector3ArrayMethodBindings.method_resize = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "resize", 848867239)
    globalPackedVector3ArrayMethodBindings.method_clear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "clear", 3218959716)
    globalPackedVector3ArrayMethodBindings.method_has = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "has", 1749054343)
    globalPackedVector3ArrayMethodBindings.method_reverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "reverse", 3218959716)
    globalPackedVector3ArrayMethodBindings.method_slice = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "slice", 2086131305)
    globalPackedVector3ArrayMethodBindings.method_to_byte_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "to_byte_array", 247621236)
    globalPackedVector3ArrayMethodBindings.method_sort = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "sort", 3218959716)
    globalPackedVector3ArrayMethodBindings.method_bsearch = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "bsearch", 219263630)
    globalPackedVector3ArrayMethodBindings.method_duplicate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "duplicate", 2754175465)
    globalPackedVector3ArrayMethodBindings.method_find = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "find", 3718155780)
    globalPackedVector3ArrayMethodBindings.method_rfind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "rfind", 3718155780)
    globalPackedVector3ArrayMethodBindings.method_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, "count", 194580386)
    globalPackedVector3ArrayMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
    globalPackedVector3ArrayMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
    globalPackedVector3ArrayMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
    globalPackedVector3ArrayMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
    globalPackedVector3ArrayMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
    globalPackedVector3ArrayMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedVector3ArrayMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedVector3ArrayMethodBindings.operator_multiply_Transform3D = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_MULTIPLY, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDNATIVE_VARIANT_TYPE_TRANSFORM3D)
        globalPackedVector3ArrayMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalPackedVector3ArrayMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalPackedVector3ArrayMethodBindings.operator_equal_PackedVector3Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
        globalPackedVector3ArrayMethodBindings.operator_not_equal_PackedVector3Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
        globalPackedVector3ArrayMethodBindings.operator_add_PackedVector3Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)
        }

func (c *PackedVector3Array) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedVector3Array, index: 0
func NewPackedVector3Array() PackedVector3Array {
    cx := PackedVector3Array{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalPackedVector3ArrayMethodBindings.constructor_0, ptr, )

    return cx
}
// NewPackedVector3Array, index: 1
func NewPackedVector3ArrayWithPackedVector3Array(from PackedVector3Array,) PackedVector3Array {
    cx := PackedVector3Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedVector3Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedVector3ArrayMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewPackedVector3Array, index: 2
func NewPackedVector3ArrayWithArray(from Array,) PackedVector3Array {
    cx := PackedVector3Array{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedVector3ArrayMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *PackedVector3Array) Destroy() {
    md := (GDNativePtrDestructor)(globalPackedVector3ArrayMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Size() int64 {
    mb := globalPackedVector3ArrayMethodBindings.method_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) IsEmpty() bool {
    mb := globalPackedVector3ArrayMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector3Array) Set(index int64,value Vector3,)  {
    mb := globalPackedVector3ArrayMethodBindings.method_set

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) PushBack(value Vector3,) bool {
    mb := globalPackedVector3ArrayMethodBindings.method_push_back

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) Append(value Vector3,) bool {
    mb := globalPackedVector3ArrayMethodBindings.method_append

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector3Array) AppendArray(array PackedVector3Array,)  {
    mb := globalPackedVector3ArrayMethodBindings.method_append_array

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PackedVector3ArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&array))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector3Array) RemoveAt(index int64,)  {
    mb := globalPackedVector3ArrayMethodBindings.method_remove_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Insert(at_index int64,value Vector3,) int64 {
    mb := globalPackedVector3ArrayMethodBindings.method_insert

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&at_index))
    
    
    // Vector3Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector3Array) Fill(value Vector3,)  {
    mb := globalPackedVector3ArrayMethodBindings.method_fill

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Resize(new_size int64,) int64 {
    mb := globalPackedVector3ArrayMethodBindings.method_resize

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&new_size))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector3Array) Clear()  {
    mb := globalPackedVector3ArrayMethodBindings.method_clear

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) Has(value Vector3,) bool {
    mb := globalPackedVector3ArrayMethodBindings.method_has

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector3Array) Reverse()  {
    mb := globalPackedVector3ArrayMethodBindings.method_reverse

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector3Array) -> PackedVector3Array
 */
func (cx *PackedVector3Array) Slice(begin int64,end int64,) PackedVector3Array {
    mb := globalPackedVector3ArrayMethodBindings.method_slice

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&begin))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    

    ret := callBuiltinMethodPtrRet[PackedVector3Array](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedVector3Array) ToByteArray() PackedByteArray {
    mb := globalPackedVector3ArrayMethodBindings.method_to_byte_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedVector3Array) Sort()  {
    mb := globalPackedVector3ArrayMethodBindings.method_sort

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Bsearch(value Vector3,before bool,) int64 {
    mb := globalPackedVector3ArrayMethodBindings.method_bsearch

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&before))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector3Array) -> PackedVector3Array
 */
func (cx *PackedVector3Array) Duplicate() PackedVector3Array {
    mb := globalPackedVector3ArrayMethodBindings.method_duplicate

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedVector3Array](mb, bx, nil)

    return ret
    

    
}


/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Find(value Vector3,from int64,) int64 {
    mb := globalPackedVector3ArrayMethodBindings.method_find

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Rfind(value Vector3,from int64,) int64 {
    mb := globalPackedVector3ArrayMethodBindings.method_rfind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Count(value Vector3,) int64 {
    mb := globalPackedVector3ArrayMethodBindings.method_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Vector3Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *PackedVector3Array) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *PackedVector3Array) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *PackedVector3Array) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// Multiply_Transform3D operator
func (cx *PackedVector3Array) Multiply_Transform3D(right Transform3D) PackedVector3Array {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedVector3Array](globalPackedVector3ArrayMethodBindings.operator_multiply_Transform3D, lt, rt)
    }
// In_Dictionary operator
func (cx *PackedVector3Array) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *PackedVector3Array) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_in_Array, lt, rt)
    }
// Equal_PackedVector3Array operator
func (cx *PackedVector3Array) Equal_PackedVector3Array(right PackedVector3Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_equal_PackedVector3Array, lt, rt)
    }
// Not_equal_PackedVector3Array operator
func (cx *PackedVector3Array) Not_equal_PackedVector3Array(right PackedVector3Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_not_equal_PackedVector3Array, lt, rt)
    }
// Add_PackedVector3Array operator
func (cx *PackedVector3Array) Add_PackedVector3Array(right PackedVector3Array) PackedVector3Array {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedVector3Array](globalPackedVector3ArrayMethodBindings.operator_add_PackedVector3Array, lt, rt)
    }
/*
 * PackedColorArray
 * indexingReturnType: Color
 * isKeyed: true
 * hasDestructor: true
 */
type PackedColorArray struct {
    opaque [16]uint8
}

type packedColorArrayMethodBindings struct {
    constructor_0 GDNativePtrConstructor
    constructor_1 GDNativePtrConstructor
    constructor_2 GDNativePtrConstructor
    destructor GDNativePtrDestructor
    method_size GDNativePtrBuiltInMethod
    method_is_empty GDNativePtrBuiltInMethod
    method_set GDNativePtrBuiltInMethod
    method_push_back GDNativePtrBuiltInMethod
    method_append GDNativePtrBuiltInMethod
    method_append_array GDNativePtrBuiltInMethod
    method_remove_at GDNativePtrBuiltInMethod
    method_insert GDNativePtrBuiltInMethod
    method_fill GDNativePtrBuiltInMethod
    method_resize GDNativePtrBuiltInMethod
    method_clear GDNativePtrBuiltInMethod
    method_has GDNativePtrBuiltInMethod
    method_reverse GDNativePtrBuiltInMethod
    method_slice GDNativePtrBuiltInMethod
    method_to_byte_array GDNativePtrBuiltInMethod
    method_sort GDNativePtrBuiltInMethod
    method_bsearch GDNativePtrBuiltInMethod
    method_duplicate GDNativePtrBuiltInMethod
    method_find GDNativePtrBuiltInMethod
    method_rfind GDNativePtrBuiltInMethod
    method_count GDNativePtrBuiltInMethod
    indexed_setter GDNativePtrIndexedSetter
    indexed_getter GDNativePtrIndexedGetter
    keyed_setter  GDNativePtrKeyedSetter
    keyed_getter  GDNativePtrKeyedGetter
    keyed_checker GDNativePtrKeyedChecker
    operator_equal_Nil GDNativePtrOperatorEvaluator
        operator_not_equal_Nil GDNativePtrOperatorEvaluator
        operator_in_Dictionary GDNativePtrOperatorEvaluator
        operator_in_Array GDNativePtrOperatorEvaluator
        operator_equal_PackedColorArray GDNativePtrOperatorEvaluator
        operator_not_equal_PackedColorArray GDNativePtrOperatorEvaluator
        operator_add_PackedColorArray GDNativePtrOperatorEvaluator
        }

var globalPackedColorArrayMethodBindings packedColorArrayMethodBindings

func packedColorArrayInitBindings() {
    globalPackedColorArrayMethodBindings.constructor_0 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, 0)
    globalPackedColorArrayMethodBindings.constructor_1 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, 1)
    globalPackedColorArrayMethodBindings.constructor_2 = GDNativeInterface_variant_get_ptr_constructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, 2)
    globalPackedColorArrayMethodBindings.destructor = GDNativeInterface_variant_get_ptr_destructor(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY)
    globalPackedColorArrayMethodBindings.method_size = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "size", 3173160232)
    globalPackedColorArrayMethodBindings.method_is_empty = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "is_empty", 3918633141)
    globalPackedColorArrayMethodBindings.method_set = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "set", 1444096570)
    globalPackedColorArrayMethodBindings.method_push_back = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "push_back", 1007858200)
    globalPackedColorArrayMethodBindings.method_append = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "append", 1007858200)
    globalPackedColorArrayMethodBindings.method_append_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "append_array", 798822497)
    globalPackedColorArrayMethodBindings.method_remove_at = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "remove_at", 2823966027)
    globalPackedColorArrayMethodBindings.method_insert = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "insert", 785289703)
    globalPackedColorArrayMethodBindings.method_fill = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "fill", 3730314301)
    globalPackedColorArrayMethodBindings.method_resize = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "resize", 848867239)
    globalPackedColorArrayMethodBindings.method_clear = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "clear", 3218959716)
    globalPackedColorArrayMethodBindings.method_has = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "has", 3167426256)
    globalPackedColorArrayMethodBindings.method_reverse = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "reverse", 3218959716)
    globalPackedColorArrayMethodBindings.method_slice = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "slice", 2451797139)
    globalPackedColorArrayMethodBindings.method_to_byte_array = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "to_byte_array", 247621236)
    globalPackedColorArrayMethodBindings.method_sort = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "sort", 3218959716)
    globalPackedColorArrayMethodBindings.method_bsearch = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "bsearch", 314143821)
    globalPackedColorArrayMethodBindings.method_duplicate = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "duplicate", 1011903421)
    globalPackedColorArrayMethodBindings.method_find = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "find", 3156095363)
    globalPackedColorArrayMethodBindings.method_rfind = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "rfind", 3156095363)
    globalPackedColorArrayMethodBindings.method_count = GDNativeInterface_variant_get_ptr_builtin_method(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, "count", 1682108616)
    globalPackedColorArrayMethodBindings.indexed_setter = GDNativeInterface_variant_get_ptr_indexed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY)
    globalPackedColorArrayMethodBindings.indexed_getter = GDNativeInterface_variant_get_ptr_indexed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY)
    globalPackedColorArrayMethodBindings.keyed_setter  = GDNativeInterface_variant_get_ptr_keyed_setter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY)
    globalPackedColorArrayMethodBindings.keyed_getter  = GDNativeInterface_variant_get_ptr_keyed_getter(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY)
    globalPackedColorArrayMethodBindings.keyed_checker = GDNativeInterface_variant_get_ptr_keyed_checker(internal.gdnInterface, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY)
    globalPackedColorArrayMethodBindings.operator_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedColorArrayMethodBindings.operator_not_equal_Nil = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDNATIVE_VARIANT_TYPE_NIL)
        globalPackedColorArrayMethodBindings.operator_in_Dictionary = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDNATIVE_VARIANT_TYPE_DICTIONARY)
        globalPackedColorArrayMethodBindings.operator_in_Array = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_IN, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDNATIVE_VARIANT_TYPE_ARRAY)
        globalPackedColorArrayMethodBindings.operator_equal_PackedColorArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY)
        globalPackedColorArrayMethodBindings.operator_not_equal_PackedColorArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_NOT_EQUAL, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY)
        globalPackedColorArrayMethodBindings.operator_add_PackedColorArray = GDNativeInterface_variant_get_ptr_operator_evaluator(internal.gdnInterface, GDNATIVE_VARIANT_OP_ADD, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY, GDNATIVE_VARIANT_TYPE_PACKED_COLOR_ARRAY)
        }

func (c *PackedColorArray) ptr() GDNativeTypePtr {
    return (GDNativeTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
// NewPackedColorArray, index: 0
func NewPackedColorArray() PackedColorArray {
    cx := PackedColorArray{}

    ptr := cx.ptr()

    callBuiltinConstructor(globalPackedColorArrayMethodBindings.constructor_0, ptr, )

    return cx
}
// NewPackedColorArray, index: 1
func NewPackedColorArrayWithPackedColorArray(from PackedColorArray,) PackedColorArray {
    cx := PackedColorArray{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // PackedColorArray
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedColorArrayMethodBindings.constructor_1, ptr, args[0],)

    return cx
}
// NewPackedColorArray, index: 2
func NewPackedColorArrayWithArray(from Array,) PackedColorArray {
    cx := PackedColorArray{}

    ptr := cx.ptr()

    var args [1]GDNativeTypePtr

    // Array
        args[0] = from.ptr()
        callBuiltinConstructor(globalPackedColorArrayMethodBindings.constructor_2, ptr, args[0],)

    return cx
}


func (cx *PackedColorArray) Destroy() {
    md := (GDNativePtrDestructor)(globalPackedColorArrayMethodBindings.destructor)
    bx := (GDNativeTypePtr)(cx.ptr())
    CallFunc_GDNativePtrDestructor(md, bx)
}


// methods


/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Size() int64 {
    mb := globalPackedColorArrayMethodBindings.method_size

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, nil)

    return ret
    

    
}


/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) IsEmpty() bool {
    mb := globalPackedColorArrayMethodBindings.method_is_empty

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, nil)

    return ret
    

    
}


/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedColorArray) Set(index int64,value Color,)  {
    mb := globalPackedColorArrayMethodBindings.method_set

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    
    // ColorEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) PushBack(value Color,) bool {
    mb := globalPackedColorArrayMethodBindings.method_push_back

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) Append(value Color,) bool {
    mb := globalPackedColorArrayMethodBindings.method_append

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedColorArray) AppendArray(array PackedColorArray,)  {
    mb := globalPackedColorArrayMethodBindings.method_append_array

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // PackedColorArrayEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&array))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedColorArray) RemoveAt(index int64,)  {
    mb := globalPackedColorArrayMethodBindings.method_remove_at

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&index))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Insert(at_index int64,value Color,) int64 {
    mb := globalPackedColorArrayMethodBindings.method_insert

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&at_index))
    
    
    // ColorEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedColorArray) Fill(value Color,)  {
    mb := globalPackedColorArrayMethodBindings.method_fill

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    callBuiltinMethodPtrNoRet(mb, bx, args)

    C.free(argBytes)
    

    
}


/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Resize(new_size int64,) int64 {
    mb := globalPackedColorArrayMethodBindings.method_resize

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&new_size))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedColorArray) Clear()  {
    mb := globalPackedColorArrayMethodBindings.method_clear

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) Has(value Color,) bool {
    mb := globalPackedColorArrayMethodBindings.method_has

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[bool](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedColorArray) Reverse()  {
    mb := globalPackedColorArrayMethodBindings.method_reverse

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedColorArray) -> PackedColorArray
 */
func (cx *PackedColorArray) Slice(begin int64,end int64,) PackedColorArray {
    mb := globalPackedColorArrayMethodBindings.method_slice

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // Int64Encoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&begin))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&end))
    
    

    ret := callBuiltinMethodPtrRet[PackedColorArray](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedColorArray) ToByteArray() PackedByteArray {
    mb := globalPackedColorArrayMethodBindings.method_to_byte_array

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)

    return ret
    

    
}


/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() -> 
 */
func (cx *PackedColorArray) Sort()  {
    mb := globalPackedColorArrayMethodBindings.method_sort

    bx := cx.ptr()
    

    callBuiltinMethodPtrNoRet(mb, bx, nil)

    

    
}


/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Bsearch(value Color,before bool,) int64 {
    mb := globalPackedColorArrayMethodBindings.method_bsearch

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // BoolEncoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&before))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedColorArray) -> PackedColorArray
 */
func (cx *PackedColorArray) Duplicate() PackedColorArray {
    mb := globalPackedColorArrayMethodBindings.method_duplicate

    bx := cx.ptr()
    

    ret := callBuiltinMethodPtrRet[PackedColorArray](mb, bx, nil)

    return ret
    

    
}


/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Find(value Color,from int64,) int64 {
    mb := globalPackedColorArrayMethodBindings.method_find

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Rfind(value Color,from int64,) int64 {
    mb := globalPackedColorArrayMethodBindings.method_rfind

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(2)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    
    // Int64Encoder
    args[1] = (GDNativeTypePtr)(unsafe.Pointer(&from))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Count(value Color,) int64 {
    mb := globalPackedColorArrayMethodBindings.method_count

    bx := cx.ptr()
    sz := unsafe.Sizeof(nullptr) * uintptr(1)
    argBytes := unsafe.Pointer(C.malloc(C.size_t(sz)))

	args := (*[MAX_ARG_COUNT]GDNativeTypePtr)(argBytes)
    
    // ColorEncoder
    args[0] = (GDNativeTypePtr)(unsafe.Pointer(&value))
    
    

    ret := callBuiltinMethodPtrRet[int64](mb, bx, args)

    C.free(argBytes)
    return ret
    

    
}


/* TODO: implement keyed built-in classes

typedef void (*GDNativePtrKeyedSetter)(GDNativeTypePtr p_base, const GDNativeTypePtr p_key, const GDNativeTypePtr p_value);
typedef void (*GDNativePtrKeyedGetter)(const GDNativeTypePtr p_base, const GDNativeTypePtr p_key, GDNativeTypePtr r_value);


// keyed
func (cx *PackedColorArray) SetKey(const Variant &p_key) Variant {

}
*/

// members


// Equal_Nil operator
func (cx *PackedColorArray) Equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_equal_Nil, lt, rt)
    }
// Not_equal_Nil operator
func (cx *PackedColorArray) Not_equal_Nil(right Variant) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_not_equal_Nil, lt, rt)
    }
// In_Dictionary operator
func (cx *PackedColorArray) In_Dictionary(right Dictionary) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_in_Dictionary, lt, rt)
    }
// In_Array operator
func (cx *PackedColorArray) In_Array(right Array) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_in_Array, lt, rt)
    }
// Equal_PackedColorArray operator
func (cx *PackedColorArray) Equal_PackedColorArray(right PackedColorArray) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_equal_PackedColorArray, lt, rt)
    }
// Not_equal_PackedColorArray operator
func (cx *PackedColorArray) Not_equal_PackedColorArray(right PackedColorArray) bool {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_not_equal_PackedColorArray, lt, rt)
    }
// Add_PackedColorArray operator
func (cx *PackedColorArray) Add_PackedColorArray(right PackedColorArray) PackedColorArray {
    lt := cx.ptr()
    rt := (GDNativeTypePtr)(unsafe.Pointer(&right))
    return callBuiltinOperatorPtr[PackedColorArray](globalPackedColorArrayMethodBindings.operator_add_PackedColorArray, lt, rt)
    }
func builtinClassesInitBindings() {
stringInitBindings()
vector2InitBindings()
vector2iInitBindings()
rect2InitBindings()
rect2iInitBindings()
vector3InitBindings()
vector3iInitBindings()
transform2DInitBindings()
vector4InitBindings()
vector4iInitBindings()
planeInitBindings()
quaternionInitBindings()
aABBInitBindings()
basisInitBindings()
transform3DInitBindings()
projectionInitBindings()
colorInitBindings()
stringNameInitBindings()
nodePathInitBindings()
rIDInitBindings()
callableInitBindings()
signalInitBindings()
dictionaryInitBindings()
arrayInitBindings()
packedByteArrayInitBindings()
packedInt32ArrayInitBindings()
packedInt64ArrayInitBindings()
packedFloat32ArrayInitBindings()
packedFloat64ArrayInitBindings()
packedStringArrayInitBindings()
packedVector2ArrayInitBindings()
packedVector3ArrayInitBindings()
packedColorArrayInitBindings()
}
