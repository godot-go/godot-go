package gdnative

/*------------------------------------------------------------------------------
//   This code was generated by template {{ .TemplateName }}.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "{{ .TemplateName }}" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//revive:disable

/*
#include <gdnative.wrapper.gen.h>
#include <gdnative/aabb.h>
#include <gdnative/array.h>
#include <gdnative/basis.h>
#include <gdnative/color.h>
#include <gdnative/dictionary.h>
#include <gdnative/gdnative.h>
#include <gdnative/node_path.h>
#include <gdnative/plane.h>
#include <gdnative/pool_arrays.h>
#include <gdnative/quat.h>
#include <gdnative/rect2.h>
#include <gdnative/rid.h>
#include <gdnative/string.h>
#include <gdnative/string_name.h>
#include <gdnative/transform.h>
#include <gdnative/transform2d.h>
#include <gdnative/variant.h>
#include <gdnative/vector2.h>
#include <gdnative/vector3.h>
#include <gdnative_api_struct.gen.h>
#include <stdlib.h>
*/
import "C"
import (
"unsafe"
"runtime"
)

func init() {
	{{ range $j, $typeDef := .TypeDefs -}}
        {{ if not (eq $typeDef.Usage USAGE_GO_PRIMATIVE) -}}
	        registerInternalInitCallback(Init{{ $typeDef.Name }}GodotType)
        {{ end -}}
	{{ end -}}
}

/* Global Functions */
{{ range $j, $method := .Globals -}}
    {{ template "GLOBAL_METHOD" $method }}
{{ end }}

/* TypeDefs */
{{ range $j, $typeDef := .TypeDefs -}}
    {{ if not (eq $typeDef.Usage USAGE_GO_PRIMATIVE) -}}
    type {{ $typeDef.Name }} C.{{ $typeDef.CName }}

    func Init{{ $typeDef.Name }}GodotType() {
        RegisterState.Stats.GodotTypeAllocs["{{ $typeDef.Name }}"] = 0
        RegisterState.Stats.GodotTypeFrees["{{ $typeDef.Name }}"] = 0
    }

    {{ else -}}
    // mapped C.{{ $typeDef.CName }} to native go type {{ $typeDef.Name }}
    {{ end -}}

    {{ if eq $typeDef.Base "enum" -}}
    /* Enum {{ $typeDef.Name }} */
    const (
        {{ range $j, $prop := $typeDef.Properties }}
            {{- if eq $j 0 -}}
                {{ $prop.CName }} {{ $typeDef.Name }} = iota
            {{- else -}}
                {{ $prop.CName }}
            {{- end}}
        {{ end }}
    )
    {{ end }}

    {{ template "CONSTRUCTOR_METHODS" . }}

    {{ range $j, $method := $typeDef.Methods }}
        {{ if $method.IsSetter }}
            {{ template "SETTER_METHOD" $method }}
        {{ else }}
            {{ template "GETTER_METHOD" $method }}
        {{ end }}
    {{ end }}
{{ end }}
//revive:enable

{{ define "CONSTRUCTOR_METHODS" }}
    {{ $hasDestroyMethod := .HasDestroyMethod }}
    {{ range $j, $constructor := .Constructors }}
        {{ with $constructor }}
    {{ $returnTypeGoName := .ReturnType.GoName }}
    func {{ .Name }}({{ template "ARGUMENTS" . }}) {{ $returnTypeGoName }} {
        dest := {{ $returnTypeGoName }}{}

        api := {{ .ApiMetadata.Name }}
        {{- if or .ReturnType.IsGodotObjectPointer .ReturnType.IsVoidPointer }}
            rcv := unsafe.Pointer(&dest)
        {{- else }}
            rcv := (*C.{{ .ReturnType.CName }})(unsafe.Pointer(&dest))
        {{- end }}
        {{- range $k, $arg := .Arguments }}
            {{- if $arg.Type.IsGodotObjectPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if and (or $arg.Type.IsString $arg.Type.IsStringName) (ne $returnTypeGoName "String") (ne $returnTypeGoName "StringName") }}
                // hide {{ $arg.Type.CName }} / {{ $arg.Type.GoName }} and expose native go string
                strIn{{ $k }} := internWithGoString({{ $arg.Name }})
                in{{ $k }} := (*C.{{ $arg.Type.CName }})(unsafe.Pointer(&strIn{{ $k }}))
            {{- else if $arg.Type.IsVoidPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if $arg.Type.IsCharPointer }}
                in{{ $k }} := C.CString({{ $arg.Name }})
                defer C.free(unsafe.Pointer(in{{ $k }}))
            {{- else if $arg.Type.IsGodotVariantPointerArray }}
                cArr{{ $k }} := AllocNewArrayAsUnsafePointer({{ $arg.Name }})
                defer Free(cArr{{ $k }})
                in{{ $k }} := (**C.{{ $arg.Type.CName }})(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.IsVoidPointerArray }}
                cArr{{ $k }} := ArrayRefFromPtrSlice({{ $arg.Name }})
                in{{ $k }} := (*unsafe.Pointer)(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.IsPointer }}
                in{{ $k }} := (*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- else }}
                in{{ $k }} := *(*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- end }}
        {{- end }}

        {{ template "DESCRIBE_CMETHOD" . }}
        C.go_{{ .CName }}(
            api,
            rcv,
            {{- range $k, $arg := .Arguments }}
                in{{ $k }},
            {{- end }}
        )

        runtime.KeepAlive(rcv)
        {{- range $k, $arg := .Arguments }}
            runtime.KeepAlive(in{{$k}})
        {{- end }}

        RegisterState.Stats.GodotTypeAllocs["{{ $returnTypeGoName }}"]++

        {{/* {{- if $hasDestroyMethod }}
            runtime.SetFinalizer(dest, dest.Destroy)
        {{- end }} */}}

        return dest
    }
        {{ end }}
    {{ end }}
{{ end }}

{{ define "SETTER_METHOD" }}
    /* Setter Method: {{ .CName }} -> {{ .ReturnType.CName }} */
    func (gdt *{{ .Receiver.Type.GoName }}) {{ .Name }}({{ template "ARGUMENTS" . }}) {
        {{ template "DESCRIBE_CMETHOD" . }}

        api := {{ .ApiMetadata.Name }}
        rcv := (*C.{{ .Receiver.Type.CName }})(unsafe.Pointer(gdt))
        {{- range $k, $arg := .Arguments }}
            {{- if $arg.Type.IsGodotObjectPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if $arg.Type.IsVoidPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if $arg.Type.IsCharPointer }}
                in{{ $k }} := C.CString({{ $arg.Name }})
                defer C.free(unsafe.Pointer(in{{ $k }}))
            {{- else if $arg.Type.IsGodotVariantPointerArray }}
                cArr{{ $k }} := AllocNewArrayAsUnsafePointer({{ $arg.Name }})
                defer Free(cArr{{ $k }})
                in{{ $k }} := (**C.{{ $arg.Type.CName }})(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.IsVoidPointerArray }}
                cArr{{ $k }} := ArrayRefFromPtrSlice({{ $arg.Name }})
                in{{ $k }} := (*unsafe.Pointer)(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.IsPointer }}
                in{{ $k }} := (*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- else }}
                in{{ $k }} := *(*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- end }}
        {{- end }}

        C.go_{{ .CName }}(
            api,
            rcv,
            {{- range $k, $arg := .Arguments }}
                in{{ $k }},
            {{- end }}
        )

        {{- range $k, $arg := .Arguments }}
            runtime.KeepAlive(in{{$k}})
        {{- end }}

        {{- if eq .Name "Destroy" }}
            RegisterState.Stats.GodotTypeFrees["{{ .Receiver.Type.GoName }}"]++
            {{/* runtime.SetFinalizer(gdt, nil) */}}
        {{- end }}
    }
{{ end }}

{{ define "GETTER_METHOD" }}
    /* Getter Method: {{ .CName }} -> {{ .ReturnType.CName }} */
    func (gdt *{{ .Receiver.Type.GoName }}) {{ .Name }}({{ template "ARGUMENTS" . }})
    {{- if .ReturnType.IsGodotObjectPointer -}}
        *GodotObject
    {{- else if .ReturnType.IsCharPointer -}}
        string
    {{- else if .ReturnType.IsVoidPointer -}}
        unsafe.Pointer
    {{- else if .ReturnType.IsGoPrimative -}}
        {{ .ReturnType.GoName }}
    {{- else -}}
        {{ .ReturnType.GoName }}
    {{- end }} {
        {{ template "DESCRIBE_CMETHOD" . }}
        api := {{ .ApiMetadata.Name }}
        rcv := (*C.{{ .Receiver.Type.CName }})(unsafe.Pointer(gdt))
        {{- range $k, $arg := .Arguments }}
            {{- if $arg.Type.IsGodotObjectPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if $arg.Type.IsVoidPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if $arg.Type.IsCharPointer }}
                in{{ $k }} := C.CString({{ $arg.Name }})
                defer C.free(unsafe.Pointer(in{{ $k }}))
            {{- else if $arg.Type.IsGodotVariantPointerArray }}
                cArr{{ $k }} := AllocNewArrayAsUnsafePointer({{ $arg.Name }})
                defer Free(cArr{{ $k }})
                in{{ $k }} := (**C.{{ $arg.Type.CName }})(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.IsVoidPointerArray }}
                cArr{{ $k }} := ArrayRefFromPtrSlice({{ $arg.Name }})
                in{{ $k }} := (*unsafe.Pointer)(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.IsPointer }}
                in{{ $k }} := (*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- else }}
                in{{ $k }} := *(*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- end }}
        {{- end }}

        ret := C.go_{{ .CName }}(
            api,
            rcv,
            {{- range $k, $arg := .Arguments }}
                in{{ $k }},
            {{- end }}
        )

        {{- range $k, $arg := .Arguments }}
            runtime.KeepAlive(in{{$k}})
        {{- end }}

        return {{ if .ReturnType.IsGodotObjectPointer -}}
            (*GodotObject)(unsafe.Pointer(ret))
        {{- else if .ReturnType.IsCharPointer -}}
            C.GoString(ret)
        {{- else if .ReturnType.IsVoidPointer -}}
            unsafe.Pointer(ret)
        {{- else -}}
            *(*{{ .ReturnType.GoName }})(unsafe.Pointer(&ret))
        {{- end }}
    }
{{ end }}

{{ define "GLOBAL_METHOD" }}
    /* Global Method: {{ if .ReturnType.IsPointer }}*{{ end }}{{ .CName }} -> {{ if .ReturnType.IsPointer }}*{{ end }}{{ .ReturnType.CName }} */
    {{ $methodName := .Name }}
    func {{ .Name }}({{ template "ARGUMENTS" . }})
    {{- if .ReturnType.IsCharPointer -}}
        string
    {{- else if .ReturnType.NoReturnValue -}}
    {{- else if .ReturnType.IsVoidPointer -}}
        unsafe.Pointer
    {{- else if .ReturnType.IsPointer -}}
        *{{ .ReturnType.GoName }}
    {{- else -}}
        {{ .ReturnType.GoName }}
    {{- end }} {
        api := {{ .ApiMetadata.Name }}

        {{- range $k, $arg := .Arguments }}
            {{- if $arg.Type.IsGodotObjectPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if $arg.Type.IsVoidPointer }}
                in{{ $k }} := unsafe.Pointer({{ $arg.Name }})
            {{- else if $arg.Type.IsCharPointer }}
                in{{ $k }} := C.CString({{ $arg.Name }})
                defer C.free(unsafe.Pointer(in{{ $k }}))
            {{- else if $arg.Type.IsGodotVariantPointerArray }}
                cArr{{ $k }} := AllocNewArrayAsUnsafePointer({{ $arg.Name }})
                defer Free(cArr{{ $k }})
                in{{ $k }} := (**C.{{ $arg.Type.CName }})(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.IsVoidPointerArray }}
                cArr{{ $k }} := ArrayRefFromPtrSlice({{ $arg.Name }})
                in{{ $k }} := (*unsafe.Pointer)(unsafe.Pointer(cArr{{ $k }}))
            {{- else if $arg.Type.IsPointer }}
                in{{ $k }} := (*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- else }}
                in{{ $k }} := *(*C.{{ $arg.Type.CName }})(unsafe.Pointer(&{{ $arg.Name }}))
            {{- end }}
        {{- end }}

        {{ template "DESCRIBE_CMETHOD" . }}
        {{ if .IsSetter }}
            C.go_{{ .CName }}(
                api,
                {{- range $k, $arg := .Arguments }}
                    in{{ $k }},
                {{- end }}
            )

            {{- range $k, $arg := .Arguments }}
                runtime.KeepAlive(in{{$k}})
            {{- end }}
        {{ else }}
            ret := C.go_{{ .CName }}(
                api,
                {{- range $k, $arg := .Arguments }}
                    in{{ $k }},
                {{- end }}
            )

            {{- range $k, $arg := .Arguments }}
                runtime.KeepAlive(in{{$k}})
            {{- end }}

            return {{ if .ReturnType.IsGodotObjectPointer -}}
                (*GodotObject)(unsafe.Pointer(ret))
            {{ else if .ReturnType.IsVoidPointer -}}
                unsafe.Pointer(ret)
            {{ else if .ReturnType.IsMethodBindPointer -}}
                (*{{ .ReturnType.GoName }})(unsafe.Pointer(&ret))
            {{- else -}}
                *(*{{ .ReturnType.GoName }})(unsafe.Pointer(&ret))
            {{- end }}
        {{ end }}
    }
{{ end }}

{{ define "DESCRIBE_CMETHOD" }}
    /* go_{{ .CName }}(API_STRUCT
    {{- range $k, $arg := .Arguments }}
        {{- if $arg.Type.IsPointer }}, * {{- $arg.Type.CName }}
        {{- else if $arg.Type.IsPointerArray }}, ** {{- $arg.Type.CName }}
        {{- else}}, {{- $arg.Type.CName }}
        {{- end }}
    {{- end }}) -> {{- if .ReturnType.IsPointer }} * {{- .ReturnType.GoName }}
        {{- else if .ReturnType.IsPointerArray }} ** {{- .ReturnType.GoName }}
        {{- else}} {{- .ReturnType.CName }}
        {{- end }} */
{{ end }}

{{ define "ARGUMENTS" }}
    {{ $gomethod := . }}
    {{- range $k, $arg := .Arguments -}}
        {{ $arg.Name -}}
        {{- if $arg.Type.IsCharPointer }} string,
        {{- else if and (eq $gomethod.GoMethodType ConstructorGoMethodType) (or $arg.Type.IsString $arg.Type.IsStringName) (ne $gomethod.ReturnType.GoName "String") (ne $gomethod.ReturnType.GoName "StringName") }} string /* Hides {{ $arg.Type.GoName }} */,
        {{- else if $arg.Type.IsGodotObjectPointer }} *GodotObject,
        {{- else if $arg.Type.IsVoidPointer }} unsafe.Pointer,
        {{- else if $arg.Type.IsVoidPointerArray }} []unsafe.Pointer,
        {{- else if $arg.Type.IsPointer }} {{ $arg.Type.GoName }} /* {{ $arg.Type.CName }} */,
        {{- else if $arg.Type.IsPointerArray }} []*{{ $arg.Type.GoName }},
        {{- else }} {{ $arg.Type.GoName }} /* else case */,
        {{- end }}
    {{- end}}
{{ end }}
