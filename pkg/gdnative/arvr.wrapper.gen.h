#ifndef CGDNATIVE_EXT_ARVR_H
#define CGDNATIVE_EXT_ARVR_H
/*------------------------------------------------------------------------------
//   This code was generated by template gdnative.h.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "gdnative.h.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
#include <gdnative/aabb.h>
#include <gdnative/array.h>
#include <gdnative/basis.h>
#include <gdnative/color.h>
#include <gdnative/dictionary.h>
#include <gdnative/gdnative.h>
#include <gdnative/node_path.h>
#include <gdnative/plane.h>
#include <gdnative/pool_arrays.h>
#include <gdnative/quat.h>
#include <gdnative/rect2.h>
#include <gdnative/rid.h>
#include <gdnative/string.h>
#include <gdnative/string_name.h>
#include <gdnative/transform.h>
#include <gdnative/transform2d.h>
#include <gdnative/variant.h>
#include <gdnative/vector2.h>
#include <gdnative/vector3.h>
#include <gdnative_api_struct.gen.h>

/* Go cannot call C function pointers directly, so we must generate C wrapper code to call the functions. */
/* GDNative ARVR 1.1 */
void go_godot_arvr_register_interface(godot_gdnative_ext_arvr_api_struct * p_api, const godot_arvr_interface_gdnative * p_interface);
godot_real go_godot_arvr_get_worldscale(godot_gdnative_ext_arvr_api_struct * p_api);
godot_transform go_godot_arvr_get_reference_frame(godot_gdnative_ext_arvr_api_struct * p_api);
void go_godot_arvr_blit(godot_gdnative_ext_arvr_api_struct * p_api, int p_eye, godot_rid * p_render_target, godot_rect2 * p_screen_rect);
godot_int go_godot_arvr_get_texid(godot_gdnative_ext_arvr_api_struct * p_api, godot_rid * p_render_target);
godot_int go_godot_arvr_add_controller(godot_gdnative_ext_arvr_api_struct * p_api, char * p_device_name, godot_int p_hand, godot_bool p_tracks_orientation, godot_bool p_tracks_position);
void go_godot_arvr_remove_controller(godot_gdnative_ext_arvr_api_struct * p_api, godot_int p_controller_id);
void go_godot_arvr_set_controller_transform(godot_gdnative_ext_arvr_api_struct * p_api, godot_int p_controller_id, godot_transform * p_transform, godot_bool p_tracks_orientation, godot_bool p_tracks_position);
void go_godot_arvr_set_controller_button(godot_gdnative_ext_arvr_api_struct * p_api, godot_int p_controller_id, godot_int p_button, godot_bool p_is_pressed);
void go_godot_arvr_set_controller_axis(godot_gdnative_ext_arvr_api_struct * p_api, godot_int p_controller_id, godot_int p_exis, godot_real p_value, godot_bool p_can_be_negative);
godot_real go_godot_arvr_get_controller_rumble(godot_gdnative_ext_arvr_api_struct * p_api, godot_int p_controller_id);
#endif
