{{ $view := . -}}
package gdextension

/*------------------------------------------------------------------------------
//   This code was generated by template builtinclasses.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "builtinclasses.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//revive:disable

// #include <godot/gdextension_interface.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
    "runtime"
    "unsafe"

	"github.com/godot-go/godot-go/pkg/log"
	"go.uber.org/zap"

	. "github.com/godot-go/godot-go/pkg/gdextensionffi"
)

{{ $sizes := $view.Float64BuiltinClassSize -}}

// built-in classes
{{ range $i, $c := $view.FilteredBuiltinClasses -}}

{{ $enumTypeName := (print "GDEXTENSION_VARIANT_TYPE_" (screamingSnake $c.Name)) -}}

/*
 * {{ $c.Name }}
 * indexingReturnType: {{ $c.IndexingReturnType }}
 * isKeyed: {{ $c.IsKeyed }}
 * hasDestructor: {{ $c.HasDestructor }}
 */
type {{ $c.Name }} struct {
    opaque [{{ $sizes.FindSize $c.Name }}]uint8
}

type {{ lowerFirstChar $c.Name }}MethodBindings struct {
    {{ range $j, $mb := $c.Constructors -}}
    constructor_{{ $j }} GDExtensionPtrConstructor
    {{ end -}}

    {{ if $c.HasDestructor -}}
    destructor GDExtensionPtrDestructor
    {{ end -}}

    {{ range $j, $mb := $c.FilteredMethods -}}
    method_{{ $mb.Name }} GDExtensionPtrBuiltInMethod
    {{ end -}}

    {{ range $j, $mb := $c.Members -}}
    member_{{ $mb.Name }}_setter GDExtensionPtrSetter
    member_{{ $mb.Name }}_getter GDExtensionPtrGetter
    {{ end -}}

    {{ if gt (len $c.IndexingReturnType) 0 -}}
    indexed_setter GDExtensionPtrIndexedSetter
    indexed_getter GDExtensionPtrIndexedGetter
    {{ end -}}

    {{ if $c.IsKeyed -}}
    keyed_setter  GDExtensionPtrKeyedSetter
    keyed_getter  GDExtensionPtrKeyedGetter
    keyed_checker GDExtensionPtrKeyedChecker
    {{ end -}}

    {{ range $j, $op := $c.Operators -}}
        {{ $enumOpName := (print "GDEXTENSION_VARIANT_OP_" (upper (getOperatorIdName $op.Name))) -}}
        {{ if gt (len $op.RightType) 0 -}}
        operator_{{ getOperatorIdName $op.Name }}_{{ $op.RightType }} GDExtensionPtrOperatorEvaluator
        {{ else -}}
        operator_{{ getOperatorIdName $op.Name }} GDExtensionPtrOperatorEvaluator
        {{ end -}}
    {{ end -}}
}

var global{{ $c.Name }}MethodBindings {{ lowerFirstChar $c.Name }}MethodBindings

func {{ lowerFirstChar $c.Name }}InitConstructorBindings() {
    log.Debug("{{ lowerFirstChar $c.Name }}InitConstructorBindings called")

    {{ range $j, $mb := $c.Constructors -}}
    log.Debug("global{{ $c.Name }}MethodBindings.constructor_{{ $j }}")
    global{{ $c.Name }}MethodBindings.constructor_{{ $j }} = CallFunc_GDExtensionInterfaceVariantGetPtrConstructor({{ $enumTypeName }}, {{ $j }})
    {{ end -}}

    {{ if $c.HasDestructor -}}
    log.Debug("global{{ $c.Name }}MethodBindings.destructor")
    global{{ $c.Name }}MethodBindings.destructor = CallFunc_GDExtensionInterfaceVariantGetPtrDestructor({{ $enumTypeName }})
    {{ end -}}
}

func {{ lowerFirstChar $c.Name }}InitMethodBindings() {
    log.Debug("{{ lowerFirstChar $c.Name }}InitMethodBindings called")

    missingMethods := make([]string, 0, {{ len $c.FilteredMethods }})

    {{ range $j, $mb := $c.FilteredMethods -}}
    methodName{{ $j }} := NewStringNameWithLatin1Chars("{{ $mb.Name }}")
    defer methodName{{ $j }}.Destroy()
    log.Debug("global{{ $c.Name }}MethodBindings.method_{{ $mb.Name }}")
    global{{ $c.Name }}MethodBindings.method_{{ $mb.Name }} = CallFunc_GDExtensionInterfaceVariantGetPtrBuiltinMethod({{ $enumTypeName }}, methodName{{ $j }}.AsGDExtensionStringNamePtr(), {{ $mb.Hash }})
    if global{{ $c.Name }}MethodBindings.method_{{ $mb.Name }} == nil {
        missingMethods = append(missingMethods, "global{{ $c.Name }}MethodBindings.method_{{ $mb.Name }}")
    }
    {{ end -}}

    if len(missingMethods) > 0 {
        log.Panic("missing method binds", zap.Any("missing", missingMethods))
    }

    {{ range $j, $mb := $c.Members -}}
    memberName{{ $j }} := NewStringNameWithLatin1Chars("{{ $mb.Name }}")
    defer memberName{{ $j }}.Destroy()
    log.Debug("global{{ $c.Name }}MethodBindings.member_{{ $mb.Name }}_setter")
    global{{ $c.Name }}MethodBindings.member_{{ $mb.Name }}_setter = CallFunc_GDExtensionInterfaceVariantGetPtrSetter({{ $enumTypeName }}, memberName{{ $j }}.AsGDExtensionStringNamePtr())
    log.Debug("global{{ $c.Name }}MethodBindings.member_{{ $mb.Name }}_getter")
    global{{ $c.Name }}MethodBindings.member_{{ $mb.Name }}_getter = CallFunc_GDExtensionInterfaceVariantGetPtrGetter({{ $enumTypeName }}, memberName{{ $j }}.AsGDExtensionStringNamePtr())
    {{ end -}}

    {{ if gt (len $c.IndexingReturnType) 0 -}}
    log.Debug("global{{ $c.Name }}MethodBindings.indexed_setter")
    global{{ $c.Name }}MethodBindings.indexed_setter = CallFunc_GDExtensionInterfaceVariantGetPtrIndexedSetter({{ $enumTypeName }})
    log.Debug("global{{ $c.Name }}MethodBindings.indexed_getter")
    global{{ $c.Name }}MethodBindings.indexed_getter = CallFunc_GDExtensionInterfaceVariantGetPtrIndexedGetter({{ $enumTypeName }})
    {{ end -}}

    {{ if $c.IsKeyed -}}
    log.Debug("global{{ $c.Name }}MethodBindings.keyed_setter")
    global{{ $c.Name }}MethodBindings.keyed_setter  = CallFunc_GDExtensionInterfaceVariantGetPtrKeyedSetter({{ $enumTypeName }})
    log.Debug("global{{ $c.Name }}MethodBindings.keyed_getter")
    global{{ $c.Name }}MethodBindings.keyed_getter  = CallFunc_GDExtensionInterfaceVariantGetPtrKeyedGetter({{ $enumTypeName }})
    log.Debug("global{{ $c.Name }}MethodBindings.keyed_checked")
    global{{ $c.Name }}MethodBindings.keyed_checker = CallFunc_GDExtensionInterfaceVariantGetPtrKeyedChecker({{ $enumTypeName }})
    {{ end -}}

    {{ range $j, $op := $c.Operators -}}
        log.Debug("global{{ $c.Name }}MethodBindings.operator: {{ getOperatorIdName $op.Name }} {{ $op.RightType }}")
        {{ $enumOpName := (print "GDEXTENSION_VARIANT_OP_" (upper (getOperatorIdName $op.Name))) -}}
        {{ if gt (len $op.RightType) 0 -}}
        {{ if eq $op.RightType "Variant" -}}
        global{{ $c.Name }}MethodBindings.operator_{{ getOperatorIdName $op.Name }}_{{ $op.RightType }} = CallFunc_GDExtensionInterfaceVariantGetPtrOperatorEvaluator({{ $enumOpName }}, {{ $enumTypeName }}, GDEXTENSION_VARIANT_TYPE_NIL)
        {{ else -}}
        {{ $enumRightTypeName := (print "GDEXTENSION_VARIANT_TYPE_" (screamingSnake $op.RightType)) -}}
        global{{ $c.Name }}MethodBindings.operator_{{ getOperatorIdName $op.Name }}_{{ $op.RightType }} = CallFunc_GDExtensionInterfaceVariantGetPtrOperatorEvaluator({{ $enumOpName }}, {{ $enumTypeName }}, {{ $enumRightTypeName }})
        {{ end -}}
        {{ else -}}
        global{{ $c.Name }}MethodBindings.operator_{{ getOperatorIdName $op.Name }} = CallFunc_GDExtensionInterfaceVariantGetPtrOperatorEvaluator({{ $enumOpName }}, {{ $enumTypeName }}, GDEXTENSION_VARIANT_TYPE_NIL)
        {{ end -}}
    {{ end -}}

    log.Debug("{{ lowerFirstChar $c.Name }}InitBindings end")
}

func (c *{{ $c.Name }}) ptr() GDExtensionConstTypePtr {
    return (GDExtensionConstTypePtr)(unsafe.Pointer(&c.opaque))
}

// constructors
{{ range $j, $con := $c.FilteredConstructors -}}

// New{{ $c.Name }}, index: {{ $con.Index }}
func New{{ $c.Name }}{{ with $con.Arguments }}With{{- range $k, $arg := $con.Arguments -}}{{ upperFirstChar (goArgumentType $arg.Type) }}{{- end -}}{{- end -}}(
    {{- range $k, $arg := $con.Arguments -}}
		{{ goArgumentName $arg.Name }} {{ goArgumentType $arg.Type }},
	{{- end -}}
) {{ $c.Name }} {
    cx := {{ $c.Name }}{}

    ptr := (GDExtensionUninitializedTypePtr)(unsafe.Pointer(cx.ptr()))

    {{ if $con.Arguments -}}
    var args [{{ len $con.Arguments }}]GDExtensionConstTypePtr

    {{ range $k, $arg := $con.Arguments -}}
        {{ $argName := goArgumentName $arg.Name }}
        {{ $argType := goArgumentType $arg.Type }}
        // {{ $arg.Type }}
        {{ if eq $argType "string" -}}
        cv{{ $k }} := NewStringWithLatin1Chars({{ $argName }})
        defer cv{{ $k }}.Destroy()
        args[{{ $k }}] = cv{{ $k }}.ptr()

        {{ else -}}
        {{ if typeHasPtr $arg.Type -}}
        // {{ goEncoder $arg.Type }}
        args[{{ $k }}] = (GDExtensionConstTypePtr)({{ $argName }}.ptr())
        {{ else if eq $argType "Object" -}}
        args[{{ $k }}] = (GDExtensionConstTypePtr)(unsafe.Pointer(&{{ $argName }}))
        {{ else -}}
        eArg{{ $k }} := {{ goEncoder $argType }}.EncodeArg({{ $argName }})
        args[{{ $k }}] = (GDExtensionConstTypePtr)(unsafe.Pointer(&eArg{{ $k }}))
        {{ end -}}
        {{ end -}}
	{{ end -}}
    {{ end -}}

    callBuiltinConstructor(global{{ $c.Name }}MethodBindings.constructor_{{ $j }}, ptr, {{range $k, $arg := $con.Arguments -}}args[{{ $k }}],{{- end -}})

    return cx
}
{{ end }}

{{ if $c.HasDestructor -}}
func (cx *{{ $c.Name }}) Destroy() {
    md := (GDExtensionPtrDestructor)(global{{ $c.Name }}MethodBindings.destructor)
    bx := (GDExtensionTypePtr)(cx.ptr())
    CallFunc_GDExtensionPtrDestructor(md, bx)
}
{{ end }}

// methods
{{ range $j, $m := $c.FilteredMethods -}}
{{ $fnReturnType := goReturnType $m.ReturnType }}
{{ $hasSomeArguments := (or $m.Arguments $m.IsVararg) }}
/* {{ goMethodName $m.Name }} : {{ $m.Name }}
 * is_vararg = {{ $m.IsVararg }}, is_static = {{ $m.IsStatic }}
 * goReturnType({{ $m.ReturnType }}) -> {{ $fnReturnType }}
 */
func (cx *{{ $c.Name }}) {{ goMethodName $m.Name }}(
    {{- range $k, $arg := $m.Arguments -}}
		{{ goArgumentName $arg.Name }} {{ goArgumentType $arg.Type }},
	{{- end -}}
    {{ if $m.IsVararg -}}
        varargs ...Variant
    {{- end -}}
) {{ $fnReturnType }} {
    mb := global{{ $c.Name }}MethodBindings.method_{{ $m.Name }}

    if mb == nil {
        log.Panic("method bind cannot be nil")
    }

    {{ if $m.IsStatic -}}
    bx := (GDExtensionTypePtr)(nullptr)
    {{ else -}}
    bx := (GDExtensionTypePtr)(unsafe.Pointer(cx.ptr()))
    {{ end -}}

    if bx == nil {
        log.Panic("object cannot be nil")
    }

    {{ if $hasSomeArguments -}}
    sz := {{ len $m.Arguments -}} {{ if $m.IsVararg -}} + len(varargs) + 1 {{- end }}
	args := make([]GDExtensionTypePtr, sz, sz)
    {{ end -}}

    {{ range $j, $arg := $m.Arguments -}}
    {{ if goHasArgumentTypeEncoder $arg.Type -}}
    {{ if goEncodeIsReference $arg.Type -}}
    args[{{ $j }}] = (GDExtensionTypePtr)(unsafe.Pointer(&{{ goArgumentName $arg.Name }}))
    {{ else -}}
    eArg{{ $j }} := {{ goEncoder (goArgumentType $arg.Type) }}.EncodeArg({{ goArgumentName $arg.Name }})
    args[{{ $j }}] = (GDExtensionTypePtr)(unsafe.Pointer(&eArg{{ $j }}))
    {{ end -}}
    {{ else -}}
    args[{{ $j }}] = (GDExtensionTypePtr)(unsafe.Pointer(&{{ goArgumentName $arg.Name }}))
    {{ end }}
    {{ end }}{{/* range $m.Arguments */}}

    {{ if $m.IsVararg -}}
    for i := range varargs {
        args[i + {{ len $m.Arguments }}] = (GDExtensionTypePtr)(unsafe.Pointer(&varargs[i]))
    }
    {{ end -}}

    {{ if $fnReturnType -}}
    ret := callBuiltinMethodPtrRet[{{ $fnReturnType }}](mb, bx, {{ if $hasSomeArguments -}}args...{{ else }}nil{{ end }})
    {{ if $hasSomeArguments -}}
    runtime.KeepAlive(args)
    // C.free(argBytes)
    {{ end -}}
    return ret
    {{ else -}}
    callBuiltinMethodPtrNoRet(mb, bx, {{ if $hasSomeArguments -}}args...{{ else }}nil{{ end }})
    {{ if $hasSomeArguments -}}
    runtime.KeepAlive(args)
    // C.free(argBytes)
    {{ end -}}
    {{ end -}}{{/* if fnReturnType */}}
}
{{ end }}

{{ if $c.IsKeyed -}}
/* TODO: implement keyed built-in classes

typedef void (*GDExtensionPtrKeyedSetter)(GDExtensionTypePtr p_base, const GDExtensionTypePtr p_key, const GDExtensionTypePtr p_value);
typedef void (*GDExtensionPtrKeyedGetter)(const GDExtensionTypePtr p_base, const GDExtensionTypePtr p_key, GDExtensionTypePtr r_value);


// keyed
func (cx *{{ $c.Name }}) SetKey(const Variant &p_key) Variant {

}
*/

{{ end -}}

{{ if and (gt (len $c.IndexingReturnType) 0) (contains $c.Name "Array") -}}
func (cx *{{ $c.Name }}) GetIndexed(i int64) {{ goReturnType $c.IndexingReturnType }} {

    var ret {{ goReturnType $c.IndexingReturnType }}

    CallFunc_GDExtensionPtrIndexedGetter(
        global{{ $c.Name }}MethodBindings.indexed_getter,
        (GDExtensionConstTypePtr)(unsafe.Pointer(cx)),
        (GDExtensionInt)(i),
        (GDExtensionTypePtr)(unsafe.Pointer(&ret)),
    )

	return ret
}

func (cx *{{ $c.Name }}) SetIndexed(i int64, value {{ goReturnType $c.IndexingReturnType }}) {
    CallFunc_GDExtensionPtrIndexedSetter(
        global{{ $c.Name }}MethodBindings.indexed_setter,
        (GDExtensionTypePtr)(unsafe.Pointer(cx)),
        (GDExtensionInt)(i),
        (GDExtensionConstTypePtr)(unsafe.Pointer(&value)),
    )
}
{{ end -}}

// members
{{ range $j, $m := $c.Members -}}
{{ $returnType := goReturnType $m.Type }}
{{ $decodeType := goDecodeNumberType $returnType }}
func (cx *{{ $c.Name }}) {{ goMethodName (print "MemberGet" $m.Name) }}() {{ $returnType }} {
    bx := cx.ptr()
    ret := callBuiltinPtrGetter[{{ $decodeType }}](global{{ $c.Name }}MethodBindings.member_{{ $m.Name }}_getter, bx)
    {{ if (eq $decodeType $returnType) -}}
        return ret
    {{ else -}}
        return {{ goEncoder $returnType }}.DecodeArg(ret)
    {{ end }}
}
{{ end }}

{{ range $j, $op := $c.Operators -}}
// {{ upperFirstChar (getOperatorIdName $op.Name) }}{{ with $op.RightType }}_{{ $op.RightType }}{{ end }} operator
func (cx *{{ $c.Name }}) {{ upperFirstChar (getOperatorIdName $op.Name) }}{{ with $op.RightType }}_{{ $op.RightType }}{{ end }}(
    {{- if $op.RightType -}}
		right {{ goArgumentType $op.RightType }}
	{{- end -}}
) {{ goReturnType $op.ReturnType }} {
    lt := cx.ptr()
    {{ if gt (len $op.RightType) 0 -}}

    {{ $argType := goArgumentType $op.RightType }}
    {{ if goEncodeIsReference $argType -}}
    rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&right))
    {{ else -}}
    eRight := {{ goEncoder $argType }}.EncodeArg(right)
    rt := (GDExtensionConstTypePtr)(unsafe.Pointer(&eRight))
    {{ end -}}

    return callBuiltinOperatorPtr[{{ goReturnType $op.ReturnType }}](global{{ $c.Name }}MethodBindings.operator_{{ getOperatorIdName $op.Name }}_{{ $op.RightType }}, lt, rt)
    {{ else -}}
    rt := (GDExtensionConstTypePtr)(nullptr)
    return callBuiltinOperatorPtr[{{ goReturnType $op.ReturnType }}](global{{ $c.Name }}MethodBindings.operator_{{ getOperatorIdName $op.Name }}, lt, rt)
    {{ end -}}
}
{{ end -}}

{{ end -}}

func builtinClassesInitBindings() {
{{ range $i, $c := $view.FilteredBuiltinClasses -}}
    {{ lowerFirstChar $c.Name }}InitConstructorBindings()
{{ end -}}

{{ range $i, $c := $view.FilteredBuiltinClasses -}}
    {{ lowerFirstChar $c.Name }}InitMethodBindings()
{{ end -}}
}
