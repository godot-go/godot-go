package builtin

/*------------------------------------------------------------------------------
//   This code was generated by template builtinclasses.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "builtinclasses.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//revive:disable

// #include <godot/gdextension_interface.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
	"runtime"

	. "github.com/godot-go/godot-go/pkg/ffi"
	"github.com/godot-go/godot-go/pkg/log"
	"go.uber.org/zap"
)

type GDBuiltInClass interface {
	NativeConstPtr() GDExtensionConstTypePtr
	NativePtr() GDExtensionTypePtr
}

type GDBuiltInDestroyableClass interface {
	GDBuiltInClass
	Destroy()
}

const (
	StringSize             = 8
	Vector2Size            = 8
	Vector2iSize           = 8
	Rect2Size              = 16
	Rect2iSize             = 16
	Vector3Size            = 12
	Vector3iSize           = 12
	Transform2DSize        = 24
	Vector4Size            = 16
	Vector4iSize           = 16
	PlaneSize              = 16
	QuaternionSize         = 16
	AABBSize               = 24
	BasisSize              = 36
	Transform3DSize        = 48
	ProjectionSize         = 64
	ColorSize              = 16
	StringNameSize         = 8
	NodePathSize           = 8
	RIDSize                = 8
	CallableSize           = 16
	SignalSize             = 16
	DictionarySize         = 8
	ArraySize              = 8
	PackedByteArraySize    = 16
	PackedInt32ArraySize   = 16
	PackedInt64ArraySize   = 16
	PackedFloat32ArraySize = 16
	PackedFloat64ArraySize = 16
	PackedStringArraySize  = 16
	PackedVector2ArraySize = 16
	PackedVector3ArraySize = 16
	PackedColorArraySize   = 16
	PackedVector4ArraySize = 16
)

var (
	StringEncoder             argumentEncoder[String, String]
	Vector2Encoder            argumentEncoder[Vector2, Vector2]
	Vector2iEncoder           argumentEncoder[Vector2i, Vector2i]
	Rect2Encoder              argumentEncoder[Rect2, Rect2]
	Rect2iEncoder             argumentEncoder[Rect2i, Rect2i]
	Vector3Encoder            argumentEncoder[Vector3, Vector3]
	Vector3iEncoder           argumentEncoder[Vector3i, Vector3i]
	Transform2DEncoder        argumentEncoder[Transform2D, Transform2D]
	Vector4Encoder            argumentEncoder[Vector4, Vector4]
	Vector4iEncoder           argumentEncoder[Vector4i, Vector4i]
	PlaneEncoder              argumentEncoder[Plane, Plane]
	QuaternionEncoder         argumentEncoder[Quaternion, Quaternion]
	AABBEncoder               argumentEncoder[AABB, AABB]
	BasisEncoder              argumentEncoder[Basis, Basis]
	Transform3DEncoder        argumentEncoder[Transform3D, Transform3D]
	ProjectionEncoder         argumentEncoder[Projection, Projection]
	ColorEncoder              argumentEncoder[Color, Color]
	StringNameEncoder         argumentEncoder[StringName, StringName]
	NodePathEncoder           argumentEncoder[NodePath, NodePath]
	RIDEncoder                argumentEncoder[RID, RID]
	CallableEncoder           argumentEncoder[Callable, Callable]
	SignalEncoder             argumentEncoder[Signal, Signal]
	DictionaryEncoder         argumentEncoder[Dictionary, Dictionary]
	ArrayEncoder              argumentEncoder[Array, Array]
	PackedByteArrayEncoder    argumentEncoder[PackedByteArray, PackedByteArray]
	PackedInt32ArrayEncoder   argumentEncoder[PackedInt32Array, PackedInt32Array]
	PackedInt64ArrayEncoder   argumentEncoder[PackedInt64Array, PackedInt64Array]
	PackedFloat32ArrayEncoder argumentEncoder[PackedFloat32Array, PackedFloat32Array]
	PackedFloat64ArrayEncoder argumentEncoder[PackedFloat64Array, PackedFloat64Array]
	PackedStringArrayEncoder  argumentEncoder[PackedStringArray, PackedStringArray]
	PackedVector2ArrayEncoder argumentEncoder[PackedVector2Array, PackedVector2Array]
	PackedVector3ArrayEncoder argumentEncoder[PackedVector3Array, PackedVector3Array]
	PackedColorArrayEncoder   argumentEncoder[PackedColorArray, PackedColorArray]
	PackedVector4ArrayEncoder argumentEncoder[PackedVector4Array, PackedVector4Array]
)

func initBuiltinClassEncoders() {
	StringEncoder = createBuiltinClassEncoder[String](GDEXTENSION_VARIANT_TYPE_STRING, StringSize)
	Vector2Encoder = createBuiltinClassEncoder[Vector2](GDEXTENSION_VARIANT_TYPE_VECTOR2, Vector2Size)
	Vector2iEncoder = createBuiltinClassEncoder[Vector2i](GDEXTENSION_VARIANT_TYPE_VECTOR2I, Vector2iSize)
	Rect2Encoder = createBuiltinClassEncoder[Rect2](GDEXTENSION_VARIANT_TYPE_RECT2, Rect2Size)
	Rect2iEncoder = createBuiltinClassEncoder[Rect2i](GDEXTENSION_VARIANT_TYPE_RECT2I, Rect2iSize)
	Vector3Encoder = createBuiltinClassEncoder[Vector3](GDEXTENSION_VARIANT_TYPE_VECTOR3, Vector3Size)
	Vector3iEncoder = createBuiltinClassEncoder[Vector3i](GDEXTENSION_VARIANT_TYPE_VECTOR3I, Vector3iSize)
	Transform2DEncoder = createBuiltinClassEncoder[Transform2D](GDEXTENSION_VARIANT_TYPE_TRANSFORM2D, Transform2DSize)
	Vector4Encoder = createBuiltinClassEncoder[Vector4](GDEXTENSION_VARIANT_TYPE_VECTOR4, Vector4Size)
	Vector4iEncoder = createBuiltinClassEncoder[Vector4i](GDEXTENSION_VARIANT_TYPE_VECTOR4I, Vector4iSize)
	PlaneEncoder = createBuiltinClassEncoder[Plane](GDEXTENSION_VARIANT_TYPE_PLANE, PlaneSize)
	QuaternionEncoder = createBuiltinClassEncoder[Quaternion](GDEXTENSION_VARIANT_TYPE_QUATERNION, QuaternionSize)
	AABBEncoder = createBuiltinClassEncoder[AABB](GDEXTENSION_VARIANT_TYPE_AABB, AABBSize)
	BasisEncoder = createBuiltinClassEncoder[Basis](GDEXTENSION_VARIANT_TYPE_BASIS, BasisSize)
	Transform3DEncoder = createBuiltinClassEncoder[Transform3D](GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, Transform3DSize)
	ProjectionEncoder = createBuiltinClassEncoder[Projection](GDEXTENSION_VARIANT_TYPE_PROJECTION, ProjectionSize)
	ColorEncoder = createBuiltinClassEncoder[Color](GDEXTENSION_VARIANT_TYPE_COLOR, ColorSize)
	StringNameEncoder = createBuiltinClassEncoder[StringName](GDEXTENSION_VARIANT_TYPE_STRING_NAME, StringNameSize)
	NodePathEncoder = createBuiltinClassEncoder[NodePath](GDEXTENSION_VARIANT_TYPE_NODE_PATH, NodePathSize)
	RIDEncoder = createBuiltinClassEncoder[RID](GDEXTENSION_VARIANT_TYPE_RID, RIDSize)
	CallableEncoder = createBuiltinClassEncoder[Callable](GDEXTENSION_VARIANT_TYPE_CALLABLE, CallableSize)
	SignalEncoder = createBuiltinClassEncoder[Signal](GDEXTENSION_VARIANT_TYPE_SIGNAL, SignalSize)
	DictionaryEncoder = createBuiltinClassEncoder[Dictionary](GDEXTENSION_VARIANT_TYPE_DICTIONARY, DictionarySize)
	ArrayEncoder = createBuiltinClassEncoder[Array](GDEXTENSION_VARIANT_TYPE_ARRAY, ArraySize)
	PackedByteArrayEncoder = createBuiltinClassEncoder[PackedByteArray](GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, PackedByteArraySize)
	PackedInt32ArrayEncoder = createBuiltinClassEncoder[PackedInt32Array](GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY, PackedInt32ArraySize)
	PackedInt64ArrayEncoder = createBuiltinClassEncoder[PackedInt64Array](GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY, PackedInt64ArraySize)
	PackedFloat32ArrayEncoder = createBuiltinClassEncoder[PackedFloat32Array](GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY, PackedFloat32ArraySize)
	PackedFloat64ArrayEncoder = createBuiltinClassEncoder[PackedFloat64Array](GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY, PackedFloat64ArraySize)
	PackedStringArrayEncoder = createBuiltinClassEncoder[PackedStringArray](GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY, PackedStringArraySize)
	PackedVector2ArrayEncoder = createBuiltinClassEncoder[PackedVector2Array](GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY, PackedVector2ArraySize)
	PackedVector3ArrayEncoder = createBuiltinClassEncoder[PackedVector3Array](GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY, PackedVector3ArraySize)
	PackedColorArrayEncoder = createBuiltinClassEncoder[PackedColorArray](GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY, PackedColorArraySize)
	PackedVector4ArrayEncoder = createBuiltinClassEncoder[PackedVector4Array](GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR4_ARRAY, PackedVector4ArraySize)
}

// built-in classes

var _ GDBuiltInDestroyableClass = (*String)(nil)

/*
 * String
 * indexingReturnType: String
 * isKeyed: false
 * hasDestructor: true
 */
type String [8]uint8

func (cx *String) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *String) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewString, index: 0
func NewString() String {
	cx := String{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalStringMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalStringMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewString, index: 2
func NewStringWithStringName(from StringName) String {
	cx := String{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// StringName
	// StringNameEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalStringMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalStringMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewString, index: 3
func NewStringWithNodePath(from NodePath) String {
	cx := String{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// NodePath
	// NodePathEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalStringMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalStringMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *String) Destroy() {
	md := (GDExtensionPtrDestructor)(globalStringMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* CasecmpTo : casecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) CasecmpTo(to String) int64 {
	mb := globalStringMethodBindings.method_casecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* NocasecmpTo : nocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) NocasecmpTo(to String) int64 {
	mb := globalStringMethodBindings.method_nocasecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* NaturalcasecmpTo : naturalcasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) NaturalcasecmpTo(to String) int64 {
	mb := globalStringMethodBindings.method_naturalcasecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* NaturalnocasecmpTo : naturalnocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) NaturalnocasecmpTo(to String) int64 {
	mb := globalStringMethodBindings.method_naturalnocasecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FilecasecmpTo : filecasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) FilecasecmpTo(to String) int64 {
	mb := globalStringMethodBindings.method_filecasecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FilenocasecmpTo : filenocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) FilenocasecmpTo(to String) int64 {
	mb := globalStringMethodBindings.method_filenocasecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Length() int64 {
	mb := globalStringMethodBindings.method_length
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Substr : substr
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Substr(from int64, len int64) String {
	mb := globalStringMethodBindings.method_substr
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(len)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetSlice : get_slice
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetSlice(delimiter String, slice int64) String {
	mb := globalStringMethodBindings.method_get_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&delimiter)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(slice)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetSlicec : get_slicec
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetSlicec(delimiter int64, slice int64) String {
	mb := globalStringMethodBindings.method_get_slicec
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(delimiter)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(slice)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetSliceCount : get_slice_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) GetSliceCount(delimiter String) int64 {
	mb := globalStringMethodBindings.method_get_slice_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&delimiter)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Find(what String, from int64) int64 {
	mb := globalStringMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Findn : findn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Findn(what String, from int64) int64 {
	mb := globalStringMethodBindings.method_findn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Count(what String, from int64, to int64) int64 {
	mb := globalStringMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])
	args[2] = Int64Encoder.EncodeTypePtr(to)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Countn : countn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Countn(what String, from int64, to int64) int64 {
	mb := globalStringMethodBindings.method_countn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])
	args[2] = Int64Encoder.EncodeTypePtr(to)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Rfind(what String, from int64) int64 {
	mb := globalStringMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfindn : rfindn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Rfindn(what String, from int64) int64 {
	mb := globalStringMethodBindings.method_rfindn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Match : match
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) Match(expr String) bool {
	mb := globalStringMethodBindings.method_match
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&expr)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Matchn : matchn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) Matchn(expr String) bool {
	mb := globalStringMethodBindings.method_matchn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&expr)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* BeginsWith : begins_with
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) BeginsWith(text String) bool {
	mb := globalStringMethodBindings.method_begins_with
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&text)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* EndsWith : ends_with
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) EndsWith(text String) bool {
	mb := globalStringMethodBindings.method_ends_with
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&text)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsSubsequenceOf : is_subsequence_of
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsSubsequenceOf(text String) bool {
	mb := globalStringMethodBindings.method_is_subsequence_of
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&text)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsSubsequenceOfn : is_subsequence_ofn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsSubsequenceOfn(text String) bool {
	mb := globalStringMethodBindings.method_is_subsequence_ofn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&text)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Bigrams : bigrams
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *String) Bigrams() PackedStringArray {
	mb := globalStringMethodBindings.method_bigrams
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedStringArray](mb, bx, nil)
	return ret
}

/* Similarity : similarity
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *String) Similarity(text String) float32 {
	mb := globalStringMethodBindings.method_similarity
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&text)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Format : format
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Format(values Variant, placeholder String) String {
	mb := globalStringMethodBindings.method_format
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&values)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&placeholder)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Replace : replace
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Replace(what String, forwhat String) String {
	mb := globalStringMethodBindings.method_replace
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&forwhat)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Replacen : replacen
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Replacen(what String, forwhat String) String {
	mb := globalStringMethodBindings.method_replacen
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&forwhat)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ReplaceChar : replace_char
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ReplaceChar(key int64, with int64) String {
	mb := globalStringMethodBindings.method_replace_char
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(key)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(with)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ReplaceChars : replace_chars
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ReplaceChars(keys String, with int64) String {
	mb := globalStringMethodBindings.method_replace_chars
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&keys)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(with)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* RemoveChar : remove_char
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) RemoveChar(what int64) String {
	mb := globalStringMethodBindings.method_remove_char
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(what)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* RemoveChars : remove_chars
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) RemoveChars(chars String) String {
	mb := globalStringMethodBindings.method_remove_chars
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&chars)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Repeat : repeat
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Repeat(count int64) String {
	mb := globalStringMethodBindings.method_repeat
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(count)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Reverse() String {
	mb := globalStringMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Insert(position int64, what String) String {
	mb := globalStringMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(position)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Erase(position int64, chars int64) String {
	mb := globalStringMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(position)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(chars)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Capitalize : capitalize
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Capitalize() String {
	mb := globalStringMethodBindings.method_capitalize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ToCamelCase : to_camel_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToCamelCase() String {
	mb := globalStringMethodBindings.method_to_camel_case
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ToPascalCase : to_pascal_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToPascalCase() String {
	mb := globalStringMethodBindings.method_to_pascal_case
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ToSnakeCase : to_snake_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToSnakeCase() String {
	mb := globalStringMethodBindings.method_to_snake_case
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ToKebabCase : to_kebab_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToKebabCase() String {
	mb := globalStringMethodBindings.method_to_kebab_case
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Split : split
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *String) Split(delimiter String, allow_empty bool, maxsplit int64) PackedStringArray {
	mb := globalStringMethodBindings.method_split
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&delimiter)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(allow_empty)

	pnr.Pin(args[1])
	args[2] = Int64Encoder.EncodeTypePtr(maxsplit)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[PackedStringArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rsplit : rsplit
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *String) Rsplit(delimiter String, allow_empty bool, maxsplit int64) PackedStringArray {
	mb := globalStringMethodBindings.method_rsplit
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&delimiter)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(allow_empty)

	pnr.Pin(args[1])
	args[2] = Int64Encoder.EncodeTypePtr(maxsplit)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[PackedStringArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* SplitFloats : split_floats
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *String) SplitFloats(delimiter String, allow_empty bool) PackedFloat64Array {
	mb := globalStringMethodBindings.method_split_floats
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&delimiter)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(allow_empty)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Join : join
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Join(parts PackedStringArray) String {
	mb := globalStringMethodBindings.method_join
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&parts)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToUpper : to_upper
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToUpper() String {
	mb := globalStringMethodBindings.method_to_upper
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ToLower : to_lower
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ToLower() String {
	mb := globalStringMethodBindings.method_to_lower
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Left : left
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Left(length int64) String {
	mb := globalStringMethodBindings.method_left
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(length)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Right : right
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Right(length int64) String {
	mb := globalStringMethodBindings.method_right
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(length)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* StripEdges : strip_edges
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) StripEdges(left bool, right bool) String {
	mb := globalStringMethodBindings.method_strip_edges
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = BoolEncoder.EncodeTypePtr(left)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(right)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* StripEscapes : strip_escapes
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) StripEscapes() String {
	mb := globalStringMethodBindings.method_strip_escapes
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Lstrip : lstrip
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Lstrip(chars String) String {
	mb := globalStringMethodBindings.method_lstrip
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&chars)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rstrip : rstrip
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Rstrip(chars String) String {
	mb := globalStringMethodBindings.method_rstrip
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&chars)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetExtension : get_extension
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetExtension() String {
	mb := globalStringMethodBindings.method_get_extension
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* GetBasename : get_basename
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetBasename() String {
	mb := globalStringMethodBindings.method_get_basename
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* PathJoin : path_join
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) PathJoin(path String) String {
	mb := globalStringMethodBindings.method_path_join
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&path)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* UnicodeAt : unicode_at
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) UnicodeAt(at int64) int64 {
	mb := globalStringMethodBindings.method_unicode_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Indent : indent
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Indent(prefix String) String {
	mb := globalStringMethodBindings.method_indent
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&prefix)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Dedent : dedent
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Dedent() String {
	mb := globalStringMethodBindings.method_dedent
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) Hash() int64 {
	mb := globalStringMethodBindings.method_hash
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Md5Text : md5_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Md5Text() String {
	mb := globalStringMethodBindings.method_md5_text
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Sha1Text : sha1_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Sha1Text() String {
	mb := globalStringMethodBindings.method_sha1_text
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Sha256Text : sha256_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Sha256Text() String {
	mb := globalStringMethodBindings.method_sha256_text
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Md5Buffer : md5_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) Md5Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_md5_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sha1Buffer : sha1_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) Sha1Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_sha1_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sha256Buffer : sha256_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) Sha256Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_sha256_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsEmpty() bool {
	mb := globalStringMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* Contains : contains
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) Contains(what String) bool {
	mb := globalStringMethodBindings.method_contains
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Containsn : containsn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) Containsn(what String) bool {
	mb := globalStringMethodBindings.method_containsn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsAbsolutePath : is_absolute_path
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsAbsolutePath() bool {
	mb := globalStringMethodBindings.method_is_absolute_path
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsRelativePath : is_relative_path
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsRelativePath() bool {
	mb := globalStringMethodBindings.method_is_relative_path
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* SimplifyPath : simplify_path
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) SimplifyPath() String {
	mb := globalStringMethodBindings.method_simplify_path
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* GetBaseDir : get_base_dir
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetBaseDir() String {
	mb := globalStringMethodBindings.method_get_base_dir
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* GetFile : get_file
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) GetFile() String {
	mb := globalStringMethodBindings.method_get_file
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* XmlEscape : xml_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) XmlEscape(escape_quotes bool) String {
	mb := globalStringMethodBindings.method_xml_escape
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = BoolEncoder.EncodeTypePtr(escape_quotes)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* XmlUnescape : xml_unescape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) XmlUnescape() String {
	mb := globalStringMethodBindings.method_xml_unescape
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* UriEncode : uri_encode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) UriEncode() String {
	mb := globalStringMethodBindings.method_uri_encode
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* UriDecode : uri_decode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) UriDecode() String {
	mb := globalStringMethodBindings.method_uri_decode
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* UriFileDecode : uri_file_decode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) UriFileDecode() String {
	mb := globalStringMethodBindings.method_uri_file_decode
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* CEscape : c_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) CEscape() String {
	mb := globalStringMethodBindings.method_c_escape
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* CUnescape : c_unescape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) CUnescape() String {
	mb := globalStringMethodBindings.method_c_unescape
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* JsonEscape : json_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) JsonEscape() String {
	mb := globalStringMethodBindings.method_json_escape
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ValidateNodeName : validate_node_name
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ValidateNodeName() String {
	mb := globalStringMethodBindings.method_validate_node_name
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ValidateFilename : validate_filename
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) ValidateFilename() String {
	mb := globalStringMethodBindings.method_validate_filename
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* IsValidAsciiIdentifier : is_valid_ascii_identifier
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidAsciiIdentifier() bool {
	mb := globalStringMethodBindings.method_is_valid_ascii_identifier
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidUnicodeIdentifier : is_valid_unicode_identifier
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidUnicodeIdentifier() bool {
	mb := globalStringMethodBindings.method_is_valid_unicode_identifier
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidIdentifier : is_valid_identifier
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidIdentifier() bool {
	mb := globalStringMethodBindings.method_is_valid_identifier
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidInt : is_valid_int
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidInt() bool {
	mb := globalStringMethodBindings.method_is_valid_int
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidFloat : is_valid_float
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidFloat() bool {
	mb := globalStringMethodBindings.method_is_valid_float
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidHexNumber : is_valid_hex_number
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidHexNumber(with_prefix bool) bool {
	mb := globalStringMethodBindings.method_is_valid_hex_number
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = BoolEncoder.EncodeTypePtr(with_prefix)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsValidHtmlColor : is_valid_html_color
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidHtmlColor() bool {
	mb := globalStringMethodBindings.method_is_valid_html_color
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidIpAddress : is_valid_ip_address
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidIpAddress() bool {
	mb := globalStringMethodBindings.method_is_valid_ip_address
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidFilename : is_valid_filename
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *String) IsValidFilename() bool {
	mb := globalStringMethodBindings.method_is_valid_filename
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* ToInt : to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) ToInt() int64 {
	mb := globalStringMethodBindings.method_to_int
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* ToFloat : to_float
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *String) ToFloat() float32 {
	mb := globalStringMethodBindings.method_to_float
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* HexToInt : hex_to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) HexToInt() int64 {
	mb := globalStringMethodBindings.method_hex_to_int
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* BinToInt : bin_to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *String) BinToInt() int64 {
	mb := globalStringMethodBindings.method_bin_to_int
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Lpad : lpad
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Lpad(min_length int64, character String) String {
	mb := globalStringMethodBindings.method_lpad
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(min_length)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&character)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rpad : rpad
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) Rpad(min_length int64, character String) String {
	mb := globalStringMethodBindings.method_rpad
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(min_length)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&character)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* PadDecimals : pad_decimals
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) PadDecimals(digits int64) String {
	mb := globalStringMethodBindings.method_pad_decimals
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(digits)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* PadZeros : pad_zeros
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) PadZeros(digits int64) String {
	mb := globalStringMethodBindings.method_pad_zeros
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(digits)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* TrimPrefix : trim_prefix
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) TrimPrefix(prefix String) String {
	mb := globalStringMethodBindings.method_trim_prefix
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&prefix)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* TrimSuffix : trim_suffix
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *String) TrimSuffix(suffix String) String {
	mb := globalStringMethodBindings.method_trim_suffix
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&suffix)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToAsciiBuffer : to_ascii_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToAsciiBuffer() PackedByteArray {
	mb := globalStringMethodBindings.method_to_ascii_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* ToUtf8Buffer : to_utf8_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToUtf8Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_to_utf8_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* ToUtf16Buffer : to_utf16_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToUtf16Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_to_utf16_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* ToUtf32Buffer : to_utf32_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToUtf32Buffer() PackedByteArray {
	mb := globalStringMethodBindings.method_to_utf32_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* ToWcharBuffer : to_wchar_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToWcharBuffer() PackedByteArray {
	mb := globalStringMethodBindings.method_to_wchar_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* ToMultibyteCharBuffer : to_multibyte_char_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) ToMultibyteCharBuffer(encoding String) PackedByteArray {
	mb := globalStringMethodBindings.method_to_multibyte_char_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&encoding)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* HexDecode : hex_decode
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *String) HexDecode() PackedByteArray {
	mb := globalStringMethodBindings.method_hex_decode
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* NumScientific : num_scientific
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) NumScientific(number float32) String {
	mb := globalStringMethodBindings.method_num_scientific
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(number)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Num : num
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) Num(number float32, decimals int64) String {
	mb := globalStringMethodBindings.method_num
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(number)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(decimals)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* NumInt64 : num_int64
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) NumInt64(number int64, base int64, capitalize_hex bool) String {
	mb := globalStringMethodBindings.method_num_int64
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(number)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(base)

	pnr.Pin(args[1])
	args[2] = BoolEncoder.EncodeTypePtr(capitalize_hex)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* NumUint64 : num_uint64
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) NumUint64(number int64, base int64, capitalize_hex bool) String {
	mb := globalStringMethodBindings.method_num_uint64
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(number)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(base)

	pnr.Pin(args[1])
	args[2] = BoolEncoder.EncodeTypePtr(capitalize_hex)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Chr : chr
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) Chr(code int64) String {
	mb := globalStringMethodBindings.method_chr
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(code)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* HumanizeSize : humanize_size
 * is_vararg = false, is_static = true
 * goReturnType(String) -> String
 */
func (cx *String) HumanizeSize(size int64) String {
	mb := globalStringMethodBindings.method_humanize_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *String) GetIndexed(i int64) String {
	var ret String
	CallFunc_GDExtensionPtrIndexedGetter(
		globalStringMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *String) SetIndexed(i int64, value String) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalStringMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *String) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *String) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Module_Variant operator
func (cx *String) Module_Variant(right Variant) String {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Variant, lt, rt)
}

// Not operator
func (cx *String) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_not, lt, rt)
}

// Module_bool operator
func (cx *String) Module_bool(right bool) String {
	lt := cx.NativeConstPtr()
	eRight := BoolEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_bool, lt, rt)
}

// Module_int operator
func (cx *String) Module_int(right int64) String {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_int, lt, rt)
}

// Module_float operator
func (cx *String) Module_float(right float32) String {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_float, lt, rt)
}

// Equal_String operator
func (cx *String) Equal_String(right String) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_equal_String, lt, rt)
}

// Not_equal_String operator
func (cx *String) Not_equal_String(right String) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_not_equal_String, lt, rt)
}

// Less_String operator
func (cx *String) Less_String(right String) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_less_String, lt, rt)
}

// Less_equal_String operator
func (cx *String) Less_equal_String(right String) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_less_equal_String, lt, rt)
}

// Greater_String operator
func (cx *String) Greater_String(right String) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_greater_String, lt, rt)
}

// Greater_equal_String operator
func (cx *String) Greater_equal_String(right String) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_greater_equal_String, lt, rt)
}

// Add_String operator
func (cx *String) Add_String(right String) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_add_String, lt, rt)
}

// Module_String operator
func (cx *String) Module_String(right String) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_String, lt, rt)
}

// In_String operator
func (cx *String) In_String(right String) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_String, lt, rt)
}

// Module_Vector2 operator
func (cx *String) Module_Vector2(right Vector2) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector2, lt, rt)
}

// Module_Vector2i operator
func (cx *String) Module_Vector2i(right Vector2i) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector2i, lt, rt)
}

// Module_Rect2 operator
func (cx *String) Module_Rect2(right Rect2) String {
	lt := cx.NativeConstPtr()
	eRight := Rect2Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Rect2, lt, rt)
}

// Module_Rect2i operator
func (cx *String) Module_Rect2i(right Rect2i) String {
	lt := cx.NativeConstPtr()
	eRight := Rect2iEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Rect2i, lt, rt)
}

// Module_Vector3 operator
func (cx *String) Module_Vector3(right Vector3) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector3, lt, rt)
}

// Module_Vector3i operator
func (cx *String) Module_Vector3i(right Vector3i) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector3i, lt, rt)
}

// Module_Transform2D operator
func (cx *String) Module_Transform2D(right Transform2D) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Transform2D, lt, rt)
}

// Module_Vector4 operator
func (cx *String) Module_Vector4(right Vector4) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector4, lt, rt)
}

// Module_Vector4i operator
func (cx *String) Module_Vector4i(right Vector4i) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Vector4i, lt, rt)
}

// Module_Plane operator
func (cx *String) Module_Plane(right Plane) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Plane, lt, rt)
}

// Module_Quaternion operator
func (cx *String) Module_Quaternion(right Quaternion) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Quaternion, lt, rt)
}

// Module_AABB operator
func (cx *String) Module_AABB(right AABB) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_AABB, lt, rt)
}

// Module_Basis operator
func (cx *String) Module_Basis(right Basis) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Basis, lt, rt)
}

// Module_Transform3D operator
func (cx *String) Module_Transform3D(right Transform3D) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Transform3D, lt, rt)
}

// Module_Projection operator
func (cx *String) Module_Projection(right Projection) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Projection, lt, rt)
}

// Module_Color operator
func (cx *String) Module_Color(right Color) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Color, lt, rt)
}

// Equal_StringName operator
func (cx *String) Equal_StringName(right StringName) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_equal_StringName, lt, rt)
}

// Not_equal_StringName operator
func (cx *String) Not_equal_StringName(right StringName) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_not_equal_StringName, lt, rt)
}

// Add_StringName operator
func (cx *String) Add_StringName(right StringName) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_add_StringName, lt, rt)
}

// Module_StringName operator
func (cx *String) Module_StringName(right StringName) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_StringName, lt, rt)
}

// In_StringName operator
func (cx *String) In_StringName(right StringName) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_StringName, lt, rt)
}

// Module_NodePath operator
func (cx *String) Module_NodePath(right NodePath) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_NodePath, lt, rt)
}

// Module_RID operator
func (cx *String) Module_RID(right RID) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_RID, lt, rt)
}

// Module_Object operator
func (cx *String) Module_Object(right Object) String {
	lt := cx.NativeConstPtr()
	eRight := ObjectEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Object, lt, rt)
}

// In_Object operator
func (cx *String) In_Object(right Object) bool {
	lt := cx.NativeConstPtr()
	eRight := ObjectEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_Object, lt, rt)
}

// Module_Callable operator
func (cx *String) Module_Callable(right Callable) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Callable, lt, rt)
}

// Module_Signal operator
func (cx *String) Module_Signal(right Signal) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Signal, lt, rt)
}

// Module_Dictionary operator
func (cx *String) Module_Dictionary(right Dictionary) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Dictionary, lt, rt)
}

// In_Dictionary operator
func (cx *String) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_Dictionary, lt, rt)
}

// Module_Array operator
func (cx *String) Module_Array(right Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_Array, lt, rt)
}

// In_Array operator
func (cx *String) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_Array, lt, rt)
}

// Module_PackedByteArray operator
func (cx *String) Module_PackedByteArray(right PackedByteArray) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedByteArray, lt, rt)
}

// Module_PackedInt32Array operator
func (cx *String) Module_PackedInt32Array(right PackedInt32Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedInt32Array, lt, rt)
}

// Module_PackedInt64Array operator
func (cx *String) Module_PackedInt64Array(right PackedInt64Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedInt64Array, lt, rt)
}

// Module_PackedFloat32Array operator
func (cx *String) Module_PackedFloat32Array(right PackedFloat32Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedFloat32Array, lt, rt)
}

// Module_PackedFloat64Array operator
func (cx *String) Module_PackedFloat64Array(right PackedFloat64Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedFloat64Array, lt, rt)
}

// Module_PackedStringArray operator
func (cx *String) Module_PackedStringArray(right PackedStringArray) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedStringArray, lt, rt)
}

// In_PackedStringArray operator
func (cx *String) In_PackedStringArray(right PackedStringArray) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringMethodBindings.operator_in_PackedStringArray, lt, rt)
}

// Module_PackedVector2Array operator
func (cx *String) Module_PackedVector2Array(right PackedVector2Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedVector2Array, lt, rt)
}

// Module_PackedVector3Array operator
func (cx *String) Module_PackedVector3Array(right PackedVector3Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedVector3Array, lt, rt)
}

// Module_PackedColorArray operator
func (cx *String) Module_PackedColorArray(right PackedColorArray) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedColorArray, lt, rt)
}

// Module_PackedVector4Array operator
func (cx *String) Module_PackedVector4Array(right PackedVector4Array) String {
	lt := cx.NativeConstPtr()
	eRight := PackedVector4ArrayEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringMethodBindings.operator_module_PackedVector4Array, lt, rt)
}

var _ GDBuiltInClass = (*Vector2)(nil)

/*
 * Vector2
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: false
 */
type Vector2 [8]uint8

func (cx *Vector2) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Vector2) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewVector2, index: 0
func NewVector2() Vector2 {
	cx := Vector2{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalVector2MethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector2MethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewVector2, index: 1
func NewVector2WithVector2(from Vector2) Vector2 {
	cx := Vector2{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector2
	// Vector2Encoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector2MethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector2MethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewVector2, index: 2
func NewVector2WithVector2i(from Vector2i) Vector2 {
	cx := Vector2{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector2i
	// Vector2iEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector2MethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector2MethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewVector2, index: 3
func NewVector2WithFloat32Float32(x float32, y float32) Vector2 {
	cx := Vector2{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// float
	args[0] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(x))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(y))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalVector2MethodBindings.constructor_3, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector2MethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// methods

/* Angle : angle
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Angle() float32 {
	mb := globalVector2MethodBindings.method_angle
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* AngleTo : angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) AngleTo(to Vector2) float32 {
	mb := globalVector2MethodBindings.method_angle_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* AngleToPoint : angle_to_point
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) AngleToPoint(to Vector2) float32 {
	mb := globalVector2MethodBindings.method_angle_to_point
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DirectionTo : direction_to
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) DirectionTo(to Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_direction_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) DistanceTo(to Vector2) float32 {
	mb := globalVector2MethodBindings.method_distance_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) DistanceSquaredTo(to Vector2) float32 {
	mb := globalVector2MethodBindings.method_distance_squared_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Length() float32 {
	mb := globalVector2MethodBindings.method_length
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) LengthSquared() float32 {
	mb := globalVector2MethodBindings.method_length_squared
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* LimitLength : limit_length
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) LimitLength(length float32) Vector2 {
	mb := globalVector2MethodBindings.method_limit_length
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(length)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Normalized() Vector2 {
	mb := globalVector2MethodBindings.method_normalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector2) IsNormalized() bool {
	mb := globalVector2MethodBindings.method_is_normalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector2) IsEqualApprox(to Vector2) bool {
	mb := globalVector2MethodBindings.method_is_equal_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsZeroApprox : is_zero_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector2) IsZeroApprox() bool {
	mb := globalVector2MethodBindings.method_is_zero_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector2) IsFinite() bool {
	mb := globalVector2MethodBindings.method_is_finite
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* Posmod : posmod
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Posmod(mod float32) Vector2 {
	mb := globalVector2MethodBindings.method_posmod
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(mod)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Posmodv : posmodv
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Posmodv(modv Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_posmodv
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&modv)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Project : project
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Project(b Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_project
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Lerp(to Vector2, weight float32) Vector2 {
	mb := globalVector2MethodBindings.method_lerp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Slerp(to Vector2, weight float32) Vector2 {
	mb := globalVector2MethodBindings.method_slerp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CubicInterpolate : cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) CubicInterpolate(b Vector2, pre_a Vector2, post_b Vector2, weight float32) Vector2 {
	mb := globalVector2MethodBindings.method_cubic_interpolate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&pre_a)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&post_b)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CubicInterpolateInTime : cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) CubicInterpolateInTime(b Vector2, pre_a Vector2, post_b Vector2, weight float32, b_t float32, pre_a_t float32, post_b_t float32) Vector2 {
	mb := globalVector2MethodBindings.method_cubic_interpolate_in_time
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 7
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&pre_a)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&post_b)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[3])
	args[4] = Float32Encoder.EncodeTypePtr(b_t)

	pnr.Pin(args[4])
	args[5] = Float32Encoder.EncodeTypePtr(pre_a_t)

	pnr.Pin(args[5])
	args[6] = Float32Encoder.EncodeTypePtr(post_b_t)

	pnr.Pin(args[6])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* BezierInterpolate : bezier_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) BezierInterpolate(control_1 Vector2, control_2 Vector2, end Vector2, t float32) Vector2 {
	mb := globalVector2MethodBindings.method_bezier_interpolate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&control_1)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&control_2)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&end)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(t)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* BezierDerivative : bezier_derivative
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) BezierDerivative(control_1 Vector2, control_2 Vector2, end Vector2, t float32) Vector2 {
	mb := globalVector2MethodBindings.method_bezier_derivative
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&control_1)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&control_2)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&end)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(t)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector2) MaxAxisIndex() int64 {
	mb := globalVector2MethodBindings.method_max_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector2) MinAxisIndex() int64 {
	mb := globalVector2MethodBindings.method_min_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* MoveToward : move_toward
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) MoveToward(to Vector2, delta float32) Vector2 {
	mb := globalVector2MethodBindings.method_move_toward
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(delta)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Rotated(angle float32) Vector2 {
	mb := globalVector2MethodBindings.method_rotated
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(angle)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Orthogonal : orthogonal
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Orthogonal() Vector2 {
	mb := globalVector2MethodBindings.method_orthogonal
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* Floor : floor
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Floor() Vector2 {
	mb := globalVector2MethodBindings.method_floor
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* Ceil : ceil
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Ceil() Vector2 {
	mb := globalVector2MethodBindings.method_ceil
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* Round : round
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Round() Vector2 {
	mb := globalVector2MethodBindings.method_round
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* Aspect : aspect
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Aspect() float32 {
	mb := globalVector2MethodBindings.method_aspect
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Dot(with Vector2) float32 {
	mb := globalVector2MethodBindings.method_dot
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Slide : slide
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Slide(n Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_slide
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&n)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Bounce : bounce
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Bounce(n Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_bounce
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&n)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reflect : reflect
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Reflect(line Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_reflect
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&line)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Cross : cross
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2) Cross(with Vector2) float32 {
	mb := globalVector2MethodBindings.method_cross
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Abs() Vector2 {
	mb := globalVector2MethodBindings.method_abs
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Sign() Vector2 {
	mb := globalVector2MethodBindings.method_sign
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Clamp(min Vector2, max Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_clamp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&min)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clampf : clampf
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Clampf(min float32, max float32) Vector2 {
	mb := globalVector2MethodBindings.method_clampf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(min)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Snapped(step Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_snapped
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snappedf : snappedf
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Snappedf(step float32) Vector2 {
	mb := globalVector2MethodBindings.method_snappedf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Min : min
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Min(with Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_min
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Minf : minf
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Minf(with float32) Vector2 {
	mb := globalVector2MethodBindings.method_minf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Max : max
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Max(with Vector2) Vector2 {
	mb := globalVector2MethodBindings.method_max
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Maxf : maxf
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) Maxf(with float32) Vector2 {
	mb := globalVector2MethodBindings.method_maxf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FromAngle : from_angle
 * is_vararg = false, is_static = true
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector2) FromAngle(angle float32) Vector2 {
	mb := globalVector2MethodBindings.method_from_angle
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(angle)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *Vector2) GetIndexed(i int64) float32 {
	var ret float32
	CallFunc_GDExtensionPtrIndexedGetter(
		globalVector2MethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Vector2) SetIndexed(i int64, value float32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalVector2MethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members

func (cx *Vector2) MemberGetx() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalVector2MethodBindings.member_x_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Vector2) MemberGety() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalVector2MethodBindings.member_y_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

// Equal_Variant operator
func (cx *Vector2) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector2) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector2) Negate() Vector2 {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector2) Positive() Vector2 {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_positive, lt, rt)
}

// Not operator
func (cx *Vector2) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_not, lt, rt)
}

// Multiply_int operator
func (cx *Vector2) Multiply_int(right int64) Vector2 {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector2) Divide_int(right int64) Vector2 {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector2) Multiply_float(right float32) Vector2 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector2) Divide_float(right float32) Vector2 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector2 operator
func (cx *Vector2) Equal_Vector2(right Vector2) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_equal_Vector2, lt, rt)
}

// Not_equal_Vector2 operator
func (cx *Vector2) Not_equal_Vector2(right Vector2) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_not_equal_Vector2, lt, rt)
}

// Less_Vector2 operator
func (cx *Vector2) Less_Vector2(right Vector2) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_less_Vector2, lt, rt)
}

// Less_equal_Vector2 operator
func (cx *Vector2) Less_equal_Vector2(right Vector2) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_less_equal_Vector2, lt, rt)
}

// Greater_Vector2 operator
func (cx *Vector2) Greater_Vector2(right Vector2) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_greater_Vector2, lt, rt)
}

// Greater_equal_Vector2 operator
func (cx *Vector2) Greater_equal_Vector2(right Vector2) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_greater_equal_Vector2, lt, rt)
}

// Add_Vector2 operator
func (cx *Vector2) Add_Vector2(right Vector2) Vector2 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_add_Vector2, lt, rt)
}

// Subtract_Vector2 operator
func (cx *Vector2) Subtract_Vector2(right Vector2) Vector2 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_subtract_Vector2, lt, rt)
}

// Multiply_Vector2 operator
func (cx *Vector2) Multiply_Vector2(right Vector2) Vector2 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_Vector2, lt, rt)
}

// Divide_Vector2 operator
func (cx *Vector2) Divide_Vector2(right Vector2) Vector2 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_divide_Vector2, lt, rt)
}

// Multiply_Transform2D operator
func (cx *Vector2) Multiply_Transform2D(right Transform2D) Vector2 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector2](globalVector2MethodBindings.operator_multiply_Transform2D, lt, rt)
}

// In_Dictionary operator
func (cx *Vector2) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector2) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_in_Array, lt, rt)
}

// In_PackedVector2Array operator
func (cx *Vector2) In_PackedVector2Array(right PackedVector2Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2MethodBindings.operator_in_PackedVector2Array, lt, rt)
}

var _ GDBuiltInClass = (*Vector2i)(nil)

/*
 * Vector2i
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: false
 */
type Vector2i [8]uint8

func (cx *Vector2i) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Vector2i) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewVector2i, index: 0
func NewVector2i() Vector2i {
	cx := Vector2i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalVector2iMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector2iMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewVector2i, index: 1
func NewVector2iWithVector2i(from Vector2i) Vector2i {
	cx := Vector2i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector2i
	// Vector2iEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector2iMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector2iMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewVector2i, index: 2
func NewVector2iWithVector2(from Vector2) Vector2i {
	cx := Vector2i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector2
	// Vector2Encoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector2iMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector2iMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewVector2i, index: 3
func NewVector2iWithInt64Int64(x int64, y int64) Vector2i {
	cx := Vector2i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// int
	args[0] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(x))
	pnr.Pin(args[0])
	// int
	args[1] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(y))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalVector2iMethodBindings.constructor_3, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector2iMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// methods

/* Aspect : aspect
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2i) Aspect() float32 {
	mb := globalVector2iMethodBindings.method_aspect
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector2i) MaxAxisIndex() int64 {
	mb := globalVector2iMethodBindings.method_max_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector2i) MinAxisIndex() int64 {
	mb := globalVector2iMethodBindings.method_min_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2i) DistanceTo(to Vector2i) float32 {
	mb := globalVector2iMethodBindings.method_distance_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector2i) DistanceSquaredTo(to Vector2i) int64 {
	mb := globalVector2iMethodBindings.method_distance_squared_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector2i) Length() float32 {
	mb := globalVector2iMethodBindings.method_length
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector2i) LengthSquared() int64 {
	mb := globalVector2iMethodBindings.method_length_squared
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Sign() Vector2i {
	mb := globalVector2iMethodBindings.method_sign
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2i](mb, bx, nil)
	return ret
}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Abs() Vector2i {
	mb := globalVector2iMethodBindings.method_abs
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2i](mb, bx, nil)
	return ret
}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Clamp(min Vector2i, max Vector2i) Vector2i {
	mb := globalVector2iMethodBindings.method_clamp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&min)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clampi : clampi
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Clampi(min int64, max int64) Vector2i {
	mb := globalVector2iMethodBindings.method_clampi
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(min)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Snapped(step Vector2i) Vector2i {
	mb := globalVector2iMethodBindings.method_snapped
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snappedi : snappedi
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Snappedi(step int64) Vector2i {
	mb := globalVector2iMethodBindings.method_snappedi
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Min : min
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Min(with Vector2i) Vector2i {
	mb := globalVector2iMethodBindings.method_min
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Mini : mini
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Mini(with int64) Vector2i {
	mb := globalVector2iMethodBindings.method_mini
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Max : max
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Max(with Vector2i) Vector2i {
	mb := globalVector2iMethodBindings.method_max
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Maxi : maxi
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Vector2i) Maxi(with int64) Vector2i {
	mb := globalVector2iMethodBindings.method_maxi
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *Vector2i) GetIndexed(i int64) int64 {
	var ret int64
	CallFunc_GDExtensionPtrIndexedGetter(
		globalVector2iMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Vector2i) SetIndexed(i int64, value int64) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalVector2iMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members

func (cx *Vector2i) MemberGetx() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalVector2iMethodBindings.member_x_getter, bx)
	return ret

}

func (cx *Vector2i) MemberGety() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalVector2iMethodBindings.member_y_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Vector2i) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector2i) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector2i) Negate() Vector2i {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector2i) Positive() Vector2i {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_positive, lt, rt)
}

// Not operator
func (cx *Vector2i) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_not, lt, rt)
}

// Multiply_int operator
func (cx *Vector2i) Multiply_int(right int64) Vector2i {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector2i) Divide_int(right int64) Vector2i {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_divide_int, lt, rt)
}

// Module_int operator
func (cx *Vector2i) Module_int(right int64) Vector2i {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_module_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector2i) Multiply_float(right float32) Vector2 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector2](globalVector2iMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector2i) Divide_float(right float32) Vector2 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector2](globalVector2iMethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector2i operator
func (cx *Vector2i) Equal_Vector2i(right Vector2i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_equal_Vector2i, lt, rt)
}

// Not_equal_Vector2i operator
func (cx *Vector2i) Not_equal_Vector2i(right Vector2i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_not_equal_Vector2i, lt, rt)
}

// Less_Vector2i operator
func (cx *Vector2i) Less_Vector2i(right Vector2i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_less_Vector2i, lt, rt)
}

// Less_equal_Vector2i operator
func (cx *Vector2i) Less_equal_Vector2i(right Vector2i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_less_equal_Vector2i, lt, rt)
}

// Greater_Vector2i operator
func (cx *Vector2i) Greater_Vector2i(right Vector2i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_greater_Vector2i, lt, rt)
}

// Greater_equal_Vector2i operator
func (cx *Vector2i) Greater_equal_Vector2i(right Vector2i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_greater_equal_Vector2i, lt, rt)
}

// Add_Vector2i operator
func (cx *Vector2i) Add_Vector2i(right Vector2i) Vector2i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_add_Vector2i, lt, rt)
}

// Subtract_Vector2i operator
func (cx *Vector2i) Subtract_Vector2i(right Vector2i) Vector2i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_subtract_Vector2i, lt, rt)
}

// Multiply_Vector2i operator
func (cx *Vector2i) Multiply_Vector2i(right Vector2i) Vector2i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_multiply_Vector2i, lt, rt)
}

// Divide_Vector2i operator
func (cx *Vector2i) Divide_Vector2i(right Vector2i) Vector2i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_divide_Vector2i, lt, rt)
}

// Module_Vector2i operator
func (cx *Vector2i) Module_Vector2i(right Vector2i) Vector2i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector2i](globalVector2iMethodBindings.operator_module_Vector2i, lt, rt)
}

// In_Dictionary operator
func (cx *Vector2i) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector2i) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector2iMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInClass = (*Rect2)(nil)

/*
 * Rect2
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type Rect2 [16]uint8

func (cx *Rect2) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Rect2) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewRect2, index: 0
func NewRect2() Rect2 {
	cx := Rect2{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalRect2MethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRect2MethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewRect2, index: 1
func NewRect2WithRect2(from Rect2) Rect2 {
	cx := Rect2{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Rect2
	// Rect2Encoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalRect2MethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRect2MethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewRect2, index: 2
func NewRect2WithRect2i(from Rect2i) Rect2 {
	cx := Rect2{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Rect2i
	// Rect2iEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalRect2MethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRect2MethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewRect2, index: 3
func NewRect2WithVector2Vector2(position Vector2, size Vector2) Rect2 {
	cx := Rect2{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Vector2
	// Vector2Encoder
	args[0] = position.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("position", position))
	pnr.Pin(args[0])
	// Vector2
	// Vector2Encoder
	args[1] = size.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("size", size))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalRect2MethodBindings.constructor_3, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRect2MethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// NewRect2, index: 4
func NewRect2WithFloat32Float32Float32Float32(x float32, y float32, width float32, height float32) Rect2 {
	cx := Rect2{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [4]GDExtensionConstTypePtr
	// float
	args[0] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(x))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(y))
	pnr.Pin(args[1])
	// float
	args[2] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(width))
	pnr.Pin(args[2])
	// float
	args[3] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(height))
	pnr.Pin(args[3])
	CallBuiltinConstructor(globalRect2MethodBindings.constructor_4, ptr, args[0], args[1], args[2], args[3])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRect2MethodBindings.constructor_4"), zap.Any("cx", cx))
	return cx
}

// methods

/* GetCenter : get_center
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Rect2) GetCenter() Vector2 {
	mb := globalRect2MethodBindings.method_get_center
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* GetArea : get_area
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Rect2) GetArea() float32 {
	mb := globalRect2MethodBindings.method_get_area
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* HasArea : has_area
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) HasArea() bool {
	mb := globalRect2MethodBindings.method_has_area
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) HasPoint(point Vector2) bool {
	mb := globalRect2MethodBindings.method_has_point
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&point)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) IsEqualApprox(rect Rect2) bool {
	mb := globalRect2MethodBindings.method_is_equal_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Rect2Encoder.EncodeTypePtr(rect)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) IsFinite() bool {
	mb := globalRect2MethodBindings.method_is_finite
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* Intersects : intersects
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) Intersects(b Rect2, include_borders bool) bool {
	mb := globalRect2MethodBindings.method_intersects
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Rect2Encoder.EncodeTypePtr(b)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(include_borders)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Encloses : encloses
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2) Encloses(b Rect2) bool {
	mb := globalRect2MethodBindings.method_encloses
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Rect2Encoder.EncodeTypePtr(b)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Intersection : intersection
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Intersection(b Rect2) Rect2 {
	mb := globalRect2MethodBindings.method_intersection
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Rect2Encoder.EncodeTypePtr(b)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Merge(b Rect2) Rect2 {
	mb := globalRect2MethodBindings.method_merge
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Rect2Encoder.EncodeTypePtr(b)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Expand : expand
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Expand(to Vector2) Rect2 {
	mb := globalRect2MethodBindings.method_expand
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetSupport : get_support
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Rect2) GetSupport(direction Vector2) Vector2 {
	mb := globalRect2MethodBindings.method_get_support
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&direction)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Grow : grow
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Grow(amount float32) Rect2 {
	mb := globalRect2MethodBindings.method_grow
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(amount)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GrowSide : grow_side
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) GrowSide(side int64, amount float32) Rect2 {
	mb := globalRect2MethodBindings.method_grow_side
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(side)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(amount)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GrowIndividual : grow_individual
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) GrowIndividual(left float32, top float32, right float32, bottom float32) Rect2 {
	mb := globalRect2MethodBindings.method_grow_individual
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(left)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(top)

	pnr.Pin(args[1])
	args[2] = Float32Encoder.EncodeTypePtr(right)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(bottom)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Rect2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Rect2) -> Rect2
 */
func (cx *Rect2) Abs() Rect2 {
	mb := globalRect2MethodBindings.method_abs
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Rect2](mb, bx, nil)
	return ret
}

// members

func (cx *Rect2) MemberGetposition() Vector2 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector2](globalRect2MethodBindings.member_position_getter, bx)
	return ret

}

func (cx *Rect2) MemberGetsize() Vector2 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector2](globalRect2MethodBindings.member_size_getter, bx)
	return ret

}

func (cx *Rect2) MemberGetend() Vector2 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector2](globalRect2MethodBindings.member_end_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Rect2) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Rect2) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *Rect2) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_not, lt, rt)
}

// Equal_Rect2 operator
func (cx *Rect2) Equal_Rect2(right Rect2) bool {
	lt := cx.NativeConstPtr()
	eRight := Rect2Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_equal_Rect2, lt, rt)
}

// Not_equal_Rect2 operator
func (cx *Rect2) Not_equal_Rect2(right Rect2) bool {
	lt := cx.NativeConstPtr()
	eRight := Rect2Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_not_equal_Rect2, lt, rt)
}

// Multiply_Transform2D operator
func (cx *Rect2) Multiply_Transform2D(right Transform2D) Rect2 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Rect2](globalRect2MethodBindings.operator_multiply_Transform2D, lt, rt)
}

// In_Dictionary operator
func (cx *Rect2) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Rect2) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRect2MethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInClass = (*Rect2i)(nil)

/*
 * Rect2i
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type Rect2i [16]uint8

func (cx *Rect2i) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Rect2i) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewRect2i, index: 0
func NewRect2i() Rect2i {
	cx := Rect2i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalRect2iMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRect2iMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewRect2i, index: 1
func NewRect2iWithRect2i(from Rect2i) Rect2i {
	cx := Rect2i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Rect2i
	// Rect2iEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalRect2iMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRect2iMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewRect2i, index: 2
func NewRect2iWithRect2(from Rect2) Rect2i {
	cx := Rect2i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Rect2
	// Rect2Encoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalRect2iMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRect2iMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewRect2i, index: 3
func NewRect2iWithVector2iVector2i(position Vector2i, size Vector2i) Rect2i {
	cx := Rect2i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Vector2i
	// Vector2iEncoder
	args[0] = position.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("position", position))
	pnr.Pin(args[0])
	// Vector2i
	// Vector2iEncoder
	args[1] = size.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("size", size))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalRect2iMethodBindings.constructor_3, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRect2iMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// NewRect2i, index: 4
func NewRect2iWithInt64Int64Int64Int64(x int64, y int64, width int64, height int64) Rect2i {
	cx := Rect2i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [4]GDExtensionConstTypePtr
	// int
	args[0] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(x))
	pnr.Pin(args[0])
	// int
	args[1] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(y))
	pnr.Pin(args[1])
	// int
	args[2] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(width))
	pnr.Pin(args[2])
	// int
	args[3] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(height))
	pnr.Pin(args[3])
	CallBuiltinConstructor(globalRect2iMethodBindings.constructor_4, ptr, args[0], args[1], args[2], args[3])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRect2iMethodBindings.constructor_4"), zap.Any("cx", cx))
	return cx
}

// methods

/* GetCenter : get_center
 * is_vararg = false, is_static = false
 * goReturnType(Vector2i) -> Vector2i
 */
func (cx *Rect2i) GetCenter() Vector2i {
	mb := globalRect2iMethodBindings.method_get_center
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2i](mb, bx, nil)
	return ret
}

/* GetArea : get_area
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Rect2i) GetArea() int64 {
	mb := globalRect2iMethodBindings.method_get_area
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* HasArea : has_area
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) HasArea() bool {
	mb := globalRect2iMethodBindings.method_has_area
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) HasPoint(point Vector2i) bool {
	mb := globalRect2iMethodBindings.method_has_point
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&point)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Intersects : intersects
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) Intersects(b Rect2i) bool {
	mb := globalRect2iMethodBindings.method_intersects
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Rect2iEncoder.EncodeTypePtr(b)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Encloses : encloses
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Rect2i) Encloses(b Rect2i) bool {
	mb := globalRect2iMethodBindings.method_encloses
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Rect2iEncoder.EncodeTypePtr(b)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Intersection : intersection
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Intersection(b Rect2i) Rect2i {
	mb := globalRect2iMethodBindings.method_intersection
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Rect2iEncoder.EncodeTypePtr(b)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Merge(b Rect2i) Rect2i {
	mb := globalRect2iMethodBindings.method_merge
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Rect2iEncoder.EncodeTypePtr(b)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Expand : expand
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Expand(to Vector2i) Rect2i {
	mb := globalRect2iMethodBindings.method_expand
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Grow : grow
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Grow(amount int64) Rect2i {
	mb := globalRect2iMethodBindings.method_grow
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(amount)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GrowSide : grow_side
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) GrowSide(side int64, amount int64) Rect2i {
	mb := globalRect2iMethodBindings.method_grow_side
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(side)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(amount)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GrowIndividual : grow_individual
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) GrowIndividual(left int64, top int64, right int64, bottom int64) Rect2i {
	mb := globalRect2iMethodBindings.method_grow_individual
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(left)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(top)

	pnr.Pin(args[1])
	args[2] = Int64Encoder.EncodeTypePtr(right)

	pnr.Pin(args[2])
	args[3] = Int64Encoder.EncodeTypePtr(bottom)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Rect2i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Rect2i) -> Rect2i
 */
func (cx *Rect2i) Abs() Rect2i {
	mb := globalRect2iMethodBindings.method_abs
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Rect2i](mb, bx, nil)
	return ret
}

// members

func (cx *Rect2i) MemberGetposition() Vector2i {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector2i](globalRect2iMethodBindings.member_position_getter, bx)
	return ret

}

func (cx *Rect2i) MemberGetsize() Vector2i {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector2i](globalRect2iMethodBindings.member_size_getter, bx)
	return ret

}

func (cx *Rect2i) MemberGetend() Vector2i {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector2i](globalRect2iMethodBindings.member_end_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Rect2i) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Rect2i) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *Rect2i) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_not, lt, rt)
}

// Equal_Rect2i operator
func (cx *Rect2i) Equal_Rect2i(right Rect2i) bool {
	lt := cx.NativeConstPtr()
	eRight := Rect2iEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_equal_Rect2i, lt, rt)
}

// Not_equal_Rect2i operator
func (cx *Rect2i) Not_equal_Rect2i(right Rect2i) bool {
	lt := cx.NativeConstPtr()
	eRight := Rect2iEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_not_equal_Rect2i, lt, rt)
}

// In_Dictionary operator
func (cx *Rect2i) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Rect2i) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRect2iMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInClass = (*Vector3)(nil)

/*
 * Vector3
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: false
 */
type Vector3 [12]uint8

func (cx *Vector3) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Vector3) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewVector3, index: 0
func NewVector3() Vector3 {
	cx := Vector3{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalVector3MethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector3MethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewVector3, index: 1
func NewVector3WithVector3(from Vector3) Vector3 {
	cx := Vector3{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector3MethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector3MethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewVector3, index: 2
func NewVector3WithVector3i(from Vector3i) Vector3 {
	cx := Vector3{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector3i
	// Vector3iEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector3MethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector3MethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewVector3, index: 3
func NewVector3WithFloat32Float32Float32(x float32, y float32, z float32) Vector3 {
	cx := Vector3{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [3]GDExtensionConstTypePtr
	// float
	args[0] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(x))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(y))
	pnr.Pin(args[1])
	// float
	args[2] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(z))
	pnr.Pin(args[2])
	CallBuiltinConstructor(globalVector3MethodBindings.constructor_3, ptr, args[0], args[1], args[2])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector3MethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// methods

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector3) MinAxisIndex() int64 {
	mb := globalVector3MethodBindings.method_min_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector3) MaxAxisIndex() int64 {
	mb := globalVector3MethodBindings.method_max_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* AngleTo : angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) AngleTo(to Vector3) float32 {
	mb := globalVector3MethodBindings.method_angle_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* SignedAngleTo : signed_angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) SignedAngleTo(to Vector3, axis Vector3) float32 {
	mb := globalVector3MethodBindings.method_signed_angle_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&axis)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DirectionTo : direction_to
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) DirectionTo(to Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_direction_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) DistanceTo(to Vector3) float32 {
	mb := globalVector3MethodBindings.method_distance_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) DistanceSquaredTo(to Vector3) float32 {
	mb := globalVector3MethodBindings.method_distance_squared_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) Length() float32 {
	mb := globalVector3MethodBindings.method_length
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) LengthSquared() float32 {
	mb := globalVector3MethodBindings.method_length_squared
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* LimitLength : limit_length
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) LimitLength(length float32) Vector3 {
	mb := globalVector3MethodBindings.method_limit_length
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(length)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Normalized() Vector3 {
	mb := globalVector3MethodBindings.method_normalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector3) IsNormalized() bool {
	mb := globalVector3MethodBindings.method_is_normalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector3) IsEqualApprox(to Vector3) bool {
	mb := globalVector3MethodBindings.method_is_equal_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsZeroApprox : is_zero_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector3) IsZeroApprox() bool {
	mb := globalVector3MethodBindings.method_is_zero_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector3) IsFinite() bool {
	mb := globalVector3MethodBindings.method_is_finite
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Inverse() Vector3 {
	mb := globalVector3MethodBindings.method_inverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Clamp(min Vector3, max Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_clamp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&min)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clampf : clampf
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Clampf(min float32, max float32) Vector3 {
	mb := globalVector3MethodBindings.method_clampf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(min)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Snapped(step Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_snapped
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snappedf : snappedf
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Snappedf(step float32) Vector3 {
	mb := globalVector3MethodBindings.method_snappedf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Rotated(axis Vector3, angle float32) Vector3 {
	mb := globalVector3MethodBindings.method_rotated
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&axis)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(angle)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Lerp(to Vector3, weight float32) Vector3 {
	mb := globalVector3MethodBindings.method_lerp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Slerp(to Vector3, weight float32) Vector3 {
	mb := globalVector3MethodBindings.method_slerp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CubicInterpolate : cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) CubicInterpolate(b Vector3, pre_a Vector3, post_b Vector3, weight float32) Vector3 {
	mb := globalVector3MethodBindings.method_cubic_interpolate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&pre_a)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&post_b)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CubicInterpolateInTime : cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) CubicInterpolateInTime(b Vector3, pre_a Vector3, post_b Vector3, weight float32, b_t float32, pre_a_t float32, post_b_t float32) Vector3 {
	mb := globalVector3MethodBindings.method_cubic_interpolate_in_time
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 7
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&pre_a)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&post_b)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[3])
	args[4] = Float32Encoder.EncodeTypePtr(b_t)

	pnr.Pin(args[4])
	args[5] = Float32Encoder.EncodeTypePtr(pre_a_t)

	pnr.Pin(args[5])
	args[6] = Float32Encoder.EncodeTypePtr(post_b_t)

	pnr.Pin(args[6])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* BezierInterpolate : bezier_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) BezierInterpolate(control_1 Vector3, control_2 Vector3, end Vector3, t float32) Vector3 {
	mb := globalVector3MethodBindings.method_bezier_interpolate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&control_1)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&control_2)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&end)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(t)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* BezierDerivative : bezier_derivative
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) BezierDerivative(control_1 Vector3, control_2 Vector3, end Vector3, t float32) Vector3 {
	mb := globalVector3MethodBindings.method_bezier_derivative
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&control_1)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&control_2)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&end)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(t)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* MoveToward : move_toward
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) MoveToward(to Vector3, delta float32) Vector3 {
	mb := globalVector3MethodBindings.method_move_toward
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(delta)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3) Dot(with Vector3) float32 {
	mb := globalVector3MethodBindings.method_dot
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Cross : cross
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Cross(with Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_cross
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Outer : outer
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Vector3) Outer(with Vector3) Basis {
	mb := globalVector3MethodBindings.method_outer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Abs() Vector3 {
	mb := globalVector3MethodBindings.method_abs
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* Floor : floor
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Floor() Vector3 {
	mb := globalVector3MethodBindings.method_floor
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* Ceil : ceil
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Ceil() Vector3 {
	mb := globalVector3MethodBindings.method_ceil
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* Round : round
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Round() Vector3 {
	mb := globalVector3MethodBindings.method_round
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* Posmod : posmod
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Posmod(mod float32) Vector3 {
	mb := globalVector3MethodBindings.method_posmod
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(mod)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Posmodv : posmodv
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Posmodv(modv Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_posmodv
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&modv)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Project : project
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Project(b Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_project
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Slide : slide
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Slide(n Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_slide
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&n)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Bounce : bounce
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Bounce(n Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_bounce
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&n)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reflect : reflect
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Reflect(n Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_reflect
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&n)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Sign() Vector3 {
	mb := globalVector3MethodBindings.method_sign
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* OctahedronEncode : octahedron_encode
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Vector3) OctahedronEncode() Vector2 {
	mb := globalVector3MethodBindings.method_octahedron_encode
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* Min : min
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Min(with Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_min
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Minf : minf
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Minf(with float32) Vector3 {
	mb := globalVector3MethodBindings.method_minf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Max : max
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Max(with Vector3) Vector3 {
	mb := globalVector3MethodBindings.method_max
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Maxf : maxf
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) Maxf(with float32) Vector3 {
	mb := globalVector3MethodBindings.method_maxf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* OctahedronDecode : octahedron_decode
 * is_vararg = false, is_static = true
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Vector3) OctahedronDecode(uv Vector2) Vector3 {
	mb := globalVector3MethodBindings.method_octahedron_decode
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&uv)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *Vector3) GetIndexed(i int64) float32 {
	var ret float32
	CallFunc_GDExtensionPtrIndexedGetter(
		globalVector3MethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Vector3) SetIndexed(i int64, value float32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalVector3MethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members

func (cx *Vector3) MemberGetx() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalVector3MethodBindings.member_x_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Vector3) MemberGety() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalVector3MethodBindings.member_y_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Vector3) MemberGetz() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalVector3MethodBindings.member_z_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

// Equal_Variant operator
func (cx *Vector3) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector3) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector3) Negate() Vector3 {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector3) Positive() Vector3 {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_positive, lt, rt)
}

// Not operator
func (cx *Vector3) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_not, lt, rt)
}

// Multiply_int operator
func (cx *Vector3) Multiply_int(right int64) Vector3 {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector3) Divide_int(right int64) Vector3 {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector3) Multiply_float(right float32) Vector3 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector3) Divide_float(right float32) Vector3 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector3 operator
func (cx *Vector3) Equal_Vector3(right Vector3) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_equal_Vector3, lt, rt)
}

// Not_equal_Vector3 operator
func (cx *Vector3) Not_equal_Vector3(right Vector3) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_not_equal_Vector3, lt, rt)
}

// Less_Vector3 operator
func (cx *Vector3) Less_Vector3(right Vector3) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_less_Vector3, lt, rt)
}

// Less_equal_Vector3 operator
func (cx *Vector3) Less_equal_Vector3(right Vector3) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_less_equal_Vector3, lt, rt)
}

// Greater_Vector3 operator
func (cx *Vector3) Greater_Vector3(right Vector3) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_greater_Vector3, lt, rt)
}

// Greater_equal_Vector3 operator
func (cx *Vector3) Greater_equal_Vector3(right Vector3) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_greater_equal_Vector3, lt, rt)
}

// Add_Vector3 operator
func (cx *Vector3) Add_Vector3(right Vector3) Vector3 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_add_Vector3, lt, rt)
}

// Subtract_Vector3 operator
func (cx *Vector3) Subtract_Vector3(right Vector3) Vector3 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_subtract_Vector3, lt, rt)
}

// Multiply_Vector3 operator
func (cx *Vector3) Multiply_Vector3(right Vector3) Vector3 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Vector3, lt, rt)
}

// Divide_Vector3 operator
func (cx *Vector3) Divide_Vector3(right Vector3) Vector3 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_divide_Vector3, lt, rt)
}

// Multiply_Quaternion operator
func (cx *Vector3) Multiply_Quaternion(right Quaternion) Vector3 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Quaternion, lt, rt)
}

// Multiply_Basis operator
func (cx *Vector3) Multiply_Basis(right Basis) Vector3 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Basis, lt, rt)
}

// Multiply_Transform3D operator
func (cx *Vector3) Multiply_Transform3D(right Transform3D) Vector3 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3](globalVector3MethodBindings.operator_multiply_Transform3D, lt, rt)
}

// In_Dictionary operator
func (cx *Vector3) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector3) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_in_Array, lt, rt)
}

// In_PackedVector3Array operator
func (cx *Vector3) In_PackedVector3Array(right PackedVector3Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3MethodBindings.operator_in_PackedVector3Array, lt, rt)
}

var _ GDBuiltInClass = (*Vector3i)(nil)

/*
 * Vector3i
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: false
 */
type Vector3i [12]uint8

func (cx *Vector3i) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Vector3i) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewVector3i, index: 0
func NewVector3i() Vector3i {
	cx := Vector3i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalVector3iMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector3iMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewVector3i, index: 1
func NewVector3iWithVector3i(from Vector3i) Vector3i {
	cx := Vector3i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector3i
	// Vector3iEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector3iMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector3iMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewVector3i, index: 2
func NewVector3iWithVector3(from Vector3) Vector3i {
	cx := Vector3i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector3iMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector3iMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewVector3i, index: 3
func NewVector3iWithInt64Int64Int64(x int64, y int64, z int64) Vector3i {
	cx := Vector3i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [3]GDExtensionConstTypePtr
	// int
	args[0] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(x))
	pnr.Pin(args[0])
	// int
	args[1] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(y))
	pnr.Pin(args[1])
	// int
	args[2] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(z))
	pnr.Pin(args[2])
	CallBuiltinConstructor(globalVector3iMethodBindings.constructor_3, ptr, args[0], args[1], args[2])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector3iMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// methods

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector3i) MinAxisIndex() int64 {
	mb := globalVector3iMethodBindings.method_min_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector3i) MaxAxisIndex() int64 {
	mb := globalVector3iMethodBindings.method_max_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3i) DistanceTo(to Vector3i) float32 {
	mb := globalVector3iMethodBindings.method_distance_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector3i) DistanceSquaredTo(to Vector3i) int64 {
	mb := globalVector3iMethodBindings.method_distance_squared_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector3i) Length() float32 {
	mb := globalVector3iMethodBindings.method_length
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector3i) LengthSquared() int64 {
	mb := globalVector3iMethodBindings.method_length_squared
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Sign() Vector3i {
	mb := globalVector3iMethodBindings.method_sign
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3i](mb, bx, nil)
	return ret
}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Abs() Vector3i {
	mb := globalVector3iMethodBindings.method_abs
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3i](mb, bx, nil)
	return ret
}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Clamp(min Vector3i, max Vector3i) Vector3i {
	mb := globalVector3iMethodBindings.method_clamp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&min)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector3i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clampi : clampi
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Clampi(min int64, max int64) Vector3i {
	mb := globalVector3iMethodBindings.method_clampi
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(min)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector3i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Snapped(step Vector3i) Vector3i {
	mb := globalVector3iMethodBindings.method_snapped
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snappedi : snappedi
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Snappedi(step int64) Vector3i {
	mb := globalVector3iMethodBindings.method_snappedi
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Min : min
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Min(with Vector3i) Vector3i {
	mb := globalVector3iMethodBindings.method_min
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Mini : mini
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Mini(with int64) Vector3i {
	mb := globalVector3iMethodBindings.method_mini
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Max : max
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Max(with Vector3i) Vector3i {
	mb := globalVector3iMethodBindings.method_max
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Maxi : maxi
 * is_vararg = false, is_static = false
 * goReturnType(Vector3i) -> Vector3i
 */
func (cx *Vector3i) Maxi(with int64) Vector3i {
	mb := globalVector3iMethodBindings.method_maxi
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *Vector3i) GetIndexed(i int64) int64 {
	var ret int64
	CallFunc_GDExtensionPtrIndexedGetter(
		globalVector3iMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Vector3i) SetIndexed(i int64, value int64) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalVector3iMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members

func (cx *Vector3i) MemberGetx() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalVector3iMethodBindings.member_x_getter, bx)
	return ret

}

func (cx *Vector3i) MemberGety() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalVector3iMethodBindings.member_y_getter, bx)
	return ret

}

func (cx *Vector3i) MemberGetz() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalVector3iMethodBindings.member_z_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Vector3i) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector3i) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector3i) Negate() Vector3i {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector3i) Positive() Vector3i {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_positive, lt, rt)
}

// Not operator
func (cx *Vector3i) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_not, lt, rt)
}

// Multiply_int operator
func (cx *Vector3i) Multiply_int(right int64) Vector3i {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector3i) Divide_int(right int64) Vector3i {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_divide_int, lt, rt)
}

// Module_int operator
func (cx *Vector3i) Module_int(right int64) Vector3i {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_module_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector3i) Multiply_float(right float32) Vector3 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector3](globalVector3iMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector3i) Divide_float(right float32) Vector3 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector3](globalVector3iMethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector3i operator
func (cx *Vector3i) Equal_Vector3i(right Vector3i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_equal_Vector3i, lt, rt)
}

// Not_equal_Vector3i operator
func (cx *Vector3i) Not_equal_Vector3i(right Vector3i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_not_equal_Vector3i, lt, rt)
}

// Less_Vector3i operator
func (cx *Vector3i) Less_Vector3i(right Vector3i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_less_Vector3i, lt, rt)
}

// Less_equal_Vector3i operator
func (cx *Vector3i) Less_equal_Vector3i(right Vector3i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_less_equal_Vector3i, lt, rt)
}

// Greater_Vector3i operator
func (cx *Vector3i) Greater_Vector3i(right Vector3i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_greater_Vector3i, lt, rt)
}

// Greater_equal_Vector3i operator
func (cx *Vector3i) Greater_equal_Vector3i(right Vector3i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_greater_equal_Vector3i, lt, rt)
}

// Add_Vector3i operator
func (cx *Vector3i) Add_Vector3i(right Vector3i) Vector3i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_add_Vector3i, lt, rt)
}

// Subtract_Vector3i operator
func (cx *Vector3i) Subtract_Vector3i(right Vector3i) Vector3i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_subtract_Vector3i, lt, rt)
}

// Multiply_Vector3i operator
func (cx *Vector3i) Multiply_Vector3i(right Vector3i) Vector3i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_multiply_Vector3i, lt, rt)
}

// Divide_Vector3i operator
func (cx *Vector3i) Divide_Vector3i(right Vector3i) Vector3i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_divide_Vector3i, lt, rt)
}

// Module_Vector3i operator
func (cx *Vector3i) Module_Vector3i(right Vector3i) Vector3i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3i](globalVector3iMethodBindings.operator_module_Vector3i, lt, rt)
}

// In_Dictionary operator
func (cx *Vector3i) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector3i) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector3iMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInClass = (*Transform2D)(nil)

/*
 * Transform2D
 * indexingReturnType: Vector2
 * isKeyed: false
 * hasDestructor: false
 */
type Transform2D [24]uint8

func (cx *Transform2D) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Transform2D) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewTransform2D, index: 0
func NewTransform2D() Transform2D {
	cx := Transform2D{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalTransform2DMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalTransform2DMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewTransform2D, index: 1
func NewTransform2DWithTransform2D(from Transform2D) Transform2D {
	cx := Transform2D{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Transform2D
	// Transform2DEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalTransform2DMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalTransform2DMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewTransform2D, index: 2
func NewTransform2DWithFloat32Vector2(rotation float32, position Vector2) Transform2D {
	cx := Transform2D{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// float
	args[0] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(rotation))
	pnr.Pin(args[0])
	// Vector2
	// Vector2Encoder
	args[1] = position.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("position", position))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalTransform2DMethodBindings.constructor_2, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalTransform2DMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewTransform2D, index: 3
func NewTransform2DWithFloat32Vector2Float32Vector2(rotation float32, scale Vector2, skew float32, position Vector2) Transform2D {
	cx := Transform2D{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [4]GDExtensionConstTypePtr
	// float
	args[0] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(rotation))
	pnr.Pin(args[0])
	// Vector2
	// Vector2Encoder
	args[1] = scale.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("scale", scale))
	pnr.Pin(args[1])
	// float
	args[2] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(skew))
	pnr.Pin(args[2])
	// Vector2
	// Vector2Encoder
	args[3] = position.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[3]", uintptr(args[3])), zap.Any("position", position))
	pnr.Pin(args[3])
	CallBuiltinConstructor(globalTransform2DMethodBindings.constructor_3, ptr, args[0], args[1], args[2], args[3])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalTransform2DMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// NewTransform2D, index: 4
func NewTransform2DWithVector2Vector2Vector2(x_axis Vector2, y_axis Vector2, origin Vector2) Transform2D {
	cx := Transform2D{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [3]GDExtensionConstTypePtr
	// Vector2
	// Vector2Encoder
	args[0] = x_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("x_axis", x_axis))
	pnr.Pin(args[0])
	// Vector2
	// Vector2Encoder
	args[1] = y_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("y_axis", y_axis))
	pnr.Pin(args[1])
	// Vector2
	// Vector2Encoder
	args[2] = origin.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[2]", uintptr(args[2])), zap.Any("origin", origin))
	pnr.Pin(args[2])
	CallBuiltinConstructor(globalTransform2DMethodBindings.constructor_4, ptr, args[0], args[1], args[2])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalTransform2DMethodBindings.constructor_4"), zap.Any("cx", cx))
	return cx
}

// methods

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Inverse() Transform2D {
	mb := globalTransform2DMethodBindings.method_inverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Transform2D](mb, bx, nil)
	return ret
}

/* AffineInverse : affine_inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) AffineInverse() Transform2D {
	mb := globalTransform2DMethodBindings.method_affine_inverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Transform2D](mb, bx, nil)
	return ret
}

/* GetRotation : get_rotation
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Transform2D) GetRotation() float32 {
	mb := globalTransform2DMethodBindings.method_get_rotation
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* GetOrigin : get_origin
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) GetOrigin() Vector2 {
	mb := globalTransform2DMethodBindings.method_get_origin
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* GetScale : get_scale
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) GetScale() Vector2 {
	mb := globalTransform2DMethodBindings.method_get_scale
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* GetSkew : get_skew
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Transform2D) GetSkew() float32 {
	mb := globalTransform2DMethodBindings.method_get_skew
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* Orthonormalized : orthonormalized
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Orthonormalized() Transform2D {
	mb := globalTransform2DMethodBindings.method_orthonormalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Transform2D](mb, bx, nil)
	return ret
}

/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Rotated(angle float32) Transform2D {
	mb := globalTransform2DMethodBindings.method_rotated
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(angle)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* RotatedLocal : rotated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) RotatedLocal(angle float32) Transform2D {
	mb := globalTransform2DMethodBindings.method_rotated_local
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(angle)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Scaled : scaled
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Scaled(scale Vector2) Transform2D {
	mb := globalTransform2DMethodBindings.method_scaled
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&scale)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ScaledLocal : scaled_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) ScaledLocal(scale Vector2) Transform2D {
	mb := globalTransform2DMethodBindings.method_scaled_local
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&scale)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Translated : translated
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) Translated(offset Vector2) Transform2D {
	mb := globalTransform2DMethodBindings.method_translated
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* TranslatedLocal : translated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) TranslatedLocal(offset Vector2) Transform2D {
	mb := globalTransform2DMethodBindings.method_translated_local
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Determinant : determinant
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Transform2D) Determinant() float32 {
	mb := globalTransform2DMethodBindings.method_determinant
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* BasisXform : basis_xform
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) BasisXform(v Vector2) Vector2 {
	mb := globalTransform2DMethodBindings.method_basis_xform
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&v)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* BasisXformInv : basis_xform_inv
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Transform2D) BasisXformInv(v Vector2) Vector2 {
	mb := globalTransform2DMethodBindings.method_basis_xform_inv
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&v)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* InterpolateWith : interpolate_with
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) InterpolateWith(xform Transform2D, weight float32) Transform2D {
	mb := globalTransform2DMethodBindings.method_interpolate_with
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&xform)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsConformal : is_conformal
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Transform2D) IsConformal() bool {
	mb := globalTransform2DMethodBindings.method_is_conformal
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Transform2D) IsEqualApprox(xform Transform2D) bool {
	mb := globalTransform2DMethodBindings.method_is_equal_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&xform)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Transform2D) IsFinite() bool {
	mb := globalTransform2DMethodBindings.method_is_finite
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* LookingAt : looking_at
 * is_vararg = false, is_static = false
 * goReturnType(Transform2D) -> Transform2D
 */
func (cx *Transform2D) LookingAt(target Vector2) Transform2D {
	mb := globalTransform2DMethodBindings.method_looking_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&target)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Transform2D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *Transform2D) GetIndexed(i int64) Vector2 {
	var ret Vector2
	CallFunc_GDExtensionPtrIndexedGetter(
		globalTransform2DMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Transform2D) SetIndexed(i int64, value Vector2) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalTransform2DMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members

func (cx *Transform2D) MemberGetx() Vector2 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector2](globalTransform2DMethodBindings.member_x_getter, bx)
	return ret

}

func (cx *Transform2D) MemberGety() Vector2 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector2](globalTransform2DMethodBindings.member_y_getter, bx)
	return ret

}

func (cx *Transform2D) MemberGetorigin() Vector2 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector2](globalTransform2DMethodBindings.member_origin_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Transform2D) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Transform2D) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *Transform2D) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_not, lt, rt)
}

// Multiply_int operator
func (cx *Transform2D) Multiply_int(right int64) Transform2D {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Transform2D](globalTransform2DMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Transform2D) Divide_int(right int64) Transform2D {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Transform2D](globalTransform2DMethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Transform2D) Multiply_float(right float32) Transform2D {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Transform2D](globalTransform2DMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Transform2D) Divide_float(right float32) Transform2D {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Transform2D](globalTransform2DMethodBindings.operator_divide_float, lt, rt)
}

// Multiply_Vector2 operator
func (cx *Transform2D) Multiply_Vector2(right Vector2) Vector2 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector2](globalTransform2DMethodBindings.operator_multiply_Vector2, lt, rt)
}

// Multiply_Rect2 operator
func (cx *Transform2D) Multiply_Rect2(right Rect2) Rect2 {
	lt := cx.NativeConstPtr()
	eRight := Rect2Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Rect2](globalTransform2DMethodBindings.operator_multiply_Rect2, lt, rt)
}

// Equal_Transform2D operator
func (cx *Transform2D) Equal_Transform2D(right Transform2D) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_equal_Transform2D, lt, rt)
}

// Not_equal_Transform2D operator
func (cx *Transform2D) Not_equal_Transform2D(right Transform2D) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_not_equal_Transform2D, lt, rt)
}

// Multiply_Transform2D operator
func (cx *Transform2D) Multiply_Transform2D(right Transform2D) Transform2D {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Transform2D](globalTransform2DMethodBindings.operator_multiply_Transform2D, lt, rt)
}

// In_Dictionary operator
func (cx *Transform2D) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Transform2D) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalTransform2DMethodBindings.operator_in_Array, lt, rt)
}

// Multiply_PackedVector2Array operator
func (cx *Transform2D) Multiply_PackedVector2Array(right PackedVector2Array) PackedVector2Array {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedVector2Array](globalTransform2DMethodBindings.operator_multiply_PackedVector2Array, lt, rt)
}

var _ GDBuiltInClass = (*Vector4)(nil)

/*
 * Vector4
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: false
 */
type Vector4 [16]uint8

func (cx *Vector4) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Vector4) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewVector4, index: 0
func NewVector4() Vector4 {
	cx := Vector4{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalVector4MethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector4MethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewVector4, index: 1
func NewVector4WithVector4(from Vector4) Vector4 {
	cx := Vector4{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector4
	// Vector4Encoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector4MethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector4MethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewVector4, index: 2
func NewVector4WithVector4i(from Vector4i) Vector4 {
	cx := Vector4{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector4i
	// Vector4iEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector4MethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector4MethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewVector4, index: 3
func NewVector4WithFloat32Float32Float32Float32(x float32, y float32, z float32, w float32) Vector4 {
	cx := Vector4{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [4]GDExtensionConstTypePtr
	// float
	args[0] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(x))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(y))
	pnr.Pin(args[1])
	// float
	args[2] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(z))
	pnr.Pin(args[2])
	// float
	args[3] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(w))
	pnr.Pin(args[3])
	CallBuiltinConstructor(globalVector4MethodBindings.constructor_3, ptr, args[0], args[1], args[2], args[3])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector4MethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// methods

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector4) MinAxisIndex() int64 {
	mb := globalVector4MethodBindings.method_min_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector4) MaxAxisIndex() int64 {
	mb := globalVector4MethodBindings.method_max_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) Length() float32 {
	mb := globalVector4MethodBindings.method_length
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) LengthSquared() float32 {
	mb := globalVector4MethodBindings.method_length_squared
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Abs() Vector4 {
	mb := globalVector4MethodBindings.method_abs
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret
}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Sign() Vector4 {
	mb := globalVector4MethodBindings.method_sign
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret
}

/* Floor : floor
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Floor() Vector4 {
	mb := globalVector4MethodBindings.method_floor
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret
}

/* Ceil : ceil
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Ceil() Vector4 {
	mb := globalVector4MethodBindings.method_ceil
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret
}

/* Round : round
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Round() Vector4 {
	mb := globalVector4MethodBindings.method_round
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret
}

/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Lerp(to Vector4, weight float32) Vector4 {
	mb := globalVector4MethodBindings.method_lerp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CubicInterpolate : cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) CubicInterpolate(b Vector4, pre_a Vector4, post_b Vector4, weight float32) Vector4 {
	mb := globalVector4MethodBindings.method_cubic_interpolate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&pre_a)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&post_b)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CubicInterpolateInTime : cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) CubicInterpolateInTime(b Vector4, pre_a Vector4, post_b Vector4, weight float32, b_t float32, pre_a_t float32, post_b_t float32) Vector4 {
	mb := globalVector4MethodBindings.method_cubic_interpolate_in_time
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 7
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&pre_a)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&post_b)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[3])
	args[4] = Float32Encoder.EncodeTypePtr(b_t)

	pnr.Pin(args[4])
	args[5] = Float32Encoder.EncodeTypePtr(pre_a_t)

	pnr.Pin(args[5])
	args[6] = Float32Encoder.EncodeTypePtr(post_b_t)

	pnr.Pin(args[6])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Posmod : posmod
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Posmod(mod float32) Vector4 {
	mb := globalVector4MethodBindings.method_posmod
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(mod)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Posmodv : posmodv
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Posmodv(modv Vector4) Vector4 {
	mb := globalVector4MethodBindings.method_posmodv
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&modv)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Snapped(step Vector4) Vector4 {
	mb := globalVector4MethodBindings.method_snapped
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snappedf : snappedf
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Snappedf(step float32) Vector4 {
	mb := globalVector4MethodBindings.method_snappedf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Clamp(min Vector4, max Vector4) Vector4 {
	mb := globalVector4MethodBindings.method_clamp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&min)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clampf : clampf
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Clampf(min float32, max float32) Vector4 {
	mb := globalVector4MethodBindings.method_clampf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(min)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Normalized() Vector4 {
	mb := globalVector4MethodBindings.method_normalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret
}

/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector4) IsNormalized() bool {
	mb := globalVector4MethodBindings.method_is_normalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* DirectionTo : direction_to
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) DirectionTo(to Vector4) Vector4 {
	mb := globalVector4MethodBindings.method_direction_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) DistanceTo(to Vector4) float32 {
	mb := globalVector4MethodBindings.method_distance_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) DistanceSquaredTo(to Vector4) float32 {
	mb := globalVector4MethodBindings.method_distance_squared_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4) Dot(with Vector4) float32 {
	mb := globalVector4MethodBindings.method_dot
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Inverse() Vector4 {
	mb := globalVector4MethodBindings.method_inverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, nil)
	return ret
}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector4) IsEqualApprox(to Vector4) bool {
	mb := globalVector4MethodBindings.method_is_equal_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsZeroApprox : is_zero_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector4) IsZeroApprox() bool {
	mb := globalVector4MethodBindings.method_is_zero_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Vector4) IsFinite() bool {
	mb := globalVector4MethodBindings.method_is_finite
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* Min : min
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Min(with Vector4) Vector4 {
	mb := globalVector4MethodBindings.method_min
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Minf : minf
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Minf(with float32) Vector4 {
	mb := globalVector4MethodBindings.method_minf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Max : max
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Max(with Vector4) Vector4 {
	mb := globalVector4MethodBindings.method_max
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Maxf : maxf
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *Vector4) Maxf(with float32) Vector4 {
	mb := globalVector4MethodBindings.method_maxf
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *Vector4) GetIndexed(i int64) float32 {
	var ret float32
	CallFunc_GDExtensionPtrIndexedGetter(
		globalVector4MethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Vector4) SetIndexed(i int64, value float32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalVector4MethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members

func (cx *Vector4) MemberGetx() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalVector4MethodBindings.member_x_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Vector4) MemberGety() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalVector4MethodBindings.member_y_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Vector4) MemberGetz() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalVector4MethodBindings.member_z_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Vector4) MemberGetw() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalVector4MethodBindings.member_w_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

// Equal_Variant operator
func (cx *Vector4) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector4) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector4) Negate() Vector4 {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector4) Positive() Vector4 {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_positive, lt, rt)
}

// Not operator
func (cx *Vector4) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_not, lt, rt)
}

// Multiply_int operator
func (cx *Vector4) Multiply_int(right int64) Vector4 {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector4) Divide_int(right int64) Vector4 {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector4) Multiply_float(right float32) Vector4 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector4) Divide_float(right float32) Vector4 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector4 operator
func (cx *Vector4) Equal_Vector4(right Vector4) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_equal_Vector4, lt, rt)
}

// Not_equal_Vector4 operator
func (cx *Vector4) Not_equal_Vector4(right Vector4) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_not_equal_Vector4, lt, rt)
}

// Less_Vector4 operator
func (cx *Vector4) Less_Vector4(right Vector4) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_less_Vector4, lt, rt)
}

// Less_equal_Vector4 operator
func (cx *Vector4) Less_equal_Vector4(right Vector4) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_less_equal_Vector4, lt, rt)
}

// Greater_Vector4 operator
func (cx *Vector4) Greater_Vector4(right Vector4) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_greater_Vector4, lt, rt)
}

// Greater_equal_Vector4 operator
func (cx *Vector4) Greater_equal_Vector4(right Vector4) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_greater_equal_Vector4, lt, rt)
}

// Add_Vector4 operator
func (cx *Vector4) Add_Vector4(right Vector4) Vector4 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_add_Vector4, lt, rt)
}

// Subtract_Vector4 operator
func (cx *Vector4) Subtract_Vector4(right Vector4) Vector4 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_subtract_Vector4, lt, rt)
}

// Multiply_Vector4 operator
func (cx *Vector4) Multiply_Vector4(right Vector4) Vector4 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_Vector4, lt, rt)
}

// Divide_Vector4 operator
func (cx *Vector4) Divide_Vector4(right Vector4) Vector4 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_divide_Vector4, lt, rt)
}

// Multiply_Projection operator
func (cx *Vector4) Multiply_Projection(right Projection) Vector4 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector4](globalVector4MethodBindings.operator_multiply_Projection, lt, rt)
}

// In_Dictionary operator
func (cx *Vector4) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector4) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_in_Array, lt, rt)
}

// In_PackedVector4Array operator
func (cx *Vector4) In_PackedVector4Array(right PackedVector4Array) bool {
	lt := cx.NativeConstPtr()
	eRight := PackedVector4ArrayEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[bool](globalVector4MethodBindings.operator_in_PackedVector4Array, lt, rt)
}

var _ GDBuiltInClass = (*Vector4i)(nil)

/*
 * Vector4i
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: false
 */
type Vector4i [16]uint8

func (cx *Vector4i) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Vector4i) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewVector4i, index: 0
func NewVector4i() Vector4i {
	cx := Vector4i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalVector4iMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector4iMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewVector4i, index: 1
func NewVector4iWithVector4i(from Vector4i) Vector4i {
	cx := Vector4i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector4i
	// Vector4iEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector4iMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector4iMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewVector4i, index: 2
func NewVector4iWithVector4(from Vector4) Vector4i {
	cx := Vector4i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector4
	// Vector4Encoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalVector4iMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector4iMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewVector4i, index: 3
func NewVector4iWithInt64Int64Int64Int64(x int64, y int64, z int64, w int64) Vector4i {
	cx := Vector4i{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [4]GDExtensionConstTypePtr
	// int
	args[0] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(x))
	pnr.Pin(args[0])
	// int
	args[1] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(y))
	pnr.Pin(args[1])
	// int
	args[2] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(z))
	pnr.Pin(args[2])
	// int
	args[3] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(w))
	pnr.Pin(args[3])
	CallBuiltinConstructor(globalVector4iMethodBindings.constructor_3, ptr, args[0], args[1], args[2], args[3])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalVector4iMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// methods

/* MinAxisIndex : min_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector4i) MinAxisIndex() int64 {
	mb := globalVector4iMethodBindings.method_min_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* MaxAxisIndex : max_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector4i) MaxAxisIndex() int64 {
	mb := globalVector4iMethodBindings.method_max_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4i) Length() float32 {
	mb := globalVector4iMethodBindings.method_length
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector4i) LengthSquared() int64 {
	mb := globalVector4iMethodBindings.method_length_squared
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Sign : sign
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Sign() Vector4i {
	mb := globalVector4iMethodBindings.method_sign
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector4i](mb, bx, nil)
	return ret
}

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Abs() Vector4i {
	mb := globalVector4iMethodBindings.method_abs
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector4i](mb, bx, nil)
	return ret
}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Clamp(min Vector4i, max Vector4i) Vector4i {
	mb := globalVector4iMethodBindings.method_clamp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&min)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector4i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clampi : clampi
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Clampi(min int64, max int64) Vector4i {
	mb := globalVector4iMethodBindings.method_clampi
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(min)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Vector4i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snapped : snapped
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Snapped(step Vector4i) Vector4i {
	mb := globalVector4iMethodBindings.method_snapped
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Snappedi : snappedi
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Snappedi(step int64) Vector4i {
	mb := globalVector4iMethodBindings.method_snappedi
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(step)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Min : min
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Min(with Vector4i) Vector4i {
	mb := globalVector4iMethodBindings.method_min
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Mini : mini
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Mini(with int64) Vector4i {
	mb := globalVector4iMethodBindings.method_mini
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Max : max
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Max(with Vector4i) Vector4i {
	mb := globalVector4iMethodBindings.method_max
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Maxi : maxi
 * is_vararg = false, is_static = false
 * goReturnType(Vector4i) -> Vector4i
 */
func (cx *Vector4i) Maxi(with int64) Vector4i {
	mb := globalVector4iMethodBindings.method_maxi
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4i](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Vector4i) DistanceTo(to Vector4i) float32 {
	mb := globalVector4iMethodBindings.method_distance_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DistanceSquaredTo : distance_squared_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Vector4i) DistanceSquaredTo(to Vector4i) int64 {
	mb := globalVector4iMethodBindings.method_distance_squared_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *Vector4i) GetIndexed(i int64) int64 {
	var ret int64
	CallFunc_GDExtensionPtrIndexedGetter(
		globalVector4iMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Vector4i) SetIndexed(i int64, value int64) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalVector4iMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members

func (cx *Vector4i) MemberGetx() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_x_getter, bx)
	return ret

}

func (cx *Vector4i) MemberGety() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_y_getter, bx)
	return ret

}

func (cx *Vector4i) MemberGetz() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_z_getter, bx)
	return ret

}

func (cx *Vector4i) MemberGetw() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalVector4iMethodBindings.member_w_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Vector4i) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Vector4i) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Vector4i) Negate() Vector4i {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Vector4i) Positive() Vector4i {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_positive, lt, rt)
}

// Not operator
func (cx *Vector4i) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_not, lt, rt)
}

// Multiply_int operator
func (cx *Vector4i) Multiply_int(right int64) Vector4i {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Vector4i) Divide_int(right int64) Vector4i {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_divide_int, lt, rt)
}

// Module_int operator
func (cx *Vector4i) Module_int(right int64) Vector4i {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_module_int, lt, rt)
}

// Multiply_float operator
func (cx *Vector4i) Multiply_float(right float32) Vector4 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector4](globalVector4iMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Vector4i) Divide_float(right float32) Vector4 {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Vector4](globalVector4iMethodBindings.operator_divide_float, lt, rt)
}

// Equal_Vector4i operator
func (cx *Vector4i) Equal_Vector4i(right Vector4i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_equal_Vector4i, lt, rt)
}

// Not_equal_Vector4i operator
func (cx *Vector4i) Not_equal_Vector4i(right Vector4i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_not_equal_Vector4i, lt, rt)
}

// Less_Vector4i operator
func (cx *Vector4i) Less_Vector4i(right Vector4i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_less_Vector4i, lt, rt)
}

// Less_equal_Vector4i operator
func (cx *Vector4i) Less_equal_Vector4i(right Vector4i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_less_equal_Vector4i, lt, rt)
}

// Greater_Vector4i operator
func (cx *Vector4i) Greater_Vector4i(right Vector4i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_greater_Vector4i, lt, rt)
}

// Greater_equal_Vector4i operator
func (cx *Vector4i) Greater_equal_Vector4i(right Vector4i) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_greater_equal_Vector4i, lt, rt)
}

// Add_Vector4i operator
func (cx *Vector4i) Add_Vector4i(right Vector4i) Vector4i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_add_Vector4i, lt, rt)
}

// Subtract_Vector4i operator
func (cx *Vector4i) Subtract_Vector4i(right Vector4i) Vector4i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_subtract_Vector4i, lt, rt)
}

// Multiply_Vector4i operator
func (cx *Vector4i) Multiply_Vector4i(right Vector4i) Vector4i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_multiply_Vector4i, lt, rt)
}

// Divide_Vector4i operator
func (cx *Vector4i) Divide_Vector4i(right Vector4i) Vector4i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_divide_Vector4i, lt, rt)
}

// Module_Vector4i operator
func (cx *Vector4i) Module_Vector4i(right Vector4i) Vector4i {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector4i](globalVector4iMethodBindings.operator_module_Vector4i, lt, rt)
}

// In_Dictionary operator
func (cx *Vector4i) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Vector4i) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalVector4iMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInClass = (*Plane)(nil)

/*
 * Plane
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type Plane [16]uint8

func (cx *Plane) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Plane) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewPlane, index: 0
func NewPlane() Plane {
	cx := Plane{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalPlaneMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPlaneMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewPlane, index: 1
func NewPlaneWithPlane(from Plane) Plane {
	cx := Plane{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Plane
	// PlaneEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPlaneMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPlaneMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewPlane, index: 2
func NewPlaneWithVector3(normal Vector3) Plane {
	cx := Plane{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = normal.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("normal", normal))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPlaneMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPlaneMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewPlane, index: 3
func NewPlaneWithVector3Float32(normal Vector3, d float32) Plane {
	cx := Plane{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = normal.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("normal", normal))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(d))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalPlaneMethodBindings.constructor_3, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPlaneMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// NewPlane, index: 4
func NewPlaneWithVector3Vector3(normal Vector3, point Vector3) Plane {
	cx := Plane{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = normal.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("normal", normal))
	pnr.Pin(args[0])
	// Vector3
	// Vector3Encoder
	args[1] = point.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("point", point))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalPlaneMethodBindings.constructor_4, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPlaneMethodBindings.constructor_4"), zap.Any("cx", cx))
	return cx
}

// NewPlane, index: 5
func NewPlaneWithVector3Vector3Vector3(point1 Vector3, point2 Vector3, point3 Vector3) Plane {
	cx := Plane{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [3]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = point1.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("point1", point1))
	pnr.Pin(args[0])
	// Vector3
	// Vector3Encoder
	args[1] = point2.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("point2", point2))
	pnr.Pin(args[1])
	// Vector3
	// Vector3Encoder
	args[2] = point3.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[2]", uintptr(args[2])), zap.Any("point3", point3))
	pnr.Pin(args[2])
	CallBuiltinConstructor(globalPlaneMethodBindings.constructor_5, ptr, args[0], args[1], args[2])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPlaneMethodBindings.constructor_5"), zap.Any("cx", cx))
	return cx
}

// NewPlane, index: 6
func NewPlaneWithFloat32Float32Float32Float32(a float32, b float32, c float32, d float32) Plane {
	cx := Plane{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [4]GDExtensionConstTypePtr
	// float
	args[0] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(a))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(b))
	pnr.Pin(args[1])
	// float
	args[2] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(c))
	pnr.Pin(args[2])
	// float
	args[3] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(d))
	pnr.Pin(args[3])
	CallBuiltinConstructor(globalPlaneMethodBindings.constructor_6, ptr, args[0], args[1], args[2], args[3])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPlaneMethodBindings.constructor_6"), zap.Any("cx", cx))
	return cx
}

// methods

/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Plane) -> Plane
 */
func (cx *Plane) Normalized() Plane {
	mb := globalPlaneMethodBindings.method_normalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Plane](mb, bx, nil)
	return ret
}

/* GetCenter : get_center
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Plane) GetCenter() Vector3 {
	mb := globalPlaneMethodBindings.method_get_center
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Plane) IsEqualApprox(to_plane Plane) bool {
	mb := globalPlaneMethodBindings.method_is_equal_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to_plane)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Plane) IsFinite() bool {
	mb := globalPlaneMethodBindings.method_is_finite
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsPointOver : is_point_over
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Plane) IsPointOver(point Vector3) bool {
	mb := globalPlaneMethodBindings.method_is_point_over
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&point)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DistanceTo : distance_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Plane) DistanceTo(point Vector3) float32 {
	mb := globalPlaneMethodBindings.method_distance_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&point)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Plane) HasPoint(point Vector3, tolerance float32) bool {
	mb := globalPlaneMethodBindings.method_has_point
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&point)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(tolerance)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Project : project
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Plane) Project(point Vector3) Vector3 {
	mb := globalPlaneMethodBindings.method_project
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&point)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Intersect3 : intersect_3
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Plane) Intersect3(b Plane, c Plane) Variant {
	mb := globalPlaneMethodBindings.method_intersect_3
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&c)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IntersectsRay : intersects_ray
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Plane) IntersectsRay(from Vector3, dir Vector3) Variant {
	mb := globalPlaneMethodBindings.method_intersects_ray
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&from)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&dir)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IntersectsSegment : intersects_segment
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Plane) IntersectsSegment(from Vector3, to Vector3) Variant {
	mb := globalPlaneMethodBindings.method_intersects_segment
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&from)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

// members

func (cx *Plane) MemberGetx() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalPlaneMethodBindings.member_x_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Plane) MemberGety() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalPlaneMethodBindings.member_y_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Plane) MemberGetz() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalPlaneMethodBindings.member_z_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Plane) MemberGetd() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalPlaneMethodBindings.member_d_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Plane) MemberGetnormal() Vector3 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector3](globalPlaneMethodBindings.member_normal_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Plane) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Plane) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Plane) Negate() Plane {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Plane](globalPlaneMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Plane) Positive() Plane {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Plane](globalPlaneMethodBindings.operator_positive, lt, rt)
}

// Not operator
func (cx *Plane) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_not, lt, rt)
}

// Equal_Plane operator
func (cx *Plane) Equal_Plane(right Plane) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_equal_Plane, lt, rt)
}

// Not_equal_Plane operator
func (cx *Plane) Not_equal_Plane(right Plane) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_not_equal_Plane, lt, rt)
}

// Multiply_Transform3D operator
func (cx *Plane) Multiply_Transform3D(right Transform3D) Plane {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Plane](globalPlaneMethodBindings.operator_multiply_Transform3D, lt, rt)
}

// In_Dictionary operator
func (cx *Plane) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Plane) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPlaneMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInClass = (*Quaternion)(nil)

/*
 * Quaternion
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: false
 */
type Quaternion [16]uint8

func (cx *Quaternion) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Quaternion) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewQuaternion, index: 0
func NewQuaternion() Quaternion {
	cx := Quaternion{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalQuaternionMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalQuaternionMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewQuaternion, index: 1
func NewQuaternionWithQuaternion(from Quaternion) Quaternion {
	cx := Quaternion{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Quaternion
	// QuaternionEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalQuaternionMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalQuaternionMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewQuaternion, index: 2
func NewQuaternionWithBasis(from Basis) Quaternion {
	cx := Quaternion{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Basis
	// BasisEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalQuaternionMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalQuaternionMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewQuaternion, index: 3
func NewQuaternionWithVector3Float32(axis Vector3, angle float32) Quaternion {
	cx := Quaternion{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("axis", axis))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(angle))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalQuaternionMethodBindings.constructor_3, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalQuaternionMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// NewQuaternion, index: 4
func NewQuaternionWithVector3Vector3(arc_from Vector3, arc_to Vector3) Quaternion {
	cx := Quaternion{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = arc_from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("arc_from", arc_from))
	pnr.Pin(args[0])
	// Vector3
	// Vector3Encoder
	args[1] = arc_to.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("arc_to", arc_to))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalQuaternionMethodBindings.constructor_4, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalQuaternionMethodBindings.constructor_4"), zap.Any("cx", cx))
	return cx
}

// NewQuaternion, index: 5
func NewQuaternionWithFloat32Float32Float32Float32(x float32, y float32, z float32, w float32) Quaternion {
	cx := Quaternion{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [4]GDExtensionConstTypePtr
	// float
	args[0] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(x))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(y))
	pnr.Pin(args[1])
	// float
	args[2] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(z))
	pnr.Pin(args[2])
	// float
	args[3] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(w))
	pnr.Pin(args[3])
	CallBuiltinConstructor(globalQuaternionMethodBindings.constructor_5, ptr, args[0], args[1], args[2], args[3])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalQuaternionMethodBindings.constructor_5"), zap.Any("cx", cx))
	return cx
}

// methods

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) Length() float32 {
	mb := globalQuaternionMethodBindings.method_length
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* LengthSquared : length_squared
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) LengthSquared() float32 {
	mb := globalQuaternionMethodBindings.method_length_squared
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* Normalized : normalized
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Normalized() Quaternion {
	mb := globalQuaternionMethodBindings.method_normalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Quaternion](mb, bx, nil)
	return ret
}

/* IsNormalized : is_normalized
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Quaternion) IsNormalized() bool {
	mb := globalQuaternionMethodBindings.method_is_normalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Quaternion) IsEqualApprox(to Quaternion) bool {
	mb := globalQuaternionMethodBindings.method_is_equal_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Quaternion) IsFinite() bool {
	mb := globalQuaternionMethodBindings.method_is_finite
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Inverse() Quaternion {
	mb := globalQuaternionMethodBindings.method_inverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Quaternion](mb, bx, nil)
	return ret
}

/* Log : log
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Log() Quaternion {
	mb := globalQuaternionMethodBindings.method_log
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Quaternion](mb, bx, nil)
	return ret
}

/* Exp : exp
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Exp() Quaternion {
	mb := globalQuaternionMethodBindings.method_exp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Quaternion](mb, bx, nil)
	return ret
}

/* AngleTo : angle_to
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) AngleTo(to Quaternion) float32 {
	mb := globalQuaternionMethodBindings.method_angle_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Dot : dot
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) Dot(with Quaternion) float32 {
	mb := globalQuaternionMethodBindings.method_dot
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Slerp(to Quaternion, weight float32) Quaternion {
	mb := globalQuaternionMethodBindings.method_slerp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Quaternion](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Slerpni : slerpni
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) Slerpni(to Quaternion, weight float32) Quaternion {
	mb := globalQuaternionMethodBindings.method_slerpni
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Quaternion](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* SphericalCubicInterpolate : spherical_cubic_interpolate
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) SphericalCubicInterpolate(b Quaternion, pre_a Quaternion, post_b Quaternion, weight float32) Quaternion {
	mb := globalQuaternionMethodBindings.method_spherical_cubic_interpolate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&pre_a)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&post_b)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Quaternion](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* SphericalCubicInterpolateInTime : spherical_cubic_interpolate_in_time
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) SphericalCubicInterpolateInTime(b Quaternion, pre_a Quaternion, post_b Quaternion, weight float32, b_t float32, pre_a_t float32, post_b_t float32) Quaternion {
	mb := globalQuaternionMethodBindings.method_spherical_cubic_interpolate_in_time
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 7
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&pre_a)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&post_b)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[3])
	args[4] = Float32Encoder.EncodeTypePtr(b_t)

	pnr.Pin(args[4])
	args[5] = Float32Encoder.EncodeTypePtr(pre_a_t)

	pnr.Pin(args[5])
	args[6] = Float32Encoder.EncodeTypePtr(post_b_t)

	pnr.Pin(args[6])

	ret := CallBuiltinMethodPtrRet[Quaternion](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetEuler : get_euler
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Quaternion) GetEuler(order int64) Vector3 {
	mb := globalQuaternionMethodBindings.method_get_euler
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(order)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FromEuler : from_euler
 * is_vararg = false, is_static = true
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Quaternion) FromEuler(euler Vector3) Quaternion {
	mb := globalQuaternionMethodBindings.method_from_euler
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&euler)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Quaternion](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetAxis : get_axis
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Quaternion) GetAxis() Vector3 {
	mb := globalQuaternionMethodBindings.method_get_axis
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* GetAngle : get_angle
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Quaternion) GetAngle() float32 {
	mb := globalQuaternionMethodBindings.method_get_angle
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

func (cx *Quaternion) GetIndexed(i int64) float32 {
	var ret float32
	CallFunc_GDExtensionPtrIndexedGetter(
		globalQuaternionMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Quaternion) SetIndexed(i int64, value float32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalQuaternionMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members

func (cx *Quaternion) MemberGetx() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalQuaternionMethodBindings.member_x_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Quaternion) MemberGety() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalQuaternionMethodBindings.member_y_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Quaternion) MemberGetz() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalQuaternionMethodBindings.member_z_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Quaternion) MemberGetw() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalQuaternionMethodBindings.member_w_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

// Equal_Variant operator
func (cx *Quaternion) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Quaternion) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Quaternion) Negate() Quaternion {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Quaternion) Positive() Quaternion {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_positive, lt, rt)
}

// Not operator
func (cx *Quaternion) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_not, lt, rt)
}

// Multiply_int operator
func (cx *Quaternion) Multiply_int(right int64) Quaternion {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Quaternion) Divide_int(right int64) Quaternion {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Quaternion) Multiply_float(right float32) Quaternion {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Quaternion) Divide_float(right float32) Quaternion {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_divide_float, lt, rt)
}

// Multiply_Vector3 operator
func (cx *Quaternion) Multiply_Vector3(right Vector3) Vector3 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3](globalQuaternionMethodBindings.operator_multiply_Vector3, lt, rt)
}

// Equal_Quaternion operator
func (cx *Quaternion) Equal_Quaternion(right Quaternion) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_equal_Quaternion, lt, rt)
}

// Not_equal_Quaternion operator
func (cx *Quaternion) Not_equal_Quaternion(right Quaternion) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_not_equal_Quaternion, lt, rt)
}

// Add_Quaternion operator
func (cx *Quaternion) Add_Quaternion(right Quaternion) Quaternion {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_add_Quaternion, lt, rt)
}

// Subtract_Quaternion operator
func (cx *Quaternion) Subtract_Quaternion(right Quaternion) Quaternion {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_subtract_Quaternion, lt, rt)
}

// Multiply_Quaternion operator
func (cx *Quaternion) Multiply_Quaternion(right Quaternion) Quaternion {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Quaternion](globalQuaternionMethodBindings.operator_multiply_Quaternion, lt, rt)
}

// In_Dictionary operator
func (cx *Quaternion) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Quaternion) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalQuaternionMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInClass = (*AABB)(nil)

/*
 * AABB
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type AABB [24]uint8

func (cx *AABB) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *AABB) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewAABB, index: 0
func NewAABB() AABB {
	cx := AABB{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalAABBMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalAABBMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewAABB, index: 1
func NewAABBWithAABB(from AABB) AABB {
	cx := AABB{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// AABB
	// AABBEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalAABBMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalAABBMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewAABB, index: 2
func NewAABBWithVector3Vector3(position Vector3, size Vector3) AABB {
	cx := AABB{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = position.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("position", position))
	pnr.Pin(args[0])
	// Vector3
	// Vector3Encoder
	args[1] = size.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("size", size))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalAABBMethodBindings.constructor_2, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalAABBMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// methods

/* Abs : abs
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Abs() AABB {
	mb := globalAABBMethodBindings.method_abs
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[AABB](mb, bx, nil)
	return ret
}

/* GetCenter : get_center
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetCenter() Vector3 {
	mb := globalAABBMethodBindings.method_get_center
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* GetVolume : get_volume
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *AABB) GetVolume() float32 {
	mb := globalAABBMethodBindings.method_get_volume
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* HasVolume : has_volume
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) HasVolume() bool {
	mb := globalAABBMethodBindings.method_has_volume
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* HasSurface : has_surface
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) HasSurface() bool {
	mb := globalAABBMethodBindings.method_has_surface
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* HasPoint : has_point
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) HasPoint(point Vector3) bool {
	mb := globalAABBMethodBindings.method_has_point
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&point)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) IsEqualApprox(aabb AABB) bool {
	mb := globalAABBMethodBindings.method_is_equal_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&aabb)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) IsFinite() bool {
	mb := globalAABBMethodBindings.method_is_finite
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* Intersects : intersects
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) Intersects(with AABB) bool {
	mb := globalAABBMethodBindings.method_intersects
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Encloses : encloses
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) Encloses(with AABB) bool {
	mb := globalAABBMethodBindings.method_encloses
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IntersectsPlane : intersects_plane
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *AABB) IntersectsPlane(plane Plane) bool {
	mb := globalAABBMethodBindings.method_intersects_plane
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&plane)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Intersection : intersection
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Intersection(with AABB) AABB {
	mb := globalAABBMethodBindings.method_intersection
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[AABB](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Merge(with AABB) AABB {
	mb := globalAABBMethodBindings.method_merge
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[AABB](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Expand : expand
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Expand(to_point Vector3) AABB {
	mb := globalAABBMethodBindings.method_expand
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to_point)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[AABB](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Grow : grow
 * is_vararg = false, is_static = false
 * goReturnType(AABB) -> AABB
 */
func (cx *AABB) Grow(by float32) AABB {
	mb := globalAABBMethodBindings.method_grow
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(by)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[AABB](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetSupport : get_support
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetSupport(direction Vector3) Vector3 {
	mb := globalAABBMethodBindings.method_get_support
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&direction)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetLongestAxis : get_longest_axis
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetLongestAxis() Vector3 {
	mb := globalAABBMethodBindings.method_get_longest_axis
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* GetLongestAxisIndex : get_longest_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *AABB) GetLongestAxisIndex() int64 {
	mb := globalAABBMethodBindings.method_get_longest_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* GetLongestAxisSize : get_longest_axis_size
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *AABB) GetLongestAxisSize() float32 {
	mb := globalAABBMethodBindings.method_get_longest_axis_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* GetShortestAxis : get_shortest_axis
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetShortestAxis() Vector3 {
	mb := globalAABBMethodBindings.method_get_shortest_axis
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* GetShortestAxisIndex : get_shortest_axis_index
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *AABB) GetShortestAxisIndex() int64 {
	mb := globalAABBMethodBindings.method_get_shortest_axis_index
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* GetShortestAxisSize : get_shortest_axis_size
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *AABB) GetShortestAxisSize() float32 {
	mb := globalAABBMethodBindings.method_get_shortest_axis_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* GetEndpoint : get_endpoint
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *AABB) GetEndpoint(idx int64) Vector3 {
	mb := globalAABBMethodBindings.method_get_endpoint
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(idx)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IntersectsSegment : intersects_segment
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *AABB) IntersectsSegment(from Vector3, to Vector3) Variant {
	mb := globalAABBMethodBindings.method_intersects_segment
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&from)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IntersectsRay : intersects_ray
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *AABB) IntersectsRay(from Vector3, dir Vector3) Variant {
	mb := globalAABBMethodBindings.method_intersects_ray
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&from)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&dir)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

// members

func (cx *AABB) MemberGetposition() Vector3 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector3](globalAABBMethodBindings.member_position_getter, bx)
	return ret

}

func (cx *AABB) MemberGetsize() Vector3 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector3](globalAABBMethodBindings.member_size_getter, bx)
	return ret

}

func (cx *AABB) MemberGetend() Vector3 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector3](globalAABBMethodBindings.member_end_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *AABB) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *AABB) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *AABB) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_not, lt, rt)
}

// Equal_AABB operator
func (cx *AABB) Equal_AABB(right AABB) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_equal_AABB, lt, rt)
}

// Not_equal_AABB operator
func (cx *AABB) Not_equal_AABB(right AABB) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_not_equal_AABB, lt, rt)
}

// Multiply_Transform3D operator
func (cx *AABB) Multiply_Transform3D(right Transform3D) AABB {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[AABB](globalAABBMethodBindings.operator_multiply_Transform3D, lt, rt)
}

// In_Dictionary operator
func (cx *AABB) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *AABB) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalAABBMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInClass = (*Basis)(nil)

/*
 * Basis
 * indexingReturnType: Vector3
 * isKeyed: false
 * hasDestructor: false
 */
type Basis [36]uint8

func (cx *Basis) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Basis) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewBasis, index: 0
func NewBasis() Basis {
	cx := Basis{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalBasisMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalBasisMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewBasis, index: 1
func NewBasisWithBasis(from Basis) Basis {
	cx := Basis{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Basis
	// BasisEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalBasisMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalBasisMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewBasis, index: 2
func NewBasisWithQuaternion(from Quaternion) Basis {
	cx := Basis{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Quaternion
	// QuaternionEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalBasisMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalBasisMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewBasis, index: 3
func NewBasisWithVector3Float32(axis Vector3, angle float32) Basis {
	cx := Basis{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("axis", axis))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(angle))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalBasisMethodBindings.constructor_3, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalBasisMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// NewBasis, index: 4
func NewBasisWithVector3Vector3Vector3(x_axis Vector3, y_axis Vector3, z_axis Vector3) Basis {
	cx := Basis{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [3]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = x_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("x_axis", x_axis))
	pnr.Pin(args[0])
	// Vector3
	// Vector3Encoder
	args[1] = y_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("y_axis", y_axis))
	pnr.Pin(args[1])
	// Vector3
	// Vector3Encoder
	args[2] = z_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[2]", uintptr(args[2])), zap.Any("z_axis", z_axis))
	pnr.Pin(args[2])
	CallBuiltinConstructor(globalBasisMethodBindings.constructor_4, ptr, args[0], args[1], args[2])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalBasisMethodBindings.constructor_4"), zap.Any("cx", cx))
	return cx
}

// methods

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Inverse() Basis {
	mb := globalBasisMethodBindings.method_inverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Basis](mb, bx, nil)
	return ret
}

/* Transposed : transposed
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Transposed() Basis {
	mb := globalBasisMethodBindings.method_transposed
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Basis](mb, bx, nil)
	return ret
}

/* Orthonormalized : orthonormalized
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Orthonormalized() Basis {
	mb := globalBasisMethodBindings.method_orthonormalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Basis](mb, bx, nil)
	return ret
}

/* Determinant : determinant
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Determinant() float32 {
	mb := globalBasisMethodBindings.method_determinant
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Rotated(axis Vector3, angle float32) Basis {
	mb := globalBasisMethodBindings.method_rotated
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&axis)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(angle)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Scaled : scaled
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Scaled(scale Vector3) Basis {
	mb := globalBasisMethodBindings.method_scaled
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&scale)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ScaledLocal : scaled_local
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) ScaledLocal(scale Vector3) Basis {
	mb := globalBasisMethodBindings.method_scaled_local
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&scale)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetScale : get_scale
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Basis) GetScale() Vector3 {
	mb := globalBasisMethodBindings.method_get_scale
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, nil)
	return ret
}

/* GetEuler : get_euler
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *Basis) GetEuler(order int64) Vector3 {
	mb := globalBasisMethodBindings.method_get_euler
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(order)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Tdotx : tdotx
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Tdotx(with Vector3) float32 {
	mb := globalBasisMethodBindings.method_tdotx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Tdoty : tdoty
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Tdoty(with Vector3) float32 {
	mb := globalBasisMethodBindings.method_tdoty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Tdotz : tdotz
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Basis) Tdotz(with Vector3) float32 {
	mb := globalBasisMethodBindings.method_tdotz
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&with)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Slerp : slerp
 * is_vararg = false, is_static = false
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) Slerp(to Basis, weight float32) Basis {
	mb := globalBasisMethodBindings.method_slerp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsConformal : is_conformal
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Basis) IsConformal() bool {
	mb := globalBasisMethodBindings.method_is_conformal
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Basis) IsEqualApprox(b Basis) bool {
	mb := globalBasisMethodBindings.method_is_equal_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&b)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Basis) IsFinite() bool {
	mb := globalBasisMethodBindings.method_is_finite
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* GetRotationQuaternion : get_rotation_quaternion
 * is_vararg = false, is_static = false
 * goReturnType(Quaternion) -> Quaternion
 */
func (cx *Basis) GetRotationQuaternion() Quaternion {
	mb := globalBasisMethodBindings.method_get_rotation_quaternion
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Quaternion](mb, bx, nil)
	return ret
}

/* LookingAt : looking_at
 * is_vararg = false, is_static = true
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) LookingAt(target Vector3, up Vector3, use_model_front bool) Basis {
	mb := globalBasisMethodBindings.method_looking_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&target)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&up)

	pnr.Pin(args[1])
	args[2] = BoolEncoder.EncodeTypePtr(use_model_front)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FromScale : from_scale
 * is_vararg = false, is_static = true
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) FromScale(scale Vector3) Basis {
	mb := globalBasisMethodBindings.method_from_scale
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&scale)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FromEuler : from_euler
 * is_vararg = false, is_static = true
 * goReturnType(Basis) -> Basis
 */
func (cx *Basis) FromEuler(euler Vector3, order int64) Basis {
	mb := globalBasisMethodBindings.method_from_euler
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&euler)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(order)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Basis](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *Basis) GetIndexed(i int64) Vector3 {
	var ret Vector3
	CallFunc_GDExtensionPtrIndexedGetter(
		globalBasisMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Basis) SetIndexed(i int64, value Vector3) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalBasisMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members

func (cx *Basis) MemberGetx() Vector3 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector3](globalBasisMethodBindings.member_x_getter, bx)
	return ret

}

func (cx *Basis) MemberGety() Vector3 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector3](globalBasisMethodBindings.member_y_getter, bx)
	return ret

}

func (cx *Basis) MemberGetz() Vector3 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector3](globalBasisMethodBindings.member_z_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Basis) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Basis) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *Basis) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_not, lt, rt)
}

// Multiply_int operator
func (cx *Basis) Multiply_int(right int64) Basis {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Basis](globalBasisMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Basis) Divide_int(right int64) Basis {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Basis](globalBasisMethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Basis) Multiply_float(right float32) Basis {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Basis](globalBasisMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Basis) Divide_float(right float32) Basis {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Basis](globalBasisMethodBindings.operator_divide_float, lt, rt)
}

// Multiply_Vector3 operator
func (cx *Basis) Multiply_Vector3(right Vector3) Vector3 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3](globalBasisMethodBindings.operator_multiply_Vector3, lt, rt)
}

// Equal_Basis operator
func (cx *Basis) Equal_Basis(right Basis) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_equal_Basis, lt, rt)
}

// Not_equal_Basis operator
func (cx *Basis) Not_equal_Basis(right Basis) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_not_equal_Basis, lt, rt)
}

// Multiply_Basis operator
func (cx *Basis) Multiply_Basis(right Basis) Basis {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Basis](globalBasisMethodBindings.operator_multiply_Basis, lt, rt)
}

// In_Dictionary operator
func (cx *Basis) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Basis) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalBasisMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInClass = (*Transform3D)(nil)

/*
 * Transform3D
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type Transform3D [48]uint8

func (cx *Transform3D) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Transform3D) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewTransform3D, index: 0
func NewTransform3D() Transform3D {
	cx := Transform3D{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalTransform3DMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalTransform3DMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewTransform3D, index: 1
func NewTransform3DWithTransform3D(from Transform3D) Transform3D {
	cx := Transform3D{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Transform3D
	// Transform3DEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalTransform3DMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalTransform3DMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewTransform3D, index: 2
func NewTransform3DWithBasisVector3(basis Basis, origin Vector3) Transform3D {
	cx := Transform3D{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Basis
	// BasisEncoder
	args[0] = basis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("basis", basis))
	pnr.Pin(args[0])
	// Vector3
	// Vector3Encoder
	args[1] = origin.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("origin", origin))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalTransform3DMethodBindings.constructor_2, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalTransform3DMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewTransform3D, index: 3
func NewTransform3DWithVector3Vector3Vector3Vector3(x_axis Vector3, y_axis Vector3, z_axis Vector3, origin Vector3) Transform3D {
	cx := Transform3D{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [4]GDExtensionConstTypePtr
	// Vector3
	// Vector3Encoder
	args[0] = x_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("x_axis", x_axis))
	pnr.Pin(args[0])
	// Vector3
	// Vector3Encoder
	args[1] = y_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("y_axis", y_axis))
	pnr.Pin(args[1])
	// Vector3
	// Vector3Encoder
	args[2] = z_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[2]", uintptr(args[2])), zap.Any("z_axis", z_axis))
	pnr.Pin(args[2])
	// Vector3
	// Vector3Encoder
	args[3] = origin.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[3]", uintptr(args[3])), zap.Any("origin", origin))
	pnr.Pin(args[3])
	CallBuiltinConstructor(globalTransform3DMethodBindings.constructor_3, ptr, args[0], args[1], args[2], args[3])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalTransform3DMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// NewTransform3D, index: 4
func NewTransform3DWithProjection(from Projection) Transform3D {
	cx := Transform3D{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Projection
	// ProjectionEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalTransform3DMethodBindings.constructor_4, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalTransform3DMethodBindings.constructor_4"), zap.Any("cx", cx))
	return cx
}

// methods

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Inverse() Transform3D {
	mb := globalTransform3DMethodBindings.method_inverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Transform3D](mb, bx, nil)
	return ret
}

/* AffineInverse : affine_inverse
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) AffineInverse() Transform3D {
	mb := globalTransform3DMethodBindings.method_affine_inverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Transform3D](mb, bx, nil)
	return ret
}

/* Orthonormalized : orthonormalized
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Orthonormalized() Transform3D {
	mb := globalTransform3DMethodBindings.method_orthonormalized
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Transform3D](mb, bx, nil)
	return ret
}

/* Rotated : rotated
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Rotated(axis Vector3, angle float32) Transform3D {
	mb := globalTransform3DMethodBindings.method_rotated
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&axis)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(angle)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* RotatedLocal : rotated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) RotatedLocal(axis Vector3, angle float32) Transform3D {
	mb := globalTransform3DMethodBindings.method_rotated_local
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&axis)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(angle)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Scaled : scaled
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Scaled(scale Vector3) Transform3D {
	mb := globalTransform3DMethodBindings.method_scaled
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&scale)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ScaledLocal : scaled_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) ScaledLocal(scale Vector3) Transform3D {
	mb := globalTransform3DMethodBindings.method_scaled_local
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&scale)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Translated : translated
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) Translated(offset Vector3) Transform3D {
	mb := globalTransform3DMethodBindings.method_translated
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* TranslatedLocal : translated_local
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) TranslatedLocal(offset Vector3) Transform3D {
	mb := globalTransform3DMethodBindings.method_translated_local
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* LookingAt : looking_at
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) LookingAt(target Vector3, up Vector3, use_model_front bool) Transform3D {
	mb := globalTransform3DMethodBindings.method_looking_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&target)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&up)

	pnr.Pin(args[1])
	args[2] = BoolEncoder.EncodeTypePtr(use_model_front)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* InterpolateWith : interpolate_with
 * is_vararg = false, is_static = false
 * goReturnType(Transform3D) -> Transform3D
 */
func (cx *Transform3D) InterpolateWith(xform Transform3D, weight float32) Transform3D {
	mb := globalTransform3DMethodBindings.method_interpolate_with
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&xform)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Transform3D](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Transform3D) IsEqualApprox(xform Transform3D) bool {
	mb := globalTransform3DMethodBindings.method_is_equal_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&xform)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsFinite : is_finite
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Transform3D) IsFinite() bool {
	mb := globalTransform3DMethodBindings.method_is_finite
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

// members

func (cx *Transform3D) MemberGetbasis() Basis {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Basis](globalTransform3DMethodBindings.member_basis_getter, bx)
	return ret

}

func (cx *Transform3D) MemberGetorigin() Vector3 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector3](globalTransform3DMethodBindings.member_origin_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Transform3D) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Transform3D) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *Transform3D) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_not, lt, rt)
}

// Multiply_int operator
func (cx *Transform3D) Multiply_int(right int64) Transform3D {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Transform3D](globalTransform3DMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Transform3D) Divide_int(right int64) Transform3D {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Transform3D](globalTransform3DMethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Transform3D) Multiply_float(right float32) Transform3D {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Transform3D](globalTransform3DMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Transform3D) Divide_float(right float32) Transform3D {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Transform3D](globalTransform3DMethodBindings.operator_divide_float, lt, rt)
}

// Multiply_Vector3 operator
func (cx *Transform3D) Multiply_Vector3(right Vector3) Vector3 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector3](globalTransform3DMethodBindings.operator_multiply_Vector3, lt, rt)
}

// Multiply_Plane operator
func (cx *Transform3D) Multiply_Plane(right Plane) Plane {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Plane](globalTransform3DMethodBindings.operator_multiply_Plane, lt, rt)
}

// Multiply_AABB operator
func (cx *Transform3D) Multiply_AABB(right AABB) AABB {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[AABB](globalTransform3DMethodBindings.operator_multiply_AABB, lt, rt)
}

// Equal_Transform3D operator
func (cx *Transform3D) Equal_Transform3D(right Transform3D) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_equal_Transform3D, lt, rt)
}

// Not_equal_Transform3D operator
func (cx *Transform3D) Not_equal_Transform3D(right Transform3D) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_not_equal_Transform3D, lt, rt)
}

// Multiply_Transform3D operator
func (cx *Transform3D) Multiply_Transform3D(right Transform3D) Transform3D {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Transform3D](globalTransform3DMethodBindings.operator_multiply_Transform3D, lt, rt)
}

// In_Dictionary operator
func (cx *Transform3D) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Transform3D) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalTransform3DMethodBindings.operator_in_Array, lt, rt)
}

// Multiply_PackedVector3Array operator
func (cx *Transform3D) Multiply_PackedVector3Array(right PackedVector3Array) PackedVector3Array {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedVector3Array](globalTransform3DMethodBindings.operator_multiply_PackedVector3Array, lt, rt)
}

var _ GDBuiltInClass = (*Projection)(nil)

/*
 * Projection
 * indexingReturnType: Vector4
 * isKeyed: false
 * hasDestructor: false
 */
type Projection [64]uint8

func (cx *Projection) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Projection) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewProjection, index: 0
func NewProjection() Projection {
	cx := Projection{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalProjectionMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalProjectionMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewProjection, index: 1
func NewProjectionWithProjection(from Projection) Projection {
	cx := Projection{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Projection
	// ProjectionEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalProjectionMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalProjectionMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewProjection, index: 2
func NewProjectionWithTransform3D(from Transform3D) Projection {
	cx := Projection{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Transform3D
	// Transform3DEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalProjectionMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalProjectionMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewProjection, index: 3
func NewProjectionWithVector4Vector4Vector4Vector4(x_axis Vector4, y_axis Vector4, z_axis Vector4, w_axis Vector4) Projection {
	cx := Projection{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [4]GDExtensionConstTypePtr
	// Vector4
	// Vector4Encoder
	args[0] = x_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("x_axis", x_axis))
	pnr.Pin(args[0])
	// Vector4
	// Vector4Encoder
	args[1] = y_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("y_axis", y_axis))
	pnr.Pin(args[1])
	// Vector4
	// Vector4Encoder
	args[2] = z_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[2]", uintptr(args[2])), zap.Any("z_axis", z_axis))
	pnr.Pin(args[2])
	// Vector4
	// Vector4Encoder
	args[3] = w_axis.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[3]", uintptr(args[3])), zap.Any("w_axis", w_axis))
	pnr.Pin(args[3])
	CallBuiltinConstructor(globalProjectionMethodBindings.constructor_3, ptr, args[0], args[1], args[2], args[3])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalProjectionMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// methods

/* CreateDepthCorrection : create_depth_correction
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateDepthCorrection(flip_y bool) Projection {
	mb := globalProjectionMethodBindings.method_create_depth_correction
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = BoolEncoder.EncodeTypePtr(flip_y)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CreateLightAtlasRect : create_light_atlas_rect
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateLightAtlasRect(rect Rect2) Projection {
	mb := globalProjectionMethodBindings.method_create_light_atlas_rect
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Rect2Encoder.EncodeTypePtr(rect)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CreatePerspective : create_perspective
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreatePerspective(fovy float32, aspect float32, z_near float32, z_far float32, flip_fov bool) Projection {
	mb := globalProjectionMethodBindings.method_create_perspective
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 5
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(fovy)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(aspect)

	pnr.Pin(args[1])
	args[2] = Float32Encoder.EncodeTypePtr(z_near)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(z_far)

	pnr.Pin(args[3])
	args[4] = BoolEncoder.EncodeTypePtr(flip_fov)

	pnr.Pin(args[4])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CreatePerspectiveHmd : create_perspective_hmd
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreatePerspectiveHmd(fovy float32, aspect float32, z_near float32, z_far float32, flip_fov bool, eye int64, intraocular_dist float32, convergence_dist float32) Projection {
	mb := globalProjectionMethodBindings.method_create_perspective_hmd
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 8
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(fovy)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(aspect)

	pnr.Pin(args[1])
	args[2] = Float32Encoder.EncodeTypePtr(z_near)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(z_far)

	pnr.Pin(args[3])
	args[4] = BoolEncoder.EncodeTypePtr(flip_fov)

	pnr.Pin(args[4])
	args[5] = Int64Encoder.EncodeTypePtr(eye)

	pnr.Pin(args[5])
	args[6] = Float32Encoder.EncodeTypePtr(intraocular_dist)

	pnr.Pin(args[6])
	args[7] = Float32Encoder.EncodeTypePtr(convergence_dist)

	pnr.Pin(args[7])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CreateForHmd : create_for_hmd
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateForHmd(eye int64, aspect float32, intraocular_dist float32, display_width float32, display_to_lens float32, oversample float32, z_near float32, z_far float32) Projection {
	mb := globalProjectionMethodBindings.method_create_for_hmd
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 8
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(eye)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(aspect)

	pnr.Pin(args[1])
	args[2] = Float32Encoder.EncodeTypePtr(intraocular_dist)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(display_width)

	pnr.Pin(args[3])
	args[4] = Float32Encoder.EncodeTypePtr(display_to_lens)

	pnr.Pin(args[4])
	args[5] = Float32Encoder.EncodeTypePtr(oversample)

	pnr.Pin(args[5])
	args[6] = Float32Encoder.EncodeTypePtr(z_near)

	pnr.Pin(args[6])
	args[7] = Float32Encoder.EncodeTypePtr(z_far)

	pnr.Pin(args[7])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CreateOrthogonal : create_orthogonal
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateOrthogonal(left float32, right float32, bottom float32, top float32, z_near float32, z_far float32) Projection {
	mb := globalProjectionMethodBindings.method_create_orthogonal
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 6
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(left)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(right)

	pnr.Pin(args[1])
	args[2] = Float32Encoder.EncodeTypePtr(bottom)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(top)

	pnr.Pin(args[3])
	args[4] = Float32Encoder.EncodeTypePtr(z_near)

	pnr.Pin(args[4])
	args[5] = Float32Encoder.EncodeTypePtr(z_far)

	pnr.Pin(args[5])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CreateOrthogonalAspect : create_orthogonal_aspect
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateOrthogonalAspect(size float32, aspect float32, z_near float32, z_far float32, flip_fov bool) Projection {
	mb := globalProjectionMethodBindings.method_create_orthogonal_aspect
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 5
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(size)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(aspect)

	pnr.Pin(args[1])
	args[2] = Float32Encoder.EncodeTypePtr(z_near)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(z_far)

	pnr.Pin(args[3])
	args[4] = BoolEncoder.EncodeTypePtr(flip_fov)

	pnr.Pin(args[4])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CreateFrustum : create_frustum
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateFrustum(left float32, right float32, bottom float32, top float32, z_near float32, z_far float32) Projection {
	mb := globalProjectionMethodBindings.method_create_frustum
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 6
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(left)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(right)

	pnr.Pin(args[1])
	args[2] = Float32Encoder.EncodeTypePtr(bottom)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(top)

	pnr.Pin(args[3])
	args[4] = Float32Encoder.EncodeTypePtr(z_near)

	pnr.Pin(args[4])
	args[5] = Float32Encoder.EncodeTypePtr(z_far)

	pnr.Pin(args[5])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CreateFrustumAspect : create_frustum_aspect
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateFrustumAspect(size float32, aspect float32, offset Vector2, z_near float32, z_far float32, flip_fov bool) Projection {
	mb := globalProjectionMethodBindings.method_create_frustum_aspect
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 6
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(size)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(aspect)

	pnr.Pin(args[1])
	args[2] = (GDExtensionTypePtr)(&offset)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(z_near)

	pnr.Pin(args[3])
	args[4] = Float32Encoder.EncodeTypePtr(z_far)

	pnr.Pin(args[4])
	args[5] = BoolEncoder.EncodeTypePtr(flip_fov)

	pnr.Pin(args[5])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* CreateFitAabb : create_fit_aabb
 * is_vararg = false, is_static = true
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) CreateFitAabb(aabb AABB) Projection {
	mb := globalProjectionMethodBindings.method_create_fit_aabb
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&aabb)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Determinant : determinant
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) Determinant() float32 {
	mb := globalProjectionMethodBindings.method_determinant
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* PerspectiveZnearAdjusted : perspective_znear_adjusted
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) PerspectiveZnearAdjusted(new_znear float32) Projection {
	mb := globalProjectionMethodBindings.method_perspective_znear_adjusted
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(new_znear)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetProjectionPlane : get_projection_plane
 * is_vararg = false, is_static = false
 * goReturnType(Plane) -> Plane
 */
func (cx *Projection) GetProjectionPlane(plane int64) Plane {
	mb := globalProjectionMethodBindings.method_get_projection_plane
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(plane)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Plane](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FlippedY : flipped_y
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) FlippedY() Projection {
	mb := globalProjectionMethodBindings.method_flipped_y
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, nil)
	return ret
}

/* JitterOffseted : jitter_offseted
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) JitterOffseted(offset Vector2) Projection {
	mb := globalProjectionMethodBindings.method_jitter_offseted
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetFovy : get_fovy
 * is_vararg = false, is_static = true
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetFovy(fovx float32, aspect float32) float32 {
	mb := globalProjectionMethodBindings.method_get_fovy
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(fovx)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(aspect)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetZFar : get_z_far
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetZFar() float32 {
	mb := globalProjectionMethodBindings.method_get_z_far
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* GetZNear : get_z_near
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetZNear() float32 {
	mb := globalProjectionMethodBindings.method_get_z_near
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* GetAspect : get_aspect
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetAspect() float32 {
	mb := globalProjectionMethodBindings.method_get_aspect
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* GetFov : get_fov
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetFov() float32 {
	mb := globalProjectionMethodBindings.method_get_fov
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* IsOrthogonal : is_orthogonal
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Projection) IsOrthogonal() bool {
	mb := globalProjectionMethodBindings.method_is_orthogonal
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* GetViewportHalfExtents : get_viewport_half_extents
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Projection) GetViewportHalfExtents() Vector2 {
	mb := globalProjectionMethodBindings.method_get_viewport_half_extents
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* GetFarPlaneHalfExtents : get_far_plane_half_extents
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *Projection) GetFarPlaneHalfExtents() Vector2 {
	mb := globalProjectionMethodBindings.method_get_far_plane_half_extents
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, nil)
	return ret
}

/* Inverse : inverse
 * is_vararg = false, is_static = false
 * goReturnType(Projection) -> Projection
 */
func (cx *Projection) Inverse() Projection {
	mb := globalProjectionMethodBindings.method_inverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Projection](mb, bx, nil)
	return ret
}

/* GetPixelsPerMeter : get_pixels_per_meter
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Projection) GetPixelsPerMeter(for_pixel_width int64) int64 {
	mb := globalProjectionMethodBindings.method_get_pixels_per_meter
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(for_pixel_width)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetLodMultiplier : get_lod_multiplier
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Projection) GetLodMultiplier() float32 {
	mb := globalProjectionMethodBindings.method_get_lod_multiplier
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

func (cx *Projection) GetIndexed(i int64) Vector4 {
	var ret Vector4
	CallFunc_GDExtensionPtrIndexedGetter(
		globalProjectionMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Projection) SetIndexed(i int64, value Vector4) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalProjectionMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members

func (cx *Projection) MemberGetx() Vector4 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_x_getter, bx)
	return ret

}

func (cx *Projection) MemberGety() Vector4 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_y_getter, bx)
	return ret

}

func (cx *Projection) MemberGetz() Vector4 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_z_getter, bx)
	return ret

}

func (cx *Projection) MemberGetw() Vector4 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[Vector4](globalProjectionMethodBindings.member_w_getter, bx)
	return ret

}

// Equal_Variant operator
func (cx *Projection) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Projection) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *Projection) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_not, lt, rt)
}

// Multiply_Vector4 operator
func (cx *Projection) Multiply_Vector4(right Vector4) Vector4 {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Vector4](globalProjectionMethodBindings.operator_multiply_Vector4, lt, rt)
}

// Equal_Projection operator
func (cx *Projection) Equal_Projection(right Projection) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_equal_Projection, lt, rt)
}

// Not_equal_Projection operator
func (cx *Projection) Not_equal_Projection(right Projection) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_not_equal_Projection, lt, rt)
}

// Multiply_Projection operator
func (cx *Projection) Multiply_Projection(right Projection) Projection {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Projection](globalProjectionMethodBindings.operator_multiply_Projection, lt, rt)
}

// In_Dictionary operator
func (cx *Projection) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Projection) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalProjectionMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInClass = (*Color)(nil)

/*
 * Color
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: false
 */
type Color [16]uint8

func (cx *Color) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Color) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewColor, index: 0
func NewColor() Color {
	cx := Color{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalColorMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalColorMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewColor, index: 1
func NewColorWithColor(from Color) Color {
	cx := Color{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Color
	// ColorEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalColorMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalColorMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewColor, index: 2
func NewColorWithColorFloat32(from Color, alpha float32) Color {
	cx := Color{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Color
	// ColorEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(alpha))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalColorMethodBindings.constructor_2, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalColorMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewColor, index: 3
func NewColorWithFloat32Float32Float32(r float32, g float32, b float32) Color {
	cx := Color{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [3]GDExtensionConstTypePtr
	// float
	args[0] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(r))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(g))
	pnr.Pin(args[1])
	// float
	args[2] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(b))
	pnr.Pin(args[2])
	CallBuiltinConstructor(globalColorMethodBindings.constructor_3, ptr, args[0], args[1], args[2])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalColorMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// NewColor, index: 4
func NewColorWithFloat32Float32Float32Float32(r float32, g float32, b float32, a float32) Color {
	cx := Color{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [4]GDExtensionConstTypePtr
	// float
	args[0] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(r))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(g))
	pnr.Pin(args[1])
	// float
	args[2] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(b))
	pnr.Pin(args[2])
	// float
	args[3] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(a))
	pnr.Pin(args[3])
	CallBuiltinConstructor(globalColorMethodBindings.constructor_4, ptr, args[0], args[1], args[2], args[3])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalColorMethodBindings.constructor_4"), zap.Any("cx", cx))
	return cx
}

// NewColor, index: 5
func NewColorWithString(code String) Color {
	cx := Color{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// String
	// StringEncoder
	args[0] = code.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("code", code))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalColorMethodBindings.constructor_5, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalColorMethodBindings.constructor_5"), zap.Any("cx", cx))
	return cx
}

// NewColor, index: 6
func NewColorWithStringFloat32(code String, alpha float32) Color {
	cx := Color{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// String
	// StringEncoder
	args[0] = code.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("code", code))
	pnr.Pin(args[0])
	// float
	args[1] = (GDExtensionConstTypePtr)(Float32Encoder.EncodeTypePtr(alpha))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalColorMethodBindings.constructor_6, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalColorMethodBindings.constructor_6"), zap.Any("cx", cx))
	return cx
}

// methods

/* ToArgb32 : to_argb32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToArgb32() int64 {
	mb := globalColorMethodBindings.method_to_argb32
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* ToAbgr32 : to_abgr32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToAbgr32() int64 {
	mb := globalColorMethodBindings.method_to_abgr32
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* ToRgba32 : to_rgba32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToRgba32() int64 {
	mb := globalColorMethodBindings.method_to_rgba32
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* ToArgb64 : to_argb64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToArgb64() int64 {
	mb := globalColorMethodBindings.method_to_argb64
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* ToAbgr64 : to_abgr64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToAbgr64() int64 {
	mb := globalColorMethodBindings.method_to_abgr64
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* ToRgba64 : to_rgba64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Color) ToRgba64() int64 {
	mb := globalColorMethodBindings.method_to_rgba64
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* ToHtml : to_html
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *Color) ToHtml(with_alpha bool) String {
	mb := globalColorMethodBindings.method_to_html
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = BoolEncoder.EncodeTypePtr(with_alpha)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clamp : clamp
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Clamp(min Color, max Color) Color {
	mb := globalColorMethodBindings.method_clamp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&min)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&max)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Inverted : inverted
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Inverted() Color {
	mb := globalColorMethodBindings.method_inverted
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, nil)
	return ret
}

/* Lerp : lerp
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Lerp(to Color, weight float32) Color {
	mb := globalColorMethodBindings.method_lerp
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(weight)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Lightened : lightened
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Lightened(amount float32) Color {
	mb := globalColorMethodBindings.method_lightened
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(amount)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Darkened : darkened
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Darkened(amount float32) Color {
	mb := globalColorMethodBindings.method_darkened
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(amount)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Blend : blend
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) Blend(over Color) Color {
	mb := globalColorMethodBindings.method_blend
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&over)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetLuminance : get_luminance
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *Color) GetLuminance() float32 {
	mb := globalColorMethodBindings.method_get_luminance
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* SrgbToLinear : srgb_to_linear
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) SrgbToLinear() Color {
	mb := globalColorMethodBindings.method_srgb_to_linear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, nil)
	return ret
}

/* LinearToSrgb : linear_to_srgb
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *Color) LinearToSrgb() Color {
	mb := globalColorMethodBindings.method_linear_to_srgb
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, nil)
	return ret
}

/* IsEqualApprox : is_equal_approx
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Color) IsEqualApprox(to Color) bool {
	mb := globalColorMethodBindings.method_is_equal_approx
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Hex : hex
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) Hex(hex int64) Color {
	mb := globalColorMethodBindings.method_hex
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(hex)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Hex64 : hex64
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) Hex64(hex int64) Color {
	mb := globalColorMethodBindings.method_hex64
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(hex)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Html : html
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) Html(rgba String) Color {
	mb := globalColorMethodBindings.method_html
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&rgba)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* HtmlIsValid : html_is_valid
 * is_vararg = false, is_static = true
 * goReturnType(bool) -> bool
 */
func (cx *Color) HtmlIsValid(color String) bool {
	mb := globalColorMethodBindings.method_html_is_valid
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&color)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FromString : from_string
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromString(str String, defaultName Color) Color {
	mb := globalColorMethodBindings.method_from_string
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&str)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&defaultName)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FromHsv : from_hsv
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromHsv(h float32, s float32, v float32, alpha float32) Color {
	mb := globalColorMethodBindings.method_from_hsv
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(h)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(s)

	pnr.Pin(args[1])
	args[2] = Float32Encoder.EncodeTypePtr(v)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(alpha)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FromOkHsl : from_ok_hsl
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromOkHsl(h float32, s float32, l float32, alpha float32) Color {
	mb := globalColorMethodBindings.method_from_ok_hsl
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(h)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(s)

	pnr.Pin(args[1])
	args[2] = Float32Encoder.EncodeTypePtr(l)

	pnr.Pin(args[2])
	args[3] = Float32Encoder.EncodeTypePtr(alpha)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FromRgbe9995 : from_rgbe9995
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromRgbe9995(rgbe int64) Color {
	mb := globalColorMethodBindings.method_from_rgbe9995
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(rgbe)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FromRgba8 : from_rgba8
 * is_vararg = false, is_static = true
 * goReturnType(Color) -> Color
 */
func (cx *Color) FromRgba8(r8 int64, g8 int64, b8 int64, a8 int64) Color {
	mb := globalColorMethodBindings.method_from_rgba8
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(r8)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(g8)

	pnr.Pin(args[1])
	args[2] = Int64Encoder.EncodeTypePtr(b8)

	pnr.Pin(args[2])
	args[3] = Int64Encoder.EncodeTypePtr(a8)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *Color) GetIndexed(i int64) float32 {
	var ret float32
	CallFunc_GDExtensionPtrIndexedGetter(
		globalColorMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Color) SetIndexed(i int64, value float32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalColorMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members

func (cx *Color) MemberGetr() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalColorMethodBindings.member_r_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Color) MemberGetg() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalColorMethodBindings.member_g_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Color) MemberGetb() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalColorMethodBindings.member_b_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Color) MemberGeta() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalColorMethodBindings.member_a_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Color) MemberGetr8() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalColorMethodBindings.member_r8_getter, bx)
	return ret

}

func (cx *Color) MemberGetg8() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalColorMethodBindings.member_g8_getter, bx)
	return ret

}

func (cx *Color) MemberGetb8() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalColorMethodBindings.member_b8_getter, bx)
	return ret

}

func (cx *Color) MemberGeta8() int64 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[int64](globalColorMethodBindings.member_a8_getter, bx)
	return ret

}

func (cx *Color) MemberGeth() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalColorMethodBindings.member_h_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Color) MemberGets() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalColorMethodBindings.member_s_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Color) MemberGetv() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalColorMethodBindings.member_v_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Color) MemberGetokHslH() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalColorMethodBindings.member_ok_hsl_h_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Color) MemberGetokHslS() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalColorMethodBindings.member_ok_hsl_s_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

func (cx *Color) MemberGetokHslL() float32 {
	bx := cx.NativeConstPtr()
	ret := CallBuiltinPtrGetter[float64](globalColorMethodBindings.member_ok_hsl_l_getter, bx)
	return Float32Encoder.DecodeTypePtr((GDExtensionConstTypePtr)(&ret))

}

// Equal_Variant operator
func (cx *Color) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Color) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Negate operator
func (cx *Color) Negate() Color {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_negate, lt, rt)
}

// Positive operator
func (cx *Color) Positive() Color {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_positive, lt, rt)
}

// Not operator
func (cx *Color) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_not, lt, rt)
}

// Multiply_int operator
func (cx *Color) Multiply_int(right int64) Color {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_multiply_int, lt, rt)
}

// Divide_int operator
func (cx *Color) Divide_int(right int64) Color {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_divide_int, lt, rt)
}

// Multiply_float operator
func (cx *Color) Multiply_float(right float32) Color {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_multiply_float, lt, rt)
}

// Divide_float operator
func (cx *Color) Divide_float(right float32) Color {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_divide_float, lt, rt)
}

// Equal_Color operator
func (cx *Color) Equal_Color(right Color) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_equal_Color, lt, rt)
}

// Not_equal_Color operator
func (cx *Color) Not_equal_Color(right Color) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_not_equal_Color, lt, rt)
}

// Add_Color operator
func (cx *Color) Add_Color(right Color) Color {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_add_Color, lt, rt)
}

// Subtract_Color operator
func (cx *Color) Subtract_Color(right Color) Color {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_subtract_Color, lt, rt)
}

// Multiply_Color operator
func (cx *Color) Multiply_Color(right Color) Color {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_multiply_Color, lt, rt)
}

// Divide_Color operator
func (cx *Color) Divide_Color(right Color) Color {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Color](globalColorMethodBindings.operator_divide_Color, lt, rt)
}

// In_Dictionary operator
func (cx *Color) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Color) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_in_Array, lt, rt)
}

// In_PackedColorArray operator
func (cx *Color) In_PackedColorArray(right PackedColorArray) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalColorMethodBindings.operator_in_PackedColorArray, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*StringName)(nil)

/*
 * StringName
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: true
 */
type StringName [8]uint8

func (cx *StringName) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *StringName) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewStringName, index: 0
func NewStringName() StringName {
	cx := StringName{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalStringNameMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalStringNameMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewStringName, index: 1
func NewStringNameWithStringName(from StringName) StringName {
	cx := StringName{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// StringName
	// StringNameEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalStringNameMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalStringNameMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewStringName, index: 2
func NewStringNameWithString(from String) StringName {
	cx := StringName{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// String
	// StringEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalStringNameMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalStringNameMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *StringName) Destroy() {
	md := (GDExtensionPtrDestructor)(globalStringNameMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* CasecmpTo : casecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) CasecmpTo(to String) int64 {
	mb := globalStringNameMethodBindings.method_casecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* NocasecmpTo : nocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) NocasecmpTo(to String) int64 {
	mb := globalStringNameMethodBindings.method_nocasecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* NaturalcasecmpTo : naturalcasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) NaturalcasecmpTo(to String) int64 {
	mb := globalStringNameMethodBindings.method_naturalcasecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* NaturalnocasecmpTo : naturalnocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) NaturalnocasecmpTo(to String) int64 {
	mb := globalStringNameMethodBindings.method_naturalnocasecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FilecasecmpTo : filecasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) FilecasecmpTo(to String) int64 {
	mb := globalStringNameMethodBindings.method_filecasecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FilenocasecmpTo : filenocasecmp_to
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) FilenocasecmpTo(to String) int64 {
	mb := globalStringNameMethodBindings.method_filenocasecmp_to
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&to)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Length : length
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) Length() int64 {
	mb := globalStringNameMethodBindings.method_length
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Substr : substr
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Substr(from int64, len int64) String {
	mb := globalStringNameMethodBindings.method_substr
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(len)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetSlice : get_slice
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetSlice(delimiter String, slice int64) String {
	mb := globalStringNameMethodBindings.method_get_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&delimiter)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(slice)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetSlicec : get_slicec
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetSlicec(delimiter int64, slice int64) String {
	mb := globalStringNameMethodBindings.method_get_slicec
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(delimiter)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(slice)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetSliceCount : get_slice_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) GetSliceCount(delimiter String) int64 {
	mb := globalStringNameMethodBindings.method_get_slice_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&delimiter)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) Find(what String, from int64) int64 {
	mb := globalStringNameMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Findn : findn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) Findn(what String, from int64) int64 {
	mb := globalStringNameMethodBindings.method_findn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) Count(what String, from int64, to int64) int64 {
	mb := globalStringNameMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])
	args[2] = Int64Encoder.EncodeTypePtr(to)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Countn : countn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) Countn(what String, from int64, to int64) int64 {
	mb := globalStringNameMethodBindings.method_countn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])
	args[2] = Int64Encoder.EncodeTypePtr(to)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) Rfind(what String, from int64) int64 {
	mb := globalStringNameMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfindn : rfindn
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) Rfindn(what String, from int64) int64 {
	mb := globalStringNameMethodBindings.method_rfindn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Match : match
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) Match(expr String) bool {
	mb := globalStringNameMethodBindings.method_match
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&expr)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Matchn : matchn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) Matchn(expr String) bool {
	mb := globalStringNameMethodBindings.method_matchn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&expr)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* BeginsWith : begins_with
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) BeginsWith(text String) bool {
	mb := globalStringNameMethodBindings.method_begins_with
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&text)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* EndsWith : ends_with
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) EndsWith(text String) bool {
	mb := globalStringNameMethodBindings.method_ends_with
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&text)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsSubsequenceOf : is_subsequence_of
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsSubsequenceOf(text String) bool {
	mb := globalStringNameMethodBindings.method_is_subsequence_of
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&text)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsSubsequenceOfn : is_subsequence_ofn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsSubsequenceOfn(text String) bool {
	mb := globalStringNameMethodBindings.method_is_subsequence_ofn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&text)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Bigrams : bigrams
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *StringName) Bigrams() PackedStringArray {
	mb := globalStringNameMethodBindings.method_bigrams
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedStringArray](mb, bx, nil)
	return ret
}

/* Similarity : similarity
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *StringName) Similarity(text String) float32 {
	mb := globalStringNameMethodBindings.method_similarity
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&text)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Format : format
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Format(values Variant, placeholder String) String {
	mb := globalStringNameMethodBindings.method_format
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&values)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&placeholder)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Replace : replace
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Replace(what String, forwhat String) String {
	mb := globalStringNameMethodBindings.method_replace
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&forwhat)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Replacen : replacen
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Replacen(what String, forwhat String) String {
	mb := globalStringNameMethodBindings.method_replacen
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&forwhat)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ReplaceChar : replace_char
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ReplaceChar(key int64, with int64) String {
	mb := globalStringNameMethodBindings.method_replace_char
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(key)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(with)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ReplaceChars : replace_chars
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ReplaceChars(keys String, with int64) String {
	mb := globalStringNameMethodBindings.method_replace_chars
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&keys)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(with)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* RemoveChar : remove_char
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) RemoveChar(what int64) String {
	mb := globalStringNameMethodBindings.method_remove_char
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(what)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* RemoveChars : remove_chars
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) RemoveChars(chars String) String {
	mb := globalStringNameMethodBindings.method_remove_chars
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&chars)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Repeat : repeat
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Repeat(count int64) String {
	mb := globalStringNameMethodBindings.method_repeat
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(count)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Reverse() String {
	mb := globalStringNameMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Insert(position int64, what String) String {
	mb := globalStringNameMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(position)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Erase(position int64, chars int64) String {
	mb := globalStringNameMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(position)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(chars)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Capitalize : capitalize
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Capitalize() String {
	mb := globalStringNameMethodBindings.method_capitalize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ToCamelCase : to_camel_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ToCamelCase() String {
	mb := globalStringNameMethodBindings.method_to_camel_case
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ToPascalCase : to_pascal_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ToPascalCase() String {
	mb := globalStringNameMethodBindings.method_to_pascal_case
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ToSnakeCase : to_snake_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ToSnakeCase() String {
	mb := globalStringNameMethodBindings.method_to_snake_case
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ToKebabCase : to_kebab_case
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ToKebabCase() String {
	mb := globalStringNameMethodBindings.method_to_kebab_case
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Split : split
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *StringName) Split(delimiter String, allow_empty bool, maxsplit int64) PackedStringArray {
	mb := globalStringNameMethodBindings.method_split
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&delimiter)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(allow_empty)

	pnr.Pin(args[1])
	args[2] = Int64Encoder.EncodeTypePtr(maxsplit)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[PackedStringArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rsplit : rsplit
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *StringName) Rsplit(delimiter String, allow_empty bool, maxsplit int64) PackedStringArray {
	mb := globalStringNameMethodBindings.method_rsplit
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&delimiter)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(allow_empty)

	pnr.Pin(args[1])
	args[2] = Int64Encoder.EncodeTypePtr(maxsplit)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[PackedStringArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* SplitFloats : split_floats
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *StringName) SplitFloats(delimiter String, allow_empty bool) PackedFloat64Array {
	mb := globalStringNameMethodBindings.method_split_floats
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&delimiter)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(allow_empty)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Join : join
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Join(parts PackedStringArray) String {
	mb := globalStringNameMethodBindings.method_join
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&parts)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToUpper : to_upper
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ToUpper() String {
	mb := globalStringNameMethodBindings.method_to_upper
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ToLower : to_lower
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ToLower() String {
	mb := globalStringNameMethodBindings.method_to_lower
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Left : left
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Left(length int64) String {
	mb := globalStringNameMethodBindings.method_left
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(length)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Right : right
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Right(length int64) String {
	mb := globalStringNameMethodBindings.method_right
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(length)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* StripEdges : strip_edges
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) StripEdges(left bool, right bool) String {
	mb := globalStringNameMethodBindings.method_strip_edges
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = BoolEncoder.EncodeTypePtr(left)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(right)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* StripEscapes : strip_escapes
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) StripEscapes() String {
	mb := globalStringNameMethodBindings.method_strip_escapes
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Lstrip : lstrip
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Lstrip(chars String) String {
	mb := globalStringNameMethodBindings.method_lstrip
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&chars)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rstrip : rstrip
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Rstrip(chars String) String {
	mb := globalStringNameMethodBindings.method_rstrip
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&chars)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetExtension : get_extension
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetExtension() String {
	mb := globalStringNameMethodBindings.method_get_extension
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* GetBasename : get_basename
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetBasename() String {
	mb := globalStringNameMethodBindings.method_get_basename
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* PathJoin : path_join
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) PathJoin(path String) String {
	mb := globalStringNameMethodBindings.method_path_join
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&path)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* UnicodeAt : unicode_at
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) UnicodeAt(at int64) int64 {
	mb := globalStringNameMethodBindings.method_unicode_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Indent : indent
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Indent(prefix String) String {
	mb := globalStringNameMethodBindings.method_indent
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&prefix)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Dedent : dedent
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Dedent() String {
	mb := globalStringNameMethodBindings.method_dedent
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Md5Text : md5_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Md5Text() String {
	mb := globalStringNameMethodBindings.method_md5_text
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Sha1Text : sha1_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Sha1Text() String {
	mb := globalStringNameMethodBindings.method_sha1_text
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Sha256Text : sha256_text
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Sha256Text() String {
	mb := globalStringNameMethodBindings.method_sha256_text
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Md5Buffer : md5_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) Md5Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_md5_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sha1Buffer : sha1_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) Sha1Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_sha1_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sha256Buffer : sha256_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) Sha256Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_sha256_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsEmpty() bool {
	mb := globalStringNameMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* Contains : contains
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) Contains(what String) bool {
	mb := globalStringNameMethodBindings.method_contains
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Containsn : containsn
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) Containsn(what String) bool {
	mb := globalStringNameMethodBindings.method_containsn
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsAbsolutePath : is_absolute_path
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsAbsolutePath() bool {
	mb := globalStringNameMethodBindings.method_is_absolute_path
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsRelativePath : is_relative_path
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsRelativePath() bool {
	mb := globalStringNameMethodBindings.method_is_relative_path
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* SimplifyPath : simplify_path
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) SimplifyPath() String {
	mb := globalStringNameMethodBindings.method_simplify_path
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* GetBaseDir : get_base_dir
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetBaseDir() String {
	mb := globalStringNameMethodBindings.method_get_base_dir
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* GetFile : get_file
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) GetFile() String {
	mb := globalStringNameMethodBindings.method_get_file
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* XmlEscape : xml_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) XmlEscape(escape_quotes bool) String {
	mb := globalStringNameMethodBindings.method_xml_escape
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = BoolEncoder.EncodeTypePtr(escape_quotes)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* XmlUnescape : xml_unescape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) XmlUnescape() String {
	mb := globalStringNameMethodBindings.method_xml_unescape
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* UriEncode : uri_encode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) UriEncode() String {
	mb := globalStringNameMethodBindings.method_uri_encode
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* UriDecode : uri_decode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) UriDecode() String {
	mb := globalStringNameMethodBindings.method_uri_decode
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* UriFileDecode : uri_file_decode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) UriFileDecode() String {
	mb := globalStringNameMethodBindings.method_uri_file_decode
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* CEscape : c_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) CEscape() String {
	mb := globalStringNameMethodBindings.method_c_escape
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* CUnescape : c_unescape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) CUnescape() String {
	mb := globalStringNameMethodBindings.method_c_unescape
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* JsonEscape : json_escape
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) JsonEscape() String {
	mb := globalStringNameMethodBindings.method_json_escape
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ValidateNodeName : validate_node_name
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ValidateNodeName() String {
	mb := globalStringNameMethodBindings.method_validate_node_name
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* ValidateFilename : validate_filename
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) ValidateFilename() String {
	mb := globalStringNameMethodBindings.method_validate_filename
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* IsValidAsciiIdentifier : is_valid_ascii_identifier
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidAsciiIdentifier() bool {
	mb := globalStringNameMethodBindings.method_is_valid_ascii_identifier
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidUnicodeIdentifier : is_valid_unicode_identifier
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidUnicodeIdentifier() bool {
	mb := globalStringNameMethodBindings.method_is_valid_unicode_identifier
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidIdentifier : is_valid_identifier
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidIdentifier() bool {
	mb := globalStringNameMethodBindings.method_is_valid_identifier
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidInt : is_valid_int
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidInt() bool {
	mb := globalStringNameMethodBindings.method_is_valid_int
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidFloat : is_valid_float
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidFloat() bool {
	mb := globalStringNameMethodBindings.method_is_valid_float
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidHexNumber : is_valid_hex_number
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidHexNumber(with_prefix bool) bool {
	mb := globalStringNameMethodBindings.method_is_valid_hex_number
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = BoolEncoder.EncodeTypePtr(with_prefix)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsValidHtmlColor : is_valid_html_color
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidHtmlColor() bool {
	mb := globalStringNameMethodBindings.method_is_valid_html_color
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidIpAddress : is_valid_ip_address
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidIpAddress() bool {
	mb := globalStringNameMethodBindings.method_is_valid_ip_address
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValidFilename : is_valid_filename
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *StringName) IsValidFilename() bool {
	mb := globalStringNameMethodBindings.method_is_valid_filename
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* ToInt : to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) ToInt() int64 {
	mb := globalStringNameMethodBindings.method_to_int
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* ToFloat : to_float
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *StringName) ToFloat() float32 {
	mb := globalStringNameMethodBindings.method_to_float
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, nil)
	return ret
}

/* HexToInt : hex_to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) HexToInt() int64 {
	mb := globalStringNameMethodBindings.method_hex_to_int
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* BinToInt : bin_to_int
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) BinToInt() int64 {
	mb := globalStringNameMethodBindings.method_bin_to_int
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Lpad : lpad
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Lpad(min_length int64, character String) String {
	mb := globalStringNameMethodBindings.method_lpad
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(min_length)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&character)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rpad : rpad
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) Rpad(min_length int64, character String) String {
	mb := globalStringNameMethodBindings.method_rpad
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(min_length)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&character)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* PadDecimals : pad_decimals
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) PadDecimals(digits int64) String {
	mb := globalStringNameMethodBindings.method_pad_decimals
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(digits)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* PadZeros : pad_zeros
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) PadZeros(digits int64) String {
	mb := globalStringNameMethodBindings.method_pad_zeros
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(digits)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* TrimPrefix : trim_prefix
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) TrimPrefix(prefix String) String {
	mb := globalStringNameMethodBindings.method_trim_prefix
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&prefix)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* TrimSuffix : trim_suffix
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *StringName) TrimSuffix(suffix String) String {
	mb := globalStringNameMethodBindings.method_trim_suffix
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&suffix)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToAsciiBuffer : to_ascii_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) ToAsciiBuffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_to_ascii_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* ToUtf8Buffer : to_utf8_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) ToUtf8Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_to_utf8_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* ToUtf16Buffer : to_utf16_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) ToUtf16Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_to_utf16_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* ToUtf32Buffer : to_utf32_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) ToUtf32Buffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_to_utf32_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* ToWcharBuffer : to_wchar_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) ToWcharBuffer() PackedByteArray {
	mb := globalStringNameMethodBindings.method_to_wchar_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* ToMultibyteCharBuffer : to_multibyte_char_buffer
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) ToMultibyteCharBuffer(encoding String) PackedByteArray {
	mb := globalStringNameMethodBindings.method_to_multibyte_char_buffer
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&encoding)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* HexDecode : hex_decode
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *StringName) HexDecode() PackedByteArray {
	mb := globalStringNameMethodBindings.method_hex_decode
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *StringName) Hash() int64 {
	mb := globalStringNameMethodBindings.method_hash
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

// members
// Equal_Variant operator
func (cx *StringName) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *StringName) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Module_Variant operator
func (cx *StringName) Module_Variant(right Variant) String {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Variant, lt, rt)
}

// Not operator
func (cx *StringName) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_not, lt, rt)
}

// Module_bool operator
func (cx *StringName) Module_bool(right bool) String {
	lt := cx.NativeConstPtr()
	eRight := BoolEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_bool, lt, rt)
}

// Module_int operator
func (cx *StringName) Module_int(right int64) String {
	lt := cx.NativeConstPtr()
	eRight := Int64Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_int, lt, rt)
}

// Module_float operator
func (cx *StringName) Module_float(right float32) String {
	lt := cx.NativeConstPtr()
	eRight := Float32Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_float, lt, rt)
}

// Equal_String operator
func (cx *StringName) Equal_String(right String) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_equal_String, lt, rt)
}

// Not_equal_String operator
func (cx *StringName) Not_equal_String(right String) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_not_equal_String, lt, rt)
}

// Add_String operator
func (cx *StringName) Add_String(right String) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_add_String, lt, rt)
}

// Module_String operator
func (cx *StringName) Module_String(right String) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_String, lt, rt)
}

// In_String operator
func (cx *StringName) In_String(right String) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_String, lt, rt)
}

// Module_Vector2 operator
func (cx *StringName) Module_Vector2(right Vector2) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector2, lt, rt)
}

// Module_Vector2i operator
func (cx *StringName) Module_Vector2i(right Vector2i) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector2i, lt, rt)
}

// Module_Rect2 operator
func (cx *StringName) Module_Rect2(right Rect2) String {
	lt := cx.NativeConstPtr()
	eRight := Rect2Encoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Rect2, lt, rt)
}

// Module_Rect2i operator
func (cx *StringName) Module_Rect2i(right Rect2i) String {
	lt := cx.NativeConstPtr()
	eRight := Rect2iEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Rect2i, lt, rt)
}

// Module_Vector3 operator
func (cx *StringName) Module_Vector3(right Vector3) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector3, lt, rt)
}

// Module_Vector3i operator
func (cx *StringName) Module_Vector3i(right Vector3i) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector3i, lt, rt)
}

// Module_Transform2D operator
func (cx *StringName) Module_Transform2D(right Transform2D) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Transform2D, lt, rt)
}

// Module_Vector4 operator
func (cx *StringName) Module_Vector4(right Vector4) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector4, lt, rt)
}

// Module_Vector4i operator
func (cx *StringName) Module_Vector4i(right Vector4i) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Vector4i, lt, rt)
}

// Module_Plane operator
func (cx *StringName) Module_Plane(right Plane) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Plane, lt, rt)
}

// Module_Quaternion operator
func (cx *StringName) Module_Quaternion(right Quaternion) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Quaternion, lt, rt)
}

// Module_AABB operator
func (cx *StringName) Module_AABB(right AABB) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_AABB, lt, rt)
}

// Module_Basis operator
func (cx *StringName) Module_Basis(right Basis) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Basis, lt, rt)
}

// Module_Transform3D operator
func (cx *StringName) Module_Transform3D(right Transform3D) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Transform3D, lt, rt)
}

// Module_Projection operator
func (cx *StringName) Module_Projection(right Projection) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Projection, lt, rt)
}

// Module_Color operator
func (cx *StringName) Module_Color(right Color) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Color, lt, rt)
}

// Equal_StringName operator
func (cx *StringName) Equal_StringName(right StringName) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_equal_StringName, lt, rt)
}

// Not_equal_StringName operator
func (cx *StringName) Not_equal_StringName(right StringName) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_not_equal_StringName, lt, rt)
}

// Less_StringName operator
func (cx *StringName) Less_StringName(right StringName) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_less_StringName, lt, rt)
}

// Less_equal_StringName operator
func (cx *StringName) Less_equal_StringName(right StringName) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_less_equal_StringName, lt, rt)
}

// Greater_StringName operator
func (cx *StringName) Greater_StringName(right StringName) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_greater_StringName, lt, rt)
}

// Greater_equal_StringName operator
func (cx *StringName) Greater_equal_StringName(right StringName) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_greater_equal_StringName, lt, rt)
}

// Add_StringName operator
func (cx *StringName) Add_StringName(right StringName) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_add_StringName, lt, rt)
}

// Module_StringName operator
func (cx *StringName) Module_StringName(right StringName) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_StringName, lt, rt)
}

// In_StringName operator
func (cx *StringName) In_StringName(right StringName) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_StringName, lt, rt)
}

// Module_NodePath operator
func (cx *StringName) Module_NodePath(right NodePath) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_NodePath, lt, rt)
}

// Module_RID operator
func (cx *StringName) Module_RID(right RID) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_RID, lt, rt)
}

// Module_Object operator
func (cx *StringName) Module_Object(right Object) String {
	lt := cx.NativeConstPtr()
	eRight := ObjectEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Object, lt, rt)
}

// In_Object operator
func (cx *StringName) In_Object(right Object) bool {
	lt := cx.NativeConstPtr()
	eRight := ObjectEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_Object, lt, rt)
}

// Module_Callable operator
func (cx *StringName) Module_Callable(right Callable) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Callable, lt, rt)
}

// Module_Signal operator
func (cx *StringName) Module_Signal(right Signal) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Signal, lt, rt)
}

// Module_Dictionary operator
func (cx *StringName) Module_Dictionary(right Dictionary) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Dictionary, lt, rt)
}

// In_Dictionary operator
func (cx *StringName) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_Dictionary, lt, rt)
}

// Module_Array operator
func (cx *StringName) Module_Array(right Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_Array, lt, rt)
}

// In_Array operator
func (cx *StringName) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_Array, lt, rt)
}

// Module_PackedByteArray operator
func (cx *StringName) Module_PackedByteArray(right PackedByteArray) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedByteArray, lt, rt)
}

// Module_PackedInt32Array operator
func (cx *StringName) Module_PackedInt32Array(right PackedInt32Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedInt32Array, lt, rt)
}

// Module_PackedInt64Array operator
func (cx *StringName) Module_PackedInt64Array(right PackedInt64Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedInt64Array, lt, rt)
}

// Module_PackedFloat32Array operator
func (cx *StringName) Module_PackedFloat32Array(right PackedFloat32Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedFloat32Array, lt, rt)
}

// Module_PackedFloat64Array operator
func (cx *StringName) Module_PackedFloat64Array(right PackedFloat64Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedFloat64Array, lt, rt)
}

// Module_PackedStringArray operator
func (cx *StringName) Module_PackedStringArray(right PackedStringArray) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedStringArray, lt, rt)
}

// In_PackedStringArray operator
func (cx *StringName) In_PackedStringArray(right PackedStringArray) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalStringNameMethodBindings.operator_in_PackedStringArray, lt, rt)
}

// Module_PackedVector2Array operator
func (cx *StringName) Module_PackedVector2Array(right PackedVector2Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedVector2Array, lt, rt)
}

// Module_PackedVector3Array operator
func (cx *StringName) Module_PackedVector3Array(right PackedVector3Array) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedVector3Array, lt, rt)
}

// Module_PackedColorArray operator
func (cx *StringName) Module_PackedColorArray(right PackedColorArray) String {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedColorArray, lt, rt)
}

// Module_PackedVector4Array operator
func (cx *StringName) Module_PackedVector4Array(right PackedVector4Array) String {
	lt := cx.NativeConstPtr()
	eRight := PackedVector4ArrayEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[String](globalStringNameMethodBindings.operator_module_PackedVector4Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*NodePath)(nil)

/*
 * NodePath
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: true
 */
type NodePath [8]uint8

func (cx *NodePath) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *NodePath) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewNodePath, index: 0
func NewNodePath() NodePath {
	cx := NodePath{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalNodePathMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalNodePathMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewNodePath, index: 1
func NewNodePathWithNodePath(from NodePath) NodePath {
	cx := NodePath{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// NodePath
	// NodePathEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalNodePathMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalNodePathMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewNodePath, index: 2
func NewNodePathWithString(from String) NodePath {
	cx := NodePath{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// String
	// StringEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalNodePathMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalNodePathMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *NodePath) Destroy() {
	md := (GDExtensionPtrDestructor)(globalNodePathMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* IsAbsolute : is_absolute
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *NodePath) IsAbsolute() bool {
	mb := globalNodePathMethodBindings.method_is_absolute
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* GetNameCount : get_name_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *NodePath) GetNameCount() int64 {
	mb := globalNodePathMethodBindings.method_get_name_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* GetName : get_name
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetName(idx int64) StringName {
	mb := globalNodePathMethodBindings.method_get_name
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(idx)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[StringName](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetSubnameCount : get_subname_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *NodePath) GetSubnameCount() int64 {
	mb := globalNodePathMethodBindings.method_get_subname_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *NodePath) Hash() int64 {
	mb := globalNodePathMethodBindings.method_hash
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* GetSubname : get_subname
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetSubname(idx int64) StringName {
	mb := globalNodePathMethodBindings.method_get_subname
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(idx)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[StringName](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetConcatenatedNames : get_concatenated_names
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetConcatenatedNames() StringName {
	mb := globalNodePathMethodBindings.method_get_concatenated_names
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret
}

/* GetConcatenatedSubnames : get_concatenated_subnames
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *NodePath) GetConcatenatedSubnames() StringName {
	mb := globalNodePathMethodBindings.method_get_concatenated_subnames
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret
}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(NodePath) -> NodePath
 */
func (cx *NodePath) Slice(begin int64, end int64) NodePath {
	mb := globalNodePathMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[NodePath](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetAsPropertyPath : get_as_property_path
 * is_vararg = false, is_static = false
 * goReturnType(NodePath) -> NodePath
 */
func (cx *NodePath) GetAsPropertyPath() NodePath {
	mb := globalNodePathMethodBindings.method_get_as_property_path
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[NodePath](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *NodePath) IsEmpty() bool {
	mb := globalNodePathMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

// members
// Equal_Variant operator
func (cx *NodePath) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *NodePath) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *NodePath) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_not, lt, rt)
}

// Equal_NodePath operator
func (cx *NodePath) Equal_NodePath(right NodePath) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_equal_NodePath, lt, rt)
}

// Not_equal_NodePath operator
func (cx *NodePath) Not_equal_NodePath(right NodePath) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_not_equal_NodePath, lt, rt)
}

// In_Dictionary operator
func (cx *NodePath) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *NodePath) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalNodePathMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInClass = (*RID)(nil)

/*
 * RID
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: false
 */
type RID [8]uint8

func (cx *RID) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *RID) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewRID, index: 0
func NewRID() RID {
	cx := RID{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalRIDMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRIDMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewRID, index: 1
func NewRIDWithRID(from RID) RID {
	cx := RID{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// RID
	// RIDEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalRIDMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalRIDMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// methods

/* IsValid : is_valid
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *RID) IsValid() bool {
	mb := globalRIDMethodBindings.method_is_valid
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* GetId : get_id
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *RID) GetId() int64 {
	mb := globalRIDMethodBindings.method_get_id
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

// members
// Equal_Variant operator
func (cx *RID) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *RID) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *RID) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_not, lt, rt)
}

// Equal_RID operator
func (cx *RID) Equal_RID(right RID) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_equal_RID, lt, rt)
}

// Not_equal_RID operator
func (cx *RID) Not_equal_RID(right RID) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_not_equal_RID, lt, rt)
}

// Less_RID operator
func (cx *RID) Less_RID(right RID) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_less_RID, lt, rt)
}

// Less_equal_RID operator
func (cx *RID) Less_equal_RID(right RID) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_less_equal_RID, lt, rt)
}

// Greater_RID operator
func (cx *RID) Greater_RID(right RID) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_greater_RID, lt, rt)
}

// Greater_equal_RID operator
func (cx *RID) Greater_equal_RID(right RID) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_greater_equal_RID, lt, rt)
}

// In_Dictionary operator
func (cx *RID) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *RID) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalRIDMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*Callable)(nil)

/*
 * Callable
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: true
 */
type Callable [16]uint8

func (cx *Callable) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Callable) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewCallable, index: 0
func NewCallable() Callable {
	cx := Callable{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalCallableMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalCallableMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewCallable, index: 1
func NewCallableWithCallable(from Callable) Callable {
	cx := Callable{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Callable
	// CallableEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalCallableMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalCallableMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewCallable, index: 2
func NewCallableWithObjectStringName(object Object, method StringName) Callable {
	cx := Callable{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Object
	arg0 := object.GetGodotObjectOwner()
	args[0] = (GDExtensionConstTypePtr)(&arg0)
	pnr.Pin(args[0])
	// StringName
	// StringNameEncoder
	args[1] = method.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("method", method))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalCallableMethodBindings.constructor_2, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalCallableMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *Callable) Destroy() {
	md := (GDExtensionPtrDestructor)(globalCallableMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Create : create
 * is_vararg = false, is_static = true
 * goReturnType(Callable) -> Callable
 */
func (cx *Callable) Create(variant Variant, method StringName) Callable {
	mb := globalCallableMethodBindings.method_create
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := (GDExtensionTypePtr)(nullptr)
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&variant)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&method)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Callable](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Callv : callv
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Callable) Callv(arguments Array) Variant {
	mb := globalCallableMethodBindings.method_callv
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&arguments)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsNull : is_null
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsNull() bool {
	mb := globalCallableMethodBindings.method_is_null
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsCustom : is_custom
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsCustom() bool {
	mb := globalCallableMethodBindings.method_is_custom
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsStandard : is_standard
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsStandard() bool {
	mb := globalCallableMethodBindings.method_is_standard
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsValid : is_valid
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Callable) IsValid() bool {
	mb := globalCallableMethodBindings.method_is_valid
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* GetObject : get_object
 * is_vararg = false, is_static = false
 * goReturnType(Object) -> Object
 */
func (cx *Callable) GetObject() Object {
	mb := globalCallableMethodBindings.method_get_object
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Object](mb, bx, nil)
	return ret
}

/* GetObjectId : get_object_id
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Callable) GetObjectId() int64 {
	mb := globalCallableMethodBindings.method_get_object_id
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* GetMethod : get_method
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *Callable) GetMethod() StringName {
	mb := globalCallableMethodBindings.method_get_method
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret
}

/* GetArgumentCount : get_argument_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Callable) GetArgumentCount() int64 {
	mb := globalCallableMethodBindings.method_get_argument_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* GetBoundArgumentsCount : get_bound_arguments_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Callable) GetBoundArgumentsCount() int64 {
	mb := globalCallableMethodBindings.method_get_bound_arguments_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* GetBoundArguments : get_bound_arguments
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Callable) GetBoundArguments() Array {
	mb := globalCallableMethodBindings.method_get_bound_arguments
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Array](mb, bx, nil)
	return ret
}

/* GetUnboundArgumentsCount : get_unbound_arguments_count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Callable) GetUnboundArgumentsCount() int64 {
	mb := globalCallableMethodBindings.method_get_unbound_arguments_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Callable) Hash() int64 {
	mb := globalCallableMethodBindings.method_hash
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Bindv : bindv
 * is_vararg = false, is_static = false
 * goReturnType(Callable) -> Callable
 */
func (cx *Callable) Bindv(arguments Array) Callable {
	mb := globalCallableMethodBindings.method_bindv
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&arguments)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Callable](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Unbind : unbind
 * is_vararg = false, is_static = false
 * goReturnType(Callable) -> Callable
 */
func (cx *Callable) Unbind(argcount int64) Callable {
	mb := globalCallableMethodBindings.method_unbind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(argcount)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Callable](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

// members
// Equal_Variant operator
func (cx *Callable) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Callable) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *Callable) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_not, lt, rt)
}

// Equal_Callable operator
func (cx *Callable) Equal_Callable(right Callable) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_equal_Callable, lt, rt)
}

// Not_equal_Callable operator
func (cx *Callable) Not_equal_Callable(right Callable) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_not_equal_Callable, lt, rt)
}

// In_Dictionary operator
func (cx *Callable) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Callable) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalCallableMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*Signal)(nil)

/*
 * Signal
 * indexingReturnType:
 * isKeyed: false
 * hasDestructor: true
 */
type Signal [16]uint8

func (cx *Signal) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Signal) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewSignal, index: 0
func NewSignal() Signal {
	cx := Signal{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalSignalMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalSignalMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewSignal, index: 1
func NewSignalWithSignal(from Signal) Signal {
	cx := Signal{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Signal
	// SignalEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalSignalMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalSignalMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewSignal, index: 2
func NewSignalWithObjectStringName(object Object, signal StringName) Signal {
	cx := Signal{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [2]GDExtensionConstTypePtr
	// Object
	arg0 := object.GetGodotObjectOwner()
	args[0] = (GDExtensionConstTypePtr)(&arg0)
	pnr.Pin(args[0])
	// StringName
	// StringNameEncoder
	args[1] = signal.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[1]", uintptr(args[1])), zap.Any("signal", signal))
	pnr.Pin(args[1])
	CallBuiltinConstructor(globalSignalMethodBindings.constructor_2, ptr, args[0], args[1])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalSignalMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *Signal) Destroy() {
	md := (GDExtensionPtrDestructor)(globalSignalMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* IsNull : is_null
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Signal) IsNull() bool {
	mb := globalSignalMethodBindings.method_is_null
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* GetObject : get_object
 * is_vararg = false, is_static = false
 * goReturnType(Object) -> Object
 */
func (cx *Signal) GetObject() Object {
	mb := globalSignalMethodBindings.method_get_object
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Object](mb, bx, nil)
	return ret
}

/* GetObjectId : get_object_id
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Signal) GetObjectId() int64 {
	mb := globalSignalMethodBindings.method_get_object_id
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* GetName : get_name
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *Signal) GetName() StringName {
	mb := globalSignalMethodBindings.method_get_name
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret
}

/* Connect : connect
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Signal) Connect(callable Callable, flags int64) int64 {
	mb := globalSignalMethodBindings.method_connect
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&callable)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(flags)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Disconnect : disconnect
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Signal) Disconnect(callable Callable) {
	mb := globalSignalMethodBindings.method_disconnect
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&callable)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* IsConnected : is_connected
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Signal) IsConnected(callable Callable) bool {
	mb := globalSignalMethodBindings.method_is_connected
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&callable)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetConnections : get_connections
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Signal) GetConnections() Array {
	mb := globalSignalMethodBindings.method_get_connections
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Array](mb, bx, nil)
	return ret
}

/* HasConnections : has_connections
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Signal) HasConnections() bool {
	mb := globalSignalMethodBindings.method_has_connections
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

// members
// Equal_Variant operator
func (cx *Signal) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Signal) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *Signal) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_not, lt, rt)
}

// Equal_Signal operator
func (cx *Signal) Equal_Signal(right Signal) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_equal_Signal, lt, rt)
}

// Not_equal_Signal operator
func (cx *Signal) Not_equal_Signal(right Signal) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_not_equal_Signal, lt, rt)
}

// In_Dictionary operator
func (cx *Signal) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Signal) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalSignalMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*Dictionary)(nil)

/*
 * Dictionary
 * indexingReturnType: Variant
 * isKeyed: true
 * hasDestructor: true
 */
type Dictionary [8]uint8

func (cx *Dictionary) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Dictionary) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewDictionary, index: 0
func NewDictionary() Dictionary {
	cx := Dictionary{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalDictionaryMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalDictionaryMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewDictionary, index: 1
func NewDictionaryWithDictionary(from Dictionary) Dictionary {
	cx := Dictionary{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Dictionary
	// DictionaryEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalDictionaryMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalDictionaryMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewDictionary, index: 2
func NewDictionaryWithDictionaryInt64StringNameVariantInt64StringNameVariant(base Dictionary, key_type int64, key_class_name StringName, key_script Variant, value_type int64, value_class_name StringName, value_script Variant) Dictionary {
	cx := Dictionary{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [7]GDExtensionConstTypePtr
	// Dictionary
	// DictionaryEncoder
	args[0] = base.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("base", base))
	pnr.Pin(args[0])
	// int
	args[1] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(key_type))
	pnr.Pin(args[1])
	// StringName
	// StringNameEncoder
	args[2] = key_class_name.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[2]", uintptr(args[2])), zap.Any("key_class_name", key_class_name))
	pnr.Pin(args[2])
	// Variant
	args[3] = (GDExtensionConstTypePtr)(&key_script)
	pnr.Pin(args[3])
	// int
	args[4] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(value_type))
	pnr.Pin(args[4])
	// StringName
	// StringNameEncoder
	args[5] = value_class_name.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[5]", uintptr(args[5])), zap.Any("value_class_name", value_class_name))
	pnr.Pin(args[5])
	// Variant
	args[6] = (GDExtensionConstTypePtr)(&value_script)
	pnr.Pin(args[6])
	CallBuiltinConstructor(globalDictionaryMethodBindings.constructor_2, ptr, args[0], args[1], args[2], args[3], args[4], args[5], args[6])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalDictionaryMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *Dictionary) Destroy() {
	md := (GDExtensionPtrDestructor)(globalDictionaryMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Dictionary) Size() int64 {
	mb := globalDictionaryMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) IsEmpty() bool {
	mb := globalDictionaryMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Dictionary) Clear() {
	mb := globalDictionaryMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Assign : assign
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Dictionary) Assign(dictionary Dictionary) {
	mb := globalDictionaryMethodBindings.method_assign
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&dictionary)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Dictionary) Sort() {
	mb := globalDictionaryMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Merge : merge
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Dictionary) Merge(dictionary Dictionary, overwrite bool) {
	mb := globalDictionaryMethodBindings.method_merge
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&dictionary)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(overwrite)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Merged : merged
 * is_vararg = false, is_static = false
 * goReturnType(Dictionary) -> Dictionary
 */
func (cx *Dictionary) Merged(dictionary Dictionary, overwrite bool) Dictionary {
	mb := globalDictionaryMethodBindings.method_merged
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&dictionary)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(overwrite)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Dictionary](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) Has(key Variant) bool {
	mb := globalDictionaryMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&key)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* HasAll : has_all
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) HasAll(keys Array) bool {
	mb := globalDictionaryMethodBindings.method_has_all
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&keys)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FindKey : find_key
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Dictionary) FindKey(value Variant) Variant {
	mb := globalDictionaryMethodBindings.method_find_key
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) Erase(key Variant) bool {
	mb := globalDictionaryMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&key)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Dictionary) Hash() int64 {
	mb := globalDictionaryMethodBindings.method_hash
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Keys : keys
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Dictionary) Keys() Array {
	mb := globalDictionaryMethodBindings.method_keys
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Array](mb, bx, nil)
	return ret
}

/* Values : values
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Dictionary) Values() Array {
	mb := globalDictionaryMethodBindings.method_values
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Array](mb, bx, nil)
	return ret
}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(Dictionary) -> Dictionary
 */
func (cx *Dictionary) Duplicate(deep bool) Dictionary {
	mb := globalDictionaryMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = BoolEncoder.EncodeTypePtr(deep)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Dictionary](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DuplicateDeep : duplicate_deep
 * is_vararg = false, is_static = false
 * goReturnType(Dictionary) -> Dictionary
 */
func (cx *Dictionary) DuplicateDeep(deep_subresources_mode int64) Dictionary {
	mb := globalDictionaryMethodBindings.method_duplicate_deep
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(deep_subresources_mode)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Dictionary](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Dictionary) Get(key Variant, defaultName Variant) Variant {
	mb := globalDictionaryMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&key)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&defaultName)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetOrAdd : get_or_add
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Dictionary) GetOrAdd(key Variant, defaultName Variant) Variant {
	mb := globalDictionaryMethodBindings.method_get_or_add
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&key)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&defaultName)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) Set(key Variant, value Variant) bool {
	mb := globalDictionaryMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&key)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsTyped : is_typed
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) IsTyped() bool {
	mb := globalDictionaryMethodBindings.method_is_typed
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsTypedKey : is_typed_key
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) IsTypedKey() bool {
	mb := globalDictionaryMethodBindings.method_is_typed_key
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsTypedValue : is_typed_value
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) IsTypedValue() bool {
	mb := globalDictionaryMethodBindings.method_is_typed_value
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsSameTyped : is_same_typed
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) IsSameTyped(dictionary Dictionary) bool {
	mb := globalDictionaryMethodBindings.method_is_same_typed
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&dictionary)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsSameTypedKey : is_same_typed_key
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) IsSameTypedKey(dictionary Dictionary) bool {
	mb := globalDictionaryMethodBindings.method_is_same_typed_key
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&dictionary)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* IsSameTypedValue : is_same_typed_value
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) IsSameTypedValue(dictionary Dictionary) bool {
	mb := globalDictionaryMethodBindings.method_is_same_typed_value
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&dictionary)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetTypedKeyBuiltin : get_typed_key_builtin
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Dictionary) GetTypedKeyBuiltin() int64 {
	mb := globalDictionaryMethodBindings.method_get_typed_key_builtin
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* GetTypedValueBuiltin : get_typed_value_builtin
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Dictionary) GetTypedValueBuiltin() int64 {
	mb := globalDictionaryMethodBindings.method_get_typed_value_builtin
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* GetTypedKeyClassName : get_typed_key_class_name
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *Dictionary) GetTypedKeyClassName() StringName {
	mb := globalDictionaryMethodBindings.method_get_typed_key_class_name
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret
}

/* GetTypedValueClassName : get_typed_value_class_name
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *Dictionary) GetTypedValueClassName() StringName {
	mb := globalDictionaryMethodBindings.method_get_typed_value_class_name
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret
}

/* GetTypedKeyScript : get_typed_key_script
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Dictionary) GetTypedKeyScript() Variant {
	mb := globalDictionaryMethodBindings.method_get_typed_key_script
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret
}

/* GetTypedValueScript : get_typed_value_script
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Dictionary) GetTypedValueScript() Variant {
	mb := globalDictionaryMethodBindings.method_get_typed_value_script
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret
}

/* MakeReadOnly : make_read_only
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Dictionary) MakeReadOnly() {
	mb := globalDictionaryMethodBindings.method_make_read_only
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* IsReadOnly : is_read_only
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) IsReadOnly() bool {
	mb := globalDictionaryMethodBindings.method_is_read_only
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* RecursiveEqual : recursive_equal
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Dictionary) RecursiveEqual(dictionary Dictionary, recursion_count int64) bool {
	mb := globalDictionaryMethodBindings.method_recursive_equal
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&dictionary)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(recursion_count)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *Dictionary) GetKeyed(key string) Variant {
	gdStrKey := NewStringWithUtf8Chars(key)
	defer gdStrKey.Destroy()
	vKey := NewVariantString(gdStrKey)
	defer vKey.Destroy()
	var ret Variant
	CallFunc_GDExtensionPtrKeyedGetter(
		globalDictionaryMethodBindings.keyed_getter,
		cx.NativeConstPtr(),
		vKey.AsGDExtensionConstTypePtr(),
		ret.AsGDExtensionTypePtr(),
	)
	return ret
}

func (cx *Dictionary) SetKeyed(key string, value Variant) {
	gdStrKey := NewStringWithUtf8Chars(key)
	defer gdStrKey.Destroy()
	vKey := NewVariantString(gdStrKey)
	defer vKey.Destroy()
	CallFunc_GDExtensionPtrKeyedSetter(
		globalDictionaryMethodBindings.keyed_setter,
		cx.NativePtr(),
		vKey.AsGDExtensionConstTypePtr(),
		value.AsGDExtensionConstTypePtr(),
	)
}
func (cx *Dictionary) GetIndexed(i int64) Variant {
	var ret Variant
	CallFunc_GDExtensionPtrIndexedGetter(
		globalDictionaryMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Dictionary) SetIndexed(i int64, value Variant) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalDictionaryMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *Dictionary) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Dictionary) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *Dictionary) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_not, lt, rt)
}

// Equal_Dictionary operator
func (cx *Dictionary) Equal_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_equal_Dictionary, lt, rt)
}

// Not_equal_Dictionary operator
func (cx *Dictionary) Not_equal_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_not_equal_Dictionary, lt, rt)
}

// In_Dictionary operator
func (cx *Dictionary) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *Dictionary) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalDictionaryMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*Array)(nil)

/*
 * Array
 * indexingReturnType: Variant
 * isKeyed: false
 * hasDestructor: true
 */
type Array [8]uint8

func (cx *Array) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *Array) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewArray, index: 0
func NewArray() Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 1
func NewArrayWithArray(from Array) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 2
func NewArrayWithArrayInt64StringNameVariant(base Array, typeName int64, class_name StringName, script Variant) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [4]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = base.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("base", base))
	pnr.Pin(args[0])
	// int
	args[1] = (GDExtensionConstTypePtr)(Int64Encoder.EncodeTypePtr(typeName))
	pnr.Pin(args[1])
	// StringName
	// StringNameEncoder
	args[2] = class_name.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[2]", uintptr(args[2])), zap.Any("class_name", class_name))
	pnr.Pin(args[2])
	// Variant
	args[3] = (GDExtensionConstTypePtr)(&script)
	pnr.Pin(args[3])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_2, ptr, args[0], args[1], args[2], args[3])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 3
func NewArrayWithPackedByteArray(from PackedByteArray) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedByteArray
	// PackedByteArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_3, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_3"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 4
func NewArrayWithPackedInt32Array(from PackedInt32Array) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedInt32Array
	// PackedInt32ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_4, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_4"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 5
func NewArrayWithPackedInt64Array(from PackedInt64Array) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedInt64Array
	// PackedInt64ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_5, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_5"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 6
func NewArrayWithPackedFloat32Array(from PackedFloat32Array) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedFloat32Array
	// PackedFloat32ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_6, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_6"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 7
func NewArrayWithPackedFloat64Array(from PackedFloat64Array) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedFloat64Array
	// PackedFloat64ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_7, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_7"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 8
func NewArrayWithPackedStringArray(from PackedStringArray) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedStringArray
	// PackedStringArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_8, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_8"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 9
func NewArrayWithPackedVector2Array(from PackedVector2Array) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedVector2Array
	// PackedVector2ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_9, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_9"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 10
func NewArrayWithPackedVector3Array(from PackedVector3Array) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedVector3Array
	// PackedVector3ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_10, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_10"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 11
func NewArrayWithPackedColorArray(from PackedColorArray) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedColorArray
	// PackedColorArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_11, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_11"), zap.Any("cx", cx))
	return cx
}

// NewArray, index: 12
func NewArrayWithPackedVector4Array(from PackedVector4Array) Array {
	cx := Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedVector4Array
	// PackedVector4ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalArrayMethodBindings.constructor_12, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalArrayMethodBindings.constructor_12"), zap.Any("cx", cx))
	return cx
}

func (cx *Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalArrayMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Size() int64 {
	mb := globalArrayMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) IsEmpty() bool {
	mb := globalArrayMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Clear() {
	mb := globalArrayMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Hash : hash
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Hash() int64 {
	mb := globalArrayMethodBindings.method_hash
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* Assign : assign
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Assign(array Array) {
	mb := globalArrayMethodBindings.method_assign
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Get(index int64) Variant {
	mb := globalArrayMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Set(index int64, value Variant) {
	mb := globalArrayMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) PushBack(value Variant) {
	mb := globalArrayMethodBindings.method_push_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* PushFront : push_front
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) PushFront(value Variant) {
	mb := globalArrayMethodBindings.method_push_front
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Append(value Variant) {
	mb := globalArrayMethodBindings.method_append
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) AppendArray(array Array) {
	mb := globalArrayMethodBindings.method_append_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Resize(size int64) int64 {
	mb := globalArrayMethodBindings.method_resize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Insert(position int64, value Variant) int64 {
	mb := globalArrayMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(position)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) RemoveAt(position int64) {
	mb := globalArrayMethodBindings.method_remove_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(position)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Fill(value Variant) {
	mb := globalArrayMethodBindings.method_fill
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Erase(value Variant) {
	mb := globalArrayMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Front : front
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Front() Variant {
	mb := globalArrayMethodBindings.method_front
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret
}

/* Back : back
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Back() Variant {
	mb := globalArrayMethodBindings.method_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret
}

/* PickRandom : pick_random
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) PickRandom() Variant {
	mb := globalArrayMethodBindings.method_pick_random
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Find(what Variant, from int64) int64 {
	mb := globalArrayMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* FindCustom : find_custom
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) FindCustom(method Callable, from int64) int64 {
	mb := globalArrayMethodBindings.method_find_custom
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&method)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Rfind(what Variant, from int64) int64 {
	mb := globalArrayMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&what)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* RfindCustom : rfind_custom
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) RfindCustom(method Callable, from int64) int64 {
	mb := globalArrayMethodBindings.method_rfind_custom
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&method)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Count(value Variant) int64 {
	mb := globalArrayMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) Has(value Variant) bool {
	mb := globalArrayMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* PopBack : pop_back
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) PopBack() Variant {
	mb := globalArrayMethodBindings.method_pop_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret
}

/* PopFront : pop_front
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) PopFront() Variant {
	mb := globalArrayMethodBindings.method_pop_front
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret
}

/* PopAt : pop_at
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) PopAt(position int64) Variant {
	mb := globalArrayMethodBindings.method_pop_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(position)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Sort() {
	mb := globalArrayMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* SortCustom : sort_custom
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) SortCustom(callbackFunc Callable) {
	mb := globalArrayMethodBindings.method_sort_custom
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&callbackFunc)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Shuffle : shuffle
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Shuffle() {
	mb := globalArrayMethodBindings.method_shuffle
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) Bsearch(value Variant, before bool) int64 {
	mb := globalArrayMethodBindings.method_bsearch
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* BsearchCustom : bsearch_custom
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) BsearchCustom(value Variant, callbackFunc Callable, before bool) int64 {
	mb := globalArrayMethodBindings.method_bsearch_custom
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&callbackFunc)

	pnr.Pin(args[1])
	args[2] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) Reverse() {
	mb := globalArrayMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Duplicate(deep bool) Array {
	mb := globalArrayMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = BoolEncoder.EncodeTypePtr(deep)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DuplicateDeep : duplicate_deep
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) DuplicateDeep(deep_subresources_mode int64) Array {
	mb := globalArrayMethodBindings.method_duplicate_deep
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(deep_subresources_mode)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Slice(begin int64, end int64, step int64, deep bool) Array {
	mb := globalArrayMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 4
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])
	args[2] = Int64Encoder.EncodeTypePtr(step)

	pnr.Pin(args[2])
	args[3] = BoolEncoder.EncodeTypePtr(deep)

	pnr.Pin(args[3])

	ret := CallBuiltinMethodPtrRet[Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Filter : filter
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Filter(method Callable) Array {
	mb := globalArrayMethodBindings.method_filter
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&method)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Map : map
 * is_vararg = false, is_static = false
 * goReturnType(Array) -> Array
 */
func (cx *Array) Map(method Callable) Array {
	mb := globalArrayMethodBindings.method_map
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&method)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reduce : reduce
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Reduce(method Callable, accum Variant) Variant {
	mb := globalArrayMethodBindings.method_reduce
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&method)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&accum)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Any : any
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) Any(method Callable) bool {
	mb := globalArrayMethodBindings.method_any
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&method)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* All : all
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) All(method Callable) bool {
	mb := globalArrayMethodBindings.method_all
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&method)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Max : max
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Max() Variant {
	mb := globalArrayMethodBindings.method_max
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret
}

/* Min : min
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) Min() Variant {
	mb := globalArrayMethodBindings.method_min
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret
}

/* IsTyped : is_typed
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) IsTyped() bool {
	mb := globalArrayMethodBindings.method_is_typed
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* IsSameTyped : is_same_typed
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) IsSameTyped(array Array) bool {
	mb := globalArrayMethodBindings.method_is_same_typed
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetTypedBuiltin : get_typed_builtin
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *Array) GetTypedBuiltin() int64 {
	mb := globalArrayMethodBindings.method_get_typed_builtin
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* GetTypedClassName : get_typed_class_name
 * is_vararg = false, is_static = false
 * goReturnType(StringName) -> StringName
 */
func (cx *Array) GetTypedClassName() StringName {
	mb := globalArrayMethodBindings.method_get_typed_class_name
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[StringName](mb, bx, nil)
	return ret
}

/* GetTypedScript : get_typed_script
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *Array) GetTypedScript() Variant {
	mb := globalArrayMethodBindings.method_get_typed_script
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, nil)
	return ret
}

/* MakeReadOnly : make_read_only
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *Array) MakeReadOnly() {
	mb := globalArrayMethodBindings.method_make_read_only
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* IsReadOnly : is_read_only
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *Array) IsReadOnly() bool {
	mb := globalArrayMethodBindings.method_is_read_only
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

func (cx *Array) GetIndexed(i int64) Variant {
	var ret Variant
	CallFunc_GDExtensionPtrIndexedGetter(
		globalArrayMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *Array) SetIndexed(i int64, value Variant) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalArrayMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *Array) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *Array) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *Array) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_not, lt, rt)
}

// In_Dictionary operator
func (cx *Array) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// Equal_Array operator
func (cx *Array) Equal_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_equal_Array, lt, rt)
}

// Not_equal_Array operator
func (cx *Array) Not_equal_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_not_equal_Array, lt, rt)
}

// Less_Array operator
func (cx *Array) Less_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_less_Array, lt, rt)
}

// Less_equal_Array operator
func (cx *Array) Less_equal_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_less_equal_Array, lt, rt)
}

// Greater_Array operator
func (cx *Array) Greater_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_greater_Array, lt, rt)
}

// Greater_equal_Array operator
func (cx *Array) Greater_equal_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_greater_equal_Array, lt, rt)
}

// Add_Array operator
func (cx *Array) Add_Array(right Array) Array {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[Array](globalArrayMethodBindings.operator_add_Array, lt, rt)
}

// In_Array operator
func (cx *Array) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalArrayMethodBindings.operator_in_Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*PackedByteArray)(nil)

/*
 * PackedByteArray
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: true
 */
type PackedByteArray [16]uint8

func (cx *PackedByteArray) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *PackedByteArray) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewPackedByteArray, index: 0
func NewPackedByteArray() PackedByteArray {
	cx := PackedByteArray{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalPackedByteArrayMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedByteArrayMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewPackedByteArray, index: 1
func NewPackedByteArrayWithPackedByteArray(from PackedByteArray) PackedByteArray {
	cx := PackedByteArray{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedByteArray
	// PackedByteArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedByteArrayMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedByteArrayMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewPackedByteArray, index: 2
func NewPackedByteArrayWithArray(from Array) PackedByteArray {
	cx := PackedByteArray{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedByteArrayMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedByteArrayMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *PackedByteArray) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedByteArrayMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Get(index int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Set(index int64, value int64) {
	mb := globalPackedByteArrayMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Size() int64 {
	mb := globalPackedByteArrayMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) IsEmpty() bool {
	mb := globalPackedByteArrayMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) PushBack(value int64) bool {
	mb := globalPackedByteArrayMethodBindings.method_push_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) Append(value int64) bool {
	mb := globalPackedByteArrayMethodBindings.method_append
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) AppendArray(array PackedByteArray) {
	mb := globalPackedByteArrayMethodBindings.method_append_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) RemoveAt(index int64) {
	mb := globalPackedByteArrayMethodBindings.method_remove_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Insert(at_index int64, value int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at_index)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Fill(value int64) {
	mb := globalPackedByteArrayMethodBindings.method_fill
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Resize(new_size int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_resize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(new_size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Clear() {
	mb := globalPackedByteArrayMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) Has(value int64) bool {
	mb := globalPackedByteArrayMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Reverse() {
	mb := globalPackedByteArrayMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Slice(begin int64, end int64) PackedByteArray {
	mb := globalPackedByteArrayMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Sort() {
	mb := globalPackedByteArrayMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Bsearch(value int64, before bool) int64 {
	mb := globalPackedByteArrayMethodBindings.method_bsearch
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Duplicate() PackedByteArray {
	mb := globalPackedByteArrayMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Find(value int64, from int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Rfind(value int64, from int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) Count(value int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) Erase(value int64) bool {
	mb := globalPackedByteArrayMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* GetStringFromAscii : get_string_from_ascii
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromAscii() String {
	mb := globalPackedByteArrayMethodBindings.method_get_string_from_ascii
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* GetStringFromUtf8 : get_string_from_utf8
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromUtf8() String {
	mb := globalPackedByteArrayMethodBindings.method_get_string_from_utf8
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* GetStringFromUtf16 : get_string_from_utf16
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromUtf16() String {
	mb := globalPackedByteArrayMethodBindings.method_get_string_from_utf16
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* GetStringFromUtf32 : get_string_from_utf32
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromUtf32() String {
	mb := globalPackedByteArrayMethodBindings.method_get_string_from_utf32
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* GetStringFromWchar : get_string_from_wchar
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromWchar() String {
	mb := globalPackedByteArrayMethodBindings.method_get_string_from_wchar
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* GetStringFromMultibyteChar : get_string_from_multibyte_char
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) GetStringFromMultibyteChar(encoding String) String {
	mb := globalPackedByteArrayMethodBindings.method_get_string_from_multibyte_char
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&encoding)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* HexEncode : hex_encode
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedByteArray) HexEncode() String {
	mb := globalPackedByteArrayMethodBindings.method_hex_encode
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[String](mb, bx, nil)
	return ret
}

/* Compress : compress
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Compress(compression_mode int64) PackedByteArray {
	mb := globalPackedByteArrayMethodBindings.method_compress
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(compression_mode)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Decompress : decompress
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) Decompress(buffer_size int64, compression_mode int64) PackedByteArray {
	mb := globalPackedByteArrayMethodBindings.method_decompress
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(buffer_size)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(compression_mode)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecompressDynamic : decompress_dynamic
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedByteArray) DecompressDynamic(max_output_size int64, compression_mode int64) PackedByteArray {
	mb := globalPackedByteArrayMethodBindings.method_decompress_dynamic
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(max_output_size)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(compression_mode)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeU8 : decode_u8
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeU8(byte_offset int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_decode_u8
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeS8 : decode_s8
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeS8(byte_offset int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_decode_s8
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeU16 : decode_u16
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeU16(byte_offset int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_decode_u16
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeS16 : decode_s16
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeS16(byte_offset int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_decode_s16
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeU32 : decode_u32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeU32(byte_offset int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_decode_u32
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeS32 : decode_s32
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeS32(byte_offset int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_decode_s32
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeU64 : decode_u64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeU64(byte_offset int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_decode_u64
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeS64 : decode_s64
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeS64(byte_offset int64) int64 {
	mb := globalPackedByteArrayMethodBindings.method_decode_s64
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeHalf : decode_half
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *PackedByteArray) DecodeHalf(byte_offset int64) float32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_half
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeFloat : decode_float
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *PackedByteArray) DecodeFloat(byte_offset int64) float32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_float
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeDouble : decode_double
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *PackedByteArray) DecodeDouble(byte_offset int64) float32 {
	mb := globalPackedByteArrayMethodBindings.method_decode_double
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* HasEncodedVar : has_encoded_var
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedByteArray) HasEncodedVar(byte_offset int64, allow_objects bool) bool {
	mb := globalPackedByteArrayMethodBindings.method_has_encoded_var
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(allow_objects)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeVar : decode_var
 * is_vararg = false, is_static = false
 * goReturnType(Variant) -> Variant
 */
func (cx *PackedByteArray) DecodeVar(byte_offset int64, allow_objects bool) Variant {
	mb := globalPackedByteArrayMethodBindings.method_decode_var
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(allow_objects)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[Variant](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* DecodeVarSize : decode_var_size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) DecodeVarSize(byte_offset int64, allow_objects bool) int64 {
	mb := globalPackedByteArrayMethodBindings.method_decode_var_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(allow_objects)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToInt32Array : to_int32_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt32Array) -> PackedInt32Array
 */
func (cx *PackedByteArray) ToInt32Array() PackedInt32Array {
	mb := globalPackedByteArrayMethodBindings.method_to_int32_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedInt32Array](mb, bx, nil)
	return ret
}

/* ToInt64Array : to_int64_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt64Array) -> PackedInt64Array
 */
func (cx *PackedByteArray) ToInt64Array() PackedInt64Array {
	mb := globalPackedByteArrayMethodBindings.method_to_int64_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedInt64Array](mb, bx, nil)
	return ret
}

/* ToFloat32Array : to_float32_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat32Array) -> PackedFloat32Array
 */
func (cx *PackedByteArray) ToFloat32Array() PackedFloat32Array {
	mb := globalPackedByteArrayMethodBindings.method_to_float32_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedFloat32Array](mb, bx, nil)
	return ret
}

/* ToFloat64Array : to_float64_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *PackedByteArray) ToFloat64Array() PackedFloat64Array {
	mb := globalPackedByteArrayMethodBindings.method_to_float64_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, nil)
	return ret
}

/* ToVector2Array : to_vector2_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector2Array) -> PackedVector2Array
 */
func (cx *PackedByteArray) ToVector2Array() PackedVector2Array {
	mb := globalPackedByteArrayMethodBindings.method_to_vector2_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedVector2Array](mb, bx, nil)
	return ret
}

/* ToVector3Array : to_vector3_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector3Array) -> PackedVector3Array
 */
func (cx *PackedByteArray) ToVector3Array() PackedVector3Array {
	mb := globalPackedByteArrayMethodBindings.method_to_vector3_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedVector3Array](mb, bx, nil)
	return ret
}

/* ToVector4Array : to_vector4_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector4Array) -> PackedVector4Array
 */
func (cx *PackedByteArray) ToVector4Array() PackedVector4Array {
	mb := globalPackedByteArrayMethodBindings.method_to_vector4_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedVector4Array](mb, bx, nil)
	return ret
}

/* ToColorArray : to_color_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedColorArray) -> PackedColorArray
 */
func (cx *PackedByteArray) ToColorArray() PackedColorArray {
	mb := globalPackedByteArrayMethodBindings.method_to_color_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedColorArray](mb, bx, nil)
	return ret
}

/* Bswap16 : bswap16
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Bswap16(offset int64, count int64) {
	mb := globalPackedByteArrayMethodBindings.method_bswap16
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(offset)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(count)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Bswap32 : bswap32
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Bswap32(offset int64, count int64) {
	mb := globalPackedByteArrayMethodBindings.method_bswap32
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(offset)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(count)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Bswap64 : bswap64
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) Bswap64(offset int64, count int64) {
	mb := globalPackedByteArrayMethodBindings.method_bswap64
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(offset)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(count)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeU8 : encode_u8
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeU8(byte_offset int64, value int64) {
	mb := globalPackedByteArrayMethodBindings.method_encode_u8
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeS8 : encode_s8
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeS8(byte_offset int64, value int64) {
	mb := globalPackedByteArrayMethodBindings.method_encode_s8
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeU16 : encode_u16
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeU16(byte_offset int64, value int64) {
	mb := globalPackedByteArrayMethodBindings.method_encode_u16
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeS16 : encode_s16
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeS16(byte_offset int64, value int64) {
	mb := globalPackedByteArrayMethodBindings.method_encode_s16
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeU32 : encode_u32
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeU32(byte_offset int64, value int64) {
	mb := globalPackedByteArrayMethodBindings.method_encode_u32
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeS32 : encode_s32
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeS32(byte_offset int64, value int64) {
	mb := globalPackedByteArrayMethodBindings.method_encode_s32
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeU64 : encode_u64
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeU64(byte_offset int64, value int64) {
	mb := globalPackedByteArrayMethodBindings.method_encode_u64
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeS64 : encode_s64
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeS64(byte_offset int64, value int64) {
	mb := globalPackedByteArrayMethodBindings.method_encode_s64
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeHalf : encode_half
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeHalf(byte_offset int64, value float32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_half
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeFloat : encode_float
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeFloat(byte_offset int64, value float32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_float
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeDouble : encode_double
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedByteArray) EncodeDouble(byte_offset int64, value float32) {
	mb := globalPackedByteArrayMethodBindings.method_encode_double
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* EncodeVar : encode_var
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedByteArray) EncodeVar(byte_offset int64, value Variant, allow_objects bool) int64 {
	mb := globalPackedByteArrayMethodBindings.method_encode_var
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 3
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(byte_offset)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])
	args[2] = BoolEncoder.EncodeTypePtr(allow_objects)

	pnr.Pin(args[2])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *PackedByteArray) GetIndexed(i int64) int64 {
	var ret int64
	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedByteArrayMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *PackedByteArray) SetIndexed(i int64, value int64) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedByteArrayMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *PackedByteArray) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedByteArray) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *PackedByteArray) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_not, lt, rt)
}

// In_Dictionary operator
func (cx *PackedByteArray) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedByteArray) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedByteArray operator
func (cx *PackedByteArray) Equal_PackedByteArray(right PackedByteArray) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_equal_PackedByteArray, lt, rt)
}

// Not_equal_PackedByteArray operator
func (cx *PackedByteArray) Not_equal_PackedByteArray(right PackedByteArray) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedByteArrayMethodBindings.operator_not_equal_PackedByteArray, lt, rt)
}

// Add_PackedByteArray operator
func (cx *PackedByteArray) Add_PackedByteArray(right PackedByteArray) PackedByteArray {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedByteArray](globalPackedByteArrayMethodBindings.operator_add_PackedByteArray, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*PackedInt32Array)(nil)

/*
 * PackedInt32Array
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: true
 */
type PackedInt32Array [16]uint8

func (cx *PackedInt32Array) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *PackedInt32Array) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewPackedInt32Array, index: 0
func NewPackedInt32Array() PackedInt32Array {
	cx := PackedInt32Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalPackedInt32ArrayMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedInt32ArrayMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewPackedInt32Array, index: 1
func NewPackedInt32ArrayWithPackedInt32Array(from PackedInt32Array) PackedInt32Array {
	cx := PackedInt32Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedInt32Array
	// PackedInt32ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedInt32ArrayMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedInt32ArrayMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewPackedInt32Array, index: 2
func NewPackedInt32ArrayWithArray(from Array) PackedInt32Array {
	cx := PackedInt32Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedInt32ArrayMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedInt32ArrayMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *PackedInt32Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedInt32ArrayMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Get(index int64) int64 {
	mb := globalPackedInt32ArrayMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) Set(index int64, value int64) {
	mb := globalPackedInt32ArrayMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Size() int64 {
	mb := globalPackedInt32ArrayMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) IsEmpty() bool {
	mb := globalPackedInt32ArrayMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) PushBack(value int64) bool {
	mb := globalPackedInt32ArrayMethodBindings.method_push_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) Append(value int64) bool {
	mb := globalPackedInt32ArrayMethodBindings.method_append
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) AppendArray(array PackedInt32Array) {
	mb := globalPackedInt32ArrayMethodBindings.method_append_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) RemoveAt(index int64) {
	mb := globalPackedInt32ArrayMethodBindings.method_remove_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Insert(at_index int64, value int64) int64 {
	mb := globalPackedInt32ArrayMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at_index)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) Fill(value int64) {
	mb := globalPackedInt32ArrayMethodBindings.method_fill
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Resize(new_size int64) int64 {
	mb := globalPackedInt32ArrayMethodBindings.method_resize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(new_size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) Clear() {
	mb := globalPackedInt32ArrayMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) Has(value int64) bool {
	mb := globalPackedInt32ArrayMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) Reverse() {
	mb := globalPackedInt32ArrayMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt32Array) -> PackedInt32Array
 */
func (cx *PackedInt32Array) Slice(begin int64, end int64) PackedInt32Array {
	mb := globalPackedInt32ArrayMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedInt32Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedInt32Array) ToByteArray() PackedByteArray {
	mb := globalPackedInt32ArrayMethodBindings.method_to_byte_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt32Array) Sort() {
	mb := globalPackedInt32ArrayMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Bsearch(value int64, before bool) int64 {
	mb := globalPackedInt32ArrayMethodBindings.method_bsearch
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt32Array) -> PackedInt32Array
 */
func (cx *PackedInt32Array) Duplicate() PackedInt32Array {
	mb := globalPackedInt32ArrayMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedInt32Array](mb, bx, nil)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Find(value int64, from int64) int64 {
	mb := globalPackedInt32ArrayMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Rfind(value int64, from int64) int64 {
	mb := globalPackedInt32ArrayMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt32Array) Count(value int64) int64 {
	mb := globalPackedInt32ArrayMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt32Array) Erase(value int64) bool {
	mb := globalPackedInt32ArrayMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *PackedInt32Array) GetIndexed(i int64) int64 {
	var ret int64
	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedInt32ArrayMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *PackedInt32Array) SetIndexed(i int64, value int64) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedInt32ArrayMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *PackedInt32Array) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedInt32Array) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *PackedInt32Array) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_not, lt, rt)
}

// In_Dictionary operator
func (cx *PackedInt32Array) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedInt32Array) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedInt32Array operator
func (cx *PackedInt32Array) Equal_PackedInt32Array(right PackedInt32Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_equal_PackedInt32Array, lt, rt)
}

// Not_equal_PackedInt32Array operator
func (cx *PackedInt32Array) Not_equal_PackedInt32Array(right PackedInt32Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedInt32ArrayMethodBindings.operator_not_equal_PackedInt32Array, lt, rt)
}

// Add_PackedInt32Array operator
func (cx *PackedInt32Array) Add_PackedInt32Array(right PackedInt32Array) PackedInt32Array {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedInt32Array](globalPackedInt32ArrayMethodBindings.operator_add_PackedInt32Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*PackedInt64Array)(nil)

/*
 * PackedInt64Array
 * indexingReturnType: int
 * isKeyed: false
 * hasDestructor: true
 */
type PackedInt64Array [16]uint8

func (cx *PackedInt64Array) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *PackedInt64Array) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewPackedInt64Array, index: 0
func NewPackedInt64Array() PackedInt64Array {
	cx := PackedInt64Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalPackedInt64ArrayMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedInt64ArrayMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewPackedInt64Array, index: 1
func NewPackedInt64ArrayWithPackedInt64Array(from PackedInt64Array) PackedInt64Array {
	cx := PackedInt64Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedInt64Array
	// PackedInt64ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedInt64ArrayMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedInt64ArrayMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewPackedInt64Array, index: 2
func NewPackedInt64ArrayWithArray(from Array) PackedInt64Array {
	cx := PackedInt64Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedInt64ArrayMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedInt64ArrayMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *PackedInt64Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedInt64ArrayMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Get(index int64) int64 {
	mb := globalPackedInt64ArrayMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) Set(index int64, value int64) {
	mb := globalPackedInt64ArrayMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Size() int64 {
	mb := globalPackedInt64ArrayMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) IsEmpty() bool {
	mb := globalPackedInt64ArrayMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) PushBack(value int64) bool {
	mb := globalPackedInt64ArrayMethodBindings.method_push_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) Append(value int64) bool {
	mb := globalPackedInt64ArrayMethodBindings.method_append
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) AppendArray(array PackedInt64Array) {
	mb := globalPackedInt64ArrayMethodBindings.method_append_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) RemoveAt(index int64) {
	mb := globalPackedInt64ArrayMethodBindings.method_remove_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Insert(at_index int64, value int64) int64 {
	mb := globalPackedInt64ArrayMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at_index)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) Fill(value int64) {
	mb := globalPackedInt64ArrayMethodBindings.method_fill
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Resize(new_size int64) int64 {
	mb := globalPackedInt64ArrayMethodBindings.method_resize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(new_size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) Clear() {
	mb := globalPackedInt64ArrayMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) Has(value int64) bool {
	mb := globalPackedInt64ArrayMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) Reverse() {
	mb := globalPackedInt64ArrayMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt64Array) -> PackedInt64Array
 */
func (cx *PackedInt64Array) Slice(begin int64, end int64) PackedInt64Array {
	mb := globalPackedInt64ArrayMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedInt64Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedInt64Array) ToByteArray() PackedByteArray {
	mb := globalPackedInt64ArrayMethodBindings.method_to_byte_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedInt64Array) Sort() {
	mb := globalPackedInt64ArrayMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Bsearch(value int64, before bool) int64 {
	mb := globalPackedInt64ArrayMethodBindings.method_bsearch
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedInt64Array) -> PackedInt64Array
 */
func (cx *PackedInt64Array) Duplicate() PackedInt64Array {
	mb := globalPackedInt64ArrayMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedInt64Array](mb, bx, nil)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Find(value int64, from int64) int64 {
	mb := globalPackedInt64ArrayMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Rfind(value int64, from int64) int64 {
	mb := globalPackedInt64ArrayMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedInt64Array) Count(value int64) int64 {
	mb := globalPackedInt64ArrayMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedInt64Array) Erase(value int64) bool {
	mb := globalPackedInt64ArrayMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *PackedInt64Array) GetIndexed(i int64) int64 {
	var ret int64
	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedInt64ArrayMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *PackedInt64Array) SetIndexed(i int64, value int64) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedInt64ArrayMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *PackedInt64Array) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedInt64Array) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *PackedInt64Array) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_not, lt, rt)
}

// In_Dictionary operator
func (cx *PackedInt64Array) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedInt64Array) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedInt64Array operator
func (cx *PackedInt64Array) Equal_PackedInt64Array(right PackedInt64Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_equal_PackedInt64Array, lt, rt)
}

// Not_equal_PackedInt64Array operator
func (cx *PackedInt64Array) Not_equal_PackedInt64Array(right PackedInt64Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedInt64ArrayMethodBindings.operator_not_equal_PackedInt64Array, lt, rt)
}

// Add_PackedInt64Array operator
func (cx *PackedInt64Array) Add_PackedInt64Array(right PackedInt64Array) PackedInt64Array {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedInt64Array](globalPackedInt64ArrayMethodBindings.operator_add_PackedInt64Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*PackedFloat32Array)(nil)

/*
 * PackedFloat32Array
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: true
 */
type PackedFloat32Array [16]uint8

func (cx *PackedFloat32Array) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *PackedFloat32Array) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewPackedFloat32Array, index: 0
func NewPackedFloat32Array() PackedFloat32Array {
	cx := PackedFloat32Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalPackedFloat32ArrayMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedFloat32ArrayMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewPackedFloat32Array, index: 1
func NewPackedFloat32ArrayWithPackedFloat32Array(from PackedFloat32Array) PackedFloat32Array {
	cx := PackedFloat32Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedFloat32Array
	// PackedFloat32ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedFloat32ArrayMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedFloat32ArrayMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewPackedFloat32Array, index: 2
func NewPackedFloat32ArrayWithArray(from Array) PackedFloat32Array {
	cx := PackedFloat32Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedFloat32ArrayMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedFloat32ArrayMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *PackedFloat32Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedFloat32ArrayMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *PackedFloat32Array) Get(index int64) float32 {
	mb := globalPackedFloat32ArrayMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) Set(index int64, value float32) {
	mb := globalPackedFloat32ArrayMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Size() int64 {
	mb := globalPackedFloat32ArrayMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) IsEmpty() bool {
	mb := globalPackedFloat32ArrayMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) PushBack(value float32) bool {
	mb := globalPackedFloat32ArrayMethodBindings.method_push_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) Append(value float32) bool {
	mb := globalPackedFloat32ArrayMethodBindings.method_append
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) AppendArray(array PackedFloat32Array) {
	mb := globalPackedFloat32ArrayMethodBindings.method_append_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) RemoveAt(index int64) {
	mb := globalPackedFloat32ArrayMethodBindings.method_remove_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Insert(at_index int64, value float32) int64 {
	mb := globalPackedFloat32ArrayMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at_index)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) Fill(value float32) {
	mb := globalPackedFloat32ArrayMethodBindings.method_fill
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Resize(new_size int64) int64 {
	mb := globalPackedFloat32ArrayMethodBindings.method_resize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(new_size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) Clear() {
	mb := globalPackedFloat32ArrayMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) Has(value float32) bool {
	mb := globalPackedFloat32ArrayMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) Reverse() {
	mb := globalPackedFloat32ArrayMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat32Array) -> PackedFloat32Array
 */
func (cx *PackedFloat32Array) Slice(begin int64, end int64) PackedFloat32Array {
	mb := globalPackedFloat32ArrayMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedFloat32Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedFloat32Array) ToByteArray() PackedByteArray {
	mb := globalPackedFloat32ArrayMethodBindings.method_to_byte_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat32Array) Sort() {
	mb := globalPackedFloat32ArrayMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Bsearch(value float32, before bool) int64 {
	mb := globalPackedFloat32ArrayMethodBindings.method_bsearch
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat32Array) -> PackedFloat32Array
 */
func (cx *PackedFloat32Array) Duplicate() PackedFloat32Array {
	mb := globalPackedFloat32ArrayMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedFloat32Array](mb, bx, nil)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Find(value float32, from int64) int64 {
	mb := globalPackedFloat32ArrayMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Rfind(value float32, from int64) int64 {
	mb := globalPackedFloat32ArrayMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat32Array) Count(value float32) int64 {
	mb := globalPackedFloat32ArrayMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat32Array) Erase(value float32) bool {
	mb := globalPackedFloat32ArrayMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *PackedFloat32Array) GetIndexed(i int64) float32 {
	var ret float32
	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedFloat32ArrayMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *PackedFloat32Array) SetIndexed(i int64, value float32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedFloat32ArrayMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *PackedFloat32Array) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedFloat32Array) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *PackedFloat32Array) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_not, lt, rt)
}

// In_Dictionary operator
func (cx *PackedFloat32Array) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedFloat32Array) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedFloat32Array operator
func (cx *PackedFloat32Array) Equal_PackedFloat32Array(right PackedFloat32Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_equal_PackedFloat32Array, lt, rt)
}

// Not_equal_PackedFloat32Array operator
func (cx *PackedFloat32Array) Not_equal_PackedFloat32Array(right PackedFloat32Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedFloat32ArrayMethodBindings.operator_not_equal_PackedFloat32Array, lt, rt)
}

// Add_PackedFloat32Array operator
func (cx *PackedFloat32Array) Add_PackedFloat32Array(right PackedFloat32Array) PackedFloat32Array {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedFloat32Array](globalPackedFloat32ArrayMethodBindings.operator_add_PackedFloat32Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*PackedFloat64Array)(nil)

/*
 * PackedFloat64Array
 * indexingReturnType: float
 * isKeyed: false
 * hasDestructor: true
 */
type PackedFloat64Array [16]uint8

func (cx *PackedFloat64Array) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *PackedFloat64Array) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewPackedFloat64Array, index: 0
func NewPackedFloat64Array() PackedFloat64Array {
	cx := PackedFloat64Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalPackedFloat64ArrayMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedFloat64ArrayMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewPackedFloat64Array, index: 1
func NewPackedFloat64ArrayWithPackedFloat64Array(from PackedFloat64Array) PackedFloat64Array {
	cx := PackedFloat64Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedFloat64Array
	// PackedFloat64ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedFloat64ArrayMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedFloat64ArrayMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewPackedFloat64Array, index: 2
func NewPackedFloat64ArrayWithArray(from Array) PackedFloat64Array {
	cx := PackedFloat64Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedFloat64ArrayMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedFloat64ArrayMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *PackedFloat64Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedFloat64ArrayMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(float) -> float32
 */
func (cx *PackedFloat64Array) Get(index int64) float32 {
	mb := globalPackedFloat64ArrayMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[float32](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) Set(index int64, value float32) {
	mb := globalPackedFloat64ArrayMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Size() int64 {
	mb := globalPackedFloat64ArrayMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) IsEmpty() bool {
	mb := globalPackedFloat64ArrayMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) PushBack(value float32) bool {
	mb := globalPackedFloat64ArrayMethodBindings.method_push_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) Append(value float32) bool {
	mb := globalPackedFloat64ArrayMethodBindings.method_append
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) AppendArray(array PackedFloat64Array) {
	mb := globalPackedFloat64ArrayMethodBindings.method_append_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) RemoveAt(index int64) {
	mb := globalPackedFloat64ArrayMethodBindings.method_remove_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Insert(at_index int64, value float32) int64 {
	mb := globalPackedFloat64ArrayMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at_index)

	pnr.Pin(args[0])
	args[1] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) Fill(value float32) {
	mb := globalPackedFloat64ArrayMethodBindings.method_fill
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Resize(new_size int64) int64 {
	mb := globalPackedFloat64ArrayMethodBindings.method_resize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(new_size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) Clear() {
	mb := globalPackedFloat64ArrayMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) Has(value float32) bool {
	mb := globalPackedFloat64ArrayMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) Reverse() {
	mb := globalPackedFloat64ArrayMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *PackedFloat64Array) Slice(begin int64, end int64) PackedFloat64Array {
	mb := globalPackedFloat64ArrayMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedFloat64Array) ToByteArray() PackedByteArray {
	mb := globalPackedFloat64ArrayMethodBindings.method_to_byte_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedFloat64Array) Sort() {
	mb := globalPackedFloat64ArrayMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Bsearch(value float32, before bool) int64 {
	mb := globalPackedFloat64ArrayMethodBindings.method_bsearch
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedFloat64Array) -> PackedFloat64Array
 */
func (cx *PackedFloat64Array) Duplicate() PackedFloat64Array {
	mb := globalPackedFloat64ArrayMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedFloat64Array](mb, bx, nil)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Find(value float32, from int64) int64 {
	mb := globalPackedFloat64ArrayMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Rfind(value float32, from int64) int64 {
	mb := globalPackedFloat64ArrayMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedFloat64Array) Count(value float32) int64 {
	mb := globalPackedFloat64ArrayMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedFloat64Array) Erase(value float32) bool {
	mb := globalPackedFloat64ArrayMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Float32Encoder.EncodeTypePtr(value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *PackedFloat64Array) GetIndexed(i int64) float32 {
	var ret float32
	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedFloat64ArrayMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *PackedFloat64Array) SetIndexed(i int64, value float32) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedFloat64ArrayMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *PackedFloat64Array) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedFloat64Array) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *PackedFloat64Array) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_not, lt, rt)
}

// In_Dictionary operator
func (cx *PackedFloat64Array) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedFloat64Array) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedFloat64Array operator
func (cx *PackedFloat64Array) Equal_PackedFloat64Array(right PackedFloat64Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_equal_PackedFloat64Array, lt, rt)
}

// Not_equal_PackedFloat64Array operator
func (cx *PackedFloat64Array) Not_equal_PackedFloat64Array(right PackedFloat64Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedFloat64ArrayMethodBindings.operator_not_equal_PackedFloat64Array, lt, rt)
}

// Add_PackedFloat64Array operator
func (cx *PackedFloat64Array) Add_PackedFloat64Array(right PackedFloat64Array) PackedFloat64Array {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedFloat64Array](globalPackedFloat64ArrayMethodBindings.operator_add_PackedFloat64Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*PackedStringArray)(nil)

/*
 * PackedStringArray
 * indexingReturnType: String
 * isKeyed: false
 * hasDestructor: true
 */
type PackedStringArray [16]uint8

func (cx *PackedStringArray) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *PackedStringArray) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewPackedStringArray, index: 0
func NewPackedStringArray() PackedStringArray {
	cx := PackedStringArray{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalPackedStringArrayMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedStringArrayMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewPackedStringArray, index: 1
func NewPackedStringArrayWithPackedStringArray(from PackedStringArray) PackedStringArray {
	cx := PackedStringArray{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedStringArray
	// PackedStringArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedStringArrayMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedStringArrayMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewPackedStringArray, index: 2
func NewPackedStringArrayWithArray(from Array) PackedStringArray {
	cx := PackedStringArray{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedStringArrayMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedStringArrayMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *PackedStringArray) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedStringArrayMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(String) -> String
 */
func (cx *PackedStringArray) Get(index int64) String {
	mb := globalPackedStringArrayMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[String](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) Set(index int64, value String) {
	mb := globalPackedStringArrayMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Size() int64 {
	mb := globalPackedStringArrayMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) IsEmpty() bool {
	mb := globalPackedStringArrayMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) PushBack(value String) bool {
	mb := globalPackedStringArrayMethodBindings.method_push_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) Append(value String) bool {
	mb := globalPackedStringArrayMethodBindings.method_append
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) AppendArray(array PackedStringArray) {
	mb := globalPackedStringArrayMethodBindings.method_append_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) RemoveAt(index int64) {
	mb := globalPackedStringArrayMethodBindings.method_remove_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Insert(at_index int64, value String) int64 {
	mb := globalPackedStringArrayMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at_index)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) Fill(value String) {
	mb := globalPackedStringArrayMethodBindings.method_fill
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Resize(new_size int64) int64 {
	mb := globalPackedStringArrayMethodBindings.method_resize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(new_size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) Clear() {
	mb := globalPackedStringArrayMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) Has(value String) bool {
	mb := globalPackedStringArrayMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) Reverse() {
	mb := globalPackedStringArrayMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *PackedStringArray) Slice(begin int64, end int64) PackedStringArray {
	mb := globalPackedStringArrayMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedStringArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedStringArray) ToByteArray() PackedByteArray {
	mb := globalPackedStringArrayMethodBindings.method_to_byte_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedStringArray) Sort() {
	mb := globalPackedStringArrayMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Bsearch(value String, before bool) int64 {
	mb := globalPackedStringArrayMethodBindings.method_bsearch
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedStringArray) -> PackedStringArray
 */
func (cx *PackedStringArray) Duplicate() PackedStringArray {
	mb := globalPackedStringArrayMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedStringArray](mb, bx, nil)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Find(value String, from int64) int64 {
	mb := globalPackedStringArrayMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Rfind(value String, from int64) int64 {
	mb := globalPackedStringArrayMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedStringArray) Count(value String) int64 {
	mb := globalPackedStringArrayMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedStringArray) Erase(value String) bool {
	mb := globalPackedStringArrayMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *PackedStringArray) GetIndexed(i int64) String {
	var ret String
	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedStringArrayMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *PackedStringArray) SetIndexed(i int64, value String) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedStringArrayMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *PackedStringArray) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedStringArray) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *PackedStringArray) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_not, lt, rt)
}

// In_Dictionary operator
func (cx *PackedStringArray) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedStringArray) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedStringArray operator
func (cx *PackedStringArray) Equal_PackedStringArray(right PackedStringArray) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_equal_PackedStringArray, lt, rt)
}

// Not_equal_PackedStringArray operator
func (cx *PackedStringArray) Not_equal_PackedStringArray(right PackedStringArray) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedStringArrayMethodBindings.operator_not_equal_PackedStringArray, lt, rt)
}

// Add_PackedStringArray operator
func (cx *PackedStringArray) Add_PackedStringArray(right PackedStringArray) PackedStringArray {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedStringArray](globalPackedStringArrayMethodBindings.operator_add_PackedStringArray, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*PackedVector2Array)(nil)

/*
 * PackedVector2Array
 * indexingReturnType: Vector2
 * isKeyed: false
 * hasDestructor: true
 */
type PackedVector2Array [16]uint8

func (cx *PackedVector2Array) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *PackedVector2Array) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewPackedVector2Array, index: 0
func NewPackedVector2Array() PackedVector2Array {
	cx := PackedVector2Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalPackedVector2ArrayMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedVector2ArrayMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewPackedVector2Array, index: 1
func NewPackedVector2ArrayWithPackedVector2Array(from PackedVector2Array) PackedVector2Array {
	cx := PackedVector2Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedVector2Array
	// PackedVector2ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedVector2ArrayMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedVector2ArrayMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewPackedVector2Array, index: 2
func NewPackedVector2ArrayWithArray(from Array) PackedVector2Array {
	cx := PackedVector2Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedVector2ArrayMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedVector2ArrayMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *PackedVector2Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedVector2ArrayMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(Vector2) -> Vector2
 */
func (cx *PackedVector2Array) Get(index int64) Vector2 {
	mb := globalPackedVector2ArrayMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector2](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) Set(index int64, value Vector2) {
	mb := globalPackedVector2ArrayMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Size() int64 {
	mb := globalPackedVector2ArrayMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) IsEmpty() bool {
	mb := globalPackedVector2ArrayMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) PushBack(value Vector2) bool {
	mb := globalPackedVector2ArrayMethodBindings.method_push_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) Append(value Vector2) bool {
	mb := globalPackedVector2ArrayMethodBindings.method_append
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) AppendArray(array PackedVector2Array) {
	mb := globalPackedVector2ArrayMethodBindings.method_append_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) RemoveAt(index int64) {
	mb := globalPackedVector2ArrayMethodBindings.method_remove_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Insert(at_index int64, value Vector2) int64 {
	mb := globalPackedVector2ArrayMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at_index)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) Fill(value Vector2) {
	mb := globalPackedVector2ArrayMethodBindings.method_fill
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Resize(new_size int64) int64 {
	mb := globalPackedVector2ArrayMethodBindings.method_resize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(new_size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) Clear() {
	mb := globalPackedVector2ArrayMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) Has(value Vector2) bool {
	mb := globalPackedVector2ArrayMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) Reverse() {
	mb := globalPackedVector2ArrayMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector2Array) -> PackedVector2Array
 */
func (cx *PackedVector2Array) Slice(begin int64, end int64) PackedVector2Array {
	mb := globalPackedVector2ArrayMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedVector2Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedVector2Array) ToByteArray() PackedByteArray {
	mb := globalPackedVector2ArrayMethodBindings.method_to_byte_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector2Array) Sort() {
	mb := globalPackedVector2ArrayMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Bsearch(value Vector2, before bool) int64 {
	mb := globalPackedVector2ArrayMethodBindings.method_bsearch
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector2Array) -> PackedVector2Array
 */
func (cx *PackedVector2Array) Duplicate() PackedVector2Array {
	mb := globalPackedVector2ArrayMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedVector2Array](mb, bx, nil)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Find(value Vector2, from int64) int64 {
	mb := globalPackedVector2ArrayMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Rfind(value Vector2, from int64) int64 {
	mb := globalPackedVector2ArrayMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector2Array) Count(value Vector2) int64 {
	mb := globalPackedVector2ArrayMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector2Array) Erase(value Vector2) bool {
	mb := globalPackedVector2ArrayMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *PackedVector2Array) GetIndexed(i int64) Vector2 {
	var ret Vector2
	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedVector2ArrayMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *PackedVector2Array) SetIndexed(i int64, value Vector2) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedVector2ArrayMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *PackedVector2Array) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedVector2Array) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *PackedVector2Array) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_not, lt, rt)
}

// Multiply_Transform2D operator
func (cx *PackedVector2Array) Multiply_Transform2D(right Transform2D) PackedVector2Array {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedVector2Array](globalPackedVector2ArrayMethodBindings.operator_multiply_Transform2D, lt, rt)
}

// In_Dictionary operator
func (cx *PackedVector2Array) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedVector2Array) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedVector2Array operator
func (cx *PackedVector2Array) Equal_PackedVector2Array(right PackedVector2Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_equal_PackedVector2Array, lt, rt)
}

// Not_equal_PackedVector2Array operator
func (cx *PackedVector2Array) Not_equal_PackedVector2Array(right PackedVector2Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedVector2ArrayMethodBindings.operator_not_equal_PackedVector2Array, lt, rt)
}

// Add_PackedVector2Array operator
func (cx *PackedVector2Array) Add_PackedVector2Array(right PackedVector2Array) PackedVector2Array {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedVector2Array](globalPackedVector2ArrayMethodBindings.operator_add_PackedVector2Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*PackedVector3Array)(nil)

/*
 * PackedVector3Array
 * indexingReturnType: Vector3
 * isKeyed: false
 * hasDestructor: true
 */
type PackedVector3Array [16]uint8

func (cx *PackedVector3Array) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *PackedVector3Array) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewPackedVector3Array, index: 0
func NewPackedVector3Array() PackedVector3Array {
	cx := PackedVector3Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalPackedVector3ArrayMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedVector3ArrayMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewPackedVector3Array, index: 1
func NewPackedVector3ArrayWithPackedVector3Array(from PackedVector3Array) PackedVector3Array {
	cx := PackedVector3Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedVector3Array
	// PackedVector3ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedVector3ArrayMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedVector3ArrayMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewPackedVector3Array, index: 2
func NewPackedVector3ArrayWithArray(from Array) PackedVector3Array {
	cx := PackedVector3Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedVector3ArrayMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedVector3ArrayMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *PackedVector3Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedVector3ArrayMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(Vector3) -> Vector3
 */
func (cx *PackedVector3Array) Get(index int64) Vector3 {
	mb := globalPackedVector3ArrayMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector3](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) Set(index int64, value Vector3) {
	mb := globalPackedVector3ArrayMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Size() int64 {
	mb := globalPackedVector3ArrayMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) IsEmpty() bool {
	mb := globalPackedVector3ArrayMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) PushBack(value Vector3) bool {
	mb := globalPackedVector3ArrayMethodBindings.method_push_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) Append(value Vector3) bool {
	mb := globalPackedVector3ArrayMethodBindings.method_append
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) AppendArray(array PackedVector3Array) {
	mb := globalPackedVector3ArrayMethodBindings.method_append_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) RemoveAt(index int64) {
	mb := globalPackedVector3ArrayMethodBindings.method_remove_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Insert(at_index int64, value Vector3) int64 {
	mb := globalPackedVector3ArrayMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at_index)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) Fill(value Vector3) {
	mb := globalPackedVector3ArrayMethodBindings.method_fill
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Resize(new_size int64) int64 {
	mb := globalPackedVector3ArrayMethodBindings.method_resize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(new_size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) Clear() {
	mb := globalPackedVector3ArrayMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) Has(value Vector3) bool {
	mb := globalPackedVector3ArrayMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) Reverse() {
	mb := globalPackedVector3ArrayMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector3Array) -> PackedVector3Array
 */
func (cx *PackedVector3Array) Slice(begin int64, end int64) PackedVector3Array {
	mb := globalPackedVector3ArrayMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedVector3Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedVector3Array) ToByteArray() PackedByteArray {
	mb := globalPackedVector3ArrayMethodBindings.method_to_byte_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector3Array) Sort() {
	mb := globalPackedVector3ArrayMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Bsearch(value Vector3, before bool) int64 {
	mb := globalPackedVector3ArrayMethodBindings.method_bsearch
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector3Array) -> PackedVector3Array
 */
func (cx *PackedVector3Array) Duplicate() PackedVector3Array {
	mb := globalPackedVector3ArrayMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedVector3Array](mb, bx, nil)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Find(value Vector3, from int64) int64 {
	mb := globalPackedVector3ArrayMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Rfind(value Vector3, from int64) int64 {
	mb := globalPackedVector3ArrayMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector3Array) Count(value Vector3) int64 {
	mb := globalPackedVector3ArrayMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector3Array) Erase(value Vector3) bool {
	mb := globalPackedVector3ArrayMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *PackedVector3Array) GetIndexed(i int64) Vector3 {
	var ret Vector3
	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedVector3ArrayMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *PackedVector3Array) SetIndexed(i int64, value Vector3) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedVector3ArrayMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *PackedVector3Array) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedVector3Array) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *PackedVector3Array) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_not, lt, rt)
}

// Multiply_Transform3D operator
func (cx *PackedVector3Array) Multiply_Transform3D(right Transform3D) PackedVector3Array {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedVector3Array](globalPackedVector3ArrayMethodBindings.operator_multiply_Transform3D, lt, rt)
}

// In_Dictionary operator
func (cx *PackedVector3Array) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedVector3Array) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedVector3Array operator
func (cx *PackedVector3Array) Equal_PackedVector3Array(right PackedVector3Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_equal_PackedVector3Array, lt, rt)
}

// Not_equal_PackedVector3Array operator
func (cx *PackedVector3Array) Not_equal_PackedVector3Array(right PackedVector3Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedVector3ArrayMethodBindings.operator_not_equal_PackedVector3Array, lt, rt)
}

// Add_PackedVector3Array operator
func (cx *PackedVector3Array) Add_PackedVector3Array(right PackedVector3Array) PackedVector3Array {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedVector3Array](globalPackedVector3ArrayMethodBindings.operator_add_PackedVector3Array, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*PackedColorArray)(nil)

/*
 * PackedColorArray
 * indexingReturnType: Color
 * isKeyed: false
 * hasDestructor: true
 */
type PackedColorArray [16]uint8

func (cx *PackedColorArray) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *PackedColorArray) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewPackedColorArray, index: 0
func NewPackedColorArray() PackedColorArray {
	cx := PackedColorArray{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalPackedColorArrayMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedColorArrayMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewPackedColorArray, index: 1
func NewPackedColorArrayWithPackedColorArray(from PackedColorArray) PackedColorArray {
	cx := PackedColorArray{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedColorArray
	// PackedColorArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedColorArrayMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedColorArrayMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewPackedColorArray, index: 2
func NewPackedColorArrayWithArray(from Array) PackedColorArray {
	cx := PackedColorArray{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedColorArrayMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedColorArrayMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *PackedColorArray) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedColorArrayMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(Color) -> Color
 */
func (cx *PackedColorArray) Get(index int64) Color {
	mb := globalPackedColorArrayMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Color](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) Set(index int64, value Color) {
	mb := globalPackedColorArrayMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Size() int64 {
	mb := globalPackedColorArrayMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) IsEmpty() bool {
	mb := globalPackedColorArrayMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) PushBack(value Color) bool {
	mb := globalPackedColorArrayMethodBindings.method_push_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) Append(value Color) bool {
	mb := globalPackedColorArrayMethodBindings.method_append
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) AppendArray(array PackedColorArray) {
	mb := globalPackedColorArrayMethodBindings.method_append_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) RemoveAt(index int64) {
	mb := globalPackedColorArrayMethodBindings.method_remove_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Insert(at_index int64, value Color) int64 {
	mb := globalPackedColorArrayMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at_index)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) Fill(value Color) {
	mb := globalPackedColorArrayMethodBindings.method_fill
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Resize(new_size int64) int64 {
	mb := globalPackedColorArrayMethodBindings.method_resize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(new_size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) Clear() {
	mb := globalPackedColorArrayMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) Has(value Color) bool {
	mb := globalPackedColorArrayMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) Reverse() {
	mb := globalPackedColorArrayMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedColorArray) -> PackedColorArray
 */
func (cx *PackedColorArray) Slice(begin int64, end int64) PackedColorArray {
	mb := globalPackedColorArrayMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedColorArray](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedColorArray) ToByteArray() PackedByteArray {
	mb := globalPackedColorArrayMethodBindings.method_to_byte_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedColorArray) Sort() {
	mb := globalPackedColorArrayMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Bsearch(value Color, before bool) int64 {
	mb := globalPackedColorArrayMethodBindings.method_bsearch
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedColorArray) -> PackedColorArray
 */
func (cx *PackedColorArray) Duplicate() PackedColorArray {
	mb := globalPackedColorArrayMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedColorArray](mb, bx, nil)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Find(value Color, from int64) int64 {
	mb := globalPackedColorArrayMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Rfind(value Color, from int64) int64 {
	mb := globalPackedColorArrayMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedColorArray) Count(value Color) int64 {
	mb := globalPackedColorArrayMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedColorArray) Erase(value Color) bool {
	mb := globalPackedColorArrayMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *PackedColorArray) GetIndexed(i int64) Color {
	var ret Color
	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedColorArrayMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *PackedColorArray) SetIndexed(i int64, value Color) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedColorArrayMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *PackedColorArray) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedColorArray) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *PackedColorArray) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_not, lt, rt)
}

// In_Dictionary operator
func (cx *PackedColorArray) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedColorArray) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedColorArray operator
func (cx *PackedColorArray) Equal_PackedColorArray(right PackedColorArray) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_equal_PackedColorArray, lt, rt)
}

// Not_equal_PackedColorArray operator
func (cx *PackedColorArray) Not_equal_PackedColorArray(right PackedColorArray) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedColorArrayMethodBindings.operator_not_equal_PackedColorArray, lt, rt)
}

// Add_PackedColorArray operator
func (cx *PackedColorArray) Add_PackedColorArray(right PackedColorArray) PackedColorArray {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[PackedColorArray](globalPackedColorArrayMethodBindings.operator_add_PackedColorArray, lt, rt)
}

var _ GDBuiltInDestroyableClass = (*PackedVector4Array)(nil)

/*
 * PackedVector4Array
 * indexingReturnType: Vector4
 * isKeyed: false
 * hasDestructor: true
 */
type PackedVector4Array [16]uint8

func (cx *PackedVector4Array) NativeConstPtr() GDExtensionConstTypePtr {
	return (GDExtensionConstTypePtr)(cx)
}

func (cx *PackedVector4Array) NativePtr() GDExtensionTypePtr {
	return (GDExtensionTypePtr)(cx)
}

// constructors
// NewPackedVector4Array, index: 0
func NewPackedVector4Array() PackedVector4Array {
	cx := PackedVector4Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	CallBuiltinConstructor(globalPackedVector4ArrayMethodBindings.constructor_0, ptr)
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedVector4ArrayMethodBindings.constructor_0"), zap.Any("cx", cx))
	return cx
}

// NewPackedVector4Array, index: 1
func NewPackedVector4ArrayWithPackedVector4Array(from PackedVector4Array) PackedVector4Array {
	cx := PackedVector4Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// PackedVector4Array
	// PackedVector4ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedVector4ArrayMethodBindings.constructor_1, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedVector4ArrayMethodBindings.constructor_1"), zap.Any("cx", cx))
	return cx
}

// NewPackedVector4Array, index: 2
func NewPackedVector4ArrayWithArray(from Array) PackedVector4Array {
	cx := PackedVector4Array{}
	ptr := (GDExtensionUninitializedTypePtr)(cx.NativePtr())
	pnr.Pin(ptr)
	var args [1]GDExtensionConstTypePtr
	// Array
	// ArrayEncoder
	args[0] = from.NativeConstPtr()
	log.Debug("CallBuiltinConstructor before", zap.Uintptr("args[0]", uintptr(args[0])), zap.Any("from", from))
	pnr.Pin(args[0])
	CallBuiltinConstructor(globalPackedVector4ArrayMethodBindings.constructor_2, ptr, args[0])
	log.Debug("CallBuiltinConstructor after", zap.String("name", "globalPackedVector4ArrayMethodBindings.constructor_2"), zap.Any("cx", cx))
	return cx
}

func (cx *PackedVector4Array) Destroy() {
	md := (GDExtensionPtrDestructor)(globalPackedVector4ArrayMethodBindings.destructor)
	bx := cx.NativePtr()
	pnr.Pin(bx)
	CallFunc_GDExtensionPtrDestructor(md, bx)
}

// methods

/* Get : get
 * is_vararg = false, is_static = false
 * goReturnType(Vector4) -> Vector4
 */
func (cx *PackedVector4Array) Get(index int64) Vector4 {
	mb := globalPackedVector4ArrayMethodBindings.method_get
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[Vector4](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Set : set
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector4Array) Set(index int64, value Vector4) {
	mb := globalPackedVector4ArrayMethodBindings.method_set
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Size : size
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector4Array) Size() int64 {
	mb := globalPackedVector4ArrayMethodBindings.method_size
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, nil)
	return ret
}

/* IsEmpty : is_empty
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector4Array) IsEmpty() bool {
	mb := globalPackedVector4ArrayMethodBindings.method_is_empty
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, nil)
	return ret
}

/* PushBack : push_back
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector4Array) PushBack(value Vector4) bool {
	mb := globalPackedVector4ArrayMethodBindings.method_push_back
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Append : append
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector4Array) Append(value Vector4) bool {
	mb := globalPackedVector4ArrayMethodBindings.method_append
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* AppendArray : append_array
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector4Array) AppendArray(array PackedVector4Array) {
	mb := globalPackedVector4ArrayMethodBindings.method_append_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = PackedVector4ArrayEncoder.EncodeTypePtr(array)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* RemoveAt : remove_at
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector4Array) RemoveAt(index int64) {
	mb := globalPackedVector4ArrayMethodBindings.method_remove_at
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(index)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Insert : insert
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector4Array) Insert(at_index int64, value Vector4) int64 {
	mb := globalPackedVector4ArrayMethodBindings.method_insert
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(at_index)

	pnr.Pin(args[0])
	args[1] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Fill : fill
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector4Array) Fill(value Vector4) {
	mb := globalPackedVector4ArrayMethodBindings.method_fill
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	CallBuiltinMethodPtrNoRet(mb, bx, args...)
	runtime.KeepAlive(args)

}

/* Resize : resize
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector4Array) Resize(new_size int64) int64 {
	mb := globalPackedVector4ArrayMethodBindings.method_resize
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(new_size)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Clear : clear
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector4Array) Clear() {
	mb := globalPackedVector4ArrayMethodBindings.method_clear
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Has : has
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector4Array) Has(value Vector4) bool {
	mb := globalPackedVector4ArrayMethodBindings.method_has
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Reverse : reverse
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector4Array) Reverse() {
	mb := globalPackedVector4ArrayMethodBindings.method_reverse
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Slice : slice
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector4Array) -> PackedVector4Array
 */
func (cx *PackedVector4Array) Slice(begin int64, end int64) PackedVector4Array {
	mb := globalPackedVector4ArrayMethodBindings.method_slice
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = Int64Encoder.EncodeTypePtr(begin)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(end)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[PackedVector4Array](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* ToByteArray : to_byte_array
 * is_vararg = false, is_static = false
 * goReturnType(PackedByteArray) -> PackedByteArray
 */
func (cx *PackedVector4Array) ToByteArray() PackedByteArray {
	mb := globalPackedVector4ArrayMethodBindings.method_to_byte_array
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedByteArray](mb, bx, nil)
	return ret
}

/* Sort : sort
 * is_vararg = false, is_static = false
 * goReturnType() ->
 */
func (cx *PackedVector4Array) Sort() {
	mb := globalPackedVector4ArrayMethodBindings.method_sort
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	CallBuiltinMethodPtrNoRet(mb, bx, nil)

}

/* Bsearch : bsearch
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector4Array) Bsearch(value Vector4, before bool) int64 {
	mb := globalPackedVector4ArrayMethodBindings.method_bsearch
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = BoolEncoder.EncodeTypePtr(before)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Duplicate : duplicate
 * is_vararg = false, is_static = false
 * goReturnType(PackedVector4Array) -> PackedVector4Array
 */
func (cx *PackedVector4Array) Duplicate() PackedVector4Array {
	mb := globalPackedVector4ArrayMethodBindings.method_duplicate
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}

	ret := CallBuiltinMethodPtrRet[PackedVector4Array](mb, bx, nil)
	return ret
}

/* Find : find
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector4Array) Find(value Vector4, from int64) int64 {
	mb := globalPackedVector4ArrayMethodBindings.method_find
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Rfind : rfind
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector4Array) Rfind(value Vector4, from int64) int64 {
	mb := globalPackedVector4ArrayMethodBindings.method_rfind
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 2
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])
	args[1] = Int64Encoder.EncodeTypePtr(from)

	pnr.Pin(args[1])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Count : count
 * is_vararg = false, is_static = false
 * goReturnType(int) -> int64
 */
func (cx *PackedVector4Array) Count(value Vector4) int64 {
	mb := globalPackedVector4ArrayMethodBindings.method_count
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[int64](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

/* Erase : erase
 * is_vararg = false, is_static = false
 * goReturnType(bool) -> bool
 */
func (cx *PackedVector4Array) Erase(value Vector4) bool {
	mb := globalPackedVector4ArrayMethodBindings.method_erase
	if mb == nil {
		log.Panic("method bind cannot be nil")
	}
	bx := cx.NativePtr()
	pnr.Pin(bx)
	if bx == nil {
		log.Panic("object cannot be nil")
	}
	sz := 1
	args := make([]GDExtensionTypePtr, sz, sz)
	args[0] = (GDExtensionTypePtr)(&value)

	pnr.Pin(args[0])

	ret := CallBuiltinMethodPtrRet[bool](mb, bx, args...)
	runtime.KeepAlive(args)
	return ret
}

func (cx *PackedVector4Array) GetIndexed(i int64) Vector4 {
	var ret Vector4
	CallFunc_GDExtensionPtrIndexedGetter(
		globalPackedVector4ArrayMethodBindings.indexed_getter,
		cx.NativeConstPtr(),
		(GDExtensionInt)(i),
		(GDExtensionTypePtr)(&ret),
	)
	return ret
}

func (cx *PackedVector4Array) SetIndexed(i int64, value Vector4) {
	CallFunc_GDExtensionPtrIndexedSetter(
		globalPackedVector4ArrayMethodBindings.indexed_setter,
		cx.NativePtr(),
		(GDExtensionInt)(i),
		(GDExtensionConstTypePtr)(&value),
	)
}

// members
// Equal_Variant operator
func (cx *PackedVector4Array) Equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedVector4ArrayMethodBindings.operator_equal_Variant, lt, rt)
}

// Not_equal_Variant operator
func (cx *PackedVector4Array) Not_equal_Variant(right Variant) bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(right.NativeConstPtr())
	return CallBuiltinOperatorPtr[bool](globalPackedVector4ArrayMethodBindings.operator_not_equal_Variant, lt, rt)
}

// Not operator
func (cx *PackedVector4Array) Not() bool {
	lt := cx.NativeConstPtr()
	rt := (GDExtensionConstTypePtr)(nullptr)
	return CallBuiltinOperatorPtr[bool](globalPackedVector4ArrayMethodBindings.operator_not, lt, rt)
}

// In_Dictionary operator
func (cx *PackedVector4Array) In_Dictionary(right Dictionary) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedVector4ArrayMethodBindings.operator_in_Dictionary, lt, rt)
}

// In_Array operator
func (cx *PackedVector4Array) In_Array(right Array) bool {
	lt := cx.NativeConstPtr()
	rt := right.NativeConstPtr()
	return CallBuiltinOperatorPtr[bool](globalPackedVector4ArrayMethodBindings.operator_in_Array, lt, rt)
}

// Equal_PackedVector4Array operator
func (cx *PackedVector4Array) Equal_PackedVector4Array(right PackedVector4Array) bool {
	lt := cx.NativeConstPtr()
	eRight := PackedVector4ArrayEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[bool](globalPackedVector4ArrayMethodBindings.operator_equal_PackedVector4Array, lt, rt)
}

// Not_equal_PackedVector4Array operator
func (cx *PackedVector4Array) Not_equal_PackedVector4Array(right PackedVector4Array) bool {
	lt := cx.NativeConstPtr()
	eRight := PackedVector4ArrayEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[bool](globalPackedVector4ArrayMethodBindings.operator_not_equal_PackedVector4Array, lt, rt)
}

// Add_PackedVector4Array operator
func (cx *PackedVector4Array) Add_PackedVector4Array(right PackedVector4Array) PackedVector4Array {
	lt := cx.NativeConstPtr()
	eRight := PackedVector4ArrayEncoder.EncodeTypePtr(right)
	rt := (GDExtensionConstTypePtr)(eRight)
	return CallBuiltinOperatorPtr[PackedVector4Array](globalPackedVector4ArrayMethodBindings.operator_add_PackedVector4Array, lt, rt)
}
