package gdextension

/*------------------------------------------------------------------------------
//   This code was generated by template classes.refs.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "classes.refs.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//revive:disable

// refcount classes
var _ RefAESContext = &RefAESContextImpl{}
var _ Ref = &RefAESContextImpl{}

type RefAESContext interface {
	Ref
	TypedPtr() AESContext
}

type RefAESContextImpl TypedRef[AESContext]

func (r *RefAESContextImpl) Ptr() RefCounted {
	rg := (*TypedRef[AESContext])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAESContextImpl) TypedPtr() AESContext {
	rg := (*TypedRef[AESContext])(r)
	return rg.TypedPtr()
}

func (r *RefAESContextImpl) Ref(from Ref) {
	rg := (*TypedRef[AESContext])(r)
	rg.Ref(from)
}

func (r *RefAESContextImpl) TypedRef(from *RefAESContextImpl) {
	rg := (*TypedRef[AESContext])(r)
	t := (*TypedRef[AESContext])(from)
	rg.TypedRef((*TypedRef[AESContext])(t))
}

func (r *RefAESContextImpl) Unref() {
	rg := (*TypedRef[AESContext])(r)
	rg.Unref()
}

func (r *RefAESContextImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAESContext(reference AESContext) RefAESContext {
	return (RefAESContext)(NewTypedRef[AESContext](reference))
}

func newRefAESContextAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AESContext](reference.(AESContext)))
}

func newRefAESContextGDExtensionIternalConstructor(reference AESContext) RefAESContext {
	return newTypedRefGDExtensionIternalConstructor[AESContext](reference)
}

var _ RefAStar2D = &RefAStar2DImpl{}
var _ Ref = &RefAStar2DImpl{}

type RefAStar2D interface {
	Ref
	TypedPtr() AStar2D
}

type RefAStar2DImpl TypedRef[AStar2D]

func (r *RefAStar2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[AStar2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAStar2DImpl) TypedPtr() AStar2D {
	rg := (*TypedRef[AStar2D])(r)
	return rg.TypedPtr()
}

func (r *RefAStar2DImpl) Ref(from Ref) {
	rg := (*TypedRef[AStar2D])(r)
	rg.Ref(from)
}

func (r *RefAStar2DImpl) TypedRef(from *RefAStar2DImpl) {
	rg := (*TypedRef[AStar2D])(r)
	t := (*TypedRef[AStar2D])(from)
	rg.TypedRef((*TypedRef[AStar2D])(t))
}

func (r *RefAStar2DImpl) Unref() {
	rg := (*TypedRef[AStar2D])(r)
	rg.Unref()
}

func (r *RefAStar2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAStar2D(reference AStar2D) RefAStar2D {
	return (RefAStar2D)(NewTypedRef[AStar2D](reference))
}

func newRefAStar2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AStar2D](reference.(AStar2D)))
}

func newRefAStar2DGDExtensionIternalConstructor(reference AStar2D) RefAStar2D {
	return newTypedRefGDExtensionIternalConstructor[AStar2D](reference)
}

var _ RefAStar3D = &RefAStar3DImpl{}
var _ Ref = &RefAStar3DImpl{}

type RefAStar3D interface {
	Ref
	TypedPtr() AStar3D
}

type RefAStar3DImpl TypedRef[AStar3D]

func (r *RefAStar3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[AStar3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAStar3DImpl) TypedPtr() AStar3D {
	rg := (*TypedRef[AStar3D])(r)
	return rg.TypedPtr()
}

func (r *RefAStar3DImpl) Ref(from Ref) {
	rg := (*TypedRef[AStar3D])(r)
	rg.Ref(from)
}

func (r *RefAStar3DImpl) TypedRef(from *RefAStar3DImpl) {
	rg := (*TypedRef[AStar3D])(r)
	t := (*TypedRef[AStar3D])(from)
	rg.TypedRef((*TypedRef[AStar3D])(t))
}

func (r *RefAStar3DImpl) Unref() {
	rg := (*TypedRef[AStar3D])(r)
	rg.Unref()
}

func (r *RefAStar3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAStar3D(reference AStar3D) RefAStar3D {
	return (RefAStar3D)(NewTypedRef[AStar3D](reference))
}

func newRefAStar3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AStar3D](reference.(AStar3D)))
}

func newRefAStar3DGDExtensionIternalConstructor(reference AStar3D) RefAStar3D {
	return newTypedRefGDExtensionIternalConstructor[AStar3D](reference)
}

var _ RefAStarGrid2D = &RefAStarGrid2DImpl{}
var _ Ref = &RefAStarGrid2DImpl{}

type RefAStarGrid2D interface {
	Ref
	TypedPtr() AStarGrid2D
}

type RefAStarGrid2DImpl TypedRef[AStarGrid2D]

func (r *RefAStarGrid2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[AStarGrid2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAStarGrid2DImpl) TypedPtr() AStarGrid2D {
	rg := (*TypedRef[AStarGrid2D])(r)
	return rg.TypedPtr()
}

func (r *RefAStarGrid2DImpl) Ref(from Ref) {
	rg := (*TypedRef[AStarGrid2D])(r)
	rg.Ref(from)
}

func (r *RefAStarGrid2DImpl) TypedRef(from *RefAStarGrid2DImpl) {
	rg := (*TypedRef[AStarGrid2D])(r)
	t := (*TypedRef[AStarGrid2D])(from)
	rg.TypedRef((*TypedRef[AStarGrid2D])(t))
}

func (r *RefAStarGrid2DImpl) Unref() {
	rg := (*TypedRef[AStarGrid2D])(r)
	rg.Unref()
}

func (r *RefAStarGrid2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAStarGrid2D(reference AStarGrid2D) RefAStarGrid2D {
	return (RefAStarGrid2D)(NewTypedRef[AStarGrid2D](reference))
}

func newRefAStarGrid2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AStarGrid2D](reference.(AStarGrid2D)))
}

func newRefAStarGrid2DGDExtensionIternalConstructor(reference AStarGrid2D) RefAStarGrid2D {
	return newTypedRefGDExtensionIternalConstructor[AStarGrid2D](reference)
}

var _ RefAnimatedTexture = &RefAnimatedTextureImpl{}
var _ Ref = &RefAnimatedTextureImpl{}

type RefAnimatedTexture interface {
	Ref
	TypedPtr() AnimatedTexture
}

type RefAnimatedTextureImpl TypedRef[AnimatedTexture]

func (r *RefAnimatedTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimatedTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimatedTextureImpl) TypedPtr() AnimatedTexture {
	rg := (*TypedRef[AnimatedTexture])(r)
	return rg.TypedPtr()
}

func (r *RefAnimatedTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimatedTexture])(r)
	rg.Ref(from)
}

func (r *RefAnimatedTextureImpl) TypedRef(from *RefAnimatedTextureImpl) {
	rg := (*TypedRef[AnimatedTexture])(r)
	t := (*TypedRef[AnimatedTexture])(from)
	rg.TypedRef((*TypedRef[AnimatedTexture])(t))
}

func (r *RefAnimatedTextureImpl) Unref() {
	rg := (*TypedRef[AnimatedTexture])(r)
	rg.Unref()
}

func (r *RefAnimatedTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimatedTexture(reference AnimatedTexture) RefAnimatedTexture {
	return (RefAnimatedTexture)(NewTypedRef[AnimatedTexture](reference))
}

func newRefAnimatedTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimatedTexture](reference.(AnimatedTexture)))
}

func newRefAnimatedTextureGDExtensionIternalConstructor(reference AnimatedTexture) RefAnimatedTexture {
	return newTypedRefGDExtensionIternalConstructor[AnimatedTexture](reference)
}

var _ RefAnimation = &RefAnimationImpl{}
var _ Ref = &RefAnimationImpl{}

type RefAnimation interface {
	Ref
	TypedPtr() Animation
}

type RefAnimationImpl TypedRef[Animation]

func (r *RefAnimationImpl) Ptr() RefCounted {
	rg := (*TypedRef[Animation])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationImpl) TypedPtr() Animation {
	rg := (*TypedRef[Animation])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationImpl) Ref(from Ref) {
	rg := (*TypedRef[Animation])(r)
	rg.Ref(from)
}

func (r *RefAnimationImpl) TypedRef(from *RefAnimationImpl) {
	rg := (*TypedRef[Animation])(r)
	t := (*TypedRef[Animation])(from)
	rg.TypedRef((*TypedRef[Animation])(t))
}

func (r *RefAnimationImpl) Unref() {
	rg := (*TypedRef[Animation])(r)
	rg.Unref()
}

func (r *RefAnimationImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimation(reference Animation) RefAnimation {
	return (RefAnimation)(NewTypedRef[Animation](reference))
}

func newRefAnimationAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Animation](reference.(Animation)))
}

func newRefAnimationGDExtensionIternalConstructor(reference Animation) RefAnimation {
	return newTypedRefGDExtensionIternalConstructor[Animation](reference)
}

var _ RefAnimationLibrary = &RefAnimationLibraryImpl{}
var _ Ref = &RefAnimationLibraryImpl{}

type RefAnimationLibrary interface {
	Ref
	TypedPtr() AnimationLibrary
}

type RefAnimationLibraryImpl TypedRef[AnimationLibrary]

func (r *RefAnimationLibraryImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationLibrary])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationLibraryImpl) TypedPtr() AnimationLibrary {
	rg := (*TypedRef[AnimationLibrary])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationLibraryImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationLibrary])(r)
	rg.Ref(from)
}

func (r *RefAnimationLibraryImpl) TypedRef(from *RefAnimationLibraryImpl) {
	rg := (*TypedRef[AnimationLibrary])(r)
	t := (*TypedRef[AnimationLibrary])(from)
	rg.TypedRef((*TypedRef[AnimationLibrary])(t))
}

func (r *RefAnimationLibraryImpl) Unref() {
	rg := (*TypedRef[AnimationLibrary])(r)
	rg.Unref()
}

func (r *RefAnimationLibraryImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationLibrary(reference AnimationLibrary) RefAnimationLibrary {
	return (RefAnimationLibrary)(NewTypedRef[AnimationLibrary](reference))
}

func newRefAnimationLibraryAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationLibrary](reference.(AnimationLibrary)))
}

func newRefAnimationLibraryGDExtensionIternalConstructor(reference AnimationLibrary) RefAnimationLibrary {
	return newTypedRefGDExtensionIternalConstructor[AnimationLibrary](reference)
}

var _ RefAnimationNode = &RefAnimationNodeImpl{}
var _ Ref = &RefAnimationNodeImpl{}

type RefAnimationNode interface {
	Ref
	TypedPtr() AnimationNode
}

type RefAnimationNodeImpl TypedRef[AnimationNode]

func (r *RefAnimationNodeImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNode])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeImpl) TypedPtr() AnimationNode {
	rg := (*TypedRef[AnimationNode])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNode])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeImpl) TypedRef(from *RefAnimationNodeImpl) {
	rg := (*TypedRef[AnimationNode])(r)
	t := (*TypedRef[AnimationNode])(from)
	rg.TypedRef((*TypedRef[AnimationNode])(t))
}

func (r *RefAnimationNodeImpl) Unref() {
	rg := (*TypedRef[AnimationNode])(r)
	rg.Unref()
}

func (r *RefAnimationNodeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNode(reference AnimationNode) RefAnimationNode {
	return (RefAnimationNode)(NewTypedRef[AnimationNode](reference))
}

func newRefAnimationNodeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNode](reference.(AnimationNode)))
}

func newRefAnimationNodeGDExtensionIternalConstructor(reference AnimationNode) RefAnimationNode {
	return newTypedRefGDExtensionIternalConstructor[AnimationNode](reference)
}

var _ RefAnimationNodeAdd2 = &RefAnimationNodeAdd2Impl{}
var _ Ref = &RefAnimationNodeAdd2Impl{}

type RefAnimationNodeAdd2 interface {
	Ref
	TypedPtr() AnimationNodeAdd2
}

type RefAnimationNodeAdd2Impl TypedRef[AnimationNodeAdd2]

func (r *RefAnimationNodeAdd2Impl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeAdd2])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeAdd2Impl) TypedPtr() AnimationNodeAdd2 {
	rg := (*TypedRef[AnimationNodeAdd2])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeAdd2Impl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeAdd2])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeAdd2Impl) TypedRef(from *RefAnimationNodeAdd2Impl) {
	rg := (*TypedRef[AnimationNodeAdd2])(r)
	t := (*TypedRef[AnimationNodeAdd2])(from)
	rg.TypedRef((*TypedRef[AnimationNodeAdd2])(t))
}

func (r *RefAnimationNodeAdd2Impl) Unref() {
	rg := (*TypedRef[AnimationNodeAdd2])(r)
	rg.Unref()
}

func (r *RefAnimationNodeAdd2Impl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeAdd2(reference AnimationNodeAdd2) RefAnimationNodeAdd2 {
	return (RefAnimationNodeAdd2)(NewTypedRef[AnimationNodeAdd2](reference))
}

func newRefAnimationNodeAdd2AsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeAdd2](reference.(AnimationNodeAdd2)))
}

func newRefAnimationNodeAdd2GDExtensionIternalConstructor(reference AnimationNodeAdd2) RefAnimationNodeAdd2 {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeAdd2](reference)
}

var _ RefAnimationNodeAdd3 = &RefAnimationNodeAdd3Impl{}
var _ Ref = &RefAnimationNodeAdd3Impl{}

type RefAnimationNodeAdd3 interface {
	Ref
	TypedPtr() AnimationNodeAdd3
}

type RefAnimationNodeAdd3Impl TypedRef[AnimationNodeAdd3]

func (r *RefAnimationNodeAdd3Impl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeAdd3])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeAdd3Impl) TypedPtr() AnimationNodeAdd3 {
	rg := (*TypedRef[AnimationNodeAdd3])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeAdd3Impl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeAdd3])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeAdd3Impl) TypedRef(from *RefAnimationNodeAdd3Impl) {
	rg := (*TypedRef[AnimationNodeAdd3])(r)
	t := (*TypedRef[AnimationNodeAdd3])(from)
	rg.TypedRef((*TypedRef[AnimationNodeAdd3])(t))
}

func (r *RefAnimationNodeAdd3Impl) Unref() {
	rg := (*TypedRef[AnimationNodeAdd3])(r)
	rg.Unref()
}

func (r *RefAnimationNodeAdd3Impl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeAdd3(reference AnimationNodeAdd3) RefAnimationNodeAdd3 {
	return (RefAnimationNodeAdd3)(NewTypedRef[AnimationNodeAdd3](reference))
}

func newRefAnimationNodeAdd3AsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeAdd3](reference.(AnimationNodeAdd3)))
}

func newRefAnimationNodeAdd3GDExtensionIternalConstructor(reference AnimationNodeAdd3) RefAnimationNodeAdd3 {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeAdd3](reference)
}

var _ RefAnimationNodeAnimation = &RefAnimationNodeAnimationImpl{}
var _ Ref = &RefAnimationNodeAnimationImpl{}

type RefAnimationNodeAnimation interface {
	Ref
	TypedPtr() AnimationNodeAnimation
}

type RefAnimationNodeAnimationImpl TypedRef[AnimationNodeAnimation]

func (r *RefAnimationNodeAnimationImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeAnimation])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeAnimationImpl) TypedPtr() AnimationNodeAnimation {
	rg := (*TypedRef[AnimationNodeAnimation])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeAnimationImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeAnimation])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeAnimationImpl) TypedRef(from *RefAnimationNodeAnimationImpl) {
	rg := (*TypedRef[AnimationNodeAnimation])(r)
	t := (*TypedRef[AnimationNodeAnimation])(from)
	rg.TypedRef((*TypedRef[AnimationNodeAnimation])(t))
}

func (r *RefAnimationNodeAnimationImpl) Unref() {
	rg := (*TypedRef[AnimationNodeAnimation])(r)
	rg.Unref()
}

func (r *RefAnimationNodeAnimationImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeAnimation(reference AnimationNodeAnimation) RefAnimationNodeAnimation {
	return (RefAnimationNodeAnimation)(NewTypedRef[AnimationNodeAnimation](reference))
}

func newRefAnimationNodeAnimationAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeAnimation](reference.(AnimationNodeAnimation)))
}

func newRefAnimationNodeAnimationGDExtensionIternalConstructor(reference AnimationNodeAnimation) RefAnimationNodeAnimation {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeAnimation](reference)
}

var _ RefAnimationNodeBlend2 = &RefAnimationNodeBlend2Impl{}
var _ Ref = &RefAnimationNodeBlend2Impl{}

type RefAnimationNodeBlend2 interface {
	Ref
	TypedPtr() AnimationNodeBlend2
}

type RefAnimationNodeBlend2Impl TypedRef[AnimationNodeBlend2]

func (r *RefAnimationNodeBlend2Impl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeBlend2])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeBlend2Impl) TypedPtr() AnimationNodeBlend2 {
	rg := (*TypedRef[AnimationNodeBlend2])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeBlend2Impl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeBlend2])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeBlend2Impl) TypedRef(from *RefAnimationNodeBlend2Impl) {
	rg := (*TypedRef[AnimationNodeBlend2])(r)
	t := (*TypedRef[AnimationNodeBlend2])(from)
	rg.TypedRef((*TypedRef[AnimationNodeBlend2])(t))
}

func (r *RefAnimationNodeBlend2Impl) Unref() {
	rg := (*TypedRef[AnimationNodeBlend2])(r)
	rg.Unref()
}

func (r *RefAnimationNodeBlend2Impl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeBlend2(reference AnimationNodeBlend2) RefAnimationNodeBlend2 {
	return (RefAnimationNodeBlend2)(NewTypedRef[AnimationNodeBlend2](reference))
}

func newRefAnimationNodeBlend2AsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeBlend2](reference.(AnimationNodeBlend2)))
}

func newRefAnimationNodeBlend2GDExtensionIternalConstructor(reference AnimationNodeBlend2) RefAnimationNodeBlend2 {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeBlend2](reference)
}

var _ RefAnimationNodeBlend3 = &RefAnimationNodeBlend3Impl{}
var _ Ref = &RefAnimationNodeBlend3Impl{}

type RefAnimationNodeBlend3 interface {
	Ref
	TypedPtr() AnimationNodeBlend3
}

type RefAnimationNodeBlend3Impl TypedRef[AnimationNodeBlend3]

func (r *RefAnimationNodeBlend3Impl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeBlend3])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeBlend3Impl) TypedPtr() AnimationNodeBlend3 {
	rg := (*TypedRef[AnimationNodeBlend3])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeBlend3Impl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeBlend3])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeBlend3Impl) TypedRef(from *RefAnimationNodeBlend3Impl) {
	rg := (*TypedRef[AnimationNodeBlend3])(r)
	t := (*TypedRef[AnimationNodeBlend3])(from)
	rg.TypedRef((*TypedRef[AnimationNodeBlend3])(t))
}

func (r *RefAnimationNodeBlend3Impl) Unref() {
	rg := (*TypedRef[AnimationNodeBlend3])(r)
	rg.Unref()
}

func (r *RefAnimationNodeBlend3Impl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeBlend3(reference AnimationNodeBlend3) RefAnimationNodeBlend3 {
	return (RefAnimationNodeBlend3)(NewTypedRef[AnimationNodeBlend3](reference))
}

func newRefAnimationNodeBlend3AsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeBlend3](reference.(AnimationNodeBlend3)))
}

func newRefAnimationNodeBlend3GDExtensionIternalConstructor(reference AnimationNodeBlend3) RefAnimationNodeBlend3 {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeBlend3](reference)
}

var _ RefAnimationNodeBlendSpace1D = &RefAnimationNodeBlendSpace1DImpl{}
var _ Ref = &RefAnimationNodeBlendSpace1DImpl{}

type RefAnimationNodeBlendSpace1D interface {
	Ref
	TypedPtr() AnimationNodeBlendSpace1D
}

type RefAnimationNodeBlendSpace1DImpl TypedRef[AnimationNodeBlendSpace1D]

func (r *RefAnimationNodeBlendSpace1DImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeBlendSpace1D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeBlendSpace1DImpl) TypedPtr() AnimationNodeBlendSpace1D {
	rg := (*TypedRef[AnimationNodeBlendSpace1D])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeBlendSpace1DImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeBlendSpace1D])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeBlendSpace1DImpl) TypedRef(from *RefAnimationNodeBlendSpace1DImpl) {
	rg := (*TypedRef[AnimationNodeBlendSpace1D])(r)
	t := (*TypedRef[AnimationNodeBlendSpace1D])(from)
	rg.TypedRef((*TypedRef[AnimationNodeBlendSpace1D])(t))
}

func (r *RefAnimationNodeBlendSpace1DImpl) Unref() {
	rg := (*TypedRef[AnimationNodeBlendSpace1D])(r)
	rg.Unref()
}

func (r *RefAnimationNodeBlendSpace1DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeBlendSpace1D(reference AnimationNodeBlendSpace1D) RefAnimationNodeBlendSpace1D {
	return (RefAnimationNodeBlendSpace1D)(NewTypedRef[AnimationNodeBlendSpace1D](reference))
}

func newRefAnimationNodeBlendSpace1DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeBlendSpace1D](reference.(AnimationNodeBlendSpace1D)))
}

func newRefAnimationNodeBlendSpace1DGDExtensionIternalConstructor(reference AnimationNodeBlendSpace1D) RefAnimationNodeBlendSpace1D {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeBlendSpace1D](reference)
}

var _ RefAnimationNodeBlendSpace2D = &RefAnimationNodeBlendSpace2DImpl{}
var _ Ref = &RefAnimationNodeBlendSpace2DImpl{}

type RefAnimationNodeBlendSpace2D interface {
	Ref
	TypedPtr() AnimationNodeBlendSpace2D
}

type RefAnimationNodeBlendSpace2DImpl TypedRef[AnimationNodeBlendSpace2D]

func (r *RefAnimationNodeBlendSpace2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeBlendSpace2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeBlendSpace2DImpl) TypedPtr() AnimationNodeBlendSpace2D {
	rg := (*TypedRef[AnimationNodeBlendSpace2D])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeBlendSpace2DImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeBlendSpace2D])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeBlendSpace2DImpl) TypedRef(from *RefAnimationNodeBlendSpace2DImpl) {
	rg := (*TypedRef[AnimationNodeBlendSpace2D])(r)
	t := (*TypedRef[AnimationNodeBlendSpace2D])(from)
	rg.TypedRef((*TypedRef[AnimationNodeBlendSpace2D])(t))
}

func (r *RefAnimationNodeBlendSpace2DImpl) Unref() {
	rg := (*TypedRef[AnimationNodeBlendSpace2D])(r)
	rg.Unref()
}

func (r *RefAnimationNodeBlendSpace2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeBlendSpace2D(reference AnimationNodeBlendSpace2D) RefAnimationNodeBlendSpace2D {
	return (RefAnimationNodeBlendSpace2D)(NewTypedRef[AnimationNodeBlendSpace2D](reference))
}

func newRefAnimationNodeBlendSpace2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeBlendSpace2D](reference.(AnimationNodeBlendSpace2D)))
}

func newRefAnimationNodeBlendSpace2DGDExtensionIternalConstructor(reference AnimationNodeBlendSpace2D) RefAnimationNodeBlendSpace2D {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeBlendSpace2D](reference)
}

var _ RefAnimationNodeBlendTree = &RefAnimationNodeBlendTreeImpl{}
var _ Ref = &RefAnimationNodeBlendTreeImpl{}

type RefAnimationNodeBlendTree interface {
	Ref
	TypedPtr() AnimationNodeBlendTree
}

type RefAnimationNodeBlendTreeImpl TypedRef[AnimationNodeBlendTree]

func (r *RefAnimationNodeBlendTreeImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeBlendTree])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeBlendTreeImpl) TypedPtr() AnimationNodeBlendTree {
	rg := (*TypedRef[AnimationNodeBlendTree])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeBlendTreeImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeBlendTree])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeBlendTreeImpl) TypedRef(from *RefAnimationNodeBlendTreeImpl) {
	rg := (*TypedRef[AnimationNodeBlendTree])(r)
	t := (*TypedRef[AnimationNodeBlendTree])(from)
	rg.TypedRef((*TypedRef[AnimationNodeBlendTree])(t))
}

func (r *RefAnimationNodeBlendTreeImpl) Unref() {
	rg := (*TypedRef[AnimationNodeBlendTree])(r)
	rg.Unref()
}

func (r *RefAnimationNodeBlendTreeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeBlendTree(reference AnimationNodeBlendTree) RefAnimationNodeBlendTree {
	return (RefAnimationNodeBlendTree)(NewTypedRef[AnimationNodeBlendTree](reference))
}

func newRefAnimationNodeBlendTreeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeBlendTree](reference.(AnimationNodeBlendTree)))
}

func newRefAnimationNodeBlendTreeGDExtensionIternalConstructor(reference AnimationNodeBlendTree) RefAnimationNodeBlendTree {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeBlendTree](reference)
}

var _ RefAnimationNodeOneShot = &RefAnimationNodeOneShotImpl{}
var _ Ref = &RefAnimationNodeOneShotImpl{}

type RefAnimationNodeOneShot interface {
	Ref
	TypedPtr() AnimationNodeOneShot
}

type RefAnimationNodeOneShotImpl TypedRef[AnimationNodeOneShot]

func (r *RefAnimationNodeOneShotImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeOneShot])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeOneShotImpl) TypedPtr() AnimationNodeOneShot {
	rg := (*TypedRef[AnimationNodeOneShot])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeOneShotImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeOneShot])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeOneShotImpl) TypedRef(from *RefAnimationNodeOneShotImpl) {
	rg := (*TypedRef[AnimationNodeOneShot])(r)
	t := (*TypedRef[AnimationNodeOneShot])(from)
	rg.TypedRef((*TypedRef[AnimationNodeOneShot])(t))
}

func (r *RefAnimationNodeOneShotImpl) Unref() {
	rg := (*TypedRef[AnimationNodeOneShot])(r)
	rg.Unref()
}

func (r *RefAnimationNodeOneShotImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeOneShot(reference AnimationNodeOneShot) RefAnimationNodeOneShot {
	return (RefAnimationNodeOneShot)(NewTypedRef[AnimationNodeOneShot](reference))
}

func newRefAnimationNodeOneShotAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeOneShot](reference.(AnimationNodeOneShot)))
}

func newRefAnimationNodeOneShotGDExtensionIternalConstructor(reference AnimationNodeOneShot) RefAnimationNodeOneShot {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeOneShot](reference)
}

var _ RefAnimationNodeOutput = &RefAnimationNodeOutputImpl{}
var _ Ref = &RefAnimationNodeOutputImpl{}

type RefAnimationNodeOutput interface {
	Ref
	TypedPtr() AnimationNodeOutput
}

type RefAnimationNodeOutputImpl TypedRef[AnimationNodeOutput]

func (r *RefAnimationNodeOutputImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeOutput])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeOutputImpl) TypedPtr() AnimationNodeOutput {
	rg := (*TypedRef[AnimationNodeOutput])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeOutputImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeOutput])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeOutputImpl) TypedRef(from *RefAnimationNodeOutputImpl) {
	rg := (*TypedRef[AnimationNodeOutput])(r)
	t := (*TypedRef[AnimationNodeOutput])(from)
	rg.TypedRef((*TypedRef[AnimationNodeOutput])(t))
}

func (r *RefAnimationNodeOutputImpl) Unref() {
	rg := (*TypedRef[AnimationNodeOutput])(r)
	rg.Unref()
}

func (r *RefAnimationNodeOutputImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeOutput(reference AnimationNodeOutput) RefAnimationNodeOutput {
	return (RefAnimationNodeOutput)(NewTypedRef[AnimationNodeOutput](reference))
}

func newRefAnimationNodeOutputAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeOutput](reference.(AnimationNodeOutput)))
}

func newRefAnimationNodeOutputGDExtensionIternalConstructor(reference AnimationNodeOutput) RefAnimationNodeOutput {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeOutput](reference)
}

var _ RefAnimationNodeStateMachine = &RefAnimationNodeStateMachineImpl{}
var _ Ref = &RefAnimationNodeStateMachineImpl{}

type RefAnimationNodeStateMachine interface {
	Ref
	TypedPtr() AnimationNodeStateMachine
}

type RefAnimationNodeStateMachineImpl TypedRef[AnimationNodeStateMachine]

func (r *RefAnimationNodeStateMachineImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeStateMachine])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeStateMachineImpl) TypedPtr() AnimationNodeStateMachine {
	rg := (*TypedRef[AnimationNodeStateMachine])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeStateMachineImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeStateMachine])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeStateMachineImpl) TypedRef(from *RefAnimationNodeStateMachineImpl) {
	rg := (*TypedRef[AnimationNodeStateMachine])(r)
	t := (*TypedRef[AnimationNodeStateMachine])(from)
	rg.TypedRef((*TypedRef[AnimationNodeStateMachine])(t))
}

func (r *RefAnimationNodeStateMachineImpl) Unref() {
	rg := (*TypedRef[AnimationNodeStateMachine])(r)
	rg.Unref()
}

func (r *RefAnimationNodeStateMachineImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeStateMachine(reference AnimationNodeStateMachine) RefAnimationNodeStateMachine {
	return (RefAnimationNodeStateMachine)(NewTypedRef[AnimationNodeStateMachine](reference))
}

func newRefAnimationNodeStateMachineAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeStateMachine](reference.(AnimationNodeStateMachine)))
}

func newRefAnimationNodeStateMachineGDExtensionIternalConstructor(reference AnimationNodeStateMachine) RefAnimationNodeStateMachine {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeStateMachine](reference)
}

var _ RefAnimationNodeStateMachinePlayback = &RefAnimationNodeStateMachinePlaybackImpl{}
var _ Ref = &RefAnimationNodeStateMachinePlaybackImpl{}

type RefAnimationNodeStateMachinePlayback interface {
	Ref
	TypedPtr() AnimationNodeStateMachinePlayback
}

type RefAnimationNodeStateMachinePlaybackImpl TypedRef[AnimationNodeStateMachinePlayback]

func (r *RefAnimationNodeStateMachinePlaybackImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeStateMachinePlayback])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeStateMachinePlaybackImpl) TypedPtr() AnimationNodeStateMachinePlayback {
	rg := (*TypedRef[AnimationNodeStateMachinePlayback])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeStateMachinePlaybackImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeStateMachinePlayback])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeStateMachinePlaybackImpl) TypedRef(from *RefAnimationNodeStateMachinePlaybackImpl) {
	rg := (*TypedRef[AnimationNodeStateMachinePlayback])(r)
	t := (*TypedRef[AnimationNodeStateMachinePlayback])(from)
	rg.TypedRef((*TypedRef[AnimationNodeStateMachinePlayback])(t))
}

func (r *RefAnimationNodeStateMachinePlaybackImpl) Unref() {
	rg := (*TypedRef[AnimationNodeStateMachinePlayback])(r)
	rg.Unref()
}

func (r *RefAnimationNodeStateMachinePlaybackImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeStateMachinePlayback(reference AnimationNodeStateMachinePlayback) RefAnimationNodeStateMachinePlayback {
	return (RefAnimationNodeStateMachinePlayback)(NewTypedRef[AnimationNodeStateMachinePlayback](reference))
}

func newRefAnimationNodeStateMachinePlaybackAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeStateMachinePlayback](reference.(AnimationNodeStateMachinePlayback)))
}

func newRefAnimationNodeStateMachinePlaybackGDExtensionIternalConstructor(reference AnimationNodeStateMachinePlayback) RefAnimationNodeStateMachinePlayback {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeStateMachinePlayback](reference)
}

var _ RefAnimationNodeStateMachineTransition = &RefAnimationNodeStateMachineTransitionImpl{}
var _ Ref = &RefAnimationNodeStateMachineTransitionImpl{}

type RefAnimationNodeStateMachineTransition interface {
	Ref
	TypedPtr() AnimationNodeStateMachineTransition
}

type RefAnimationNodeStateMachineTransitionImpl TypedRef[AnimationNodeStateMachineTransition]

func (r *RefAnimationNodeStateMachineTransitionImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeStateMachineTransition])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeStateMachineTransitionImpl) TypedPtr() AnimationNodeStateMachineTransition {
	rg := (*TypedRef[AnimationNodeStateMachineTransition])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeStateMachineTransitionImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeStateMachineTransition])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeStateMachineTransitionImpl) TypedRef(from *RefAnimationNodeStateMachineTransitionImpl) {
	rg := (*TypedRef[AnimationNodeStateMachineTransition])(r)
	t := (*TypedRef[AnimationNodeStateMachineTransition])(from)
	rg.TypedRef((*TypedRef[AnimationNodeStateMachineTransition])(t))
}

func (r *RefAnimationNodeStateMachineTransitionImpl) Unref() {
	rg := (*TypedRef[AnimationNodeStateMachineTransition])(r)
	rg.Unref()
}

func (r *RefAnimationNodeStateMachineTransitionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeStateMachineTransition(reference AnimationNodeStateMachineTransition) RefAnimationNodeStateMachineTransition {
	return (RefAnimationNodeStateMachineTransition)(NewTypedRef[AnimationNodeStateMachineTransition](reference))
}

func newRefAnimationNodeStateMachineTransitionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeStateMachineTransition](reference.(AnimationNodeStateMachineTransition)))
}

func newRefAnimationNodeStateMachineTransitionGDExtensionIternalConstructor(reference AnimationNodeStateMachineTransition) RefAnimationNodeStateMachineTransition {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeStateMachineTransition](reference)
}

var _ RefAnimationNodeSub2 = &RefAnimationNodeSub2Impl{}
var _ Ref = &RefAnimationNodeSub2Impl{}

type RefAnimationNodeSub2 interface {
	Ref
	TypedPtr() AnimationNodeSub2
}

type RefAnimationNodeSub2Impl TypedRef[AnimationNodeSub2]

func (r *RefAnimationNodeSub2Impl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeSub2])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeSub2Impl) TypedPtr() AnimationNodeSub2 {
	rg := (*TypedRef[AnimationNodeSub2])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeSub2Impl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeSub2])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeSub2Impl) TypedRef(from *RefAnimationNodeSub2Impl) {
	rg := (*TypedRef[AnimationNodeSub2])(r)
	t := (*TypedRef[AnimationNodeSub2])(from)
	rg.TypedRef((*TypedRef[AnimationNodeSub2])(t))
}

func (r *RefAnimationNodeSub2Impl) Unref() {
	rg := (*TypedRef[AnimationNodeSub2])(r)
	rg.Unref()
}

func (r *RefAnimationNodeSub2Impl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeSub2(reference AnimationNodeSub2) RefAnimationNodeSub2 {
	return (RefAnimationNodeSub2)(NewTypedRef[AnimationNodeSub2](reference))
}

func newRefAnimationNodeSub2AsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeSub2](reference.(AnimationNodeSub2)))
}

func newRefAnimationNodeSub2GDExtensionIternalConstructor(reference AnimationNodeSub2) RefAnimationNodeSub2 {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeSub2](reference)
}

var _ RefAnimationNodeSync = &RefAnimationNodeSyncImpl{}
var _ Ref = &RefAnimationNodeSyncImpl{}

type RefAnimationNodeSync interface {
	Ref
	TypedPtr() AnimationNodeSync
}

type RefAnimationNodeSyncImpl TypedRef[AnimationNodeSync]

func (r *RefAnimationNodeSyncImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeSync])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeSyncImpl) TypedPtr() AnimationNodeSync {
	rg := (*TypedRef[AnimationNodeSync])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeSyncImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeSync])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeSyncImpl) TypedRef(from *RefAnimationNodeSyncImpl) {
	rg := (*TypedRef[AnimationNodeSync])(r)
	t := (*TypedRef[AnimationNodeSync])(from)
	rg.TypedRef((*TypedRef[AnimationNodeSync])(t))
}

func (r *RefAnimationNodeSyncImpl) Unref() {
	rg := (*TypedRef[AnimationNodeSync])(r)
	rg.Unref()
}

func (r *RefAnimationNodeSyncImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeSync(reference AnimationNodeSync) RefAnimationNodeSync {
	return (RefAnimationNodeSync)(NewTypedRef[AnimationNodeSync](reference))
}

func newRefAnimationNodeSyncAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeSync](reference.(AnimationNodeSync)))
}

func newRefAnimationNodeSyncGDExtensionIternalConstructor(reference AnimationNodeSync) RefAnimationNodeSync {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeSync](reference)
}

var _ RefAnimationNodeTimeScale = &RefAnimationNodeTimeScaleImpl{}
var _ Ref = &RefAnimationNodeTimeScaleImpl{}

type RefAnimationNodeTimeScale interface {
	Ref
	TypedPtr() AnimationNodeTimeScale
}

type RefAnimationNodeTimeScaleImpl TypedRef[AnimationNodeTimeScale]

func (r *RefAnimationNodeTimeScaleImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeTimeScale])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeTimeScaleImpl) TypedPtr() AnimationNodeTimeScale {
	rg := (*TypedRef[AnimationNodeTimeScale])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeTimeScaleImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeTimeScale])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeTimeScaleImpl) TypedRef(from *RefAnimationNodeTimeScaleImpl) {
	rg := (*TypedRef[AnimationNodeTimeScale])(r)
	t := (*TypedRef[AnimationNodeTimeScale])(from)
	rg.TypedRef((*TypedRef[AnimationNodeTimeScale])(t))
}

func (r *RefAnimationNodeTimeScaleImpl) Unref() {
	rg := (*TypedRef[AnimationNodeTimeScale])(r)
	rg.Unref()
}

func (r *RefAnimationNodeTimeScaleImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeTimeScale(reference AnimationNodeTimeScale) RefAnimationNodeTimeScale {
	return (RefAnimationNodeTimeScale)(NewTypedRef[AnimationNodeTimeScale](reference))
}

func newRefAnimationNodeTimeScaleAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeTimeScale](reference.(AnimationNodeTimeScale)))
}

func newRefAnimationNodeTimeScaleGDExtensionIternalConstructor(reference AnimationNodeTimeScale) RefAnimationNodeTimeScale {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeTimeScale](reference)
}

var _ RefAnimationNodeTimeSeek = &RefAnimationNodeTimeSeekImpl{}
var _ Ref = &RefAnimationNodeTimeSeekImpl{}

type RefAnimationNodeTimeSeek interface {
	Ref
	TypedPtr() AnimationNodeTimeSeek
}

type RefAnimationNodeTimeSeekImpl TypedRef[AnimationNodeTimeSeek]

func (r *RefAnimationNodeTimeSeekImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeTimeSeek])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeTimeSeekImpl) TypedPtr() AnimationNodeTimeSeek {
	rg := (*TypedRef[AnimationNodeTimeSeek])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeTimeSeekImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeTimeSeek])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeTimeSeekImpl) TypedRef(from *RefAnimationNodeTimeSeekImpl) {
	rg := (*TypedRef[AnimationNodeTimeSeek])(r)
	t := (*TypedRef[AnimationNodeTimeSeek])(from)
	rg.TypedRef((*TypedRef[AnimationNodeTimeSeek])(t))
}

func (r *RefAnimationNodeTimeSeekImpl) Unref() {
	rg := (*TypedRef[AnimationNodeTimeSeek])(r)
	rg.Unref()
}

func (r *RefAnimationNodeTimeSeekImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeTimeSeek(reference AnimationNodeTimeSeek) RefAnimationNodeTimeSeek {
	return (RefAnimationNodeTimeSeek)(NewTypedRef[AnimationNodeTimeSeek](reference))
}

func newRefAnimationNodeTimeSeekAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeTimeSeek](reference.(AnimationNodeTimeSeek)))
}

func newRefAnimationNodeTimeSeekGDExtensionIternalConstructor(reference AnimationNodeTimeSeek) RefAnimationNodeTimeSeek {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeTimeSeek](reference)
}

var _ RefAnimationNodeTransition = &RefAnimationNodeTransitionImpl{}
var _ Ref = &RefAnimationNodeTransitionImpl{}

type RefAnimationNodeTransition interface {
	Ref
	TypedPtr() AnimationNodeTransition
}

type RefAnimationNodeTransitionImpl TypedRef[AnimationNodeTransition]

func (r *RefAnimationNodeTransitionImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationNodeTransition])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationNodeTransitionImpl) TypedPtr() AnimationNodeTransition {
	rg := (*TypedRef[AnimationNodeTransition])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationNodeTransitionImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationNodeTransition])(r)
	rg.Ref(from)
}

func (r *RefAnimationNodeTransitionImpl) TypedRef(from *RefAnimationNodeTransitionImpl) {
	rg := (*TypedRef[AnimationNodeTransition])(r)
	t := (*TypedRef[AnimationNodeTransition])(from)
	rg.TypedRef((*TypedRef[AnimationNodeTransition])(t))
}

func (r *RefAnimationNodeTransitionImpl) Unref() {
	rg := (*TypedRef[AnimationNodeTransition])(r)
	rg.Unref()
}

func (r *RefAnimationNodeTransitionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationNodeTransition(reference AnimationNodeTransition) RefAnimationNodeTransition {
	return (RefAnimationNodeTransition)(NewTypedRef[AnimationNodeTransition](reference))
}

func newRefAnimationNodeTransitionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationNodeTransition](reference.(AnimationNodeTransition)))
}

func newRefAnimationNodeTransitionGDExtensionIternalConstructor(reference AnimationNodeTransition) RefAnimationNodeTransition {
	return newTypedRefGDExtensionIternalConstructor[AnimationNodeTransition](reference)
}

var _ RefAnimationRootNode = &RefAnimationRootNodeImpl{}
var _ Ref = &RefAnimationRootNodeImpl{}

type RefAnimationRootNode interface {
	Ref
	TypedPtr() AnimationRootNode
}

type RefAnimationRootNodeImpl TypedRef[AnimationRootNode]

func (r *RefAnimationRootNodeImpl) Ptr() RefCounted {
	rg := (*TypedRef[AnimationRootNode])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAnimationRootNodeImpl) TypedPtr() AnimationRootNode {
	rg := (*TypedRef[AnimationRootNode])(r)
	return rg.TypedPtr()
}

func (r *RefAnimationRootNodeImpl) Ref(from Ref) {
	rg := (*TypedRef[AnimationRootNode])(r)
	rg.Ref(from)
}

func (r *RefAnimationRootNodeImpl) TypedRef(from *RefAnimationRootNodeImpl) {
	rg := (*TypedRef[AnimationRootNode])(r)
	t := (*TypedRef[AnimationRootNode])(from)
	rg.TypedRef((*TypedRef[AnimationRootNode])(t))
}

func (r *RefAnimationRootNodeImpl) Unref() {
	rg := (*TypedRef[AnimationRootNode])(r)
	rg.Unref()
}

func (r *RefAnimationRootNodeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAnimationRootNode(reference AnimationRootNode) RefAnimationRootNode {
	return (RefAnimationRootNode)(NewTypedRef[AnimationRootNode](reference))
}

func newRefAnimationRootNodeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AnimationRootNode](reference.(AnimationRootNode)))
}

func newRefAnimationRootNodeGDExtensionIternalConstructor(reference AnimationRootNode) RefAnimationRootNode {
	return newTypedRefGDExtensionIternalConstructor[AnimationRootNode](reference)
}

var _ RefArrayMesh = &RefArrayMeshImpl{}
var _ Ref = &RefArrayMeshImpl{}

type RefArrayMesh interface {
	Ref
	TypedPtr() ArrayMesh
}

type RefArrayMeshImpl TypedRef[ArrayMesh]

func (r *RefArrayMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[ArrayMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefArrayMeshImpl) TypedPtr() ArrayMesh {
	rg := (*TypedRef[ArrayMesh])(r)
	return rg.TypedPtr()
}

func (r *RefArrayMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[ArrayMesh])(r)
	rg.Ref(from)
}

func (r *RefArrayMeshImpl) TypedRef(from *RefArrayMeshImpl) {
	rg := (*TypedRef[ArrayMesh])(r)
	t := (*TypedRef[ArrayMesh])(from)
	rg.TypedRef((*TypedRef[ArrayMesh])(t))
}

func (r *RefArrayMeshImpl) Unref() {
	rg := (*TypedRef[ArrayMesh])(r)
	rg.Unref()
}

func (r *RefArrayMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefArrayMesh(reference ArrayMesh) RefArrayMesh {
	return (RefArrayMesh)(NewTypedRef[ArrayMesh](reference))
}

func newRefArrayMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ArrayMesh](reference.(ArrayMesh)))
}

func newRefArrayMeshGDExtensionIternalConstructor(reference ArrayMesh) RefArrayMesh {
	return newTypedRefGDExtensionIternalConstructor[ArrayMesh](reference)
}

var _ RefArrayOccluder3D = &RefArrayOccluder3DImpl{}
var _ Ref = &RefArrayOccluder3DImpl{}

type RefArrayOccluder3D interface {
	Ref
	TypedPtr() ArrayOccluder3D
}

type RefArrayOccluder3DImpl TypedRef[ArrayOccluder3D]

func (r *RefArrayOccluder3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[ArrayOccluder3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefArrayOccluder3DImpl) TypedPtr() ArrayOccluder3D {
	rg := (*TypedRef[ArrayOccluder3D])(r)
	return rg.TypedPtr()
}

func (r *RefArrayOccluder3DImpl) Ref(from Ref) {
	rg := (*TypedRef[ArrayOccluder3D])(r)
	rg.Ref(from)
}

func (r *RefArrayOccluder3DImpl) TypedRef(from *RefArrayOccluder3DImpl) {
	rg := (*TypedRef[ArrayOccluder3D])(r)
	t := (*TypedRef[ArrayOccluder3D])(from)
	rg.TypedRef((*TypedRef[ArrayOccluder3D])(t))
}

func (r *RefArrayOccluder3DImpl) Unref() {
	rg := (*TypedRef[ArrayOccluder3D])(r)
	rg.Unref()
}

func (r *RefArrayOccluder3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefArrayOccluder3D(reference ArrayOccluder3D) RefArrayOccluder3D {
	return (RefArrayOccluder3D)(NewTypedRef[ArrayOccluder3D](reference))
}

func newRefArrayOccluder3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ArrayOccluder3D](reference.(ArrayOccluder3D)))
}

func newRefArrayOccluder3DGDExtensionIternalConstructor(reference ArrayOccluder3D) RefArrayOccluder3D {
	return newTypedRefGDExtensionIternalConstructor[ArrayOccluder3D](reference)
}

var _ RefAtlasTexture = &RefAtlasTextureImpl{}
var _ Ref = &RefAtlasTextureImpl{}

type RefAtlasTexture interface {
	Ref
	TypedPtr() AtlasTexture
}

type RefAtlasTextureImpl TypedRef[AtlasTexture]

func (r *RefAtlasTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[AtlasTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAtlasTextureImpl) TypedPtr() AtlasTexture {
	rg := (*TypedRef[AtlasTexture])(r)
	return rg.TypedPtr()
}

func (r *RefAtlasTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[AtlasTexture])(r)
	rg.Ref(from)
}

func (r *RefAtlasTextureImpl) TypedRef(from *RefAtlasTextureImpl) {
	rg := (*TypedRef[AtlasTexture])(r)
	t := (*TypedRef[AtlasTexture])(from)
	rg.TypedRef((*TypedRef[AtlasTexture])(t))
}

func (r *RefAtlasTextureImpl) Unref() {
	rg := (*TypedRef[AtlasTexture])(r)
	rg.Unref()
}

func (r *RefAtlasTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAtlasTexture(reference AtlasTexture) RefAtlasTexture {
	return (RefAtlasTexture)(NewTypedRef[AtlasTexture](reference))
}

func newRefAtlasTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AtlasTexture](reference.(AtlasTexture)))
}

func newRefAtlasTextureGDExtensionIternalConstructor(reference AtlasTexture) RefAtlasTexture {
	return newTypedRefGDExtensionIternalConstructor[AtlasTexture](reference)
}

var _ RefAudioBusLayout = &RefAudioBusLayoutImpl{}
var _ Ref = &RefAudioBusLayoutImpl{}

type RefAudioBusLayout interface {
	Ref
	TypedPtr() AudioBusLayout
}

type RefAudioBusLayoutImpl TypedRef[AudioBusLayout]

func (r *RefAudioBusLayoutImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioBusLayout])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioBusLayoutImpl) TypedPtr() AudioBusLayout {
	rg := (*TypedRef[AudioBusLayout])(r)
	return rg.TypedPtr()
}

func (r *RefAudioBusLayoutImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioBusLayout])(r)
	rg.Ref(from)
}

func (r *RefAudioBusLayoutImpl) TypedRef(from *RefAudioBusLayoutImpl) {
	rg := (*TypedRef[AudioBusLayout])(r)
	t := (*TypedRef[AudioBusLayout])(from)
	rg.TypedRef((*TypedRef[AudioBusLayout])(t))
}

func (r *RefAudioBusLayoutImpl) Unref() {
	rg := (*TypedRef[AudioBusLayout])(r)
	rg.Unref()
}

func (r *RefAudioBusLayoutImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioBusLayout(reference AudioBusLayout) RefAudioBusLayout {
	return (RefAudioBusLayout)(NewTypedRef[AudioBusLayout](reference))
}

func newRefAudioBusLayoutAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioBusLayout](reference.(AudioBusLayout)))
}

func newRefAudioBusLayoutGDExtensionIternalConstructor(reference AudioBusLayout) RefAudioBusLayout {
	return newTypedRefGDExtensionIternalConstructor[AudioBusLayout](reference)
}

var _ RefAudioEffect = &RefAudioEffectImpl{}
var _ Ref = &RefAudioEffectImpl{}

type RefAudioEffect interface {
	Ref
	TypedPtr() AudioEffect
}

type RefAudioEffectImpl TypedRef[AudioEffect]

func (r *RefAudioEffectImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffect])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectImpl) TypedPtr() AudioEffect {
	rg := (*TypedRef[AudioEffect])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffect])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectImpl) TypedRef(from *RefAudioEffectImpl) {
	rg := (*TypedRef[AudioEffect])(r)
	t := (*TypedRef[AudioEffect])(from)
	rg.TypedRef((*TypedRef[AudioEffect])(t))
}

func (r *RefAudioEffectImpl) Unref() {
	rg := (*TypedRef[AudioEffect])(r)
	rg.Unref()
}

func (r *RefAudioEffectImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffect(reference AudioEffect) RefAudioEffect {
	return (RefAudioEffect)(NewTypedRef[AudioEffect](reference))
}

func newRefAudioEffectAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffect](reference.(AudioEffect)))
}

func newRefAudioEffectGDExtensionIternalConstructor(reference AudioEffect) RefAudioEffect {
	return newTypedRefGDExtensionIternalConstructor[AudioEffect](reference)
}

var _ RefAudioEffectAmplify = &RefAudioEffectAmplifyImpl{}
var _ Ref = &RefAudioEffectAmplifyImpl{}

type RefAudioEffectAmplify interface {
	Ref
	TypedPtr() AudioEffectAmplify
}

type RefAudioEffectAmplifyImpl TypedRef[AudioEffectAmplify]

func (r *RefAudioEffectAmplifyImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectAmplify])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectAmplifyImpl) TypedPtr() AudioEffectAmplify {
	rg := (*TypedRef[AudioEffectAmplify])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectAmplifyImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectAmplify])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectAmplifyImpl) TypedRef(from *RefAudioEffectAmplifyImpl) {
	rg := (*TypedRef[AudioEffectAmplify])(r)
	t := (*TypedRef[AudioEffectAmplify])(from)
	rg.TypedRef((*TypedRef[AudioEffectAmplify])(t))
}

func (r *RefAudioEffectAmplifyImpl) Unref() {
	rg := (*TypedRef[AudioEffectAmplify])(r)
	rg.Unref()
}

func (r *RefAudioEffectAmplifyImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectAmplify(reference AudioEffectAmplify) RefAudioEffectAmplify {
	return (RefAudioEffectAmplify)(NewTypedRef[AudioEffectAmplify](reference))
}

func newRefAudioEffectAmplifyAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectAmplify](reference.(AudioEffectAmplify)))
}

func newRefAudioEffectAmplifyGDExtensionIternalConstructor(reference AudioEffectAmplify) RefAudioEffectAmplify {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectAmplify](reference)
}

var _ RefAudioEffectBandLimitFilter = &RefAudioEffectBandLimitFilterImpl{}
var _ Ref = &RefAudioEffectBandLimitFilterImpl{}

type RefAudioEffectBandLimitFilter interface {
	Ref
	TypedPtr() AudioEffectBandLimitFilter
}

type RefAudioEffectBandLimitFilterImpl TypedRef[AudioEffectBandLimitFilter]

func (r *RefAudioEffectBandLimitFilterImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectBandLimitFilter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectBandLimitFilterImpl) TypedPtr() AudioEffectBandLimitFilter {
	rg := (*TypedRef[AudioEffectBandLimitFilter])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectBandLimitFilterImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectBandLimitFilter])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectBandLimitFilterImpl) TypedRef(from *RefAudioEffectBandLimitFilterImpl) {
	rg := (*TypedRef[AudioEffectBandLimitFilter])(r)
	t := (*TypedRef[AudioEffectBandLimitFilter])(from)
	rg.TypedRef((*TypedRef[AudioEffectBandLimitFilter])(t))
}

func (r *RefAudioEffectBandLimitFilterImpl) Unref() {
	rg := (*TypedRef[AudioEffectBandLimitFilter])(r)
	rg.Unref()
}

func (r *RefAudioEffectBandLimitFilterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectBandLimitFilter(reference AudioEffectBandLimitFilter) RefAudioEffectBandLimitFilter {
	return (RefAudioEffectBandLimitFilter)(NewTypedRef[AudioEffectBandLimitFilter](reference))
}

func newRefAudioEffectBandLimitFilterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectBandLimitFilter](reference.(AudioEffectBandLimitFilter)))
}

func newRefAudioEffectBandLimitFilterGDExtensionIternalConstructor(reference AudioEffectBandLimitFilter) RefAudioEffectBandLimitFilter {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectBandLimitFilter](reference)
}

var _ RefAudioEffectBandPassFilter = &RefAudioEffectBandPassFilterImpl{}
var _ Ref = &RefAudioEffectBandPassFilterImpl{}

type RefAudioEffectBandPassFilter interface {
	Ref
	TypedPtr() AudioEffectBandPassFilter
}

type RefAudioEffectBandPassFilterImpl TypedRef[AudioEffectBandPassFilter]

func (r *RefAudioEffectBandPassFilterImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectBandPassFilter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectBandPassFilterImpl) TypedPtr() AudioEffectBandPassFilter {
	rg := (*TypedRef[AudioEffectBandPassFilter])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectBandPassFilterImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectBandPassFilter])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectBandPassFilterImpl) TypedRef(from *RefAudioEffectBandPassFilterImpl) {
	rg := (*TypedRef[AudioEffectBandPassFilter])(r)
	t := (*TypedRef[AudioEffectBandPassFilter])(from)
	rg.TypedRef((*TypedRef[AudioEffectBandPassFilter])(t))
}

func (r *RefAudioEffectBandPassFilterImpl) Unref() {
	rg := (*TypedRef[AudioEffectBandPassFilter])(r)
	rg.Unref()
}

func (r *RefAudioEffectBandPassFilterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectBandPassFilter(reference AudioEffectBandPassFilter) RefAudioEffectBandPassFilter {
	return (RefAudioEffectBandPassFilter)(NewTypedRef[AudioEffectBandPassFilter](reference))
}

func newRefAudioEffectBandPassFilterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectBandPassFilter](reference.(AudioEffectBandPassFilter)))
}

func newRefAudioEffectBandPassFilterGDExtensionIternalConstructor(reference AudioEffectBandPassFilter) RefAudioEffectBandPassFilter {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectBandPassFilter](reference)
}

var _ RefAudioEffectCapture = &RefAudioEffectCaptureImpl{}
var _ Ref = &RefAudioEffectCaptureImpl{}

type RefAudioEffectCapture interface {
	Ref
	TypedPtr() AudioEffectCapture
}

type RefAudioEffectCaptureImpl TypedRef[AudioEffectCapture]

func (r *RefAudioEffectCaptureImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectCapture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectCaptureImpl) TypedPtr() AudioEffectCapture {
	rg := (*TypedRef[AudioEffectCapture])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectCaptureImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectCapture])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectCaptureImpl) TypedRef(from *RefAudioEffectCaptureImpl) {
	rg := (*TypedRef[AudioEffectCapture])(r)
	t := (*TypedRef[AudioEffectCapture])(from)
	rg.TypedRef((*TypedRef[AudioEffectCapture])(t))
}

func (r *RefAudioEffectCaptureImpl) Unref() {
	rg := (*TypedRef[AudioEffectCapture])(r)
	rg.Unref()
}

func (r *RefAudioEffectCaptureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectCapture(reference AudioEffectCapture) RefAudioEffectCapture {
	return (RefAudioEffectCapture)(NewTypedRef[AudioEffectCapture](reference))
}

func newRefAudioEffectCaptureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectCapture](reference.(AudioEffectCapture)))
}

func newRefAudioEffectCaptureGDExtensionIternalConstructor(reference AudioEffectCapture) RefAudioEffectCapture {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectCapture](reference)
}

var _ RefAudioEffectChorus = &RefAudioEffectChorusImpl{}
var _ Ref = &RefAudioEffectChorusImpl{}

type RefAudioEffectChorus interface {
	Ref
	TypedPtr() AudioEffectChorus
}

type RefAudioEffectChorusImpl TypedRef[AudioEffectChorus]

func (r *RefAudioEffectChorusImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectChorus])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectChorusImpl) TypedPtr() AudioEffectChorus {
	rg := (*TypedRef[AudioEffectChorus])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectChorusImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectChorus])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectChorusImpl) TypedRef(from *RefAudioEffectChorusImpl) {
	rg := (*TypedRef[AudioEffectChorus])(r)
	t := (*TypedRef[AudioEffectChorus])(from)
	rg.TypedRef((*TypedRef[AudioEffectChorus])(t))
}

func (r *RefAudioEffectChorusImpl) Unref() {
	rg := (*TypedRef[AudioEffectChorus])(r)
	rg.Unref()
}

func (r *RefAudioEffectChorusImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectChorus(reference AudioEffectChorus) RefAudioEffectChorus {
	return (RefAudioEffectChorus)(NewTypedRef[AudioEffectChorus](reference))
}

func newRefAudioEffectChorusAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectChorus](reference.(AudioEffectChorus)))
}

func newRefAudioEffectChorusGDExtensionIternalConstructor(reference AudioEffectChorus) RefAudioEffectChorus {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectChorus](reference)
}

var _ RefAudioEffectCompressor = &RefAudioEffectCompressorImpl{}
var _ Ref = &RefAudioEffectCompressorImpl{}

type RefAudioEffectCompressor interface {
	Ref
	TypedPtr() AudioEffectCompressor
}

type RefAudioEffectCompressorImpl TypedRef[AudioEffectCompressor]

func (r *RefAudioEffectCompressorImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectCompressor])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectCompressorImpl) TypedPtr() AudioEffectCompressor {
	rg := (*TypedRef[AudioEffectCompressor])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectCompressorImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectCompressor])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectCompressorImpl) TypedRef(from *RefAudioEffectCompressorImpl) {
	rg := (*TypedRef[AudioEffectCompressor])(r)
	t := (*TypedRef[AudioEffectCompressor])(from)
	rg.TypedRef((*TypedRef[AudioEffectCompressor])(t))
}

func (r *RefAudioEffectCompressorImpl) Unref() {
	rg := (*TypedRef[AudioEffectCompressor])(r)
	rg.Unref()
}

func (r *RefAudioEffectCompressorImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectCompressor(reference AudioEffectCompressor) RefAudioEffectCompressor {
	return (RefAudioEffectCompressor)(NewTypedRef[AudioEffectCompressor](reference))
}

func newRefAudioEffectCompressorAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectCompressor](reference.(AudioEffectCompressor)))
}

func newRefAudioEffectCompressorGDExtensionIternalConstructor(reference AudioEffectCompressor) RefAudioEffectCompressor {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectCompressor](reference)
}

var _ RefAudioEffectDelay = &RefAudioEffectDelayImpl{}
var _ Ref = &RefAudioEffectDelayImpl{}

type RefAudioEffectDelay interface {
	Ref
	TypedPtr() AudioEffectDelay
}

type RefAudioEffectDelayImpl TypedRef[AudioEffectDelay]

func (r *RefAudioEffectDelayImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectDelay])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectDelayImpl) TypedPtr() AudioEffectDelay {
	rg := (*TypedRef[AudioEffectDelay])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectDelayImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectDelay])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectDelayImpl) TypedRef(from *RefAudioEffectDelayImpl) {
	rg := (*TypedRef[AudioEffectDelay])(r)
	t := (*TypedRef[AudioEffectDelay])(from)
	rg.TypedRef((*TypedRef[AudioEffectDelay])(t))
}

func (r *RefAudioEffectDelayImpl) Unref() {
	rg := (*TypedRef[AudioEffectDelay])(r)
	rg.Unref()
}

func (r *RefAudioEffectDelayImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectDelay(reference AudioEffectDelay) RefAudioEffectDelay {
	return (RefAudioEffectDelay)(NewTypedRef[AudioEffectDelay](reference))
}

func newRefAudioEffectDelayAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectDelay](reference.(AudioEffectDelay)))
}

func newRefAudioEffectDelayGDExtensionIternalConstructor(reference AudioEffectDelay) RefAudioEffectDelay {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectDelay](reference)
}

var _ RefAudioEffectDistortion = &RefAudioEffectDistortionImpl{}
var _ Ref = &RefAudioEffectDistortionImpl{}

type RefAudioEffectDistortion interface {
	Ref
	TypedPtr() AudioEffectDistortion
}

type RefAudioEffectDistortionImpl TypedRef[AudioEffectDistortion]

func (r *RefAudioEffectDistortionImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectDistortion])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectDistortionImpl) TypedPtr() AudioEffectDistortion {
	rg := (*TypedRef[AudioEffectDistortion])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectDistortionImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectDistortion])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectDistortionImpl) TypedRef(from *RefAudioEffectDistortionImpl) {
	rg := (*TypedRef[AudioEffectDistortion])(r)
	t := (*TypedRef[AudioEffectDistortion])(from)
	rg.TypedRef((*TypedRef[AudioEffectDistortion])(t))
}

func (r *RefAudioEffectDistortionImpl) Unref() {
	rg := (*TypedRef[AudioEffectDistortion])(r)
	rg.Unref()
}

func (r *RefAudioEffectDistortionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectDistortion(reference AudioEffectDistortion) RefAudioEffectDistortion {
	return (RefAudioEffectDistortion)(NewTypedRef[AudioEffectDistortion](reference))
}

func newRefAudioEffectDistortionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectDistortion](reference.(AudioEffectDistortion)))
}

func newRefAudioEffectDistortionGDExtensionIternalConstructor(reference AudioEffectDistortion) RefAudioEffectDistortion {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectDistortion](reference)
}

var _ RefAudioEffectEQ = &RefAudioEffectEQImpl{}
var _ Ref = &RefAudioEffectEQImpl{}

type RefAudioEffectEQ interface {
	Ref
	TypedPtr() AudioEffectEQ
}

type RefAudioEffectEQImpl TypedRef[AudioEffectEQ]

func (r *RefAudioEffectEQImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectEQ])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectEQImpl) TypedPtr() AudioEffectEQ {
	rg := (*TypedRef[AudioEffectEQ])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectEQImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectEQ])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectEQImpl) TypedRef(from *RefAudioEffectEQImpl) {
	rg := (*TypedRef[AudioEffectEQ])(r)
	t := (*TypedRef[AudioEffectEQ])(from)
	rg.TypedRef((*TypedRef[AudioEffectEQ])(t))
}

func (r *RefAudioEffectEQImpl) Unref() {
	rg := (*TypedRef[AudioEffectEQ])(r)
	rg.Unref()
}

func (r *RefAudioEffectEQImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectEQ(reference AudioEffectEQ) RefAudioEffectEQ {
	return (RefAudioEffectEQ)(NewTypedRef[AudioEffectEQ](reference))
}

func newRefAudioEffectEQAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectEQ](reference.(AudioEffectEQ)))
}

func newRefAudioEffectEQGDExtensionIternalConstructor(reference AudioEffectEQ) RefAudioEffectEQ {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectEQ](reference)
}

var _ RefAudioEffectEQ10 = &RefAudioEffectEQ10Impl{}
var _ Ref = &RefAudioEffectEQ10Impl{}

type RefAudioEffectEQ10 interface {
	Ref
	TypedPtr() AudioEffectEQ10
}

type RefAudioEffectEQ10Impl TypedRef[AudioEffectEQ10]

func (r *RefAudioEffectEQ10Impl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectEQ10])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectEQ10Impl) TypedPtr() AudioEffectEQ10 {
	rg := (*TypedRef[AudioEffectEQ10])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectEQ10Impl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectEQ10])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectEQ10Impl) TypedRef(from *RefAudioEffectEQ10Impl) {
	rg := (*TypedRef[AudioEffectEQ10])(r)
	t := (*TypedRef[AudioEffectEQ10])(from)
	rg.TypedRef((*TypedRef[AudioEffectEQ10])(t))
}

func (r *RefAudioEffectEQ10Impl) Unref() {
	rg := (*TypedRef[AudioEffectEQ10])(r)
	rg.Unref()
}

func (r *RefAudioEffectEQ10Impl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectEQ10(reference AudioEffectEQ10) RefAudioEffectEQ10 {
	return (RefAudioEffectEQ10)(NewTypedRef[AudioEffectEQ10](reference))
}

func newRefAudioEffectEQ10AsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectEQ10](reference.(AudioEffectEQ10)))
}

func newRefAudioEffectEQ10GDExtensionIternalConstructor(reference AudioEffectEQ10) RefAudioEffectEQ10 {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectEQ10](reference)
}

var _ RefAudioEffectEQ21 = &RefAudioEffectEQ21Impl{}
var _ Ref = &RefAudioEffectEQ21Impl{}

type RefAudioEffectEQ21 interface {
	Ref
	TypedPtr() AudioEffectEQ21
}

type RefAudioEffectEQ21Impl TypedRef[AudioEffectEQ21]

func (r *RefAudioEffectEQ21Impl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectEQ21])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectEQ21Impl) TypedPtr() AudioEffectEQ21 {
	rg := (*TypedRef[AudioEffectEQ21])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectEQ21Impl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectEQ21])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectEQ21Impl) TypedRef(from *RefAudioEffectEQ21Impl) {
	rg := (*TypedRef[AudioEffectEQ21])(r)
	t := (*TypedRef[AudioEffectEQ21])(from)
	rg.TypedRef((*TypedRef[AudioEffectEQ21])(t))
}

func (r *RefAudioEffectEQ21Impl) Unref() {
	rg := (*TypedRef[AudioEffectEQ21])(r)
	rg.Unref()
}

func (r *RefAudioEffectEQ21Impl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectEQ21(reference AudioEffectEQ21) RefAudioEffectEQ21 {
	return (RefAudioEffectEQ21)(NewTypedRef[AudioEffectEQ21](reference))
}

func newRefAudioEffectEQ21AsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectEQ21](reference.(AudioEffectEQ21)))
}

func newRefAudioEffectEQ21GDExtensionIternalConstructor(reference AudioEffectEQ21) RefAudioEffectEQ21 {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectEQ21](reference)
}

var _ RefAudioEffectEQ6 = &RefAudioEffectEQ6Impl{}
var _ Ref = &RefAudioEffectEQ6Impl{}

type RefAudioEffectEQ6 interface {
	Ref
	TypedPtr() AudioEffectEQ6
}

type RefAudioEffectEQ6Impl TypedRef[AudioEffectEQ6]

func (r *RefAudioEffectEQ6Impl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectEQ6])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectEQ6Impl) TypedPtr() AudioEffectEQ6 {
	rg := (*TypedRef[AudioEffectEQ6])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectEQ6Impl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectEQ6])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectEQ6Impl) TypedRef(from *RefAudioEffectEQ6Impl) {
	rg := (*TypedRef[AudioEffectEQ6])(r)
	t := (*TypedRef[AudioEffectEQ6])(from)
	rg.TypedRef((*TypedRef[AudioEffectEQ6])(t))
}

func (r *RefAudioEffectEQ6Impl) Unref() {
	rg := (*TypedRef[AudioEffectEQ6])(r)
	rg.Unref()
}

func (r *RefAudioEffectEQ6Impl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectEQ6(reference AudioEffectEQ6) RefAudioEffectEQ6 {
	return (RefAudioEffectEQ6)(NewTypedRef[AudioEffectEQ6](reference))
}

func newRefAudioEffectEQ6AsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectEQ6](reference.(AudioEffectEQ6)))
}

func newRefAudioEffectEQ6GDExtensionIternalConstructor(reference AudioEffectEQ6) RefAudioEffectEQ6 {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectEQ6](reference)
}

var _ RefAudioEffectFilter = &RefAudioEffectFilterImpl{}
var _ Ref = &RefAudioEffectFilterImpl{}

type RefAudioEffectFilter interface {
	Ref
	TypedPtr() AudioEffectFilter
}

type RefAudioEffectFilterImpl TypedRef[AudioEffectFilter]

func (r *RefAudioEffectFilterImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectFilter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectFilterImpl) TypedPtr() AudioEffectFilter {
	rg := (*TypedRef[AudioEffectFilter])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectFilterImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectFilter])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectFilterImpl) TypedRef(from *RefAudioEffectFilterImpl) {
	rg := (*TypedRef[AudioEffectFilter])(r)
	t := (*TypedRef[AudioEffectFilter])(from)
	rg.TypedRef((*TypedRef[AudioEffectFilter])(t))
}

func (r *RefAudioEffectFilterImpl) Unref() {
	rg := (*TypedRef[AudioEffectFilter])(r)
	rg.Unref()
}

func (r *RefAudioEffectFilterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectFilter(reference AudioEffectFilter) RefAudioEffectFilter {
	return (RefAudioEffectFilter)(NewTypedRef[AudioEffectFilter](reference))
}

func newRefAudioEffectFilterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectFilter](reference.(AudioEffectFilter)))
}

func newRefAudioEffectFilterGDExtensionIternalConstructor(reference AudioEffectFilter) RefAudioEffectFilter {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectFilter](reference)
}

var _ RefAudioEffectHighPassFilter = &RefAudioEffectHighPassFilterImpl{}
var _ Ref = &RefAudioEffectHighPassFilterImpl{}

type RefAudioEffectHighPassFilter interface {
	Ref
	TypedPtr() AudioEffectHighPassFilter
}

type RefAudioEffectHighPassFilterImpl TypedRef[AudioEffectHighPassFilter]

func (r *RefAudioEffectHighPassFilterImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectHighPassFilter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectHighPassFilterImpl) TypedPtr() AudioEffectHighPassFilter {
	rg := (*TypedRef[AudioEffectHighPassFilter])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectHighPassFilterImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectHighPassFilter])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectHighPassFilterImpl) TypedRef(from *RefAudioEffectHighPassFilterImpl) {
	rg := (*TypedRef[AudioEffectHighPassFilter])(r)
	t := (*TypedRef[AudioEffectHighPassFilter])(from)
	rg.TypedRef((*TypedRef[AudioEffectHighPassFilter])(t))
}

func (r *RefAudioEffectHighPassFilterImpl) Unref() {
	rg := (*TypedRef[AudioEffectHighPassFilter])(r)
	rg.Unref()
}

func (r *RefAudioEffectHighPassFilterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectHighPassFilter(reference AudioEffectHighPassFilter) RefAudioEffectHighPassFilter {
	return (RefAudioEffectHighPassFilter)(NewTypedRef[AudioEffectHighPassFilter](reference))
}

func newRefAudioEffectHighPassFilterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectHighPassFilter](reference.(AudioEffectHighPassFilter)))
}

func newRefAudioEffectHighPassFilterGDExtensionIternalConstructor(reference AudioEffectHighPassFilter) RefAudioEffectHighPassFilter {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectHighPassFilter](reference)
}

var _ RefAudioEffectHighShelfFilter = &RefAudioEffectHighShelfFilterImpl{}
var _ Ref = &RefAudioEffectHighShelfFilterImpl{}

type RefAudioEffectHighShelfFilter interface {
	Ref
	TypedPtr() AudioEffectHighShelfFilter
}

type RefAudioEffectHighShelfFilterImpl TypedRef[AudioEffectHighShelfFilter]

func (r *RefAudioEffectHighShelfFilterImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectHighShelfFilter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectHighShelfFilterImpl) TypedPtr() AudioEffectHighShelfFilter {
	rg := (*TypedRef[AudioEffectHighShelfFilter])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectHighShelfFilterImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectHighShelfFilter])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectHighShelfFilterImpl) TypedRef(from *RefAudioEffectHighShelfFilterImpl) {
	rg := (*TypedRef[AudioEffectHighShelfFilter])(r)
	t := (*TypedRef[AudioEffectHighShelfFilter])(from)
	rg.TypedRef((*TypedRef[AudioEffectHighShelfFilter])(t))
}

func (r *RefAudioEffectHighShelfFilterImpl) Unref() {
	rg := (*TypedRef[AudioEffectHighShelfFilter])(r)
	rg.Unref()
}

func (r *RefAudioEffectHighShelfFilterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectHighShelfFilter(reference AudioEffectHighShelfFilter) RefAudioEffectHighShelfFilter {
	return (RefAudioEffectHighShelfFilter)(NewTypedRef[AudioEffectHighShelfFilter](reference))
}

func newRefAudioEffectHighShelfFilterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectHighShelfFilter](reference.(AudioEffectHighShelfFilter)))
}

func newRefAudioEffectHighShelfFilterGDExtensionIternalConstructor(reference AudioEffectHighShelfFilter) RefAudioEffectHighShelfFilter {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectHighShelfFilter](reference)
}

var _ RefAudioEffectInstance = &RefAudioEffectInstanceImpl{}
var _ Ref = &RefAudioEffectInstanceImpl{}

type RefAudioEffectInstance interface {
	Ref
	TypedPtr() AudioEffectInstance
}

type RefAudioEffectInstanceImpl TypedRef[AudioEffectInstance]

func (r *RefAudioEffectInstanceImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectInstance])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectInstanceImpl) TypedPtr() AudioEffectInstance {
	rg := (*TypedRef[AudioEffectInstance])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectInstanceImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectInstance])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectInstanceImpl) TypedRef(from *RefAudioEffectInstanceImpl) {
	rg := (*TypedRef[AudioEffectInstance])(r)
	t := (*TypedRef[AudioEffectInstance])(from)
	rg.TypedRef((*TypedRef[AudioEffectInstance])(t))
}

func (r *RefAudioEffectInstanceImpl) Unref() {
	rg := (*TypedRef[AudioEffectInstance])(r)
	rg.Unref()
}

func (r *RefAudioEffectInstanceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectInstance(reference AudioEffectInstance) RefAudioEffectInstance {
	return (RefAudioEffectInstance)(NewTypedRef[AudioEffectInstance](reference))
}

func newRefAudioEffectInstanceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectInstance](reference.(AudioEffectInstance)))
}

func newRefAudioEffectInstanceGDExtensionIternalConstructor(reference AudioEffectInstance) RefAudioEffectInstance {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectInstance](reference)
}

var _ RefAudioEffectLimiter = &RefAudioEffectLimiterImpl{}
var _ Ref = &RefAudioEffectLimiterImpl{}

type RefAudioEffectLimiter interface {
	Ref
	TypedPtr() AudioEffectLimiter
}

type RefAudioEffectLimiterImpl TypedRef[AudioEffectLimiter]

func (r *RefAudioEffectLimiterImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectLimiter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectLimiterImpl) TypedPtr() AudioEffectLimiter {
	rg := (*TypedRef[AudioEffectLimiter])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectLimiterImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectLimiter])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectLimiterImpl) TypedRef(from *RefAudioEffectLimiterImpl) {
	rg := (*TypedRef[AudioEffectLimiter])(r)
	t := (*TypedRef[AudioEffectLimiter])(from)
	rg.TypedRef((*TypedRef[AudioEffectLimiter])(t))
}

func (r *RefAudioEffectLimiterImpl) Unref() {
	rg := (*TypedRef[AudioEffectLimiter])(r)
	rg.Unref()
}

func (r *RefAudioEffectLimiterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectLimiter(reference AudioEffectLimiter) RefAudioEffectLimiter {
	return (RefAudioEffectLimiter)(NewTypedRef[AudioEffectLimiter](reference))
}

func newRefAudioEffectLimiterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectLimiter](reference.(AudioEffectLimiter)))
}

func newRefAudioEffectLimiterGDExtensionIternalConstructor(reference AudioEffectLimiter) RefAudioEffectLimiter {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectLimiter](reference)
}

var _ RefAudioEffectLowPassFilter = &RefAudioEffectLowPassFilterImpl{}
var _ Ref = &RefAudioEffectLowPassFilterImpl{}

type RefAudioEffectLowPassFilter interface {
	Ref
	TypedPtr() AudioEffectLowPassFilter
}

type RefAudioEffectLowPassFilterImpl TypedRef[AudioEffectLowPassFilter]

func (r *RefAudioEffectLowPassFilterImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectLowPassFilter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectLowPassFilterImpl) TypedPtr() AudioEffectLowPassFilter {
	rg := (*TypedRef[AudioEffectLowPassFilter])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectLowPassFilterImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectLowPassFilter])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectLowPassFilterImpl) TypedRef(from *RefAudioEffectLowPassFilterImpl) {
	rg := (*TypedRef[AudioEffectLowPassFilter])(r)
	t := (*TypedRef[AudioEffectLowPassFilter])(from)
	rg.TypedRef((*TypedRef[AudioEffectLowPassFilter])(t))
}

func (r *RefAudioEffectLowPassFilterImpl) Unref() {
	rg := (*TypedRef[AudioEffectLowPassFilter])(r)
	rg.Unref()
}

func (r *RefAudioEffectLowPassFilterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectLowPassFilter(reference AudioEffectLowPassFilter) RefAudioEffectLowPassFilter {
	return (RefAudioEffectLowPassFilter)(NewTypedRef[AudioEffectLowPassFilter](reference))
}

func newRefAudioEffectLowPassFilterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectLowPassFilter](reference.(AudioEffectLowPassFilter)))
}

func newRefAudioEffectLowPassFilterGDExtensionIternalConstructor(reference AudioEffectLowPassFilter) RefAudioEffectLowPassFilter {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectLowPassFilter](reference)
}

var _ RefAudioEffectLowShelfFilter = &RefAudioEffectLowShelfFilterImpl{}
var _ Ref = &RefAudioEffectLowShelfFilterImpl{}

type RefAudioEffectLowShelfFilter interface {
	Ref
	TypedPtr() AudioEffectLowShelfFilter
}

type RefAudioEffectLowShelfFilterImpl TypedRef[AudioEffectLowShelfFilter]

func (r *RefAudioEffectLowShelfFilterImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectLowShelfFilter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectLowShelfFilterImpl) TypedPtr() AudioEffectLowShelfFilter {
	rg := (*TypedRef[AudioEffectLowShelfFilter])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectLowShelfFilterImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectLowShelfFilter])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectLowShelfFilterImpl) TypedRef(from *RefAudioEffectLowShelfFilterImpl) {
	rg := (*TypedRef[AudioEffectLowShelfFilter])(r)
	t := (*TypedRef[AudioEffectLowShelfFilter])(from)
	rg.TypedRef((*TypedRef[AudioEffectLowShelfFilter])(t))
}

func (r *RefAudioEffectLowShelfFilterImpl) Unref() {
	rg := (*TypedRef[AudioEffectLowShelfFilter])(r)
	rg.Unref()
}

func (r *RefAudioEffectLowShelfFilterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectLowShelfFilter(reference AudioEffectLowShelfFilter) RefAudioEffectLowShelfFilter {
	return (RefAudioEffectLowShelfFilter)(NewTypedRef[AudioEffectLowShelfFilter](reference))
}

func newRefAudioEffectLowShelfFilterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectLowShelfFilter](reference.(AudioEffectLowShelfFilter)))
}

func newRefAudioEffectLowShelfFilterGDExtensionIternalConstructor(reference AudioEffectLowShelfFilter) RefAudioEffectLowShelfFilter {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectLowShelfFilter](reference)
}

var _ RefAudioEffectNotchFilter = &RefAudioEffectNotchFilterImpl{}
var _ Ref = &RefAudioEffectNotchFilterImpl{}

type RefAudioEffectNotchFilter interface {
	Ref
	TypedPtr() AudioEffectNotchFilter
}

type RefAudioEffectNotchFilterImpl TypedRef[AudioEffectNotchFilter]

func (r *RefAudioEffectNotchFilterImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectNotchFilter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectNotchFilterImpl) TypedPtr() AudioEffectNotchFilter {
	rg := (*TypedRef[AudioEffectNotchFilter])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectNotchFilterImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectNotchFilter])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectNotchFilterImpl) TypedRef(from *RefAudioEffectNotchFilterImpl) {
	rg := (*TypedRef[AudioEffectNotchFilter])(r)
	t := (*TypedRef[AudioEffectNotchFilter])(from)
	rg.TypedRef((*TypedRef[AudioEffectNotchFilter])(t))
}

func (r *RefAudioEffectNotchFilterImpl) Unref() {
	rg := (*TypedRef[AudioEffectNotchFilter])(r)
	rg.Unref()
}

func (r *RefAudioEffectNotchFilterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectNotchFilter(reference AudioEffectNotchFilter) RefAudioEffectNotchFilter {
	return (RefAudioEffectNotchFilter)(NewTypedRef[AudioEffectNotchFilter](reference))
}

func newRefAudioEffectNotchFilterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectNotchFilter](reference.(AudioEffectNotchFilter)))
}

func newRefAudioEffectNotchFilterGDExtensionIternalConstructor(reference AudioEffectNotchFilter) RefAudioEffectNotchFilter {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectNotchFilter](reference)
}

var _ RefAudioEffectPanner = &RefAudioEffectPannerImpl{}
var _ Ref = &RefAudioEffectPannerImpl{}

type RefAudioEffectPanner interface {
	Ref
	TypedPtr() AudioEffectPanner
}

type RefAudioEffectPannerImpl TypedRef[AudioEffectPanner]

func (r *RefAudioEffectPannerImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectPanner])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectPannerImpl) TypedPtr() AudioEffectPanner {
	rg := (*TypedRef[AudioEffectPanner])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectPannerImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectPanner])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectPannerImpl) TypedRef(from *RefAudioEffectPannerImpl) {
	rg := (*TypedRef[AudioEffectPanner])(r)
	t := (*TypedRef[AudioEffectPanner])(from)
	rg.TypedRef((*TypedRef[AudioEffectPanner])(t))
}

func (r *RefAudioEffectPannerImpl) Unref() {
	rg := (*TypedRef[AudioEffectPanner])(r)
	rg.Unref()
}

func (r *RefAudioEffectPannerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectPanner(reference AudioEffectPanner) RefAudioEffectPanner {
	return (RefAudioEffectPanner)(NewTypedRef[AudioEffectPanner](reference))
}

func newRefAudioEffectPannerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectPanner](reference.(AudioEffectPanner)))
}

func newRefAudioEffectPannerGDExtensionIternalConstructor(reference AudioEffectPanner) RefAudioEffectPanner {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectPanner](reference)
}

var _ RefAudioEffectPhaser = &RefAudioEffectPhaserImpl{}
var _ Ref = &RefAudioEffectPhaserImpl{}

type RefAudioEffectPhaser interface {
	Ref
	TypedPtr() AudioEffectPhaser
}

type RefAudioEffectPhaserImpl TypedRef[AudioEffectPhaser]

func (r *RefAudioEffectPhaserImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectPhaser])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectPhaserImpl) TypedPtr() AudioEffectPhaser {
	rg := (*TypedRef[AudioEffectPhaser])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectPhaserImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectPhaser])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectPhaserImpl) TypedRef(from *RefAudioEffectPhaserImpl) {
	rg := (*TypedRef[AudioEffectPhaser])(r)
	t := (*TypedRef[AudioEffectPhaser])(from)
	rg.TypedRef((*TypedRef[AudioEffectPhaser])(t))
}

func (r *RefAudioEffectPhaserImpl) Unref() {
	rg := (*TypedRef[AudioEffectPhaser])(r)
	rg.Unref()
}

func (r *RefAudioEffectPhaserImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectPhaser(reference AudioEffectPhaser) RefAudioEffectPhaser {
	return (RefAudioEffectPhaser)(NewTypedRef[AudioEffectPhaser](reference))
}

func newRefAudioEffectPhaserAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectPhaser](reference.(AudioEffectPhaser)))
}

func newRefAudioEffectPhaserGDExtensionIternalConstructor(reference AudioEffectPhaser) RefAudioEffectPhaser {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectPhaser](reference)
}

var _ RefAudioEffectPitchShift = &RefAudioEffectPitchShiftImpl{}
var _ Ref = &RefAudioEffectPitchShiftImpl{}

type RefAudioEffectPitchShift interface {
	Ref
	TypedPtr() AudioEffectPitchShift
}

type RefAudioEffectPitchShiftImpl TypedRef[AudioEffectPitchShift]

func (r *RefAudioEffectPitchShiftImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectPitchShift])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectPitchShiftImpl) TypedPtr() AudioEffectPitchShift {
	rg := (*TypedRef[AudioEffectPitchShift])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectPitchShiftImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectPitchShift])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectPitchShiftImpl) TypedRef(from *RefAudioEffectPitchShiftImpl) {
	rg := (*TypedRef[AudioEffectPitchShift])(r)
	t := (*TypedRef[AudioEffectPitchShift])(from)
	rg.TypedRef((*TypedRef[AudioEffectPitchShift])(t))
}

func (r *RefAudioEffectPitchShiftImpl) Unref() {
	rg := (*TypedRef[AudioEffectPitchShift])(r)
	rg.Unref()
}

func (r *RefAudioEffectPitchShiftImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectPitchShift(reference AudioEffectPitchShift) RefAudioEffectPitchShift {
	return (RefAudioEffectPitchShift)(NewTypedRef[AudioEffectPitchShift](reference))
}

func newRefAudioEffectPitchShiftAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectPitchShift](reference.(AudioEffectPitchShift)))
}

func newRefAudioEffectPitchShiftGDExtensionIternalConstructor(reference AudioEffectPitchShift) RefAudioEffectPitchShift {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectPitchShift](reference)
}

var _ RefAudioEffectRecord = &RefAudioEffectRecordImpl{}
var _ Ref = &RefAudioEffectRecordImpl{}

type RefAudioEffectRecord interface {
	Ref
	TypedPtr() AudioEffectRecord
}

type RefAudioEffectRecordImpl TypedRef[AudioEffectRecord]

func (r *RefAudioEffectRecordImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectRecord])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectRecordImpl) TypedPtr() AudioEffectRecord {
	rg := (*TypedRef[AudioEffectRecord])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectRecordImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectRecord])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectRecordImpl) TypedRef(from *RefAudioEffectRecordImpl) {
	rg := (*TypedRef[AudioEffectRecord])(r)
	t := (*TypedRef[AudioEffectRecord])(from)
	rg.TypedRef((*TypedRef[AudioEffectRecord])(t))
}

func (r *RefAudioEffectRecordImpl) Unref() {
	rg := (*TypedRef[AudioEffectRecord])(r)
	rg.Unref()
}

func (r *RefAudioEffectRecordImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectRecord(reference AudioEffectRecord) RefAudioEffectRecord {
	return (RefAudioEffectRecord)(NewTypedRef[AudioEffectRecord](reference))
}

func newRefAudioEffectRecordAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectRecord](reference.(AudioEffectRecord)))
}

func newRefAudioEffectRecordGDExtensionIternalConstructor(reference AudioEffectRecord) RefAudioEffectRecord {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectRecord](reference)
}

var _ RefAudioEffectReverb = &RefAudioEffectReverbImpl{}
var _ Ref = &RefAudioEffectReverbImpl{}

type RefAudioEffectReverb interface {
	Ref
	TypedPtr() AudioEffectReverb
}

type RefAudioEffectReverbImpl TypedRef[AudioEffectReverb]

func (r *RefAudioEffectReverbImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectReverb])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectReverbImpl) TypedPtr() AudioEffectReverb {
	rg := (*TypedRef[AudioEffectReverb])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectReverbImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectReverb])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectReverbImpl) TypedRef(from *RefAudioEffectReverbImpl) {
	rg := (*TypedRef[AudioEffectReverb])(r)
	t := (*TypedRef[AudioEffectReverb])(from)
	rg.TypedRef((*TypedRef[AudioEffectReverb])(t))
}

func (r *RefAudioEffectReverbImpl) Unref() {
	rg := (*TypedRef[AudioEffectReverb])(r)
	rg.Unref()
}

func (r *RefAudioEffectReverbImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectReverb(reference AudioEffectReverb) RefAudioEffectReverb {
	return (RefAudioEffectReverb)(NewTypedRef[AudioEffectReverb](reference))
}

func newRefAudioEffectReverbAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectReverb](reference.(AudioEffectReverb)))
}

func newRefAudioEffectReverbGDExtensionIternalConstructor(reference AudioEffectReverb) RefAudioEffectReverb {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectReverb](reference)
}

var _ RefAudioEffectSpectrumAnalyzer = &RefAudioEffectSpectrumAnalyzerImpl{}
var _ Ref = &RefAudioEffectSpectrumAnalyzerImpl{}

type RefAudioEffectSpectrumAnalyzer interface {
	Ref
	TypedPtr() AudioEffectSpectrumAnalyzer
}

type RefAudioEffectSpectrumAnalyzerImpl TypedRef[AudioEffectSpectrumAnalyzer]

func (r *RefAudioEffectSpectrumAnalyzerImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectSpectrumAnalyzer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectSpectrumAnalyzerImpl) TypedPtr() AudioEffectSpectrumAnalyzer {
	rg := (*TypedRef[AudioEffectSpectrumAnalyzer])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectSpectrumAnalyzerImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectSpectrumAnalyzer])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectSpectrumAnalyzerImpl) TypedRef(from *RefAudioEffectSpectrumAnalyzerImpl) {
	rg := (*TypedRef[AudioEffectSpectrumAnalyzer])(r)
	t := (*TypedRef[AudioEffectSpectrumAnalyzer])(from)
	rg.TypedRef((*TypedRef[AudioEffectSpectrumAnalyzer])(t))
}

func (r *RefAudioEffectSpectrumAnalyzerImpl) Unref() {
	rg := (*TypedRef[AudioEffectSpectrumAnalyzer])(r)
	rg.Unref()
}

func (r *RefAudioEffectSpectrumAnalyzerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectSpectrumAnalyzer(reference AudioEffectSpectrumAnalyzer) RefAudioEffectSpectrumAnalyzer {
	return (RefAudioEffectSpectrumAnalyzer)(NewTypedRef[AudioEffectSpectrumAnalyzer](reference))
}

func newRefAudioEffectSpectrumAnalyzerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectSpectrumAnalyzer](reference.(AudioEffectSpectrumAnalyzer)))
}

func newRefAudioEffectSpectrumAnalyzerGDExtensionIternalConstructor(reference AudioEffectSpectrumAnalyzer) RefAudioEffectSpectrumAnalyzer {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectSpectrumAnalyzer](reference)
}

var _ RefAudioEffectSpectrumAnalyzerInstance = &RefAudioEffectSpectrumAnalyzerInstanceImpl{}
var _ Ref = &RefAudioEffectSpectrumAnalyzerInstanceImpl{}

type RefAudioEffectSpectrumAnalyzerInstance interface {
	Ref
	TypedPtr() AudioEffectSpectrumAnalyzerInstance
}

type RefAudioEffectSpectrumAnalyzerInstanceImpl TypedRef[AudioEffectSpectrumAnalyzerInstance]

func (r *RefAudioEffectSpectrumAnalyzerInstanceImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectSpectrumAnalyzerInstance])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectSpectrumAnalyzerInstanceImpl) TypedPtr() AudioEffectSpectrumAnalyzerInstance {
	rg := (*TypedRef[AudioEffectSpectrumAnalyzerInstance])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectSpectrumAnalyzerInstanceImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectSpectrumAnalyzerInstance])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectSpectrumAnalyzerInstanceImpl) TypedRef(from *RefAudioEffectSpectrumAnalyzerInstanceImpl) {
	rg := (*TypedRef[AudioEffectSpectrumAnalyzerInstance])(r)
	t := (*TypedRef[AudioEffectSpectrumAnalyzerInstance])(from)
	rg.TypedRef((*TypedRef[AudioEffectSpectrumAnalyzerInstance])(t))
}

func (r *RefAudioEffectSpectrumAnalyzerInstanceImpl) Unref() {
	rg := (*TypedRef[AudioEffectSpectrumAnalyzerInstance])(r)
	rg.Unref()
}

func (r *RefAudioEffectSpectrumAnalyzerInstanceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectSpectrumAnalyzerInstance(reference AudioEffectSpectrumAnalyzerInstance) RefAudioEffectSpectrumAnalyzerInstance {
	return (RefAudioEffectSpectrumAnalyzerInstance)(NewTypedRef[AudioEffectSpectrumAnalyzerInstance](reference))
}

func newRefAudioEffectSpectrumAnalyzerInstanceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectSpectrumAnalyzerInstance](reference.(AudioEffectSpectrumAnalyzerInstance)))
}

func newRefAudioEffectSpectrumAnalyzerInstanceGDExtensionIternalConstructor(reference AudioEffectSpectrumAnalyzerInstance) RefAudioEffectSpectrumAnalyzerInstance {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectSpectrumAnalyzerInstance](reference)
}

var _ RefAudioEffectStereoEnhance = &RefAudioEffectStereoEnhanceImpl{}
var _ Ref = &RefAudioEffectStereoEnhanceImpl{}

type RefAudioEffectStereoEnhance interface {
	Ref
	TypedPtr() AudioEffectStereoEnhance
}

type RefAudioEffectStereoEnhanceImpl TypedRef[AudioEffectStereoEnhance]

func (r *RefAudioEffectStereoEnhanceImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioEffectStereoEnhance])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioEffectStereoEnhanceImpl) TypedPtr() AudioEffectStereoEnhance {
	rg := (*TypedRef[AudioEffectStereoEnhance])(r)
	return rg.TypedPtr()
}

func (r *RefAudioEffectStereoEnhanceImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioEffectStereoEnhance])(r)
	rg.Ref(from)
}

func (r *RefAudioEffectStereoEnhanceImpl) TypedRef(from *RefAudioEffectStereoEnhanceImpl) {
	rg := (*TypedRef[AudioEffectStereoEnhance])(r)
	t := (*TypedRef[AudioEffectStereoEnhance])(from)
	rg.TypedRef((*TypedRef[AudioEffectStereoEnhance])(t))
}

func (r *RefAudioEffectStereoEnhanceImpl) Unref() {
	rg := (*TypedRef[AudioEffectStereoEnhance])(r)
	rg.Unref()
}

func (r *RefAudioEffectStereoEnhanceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioEffectStereoEnhance(reference AudioEffectStereoEnhance) RefAudioEffectStereoEnhance {
	return (RefAudioEffectStereoEnhance)(NewTypedRef[AudioEffectStereoEnhance](reference))
}

func newRefAudioEffectStereoEnhanceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioEffectStereoEnhance](reference.(AudioEffectStereoEnhance)))
}

func newRefAudioEffectStereoEnhanceGDExtensionIternalConstructor(reference AudioEffectStereoEnhance) RefAudioEffectStereoEnhance {
	return newTypedRefGDExtensionIternalConstructor[AudioEffectStereoEnhance](reference)
}

var _ RefAudioStream = &RefAudioStreamImpl{}
var _ Ref = &RefAudioStreamImpl{}

type RefAudioStream interface {
	Ref
	TypedPtr() AudioStream
}

type RefAudioStreamImpl TypedRef[AudioStream]

func (r *RefAudioStreamImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStream])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamImpl) TypedPtr() AudioStream {
	rg := (*TypedRef[AudioStream])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStream])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamImpl) TypedRef(from *RefAudioStreamImpl) {
	rg := (*TypedRef[AudioStream])(r)
	t := (*TypedRef[AudioStream])(from)
	rg.TypedRef((*TypedRef[AudioStream])(t))
}

func (r *RefAudioStreamImpl) Unref() {
	rg := (*TypedRef[AudioStream])(r)
	rg.Unref()
}

func (r *RefAudioStreamImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStream(reference AudioStream) RefAudioStream {
	return (RefAudioStream)(NewTypedRef[AudioStream](reference))
}

func newRefAudioStreamAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStream](reference.(AudioStream)))
}

func newRefAudioStreamGDExtensionIternalConstructor(reference AudioStream) RefAudioStream {
	return newTypedRefGDExtensionIternalConstructor[AudioStream](reference)
}

var _ RefAudioStreamGenerator = &RefAudioStreamGeneratorImpl{}
var _ Ref = &RefAudioStreamGeneratorImpl{}

type RefAudioStreamGenerator interface {
	Ref
	TypedPtr() AudioStreamGenerator
}

type RefAudioStreamGeneratorImpl TypedRef[AudioStreamGenerator]

func (r *RefAudioStreamGeneratorImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamGenerator])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamGeneratorImpl) TypedPtr() AudioStreamGenerator {
	rg := (*TypedRef[AudioStreamGenerator])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamGeneratorImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamGenerator])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamGeneratorImpl) TypedRef(from *RefAudioStreamGeneratorImpl) {
	rg := (*TypedRef[AudioStreamGenerator])(r)
	t := (*TypedRef[AudioStreamGenerator])(from)
	rg.TypedRef((*TypedRef[AudioStreamGenerator])(t))
}

func (r *RefAudioStreamGeneratorImpl) Unref() {
	rg := (*TypedRef[AudioStreamGenerator])(r)
	rg.Unref()
}

func (r *RefAudioStreamGeneratorImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamGenerator(reference AudioStreamGenerator) RefAudioStreamGenerator {
	return (RefAudioStreamGenerator)(NewTypedRef[AudioStreamGenerator](reference))
}

func newRefAudioStreamGeneratorAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamGenerator](reference.(AudioStreamGenerator)))
}

func newRefAudioStreamGeneratorGDExtensionIternalConstructor(reference AudioStreamGenerator) RefAudioStreamGenerator {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamGenerator](reference)
}

var _ RefAudioStreamGeneratorPlayback = &RefAudioStreamGeneratorPlaybackImpl{}
var _ Ref = &RefAudioStreamGeneratorPlaybackImpl{}

type RefAudioStreamGeneratorPlayback interface {
	Ref
	TypedPtr() AudioStreamGeneratorPlayback
}

type RefAudioStreamGeneratorPlaybackImpl TypedRef[AudioStreamGeneratorPlayback]

func (r *RefAudioStreamGeneratorPlaybackImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamGeneratorPlayback])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamGeneratorPlaybackImpl) TypedPtr() AudioStreamGeneratorPlayback {
	rg := (*TypedRef[AudioStreamGeneratorPlayback])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamGeneratorPlaybackImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamGeneratorPlayback])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamGeneratorPlaybackImpl) TypedRef(from *RefAudioStreamGeneratorPlaybackImpl) {
	rg := (*TypedRef[AudioStreamGeneratorPlayback])(r)
	t := (*TypedRef[AudioStreamGeneratorPlayback])(from)
	rg.TypedRef((*TypedRef[AudioStreamGeneratorPlayback])(t))
}

func (r *RefAudioStreamGeneratorPlaybackImpl) Unref() {
	rg := (*TypedRef[AudioStreamGeneratorPlayback])(r)
	rg.Unref()
}

func (r *RefAudioStreamGeneratorPlaybackImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamGeneratorPlayback(reference AudioStreamGeneratorPlayback) RefAudioStreamGeneratorPlayback {
	return (RefAudioStreamGeneratorPlayback)(NewTypedRef[AudioStreamGeneratorPlayback](reference))
}

func newRefAudioStreamGeneratorPlaybackAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamGeneratorPlayback](reference.(AudioStreamGeneratorPlayback)))
}

func newRefAudioStreamGeneratorPlaybackGDExtensionIternalConstructor(reference AudioStreamGeneratorPlayback) RefAudioStreamGeneratorPlayback {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamGeneratorPlayback](reference)
}

var _ RefAudioStreamMP3 = &RefAudioStreamMP3Impl{}
var _ Ref = &RefAudioStreamMP3Impl{}

type RefAudioStreamMP3 interface {
	Ref
	TypedPtr() AudioStreamMP3
}

type RefAudioStreamMP3Impl TypedRef[AudioStreamMP3]

func (r *RefAudioStreamMP3Impl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamMP3])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamMP3Impl) TypedPtr() AudioStreamMP3 {
	rg := (*TypedRef[AudioStreamMP3])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamMP3Impl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamMP3])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamMP3Impl) TypedRef(from *RefAudioStreamMP3Impl) {
	rg := (*TypedRef[AudioStreamMP3])(r)
	t := (*TypedRef[AudioStreamMP3])(from)
	rg.TypedRef((*TypedRef[AudioStreamMP3])(t))
}

func (r *RefAudioStreamMP3Impl) Unref() {
	rg := (*TypedRef[AudioStreamMP3])(r)
	rg.Unref()
}

func (r *RefAudioStreamMP3Impl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamMP3(reference AudioStreamMP3) RefAudioStreamMP3 {
	return (RefAudioStreamMP3)(NewTypedRef[AudioStreamMP3](reference))
}

func newRefAudioStreamMP3AsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamMP3](reference.(AudioStreamMP3)))
}

func newRefAudioStreamMP3GDExtensionIternalConstructor(reference AudioStreamMP3) RefAudioStreamMP3 {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamMP3](reference)
}

var _ RefAudioStreamMicrophone = &RefAudioStreamMicrophoneImpl{}
var _ Ref = &RefAudioStreamMicrophoneImpl{}

type RefAudioStreamMicrophone interface {
	Ref
	TypedPtr() AudioStreamMicrophone
}

type RefAudioStreamMicrophoneImpl TypedRef[AudioStreamMicrophone]

func (r *RefAudioStreamMicrophoneImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamMicrophone])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamMicrophoneImpl) TypedPtr() AudioStreamMicrophone {
	rg := (*TypedRef[AudioStreamMicrophone])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamMicrophoneImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamMicrophone])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamMicrophoneImpl) TypedRef(from *RefAudioStreamMicrophoneImpl) {
	rg := (*TypedRef[AudioStreamMicrophone])(r)
	t := (*TypedRef[AudioStreamMicrophone])(from)
	rg.TypedRef((*TypedRef[AudioStreamMicrophone])(t))
}

func (r *RefAudioStreamMicrophoneImpl) Unref() {
	rg := (*TypedRef[AudioStreamMicrophone])(r)
	rg.Unref()
}

func (r *RefAudioStreamMicrophoneImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamMicrophone(reference AudioStreamMicrophone) RefAudioStreamMicrophone {
	return (RefAudioStreamMicrophone)(NewTypedRef[AudioStreamMicrophone](reference))
}

func newRefAudioStreamMicrophoneAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamMicrophone](reference.(AudioStreamMicrophone)))
}

func newRefAudioStreamMicrophoneGDExtensionIternalConstructor(reference AudioStreamMicrophone) RefAudioStreamMicrophone {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamMicrophone](reference)
}

var _ RefAudioStreamOggVorbis = &RefAudioStreamOggVorbisImpl{}
var _ Ref = &RefAudioStreamOggVorbisImpl{}

type RefAudioStreamOggVorbis interface {
	Ref
	TypedPtr() AudioStreamOggVorbis
}

type RefAudioStreamOggVorbisImpl TypedRef[AudioStreamOggVorbis]

func (r *RefAudioStreamOggVorbisImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamOggVorbis])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamOggVorbisImpl) TypedPtr() AudioStreamOggVorbis {
	rg := (*TypedRef[AudioStreamOggVorbis])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamOggVorbisImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamOggVorbis])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamOggVorbisImpl) TypedRef(from *RefAudioStreamOggVorbisImpl) {
	rg := (*TypedRef[AudioStreamOggVorbis])(r)
	t := (*TypedRef[AudioStreamOggVorbis])(from)
	rg.TypedRef((*TypedRef[AudioStreamOggVorbis])(t))
}

func (r *RefAudioStreamOggVorbisImpl) Unref() {
	rg := (*TypedRef[AudioStreamOggVorbis])(r)
	rg.Unref()
}

func (r *RefAudioStreamOggVorbisImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamOggVorbis(reference AudioStreamOggVorbis) RefAudioStreamOggVorbis {
	return (RefAudioStreamOggVorbis)(NewTypedRef[AudioStreamOggVorbis](reference))
}

func newRefAudioStreamOggVorbisAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamOggVorbis](reference.(AudioStreamOggVorbis)))
}

func newRefAudioStreamOggVorbisGDExtensionIternalConstructor(reference AudioStreamOggVorbis) RefAudioStreamOggVorbis {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamOggVorbis](reference)
}

var _ RefAudioStreamPlayback = &RefAudioStreamPlaybackImpl{}
var _ Ref = &RefAudioStreamPlaybackImpl{}

type RefAudioStreamPlayback interface {
	Ref
	TypedPtr() AudioStreamPlayback
}

type RefAudioStreamPlaybackImpl TypedRef[AudioStreamPlayback]

func (r *RefAudioStreamPlaybackImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamPlayback])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamPlaybackImpl) TypedPtr() AudioStreamPlayback {
	rg := (*TypedRef[AudioStreamPlayback])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamPlaybackImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamPlayback])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamPlaybackImpl) TypedRef(from *RefAudioStreamPlaybackImpl) {
	rg := (*TypedRef[AudioStreamPlayback])(r)
	t := (*TypedRef[AudioStreamPlayback])(from)
	rg.TypedRef((*TypedRef[AudioStreamPlayback])(t))
}

func (r *RefAudioStreamPlaybackImpl) Unref() {
	rg := (*TypedRef[AudioStreamPlayback])(r)
	rg.Unref()
}

func (r *RefAudioStreamPlaybackImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamPlayback(reference AudioStreamPlayback) RefAudioStreamPlayback {
	return (RefAudioStreamPlayback)(NewTypedRef[AudioStreamPlayback](reference))
}

func newRefAudioStreamPlaybackAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamPlayback](reference.(AudioStreamPlayback)))
}

func newRefAudioStreamPlaybackGDExtensionIternalConstructor(reference AudioStreamPlayback) RefAudioStreamPlayback {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamPlayback](reference)
}

var _ RefAudioStreamPlaybackOggVorbis = &RefAudioStreamPlaybackOggVorbisImpl{}
var _ Ref = &RefAudioStreamPlaybackOggVorbisImpl{}

type RefAudioStreamPlaybackOggVorbis interface {
	Ref
	TypedPtr() AudioStreamPlaybackOggVorbis
}

type RefAudioStreamPlaybackOggVorbisImpl TypedRef[AudioStreamPlaybackOggVorbis]

func (r *RefAudioStreamPlaybackOggVorbisImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamPlaybackOggVorbis])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamPlaybackOggVorbisImpl) TypedPtr() AudioStreamPlaybackOggVorbis {
	rg := (*TypedRef[AudioStreamPlaybackOggVorbis])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamPlaybackOggVorbisImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamPlaybackOggVorbis])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamPlaybackOggVorbisImpl) TypedRef(from *RefAudioStreamPlaybackOggVorbisImpl) {
	rg := (*TypedRef[AudioStreamPlaybackOggVorbis])(r)
	t := (*TypedRef[AudioStreamPlaybackOggVorbis])(from)
	rg.TypedRef((*TypedRef[AudioStreamPlaybackOggVorbis])(t))
}

func (r *RefAudioStreamPlaybackOggVorbisImpl) Unref() {
	rg := (*TypedRef[AudioStreamPlaybackOggVorbis])(r)
	rg.Unref()
}

func (r *RefAudioStreamPlaybackOggVorbisImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamPlaybackOggVorbis(reference AudioStreamPlaybackOggVorbis) RefAudioStreamPlaybackOggVorbis {
	return (RefAudioStreamPlaybackOggVorbis)(NewTypedRef[AudioStreamPlaybackOggVorbis](reference))
}

func newRefAudioStreamPlaybackOggVorbisAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamPlaybackOggVorbis](reference.(AudioStreamPlaybackOggVorbis)))
}

func newRefAudioStreamPlaybackOggVorbisGDExtensionIternalConstructor(reference AudioStreamPlaybackOggVorbis) RefAudioStreamPlaybackOggVorbis {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamPlaybackOggVorbis](reference)
}

var _ RefAudioStreamPlaybackPolyphonic = &RefAudioStreamPlaybackPolyphonicImpl{}
var _ Ref = &RefAudioStreamPlaybackPolyphonicImpl{}

type RefAudioStreamPlaybackPolyphonic interface {
	Ref
	TypedPtr() AudioStreamPlaybackPolyphonic
}

type RefAudioStreamPlaybackPolyphonicImpl TypedRef[AudioStreamPlaybackPolyphonic]

func (r *RefAudioStreamPlaybackPolyphonicImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamPlaybackPolyphonic])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamPlaybackPolyphonicImpl) TypedPtr() AudioStreamPlaybackPolyphonic {
	rg := (*TypedRef[AudioStreamPlaybackPolyphonic])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamPlaybackPolyphonicImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamPlaybackPolyphonic])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamPlaybackPolyphonicImpl) TypedRef(from *RefAudioStreamPlaybackPolyphonicImpl) {
	rg := (*TypedRef[AudioStreamPlaybackPolyphonic])(r)
	t := (*TypedRef[AudioStreamPlaybackPolyphonic])(from)
	rg.TypedRef((*TypedRef[AudioStreamPlaybackPolyphonic])(t))
}

func (r *RefAudioStreamPlaybackPolyphonicImpl) Unref() {
	rg := (*TypedRef[AudioStreamPlaybackPolyphonic])(r)
	rg.Unref()
}

func (r *RefAudioStreamPlaybackPolyphonicImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamPlaybackPolyphonic(reference AudioStreamPlaybackPolyphonic) RefAudioStreamPlaybackPolyphonic {
	return (RefAudioStreamPlaybackPolyphonic)(NewTypedRef[AudioStreamPlaybackPolyphonic](reference))
}

func newRefAudioStreamPlaybackPolyphonicAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamPlaybackPolyphonic](reference.(AudioStreamPlaybackPolyphonic)))
}

func newRefAudioStreamPlaybackPolyphonicGDExtensionIternalConstructor(reference AudioStreamPlaybackPolyphonic) RefAudioStreamPlaybackPolyphonic {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamPlaybackPolyphonic](reference)
}

var _ RefAudioStreamPlaybackResampled = &RefAudioStreamPlaybackResampledImpl{}
var _ Ref = &RefAudioStreamPlaybackResampledImpl{}

type RefAudioStreamPlaybackResampled interface {
	Ref
	TypedPtr() AudioStreamPlaybackResampled
}

type RefAudioStreamPlaybackResampledImpl TypedRef[AudioStreamPlaybackResampled]

func (r *RefAudioStreamPlaybackResampledImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamPlaybackResampled])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamPlaybackResampledImpl) TypedPtr() AudioStreamPlaybackResampled {
	rg := (*TypedRef[AudioStreamPlaybackResampled])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamPlaybackResampledImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamPlaybackResampled])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamPlaybackResampledImpl) TypedRef(from *RefAudioStreamPlaybackResampledImpl) {
	rg := (*TypedRef[AudioStreamPlaybackResampled])(r)
	t := (*TypedRef[AudioStreamPlaybackResampled])(from)
	rg.TypedRef((*TypedRef[AudioStreamPlaybackResampled])(t))
}

func (r *RefAudioStreamPlaybackResampledImpl) Unref() {
	rg := (*TypedRef[AudioStreamPlaybackResampled])(r)
	rg.Unref()
}

func (r *RefAudioStreamPlaybackResampledImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamPlaybackResampled(reference AudioStreamPlaybackResampled) RefAudioStreamPlaybackResampled {
	return (RefAudioStreamPlaybackResampled)(NewTypedRef[AudioStreamPlaybackResampled](reference))
}

func newRefAudioStreamPlaybackResampledAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamPlaybackResampled](reference.(AudioStreamPlaybackResampled)))
}

func newRefAudioStreamPlaybackResampledGDExtensionIternalConstructor(reference AudioStreamPlaybackResampled) RefAudioStreamPlaybackResampled {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamPlaybackResampled](reference)
}

var _ RefAudioStreamPolyphonic = &RefAudioStreamPolyphonicImpl{}
var _ Ref = &RefAudioStreamPolyphonicImpl{}

type RefAudioStreamPolyphonic interface {
	Ref
	TypedPtr() AudioStreamPolyphonic
}

type RefAudioStreamPolyphonicImpl TypedRef[AudioStreamPolyphonic]

func (r *RefAudioStreamPolyphonicImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamPolyphonic])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamPolyphonicImpl) TypedPtr() AudioStreamPolyphonic {
	rg := (*TypedRef[AudioStreamPolyphonic])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamPolyphonicImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamPolyphonic])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamPolyphonicImpl) TypedRef(from *RefAudioStreamPolyphonicImpl) {
	rg := (*TypedRef[AudioStreamPolyphonic])(r)
	t := (*TypedRef[AudioStreamPolyphonic])(from)
	rg.TypedRef((*TypedRef[AudioStreamPolyphonic])(t))
}

func (r *RefAudioStreamPolyphonicImpl) Unref() {
	rg := (*TypedRef[AudioStreamPolyphonic])(r)
	rg.Unref()
}

func (r *RefAudioStreamPolyphonicImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamPolyphonic(reference AudioStreamPolyphonic) RefAudioStreamPolyphonic {
	return (RefAudioStreamPolyphonic)(NewTypedRef[AudioStreamPolyphonic](reference))
}

func newRefAudioStreamPolyphonicAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamPolyphonic](reference.(AudioStreamPolyphonic)))
}

func newRefAudioStreamPolyphonicGDExtensionIternalConstructor(reference AudioStreamPolyphonic) RefAudioStreamPolyphonic {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamPolyphonic](reference)
}

var _ RefAudioStreamRandomizer = &RefAudioStreamRandomizerImpl{}
var _ Ref = &RefAudioStreamRandomizerImpl{}

type RefAudioStreamRandomizer interface {
	Ref
	TypedPtr() AudioStreamRandomizer
}

type RefAudioStreamRandomizerImpl TypedRef[AudioStreamRandomizer]

func (r *RefAudioStreamRandomizerImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamRandomizer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamRandomizerImpl) TypedPtr() AudioStreamRandomizer {
	rg := (*TypedRef[AudioStreamRandomizer])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamRandomizerImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamRandomizer])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamRandomizerImpl) TypedRef(from *RefAudioStreamRandomizerImpl) {
	rg := (*TypedRef[AudioStreamRandomizer])(r)
	t := (*TypedRef[AudioStreamRandomizer])(from)
	rg.TypedRef((*TypedRef[AudioStreamRandomizer])(t))
}

func (r *RefAudioStreamRandomizerImpl) Unref() {
	rg := (*TypedRef[AudioStreamRandomizer])(r)
	rg.Unref()
}

func (r *RefAudioStreamRandomizerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamRandomizer(reference AudioStreamRandomizer) RefAudioStreamRandomizer {
	return (RefAudioStreamRandomizer)(NewTypedRef[AudioStreamRandomizer](reference))
}

func newRefAudioStreamRandomizerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamRandomizer](reference.(AudioStreamRandomizer)))
}

func newRefAudioStreamRandomizerGDExtensionIternalConstructor(reference AudioStreamRandomizer) RefAudioStreamRandomizer {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamRandomizer](reference)
}

var _ RefAudioStreamWAV = &RefAudioStreamWAVImpl{}
var _ Ref = &RefAudioStreamWAVImpl{}

type RefAudioStreamWAV interface {
	Ref
	TypedPtr() AudioStreamWAV
}

type RefAudioStreamWAVImpl TypedRef[AudioStreamWAV]

func (r *RefAudioStreamWAVImpl) Ptr() RefCounted {
	rg := (*TypedRef[AudioStreamWAV])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefAudioStreamWAVImpl) TypedPtr() AudioStreamWAV {
	rg := (*TypedRef[AudioStreamWAV])(r)
	return rg.TypedPtr()
}

func (r *RefAudioStreamWAVImpl) Ref(from Ref) {
	rg := (*TypedRef[AudioStreamWAV])(r)
	rg.Ref(from)
}

func (r *RefAudioStreamWAVImpl) TypedRef(from *RefAudioStreamWAVImpl) {
	rg := (*TypedRef[AudioStreamWAV])(r)
	t := (*TypedRef[AudioStreamWAV])(from)
	rg.TypedRef((*TypedRef[AudioStreamWAV])(t))
}

func (r *RefAudioStreamWAVImpl) Unref() {
	rg := (*TypedRef[AudioStreamWAV])(r)
	rg.Unref()
}

func (r *RefAudioStreamWAVImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefAudioStreamWAV(reference AudioStreamWAV) RefAudioStreamWAV {
	return (RefAudioStreamWAV)(NewTypedRef[AudioStreamWAV](reference))
}

func newRefAudioStreamWAVAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[AudioStreamWAV](reference.(AudioStreamWAV)))
}

func newRefAudioStreamWAVGDExtensionIternalConstructor(reference AudioStreamWAV) RefAudioStreamWAV {
	return newTypedRefGDExtensionIternalConstructor[AudioStreamWAV](reference)
}

var _ RefBaseMaterial3D = &RefBaseMaterial3DImpl{}
var _ Ref = &RefBaseMaterial3DImpl{}

type RefBaseMaterial3D interface {
	Ref
	TypedPtr() BaseMaterial3D
}

type RefBaseMaterial3DImpl TypedRef[BaseMaterial3D]

func (r *RefBaseMaterial3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[BaseMaterial3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefBaseMaterial3DImpl) TypedPtr() BaseMaterial3D {
	rg := (*TypedRef[BaseMaterial3D])(r)
	return rg.TypedPtr()
}

func (r *RefBaseMaterial3DImpl) Ref(from Ref) {
	rg := (*TypedRef[BaseMaterial3D])(r)
	rg.Ref(from)
}

func (r *RefBaseMaterial3DImpl) TypedRef(from *RefBaseMaterial3DImpl) {
	rg := (*TypedRef[BaseMaterial3D])(r)
	t := (*TypedRef[BaseMaterial3D])(from)
	rg.TypedRef((*TypedRef[BaseMaterial3D])(t))
}

func (r *RefBaseMaterial3DImpl) Unref() {
	rg := (*TypedRef[BaseMaterial3D])(r)
	rg.Unref()
}

func (r *RefBaseMaterial3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefBaseMaterial3D(reference BaseMaterial3D) RefBaseMaterial3D {
	return (RefBaseMaterial3D)(NewTypedRef[BaseMaterial3D](reference))
}

func newRefBaseMaterial3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[BaseMaterial3D](reference.(BaseMaterial3D)))
}

func newRefBaseMaterial3DGDExtensionIternalConstructor(reference BaseMaterial3D) RefBaseMaterial3D {
	return newTypedRefGDExtensionIternalConstructor[BaseMaterial3D](reference)
}

var _ RefBitMap = &RefBitMapImpl{}
var _ Ref = &RefBitMapImpl{}

type RefBitMap interface {
	Ref
	TypedPtr() BitMap
}

type RefBitMapImpl TypedRef[BitMap]

func (r *RefBitMapImpl) Ptr() RefCounted {
	rg := (*TypedRef[BitMap])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefBitMapImpl) TypedPtr() BitMap {
	rg := (*TypedRef[BitMap])(r)
	return rg.TypedPtr()
}

func (r *RefBitMapImpl) Ref(from Ref) {
	rg := (*TypedRef[BitMap])(r)
	rg.Ref(from)
}

func (r *RefBitMapImpl) TypedRef(from *RefBitMapImpl) {
	rg := (*TypedRef[BitMap])(r)
	t := (*TypedRef[BitMap])(from)
	rg.TypedRef((*TypedRef[BitMap])(t))
}

func (r *RefBitMapImpl) Unref() {
	rg := (*TypedRef[BitMap])(r)
	rg.Unref()
}

func (r *RefBitMapImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefBitMap(reference BitMap) RefBitMap {
	return (RefBitMap)(NewTypedRef[BitMap](reference))
}

func newRefBitMapAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[BitMap](reference.(BitMap)))
}

func newRefBitMapGDExtensionIternalConstructor(reference BitMap) RefBitMap {
	return newTypedRefGDExtensionIternalConstructor[BitMap](reference)
}

var _ RefBoneMap = &RefBoneMapImpl{}
var _ Ref = &RefBoneMapImpl{}

type RefBoneMap interface {
	Ref
	TypedPtr() BoneMap
}

type RefBoneMapImpl TypedRef[BoneMap]

func (r *RefBoneMapImpl) Ptr() RefCounted {
	rg := (*TypedRef[BoneMap])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefBoneMapImpl) TypedPtr() BoneMap {
	rg := (*TypedRef[BoneMap])(r)
	return rg.TypedPtr()
}

func (r *RefBoneMapImpl) Ref(from Ref) {
	rg := (*TypedRef[BoneMap])(r)
	rg.Ref(from)
}

func (r *RefBoneMapImpl) TypedRef(from *RefBoneMapImpl) {
	rg := (*TypedRef[BoneMap])(r)
	t := (*TypedRef[BoneMap])(from)
	rg.TypedRef((*TypedRef[BoneMap])(t))
}

func (r *RefBoneMapImpl) Unref() {
	rg := (*TypedRef[BoneMap])(r)
	rg.Unref()
}

func (r *RefBoneMapImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefBoneMap(reference BoneMap) RefBoneMap {
	return (RefBoneMap)(NewTypedRef[BoneMap](reference))
}

func newRefBoneMapAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[BoneMap](reference.(BoneMap)))
}

func newRefBoneMapGDExtensionIternalConstructor(reference BoneMap) RefBoneMap {
	return newTypedRefGDExtensionIternalConstructor[BoneMap](reference)
}

var _ RefBoxMesh = &RefBoxMeshImpl{}
var _ Ref = &RefBoxMeshImpl{}

type RefBoxMesh interface {
	Ref
	TypedPtr() BoxMesh
}

type RefBoxMeshImpl TypedRef[BoxMesh]

func (r *RefBoxMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[BoxMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefBoxMeshImpl) TypedPtr() BoxMesh {
	rg := (*TypedRef[BoxMesh])(r)
	return rg.TypedPtr()
}

func (r *RefBoxMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[BoxMesh])(r)
	rg.Ref(from)
}

func (r *RefBoxMeshImpl) TypedRef(from *RefBoxMeshImpl) {
	rg := (*TypedRef[BoxMesh])(r)
	t := (*TypedRef[BoxMesh])(from)
	rg.TypedRef((*TypedRef[BoxMesh])(t))
}

func (r *RefBoxMeshImpl) Unref() {
	rg := (*TypedRef[BoxMesh])(r)
	rg.Unref()
}

func (r *RefBoxMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefBoxMesh(reference BoxMesh) RefBoxMesh {
	return (RefBoxMesh)(NewTypedRef[BoxMesh](reference))
}

func newRefBoxMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[BoxMesh](reference.(BoxMesh)))
}

func newRefBoxMeshGDExtensionIternalConstructor(reference BoxMesh) RefBoxMesh {
	return newTypedRefGDExtensionIternalConstructor[BoxMesh](reference)
}

var _ RefBoxOccluder3D = &RefBoxOccluder3DImpl{}
var _ Ref = &RefBoxOccluder3DImpl{}

type RefBoxOccluder3D interface {
	Ref
	TypedPtr() BoxOccluder3D
}

type RefBoxOccluder3DImpl TypedRef[BoxOccluder3D]

func (r *RefBoxOccluder3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[BoxOccluder3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefBoxOccluder3DImpl) TypedPtr() BoxOccluder3D {
	rg := (*TypedRef[BoxOccluder3D])(r)
	return rg.TypedPtr()
}

func (r *RefBoxOccluder3DImpl) Ref(from Ref) {
	rg := (*TypedRef[BoxOccluder3D])(r)
	rg.Ref(from)
}

func (r *RefBoxOccluder3DImpl) TypedRef(from *RefBoxOccluder3DImpl) {
	rg := (*TypedRef[BoxOccluder3D])(r)
	t := (*TypedRef[BoxOccluder3D])(from)
	rg.TypedRef((*TypedRef[BoxOccluder3D])(t))
}

func (r *RefBoxOccluder3DImpl) Unref() {
	rg := (*TypedRef[BoxOccluder3D])(r)
	rg.Unref()
}

func (r *RefBoxOccluder3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefBoxOccluder3D(reference BoxOccluder3D) RefBoxOccluder3D {
	return (RefBoxOccluder3D)(NewTypedRef[BoxOccluder3D](reference))
}

func newRefBoxOccluder3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[BoxOccluder3D](reference.(BoxOccluder3D)))
}

func newRefBoxOccluder3DGDExtensionIternalConstructor(reference BoxOccluder3D) RefBoxOccluder3D {
	return newTypedRefGDExtensionIternalConstructor[BoxOccluder3D](reference)
}

var _ RefBoxShape3D = &RefBoxShape3DImpl{}
var _ Ref = &RefBoxShape3DImpl{}

type RefBoxShape3D interface {
	Ref
	TypedPtr() BoxShape3D
}

type RefBoxShape3DImpl TypedRef[BoxShape3D]

func (r *RefBoxShape3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[BoxShape3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefBoxShape3DImpl) TypedPtr() BoxShape3D {
	rg := (*TypedRef[BoxShape3D])(r)
	return rg.TypedPtr()
}

func (r *RefBoxShape3DImpl) Ref(from Ref) {
	rg := (*TypedRef[BoxShape3D])(r)
	rg.Ref(from)
}

func (r *RefBoxShape3DImpl) TypedRef(from *RefBoxShape3DImpl) {
	rg := (*TypedRef[BoxShape3D])(r)
	t := (*TypedRef[BoxShape3D])(from)
	rg.TypedRef((*TypedRef[BoxShape3D])(t))
}

func (r *RefBoxShape3DImpl) Unref() {
	rg := (*TypedRef[BoxShape3D])(r)
	rg.Unref()
}

func (r *RefBoxShape3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefBoxShape3D(reference BoxShape3D) RefBoxShape3D {
	return (RefBoxShape3D)(NewTypedRef[BoxShape3D](reference))
}

func newRefBoxShape3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[BoxShape3D](reference.(BoxShape3D)))
}

func newRefBoxShape3DGDExtensionIternalConstructor(reference BoxShape3D) RefBoxShape3D {
	return newTypedRefGDExtensionIternalConstructor[BoxShape3D](reference)
}

var _ RefButtonGroup = &RefButtonGroupImpl{}
var _ Ref = &RefButtonGroupImpl{}

type RefButtonGroup interface {
	Ref
	TypedPtr() ButtonGroup
}

type RefButtonGroupImpl TypedRef[ButtonGroup]

func (r *RefButtonGroupImpl) Ptr() RefCounted {
	rg := (*TypedRef[ButtonGroup])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefButtonGroupImpl) TypedPtr() ButtonGroup {
	rg := (*TypedRef[ButtonGroup])(r)
	return rg.TypedPtr()
}

func (r *RefButtonGroupImpl) Ref(from Ref) {
	rg := (*TypedRef[ButtonGroup])(r)
	rg.Ref(from)
}

func (r *RefButtonGroupImpl) TypedRef(from *RefButtonGroupImpl) {
	rg := (*TypedRef[ButtonGroup])(r)
	t := (*TypedRef[ButtonGroup])(from)
	rg.TypedRef((*TypedRef[ButtonGroup])(t))
}

func (r *RefButtonGroupImpl) Unref() {
	rg := (*TypedRef[ButtonGroup])(r)
	rg.Unref()
}

func (r *RefButtonGroupImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefButtonGroup(reference ButtonGroup) RefButtonGroup {
	return (RefButtonGroup)(NewTypedRef[ButtonGroup](reference))
}

func newRefButtonGroupAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ButtonGroup](reference.(ButtonGroup)))
}

func newRefButtonGroupGDExtensionIternalConstructor(reference ButtonGroup) RefButtonGroup {
	return newTypedRefGDExtensionIternalConstructor[ButtonGroup](reference)
}

var _ RefCallbackTweener = &RefCallbackTweenerImpl{}
var _ Ref = &RefCallbackTweenerImpl{}

type RefCallbackTweener interface {
	Ref
	TypedPtr() CallbackTweener
}

type RefCallbackTweenerImpl TypedRef[CallbackTweener]

func (r *RefCallbackTweenerImpl) Ptr() RefCounted {
	rg := (*TypedRef[CallbackTweener])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCallbackTweenerImpl) TypedPtr() CallbackTweener {
	rg := (*TypedRef[CallbackTweener])(r)
	return rg.TypedPtr()
}

func (r *RefCallbackTweenerImpl) Ref(from Ref) {
	rg := (*TypedRef[CallbackTweener])(r)
	rg.Ref(from)
}

func (r *RefCallbackTweenerImpl) TypedRef(from *RefCallbackTweenerImpl) {
	rg := (*TypedRef[CallbackTweener])(r)
	t := (*TypedRef[CallbackTweener])(from)
	rg.TypedRef((*TypedRef[CallbackTweener])(t))
}

func (r *RefCallbackTweenerImpl) Unref() {
	rg := (*TypedRef[CallbackTweener])(r)
	rg.Unref()
}

func (r *RefCallbackTweenerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCallbackTweener(reference CallbackTweener) RefCallbackTweener {
	return (RefCallbackTweener)(NewTypedRef[CallbackTweener](reference))
}

func newRefCallbackTweenerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CallbackTweener](reference.(CallbackTweener)))
}

func newRefCallbackTweenerGDExtensionIternalConstructor(reference CallbackTweener) RefCallbackTweener {
	return newTypedRefGDExtensionIternalConstructor[CallbackTweener](reference)
}

var _ RefCameraAttributes = &RefCameraAttributesImpl{}
var _ Ref = &RefCameraAttributesImpl{}

type RefCameraAttributes interface {
	Ref
	TypedPtr() CameraAttributes
}

type RefCameraAttributesImpl TypedRef[CameraAttributes]

func (r *RefCameraAttributesImpl) Ptr() RefCounted {
	rg := (*TypedRef[CameraAttributes])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCameraAttributesImpl) TypedPtr() CameraAttributes {
	rg := (*TypedRef[CameraAttributes])(r)
	return rg.TypedPtr()
}

func (r *RefCameraAttributesImpl) Ref(from Ref) {
	rg := (*TypedRef[CameraAttributes])(r)
	rg.Ref(from)
}

func (r *RefCameraAttributesImpl) TypedRef(from *RefCameraAttributesImpl) {
	rg := (*TypedRef[CameraAttributes])(r)
	t := (*TypedRef[CameraAttributes])(from)
	rg.TypedRef((*TypedRef[CameraAttributes])(t))
}

func (r *RefCameraAttributesImpl) Unref() {
	rg := (*TypedRef[CameraAttributes])(r)
	rg.Unref()
}

func (r *RefCameraAttributesImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCameraAttributes(reference CameraAttributes) RefCameraAttributes {
	return (RefCameraAttributes)(NewTypedRef[CameraAttributes](reference))
}

func newRefCameraAttributesAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CameraAttributes](reference.(CameraAttributes)))
}

func newRefCameraAttributesGDExtensionIternalConstructor(reference CameraAttributes) RefCameraAttributes {
	return newTypedRefGDExtensionIternalConstructor[CameraAttributes](reference)
}

var _ RefCameraAttributesPhysical = &RefCameraAttributesPhysicalImpl{}
var _ Ref = &RefCameraAttributesPhysicalImpl{}

type RefCameraAttributesPhysical interface {
	Ref
	TypedPtr() CameraAttributesPhysical
}

type RefCameraAttributesPhysicalImpl TypedRef[CameraAttributesPhysical]

func (r *RefCameraAttributesPhysicalImpl) Ptr() RefCounted {
	rg := (*TypedRef[CameraAttributesPhysical])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCameraAttributesPhysicalImpl) TypedPtr() CameraAttributesPhysical {
	rg := (*TypedRef[CameraAttributesPhysical])(r)
	return rg.TypedPtr()
}

func (r *RefCameraAttributesPhysicalImpl) Ref(from Ref) {
	rg := (*TypedRef[CameraAttributesPhysical])(r)
	rg.Ref(from)
}

func (r *RefCameraAttributesPhysicalImpl) TypedRef(from *RefCameraAttributesPhysicalImpl) {
	rg := (*TypedRef[CameraAttributesPhysical])(r)
	t := (*TypedRef[CameraAttributesPhysical])(from)
	rg.TypedRef((*TypedRef[CameraAttributesPhysical])(t))
}

func (r *RefCameraAttributesPhysicalImpl) Unref() {
	rg := (*TypedRef[CameraAttributesPhysical])(r)
	rg.Unref()
}

func (r *RefCameraAttributesPhysicalImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCameraAttributesPhysical(reference CameraAttributesPhysical) RefCameraAttributesPhysical {
	return (RefCameraAttributesPhysical)(NewTypedRef[CameraAttributesPhysical](reference))
}

func newRefCameraAttributesPhysicalAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CameraAttributesPhysical](reference.(CameraAttributesPhysical)))
}

func newRefCameraAttributesPhysicalGDExtensionIternalConstructor(reference CameraAttributesPhysical) RefCameraAttributesPhysical {
	return newTypedRefGDExtensionIternalConstructor[CameraAttributesPhysical](reference)
}

var _ RefCameraAttributesPractical = &RefCameraAttributesPracticalImpl{}
var _ Ref = &RefCameraAttributesPracticalImpl{}

type RefCameraAttributesPractical interface {
	Ref
	TypedPtr() CameraAttributesPractical
}

type RefCameraAttributesPracticalImpl TypedRef[CameraAttributesPractical]

func (r *RefCameraAttributesPracticalImpl) Ptr() RefCounted {
	rg := (*TypedRef[CameraAttributesPractical])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCameraAttributesPracticalImpl) TypedPtr() CameraAttributesPractical {
	rg := (*TypedRef[CameraAttributesPractical])(r)
	return rg.TypedPtr()
}

func (r *RefCameraAttributesPracticalImpl) Ref(from Ref) {
	rg := (*TypedRef[CameraAttributesPractical])(r)
	rg.Ref(from)
}

func (r *RefCameraAttributesPracticalImpl) TypedRef(from *RefCameraAttributesPracticalImpl) {
	rg := (*TypedRef[CameraAttributesPractical])(r)
	t := (*TypedRef[CameraAttributesPractical])(from)
	rg.TypedRef((*TypedRef[CameraAttributesPractical])(t))
}

func (r *RefCameraAttributesPracticalImpl) Unref() {
	rg := (*TypedRef[CameraAttributesPractical])(r)
	rg.Unref()
}

func (r *RefCameraAttributesPracticalImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCameraAttributesPractical(reference CameraAttributesPractical) RefCameraAttributesPractical {
	return (RefCameraAttributesPractical)(NewTypedRef[CameraAttributesPractical](reference))
}

func newRefCameraAttributesPracticalAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CameraAttributesPractical](reference.(CameraAttributesPractical)))
}

func newRefCameraAttributesPracticalGDExtensionIternalConstructor(reference CameraAttributesPractical) RefCameraAttributesPractical {
	return newTypedRefGDExtensionIternalConstructor[CameraAttributesPractical](reference)
}

var _ RefCameraFeed = &RefCameraFeedImpl{}
var _ Ref = &RefCameraFeedImpl{}

type RefCameraFeed interface {
	Ref
	TypedPtr() CameraFeed
}

type RefCameraFeedImpl TypedRef[CameraFeed]

func (r *RefCameraFeedImpl) Ptr() RefCounted {
	rg := (*TypedRef[CameraFeed])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCameraFeedImpl) TypedPtr() CameraFeed {
	rg := (*TypedRef[CameraFeed])(r)
	return rg.TypedPtr()
}

func (r *RefCameraFeedImpl) Ref(from Ref) {
	rg := (*TypedRef[CameraFeed])(r)
	rg.Ref(from)
}

func (r *RefCameraFeedImpl) TypedRef(from *RefCameraFeedImpl) {
	rg := (*TypedRef[CameraFeed])(r)
	t := (*TypedRef[CameraFeed])(from)
	rg.TypedRef((*TypedRef[CameraFeed])(t))
}

func (r *RefCameraFeedImpl) Unref() {
	rg := (*TypedRef[CameraFeed])(r)
	rg.Unref()
}

func (r *RefCameraFeedImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCameraFeed(reference CameraFeed) RefCameraFeed {
	return (RefCameraFeed)(NewTypedRef[CameraFeed](reference))
}

func newRefCameraFeedAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CameraFeed](reference.(CameraFeed)))
}

func newRefCameraFeedGDExtensionIternalConstructor(reference CameraFeed) RefCameraFeed {
	return newTypedRefGDExtensionIternalConstructor[CameraFeed](reference)
}

var _ RefCameraTexture = &RefCameraTextureImpl{}
var _ Ref = &RefCameraTextureImpl{}

type RefCameraTexture interface {
	Ref
	TypedPtr() CameraTexture
}

type RefCameraTextureImpl TypedRef[CameraTexture]

func (r *RefCameraTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[CameraTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCameraTextureImpl) TypedPtr() CameraTexture {
	rg := (*TypedRef[CameraTexture])(r)
	return rg.TypedPtr()
}

func (r *RefCameraTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[CameraTexture])(r)
	rg.Ref(from)
}

func (r *RefCameraTextureImpl) TypedRef(from *RefCameraTextureImpl) {
	rg := (*TypedRef[CameraTexture])(r)
	t := (*TypedRef[CameraTexture])(from)
	rg.TypedRef((*TypedRef[CameraTexture])(t))
}

func (r *RefCameraTextureImpl) Unref() {
	rg := (*TypedRef[CameraTexture])(r)
	rg.Unref()
}

func (r *RefCameraTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCameraTexture(reference CameraTexture) RefCameraTexture {
	return (RefCameraTexture)(NewTypedRef[CameraTexture](reference))
}

func newRefCameraTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CameraTexture](reference.(CameraTexture)))
}

func newRefCameraTextureGDExtensionIternalConstructor(reference CameraTexture) RefCameraTexture {
	return newTypedRefGDExtensionIternalConstructor[CameraTexture](reference)
}

var _ RefCanvasItemMaterial = &RefCanvasItemMaterialImpl{}
var _ Ref = &RefCanvasItemMaterialImpl{}

type RefCanvasItemMaterial interface {
	Ref
	TypedPtr() CanvasItemMaterial
}

type RefCanvasItemMaterialImpl TypedRef[CanvasItemMaterial]

func (r *RefCanvasItemMaterialImpl) Ptr() RefCounted {
	rg := (*TypedRef[CanvasItemMaterial])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCanvasItemMaterialImpl) TypedPtr() CanvasItemMaterial {
	rg := (*TypedRef[CanvasItemMaterial])(r)
	return rg.TypedPtr()
}

func (r *RefCanvasItemMaterialImpl) Ref(from Ref) {
	rg := (*TypedRef[CanvasItemMaterial])(r)
	rg.Ref(from)
}

func (r *RefCanvasItemMaterialImpl) TypedRef(from *RefCanvasItemMaterialImpl) {
	rg := (*TypedRef[CanvasItemMaterial])(r)
	t := (*TypedRef[CanvasItemMaterial])(from)
	rg.TypedRef((*TypedRef[CanvasItemMaterial])(t))
}

func (r *RefCanvasItemMaterialImpl) Unref() {
	rg := (*TypedRef[CanvasItemMaterial])(r)
	rg.Unref()
}

func (r *RefCanvasItemMaterialImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCanvasItemMaterial(reference CanvasItemMaterial) RefCanvasItemMaterial {
	return (RefCanvasItemMaterial)(NewTypedRef[CanvasItemMaterial](reference))
}

func newRefCanvasItemMaterialAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CanvasItemMaterial](reference.(CanvasItemMaterial)))
}

func newRefCanvasItemMaterialGDExtensionIternalConstructor(reference CanvasItemMaterial) RefCanvasItemMaterial {
	return newTypedRefGDExtensionIternalConstructor[CanvasItemMaterial](reference)
}

var _ RefCanvasTexture = &RefCanvasTextureImpl{}
var _ Ref = &RefCanvasTextureImpl{}

type RefCanvasTexture interface {
	Ref
	TypedPtr() CanvasTexture
}

type RefCanvasTextureImpl TypedRef[CanvasTexture]

func (r *RefCanvasTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[CanvasTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCanvasTextureImpl) TypedPtr() CanvasTexture {
	rg := (*TypedRef[CanvasTexture])(r)
	return rg.TypedPtr()
}

func (r *RefCanvasTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[CanvasTexture])(r)
	rg.Ref(from)
}

func (r *RefCanvasTextureImpl) TypedRef(from *RefCanvasTextureImpl) {
	rg := (*TypedRef[CanvasTexture])(r)
	t := (*TypedRef[CanvasTexture])(from)
	rg.TypedRef((*TypedRef[CanvasTexture])(t))
}

func (r *RefCanvasTextureImpl) Unref() {
	rg := (*TypedRef[CanvasTexture])(r)
	rg.Unref()
}

func (r *RefCanvasTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCanvasTexture(reference CanvasTexture) RefCanvasTexture {
	return (RefCanvasTexture)(NewTypedRef[CanvasTexture](reference))
}

func newRefCanvasTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CanvasTexture](reference.(CanvasTexture)))
}

func newRefCanvasTextureGDExtensionIternalConstructor(reference CanvasTexture) RefCanvasTexture {
	return newTypedRefGDExtensionIternalConstructor[CanvasTexture](reference)
}

var _ RefCapsuleMesh = &RefCapsuleMeshImpl{}
var _ Ref = &RefCapsuleMeshImpl{}

type RefCapsuleMesh interface {
	Ref
	TypedPtr() CapsuleMesh
}

type RefCapsuleMeshImpl TypedRef[CapsuleMesh]

func (r *RefCapsuleMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[CapsuleMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCapsuleMeshImpl) TypedPtr() CapsuleMesh {
	rg := (*TypedRef[CapsuleMesh])(r)
	return rg.TypedPtr()
}

func (r *RefCapsuleMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[CapsuleMesh])(r)
	rg.Ref(from)
}

func (r *RefCapsuleMeshImpl) TypedRef(from *RefCapsuleMeshImpl) {
	rg := (*TypedRef[CapsuleMesh])(r)
	t := (*TypedRef[CapsuleMesh])(from)
	rg.TypedRef((*TypedRef[CapsuleMesh])(t))
}

func (r *RefCapsuleMeshImpl) Unref() {
	rg := (*TypedRef[CapsuleMesh])(r)
	rg.Unref()
}

func (r *RefCapsuleMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCapsuleMesh(reference CapsuleMesh) RefCapsuleMesh {
	return (RefCapsuleMesh)(NewTypedRef[CapsuleMesh](reference))
}

func newRefCapsuleMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CapsuleMesh](reference.(CapsuleMesh)))
}

func newRefCapsuleMeshGDExtensionIternalConstructor(reference CapsuleMesh) RefCapsuleMesh {
	return newTypedRefGDExtensionIternalConstructor[CapsuleMesh](reference)
}

var _ RefCapsuleShape2D = &RefCapsuleShape2DImpl{}
var _ Ref = &RefCapsuleShape2DImpl{}

type RefCapsuleShape2D interface {
	Ref
	TypedPtr() CapsuleShape2D
}

type RefCapsuleShape2DImpl TypedRef[CapsuleShape2D]

func (r *RefCapsuleShape2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[CapsuleShape2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCapsuleShape2DImpl) TypedPtr() CapsuleShape2D {
	rg := (*TypedRef[CapsuleShape2D])(r)
	return rg.TypedPtr()
}

func (r *RefCapsuleShape2DImpl) Ref(from Ref) {
	rg := (*TypedRef[CapsuleShape2D])(r)
	rg.Ref(from)
}

func (r *RefCapsuleShape2DImpl) TypedRef(from *RefCapsuleShape2DImpl) {
	rg := (*TypedRef[CapsuleShape2D])(r)
	t := (*TypedRef[CapsuleShape2D])(from)
	rg.TypedRef((*TypedRef[CapsuleShape2D])(t))
}

func (r *RefCapsuleShape2DImpl) Unref() {
	rg := (*TypedRef[CapsuleShape2D])(r)
	rg.Unref()
}

func (r *RefCapsuleShape2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCapsuleShape2D(reference CapsuleShape2D) RefCapsuleShape2D {
	return (RefCapsuleShape2D)(NewTypedRef[CapsuleShape2D](reference))
}

func newRefCapsuleShape2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CapsuleShape2D](reference.(CapsuleShape2D)))
}

func newRefCapsuleShape2DGDExtensionIternalConstructor(reference CapsuleShape2D) RefCapsuleShape2D {
	return newTypedRefGDExtensionIternalConstructor[CapsuleShape2D](reference)
}

var _ RefCapsuleShape3D = &RefCapsuleShape3DImpl{}
var _ Ref = &RefCapsuleShape3DImpl{}

type RefCapsuleShape3D interface {
	Ref
	TypedPtr() CapsuleShape3D
}

type RefCapsuleShape3DImpl TypedRef[CapsuleShape3D]

func (r *RefCapsuleShape3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[CapsuleShape3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCapsuleShape3DImpl) TypedPtr() CapsuleShape3D {
	rg := (*TypedRef[CapsuleShape3D])(r)
	return rg.TypedPtr()
}

func (r *RefCapsuleShape3DImpl) Ref(from Ref) {
	rg := (*TypedRef[CapsuleShape3D])(r)
	rg.Ref(from)
}

func (r *RefCapsuleShape3DImpl) TypedRef(from *RefCapsuleShape3DImpl) {
	rg := (*TypedRef[CapsuleShape3D])(r)
	t := (*TypedRef[CapsuleShape3D])(from)
	rg.TypedRef((*TypedRef[CapsuleShape3D])(t))
}

func (r *RefCapsuleShape3DImpl) Unref() {
	rg := (*TypedRef[CapsuleShape3D])(r)
	rg.Unref()
}

func (r *RefCapsuleShape3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCapsuleShape3D(reference CapsuleShape3D) RefCapsuleShape3D {
	return (RefCapsuleShape3D)(NewTypedRef[CapsuleShape3D](reference))
}

func newRefCapsuleShape3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CapsuleShape3D](reference.(CapsuleShape3D)))
}

func newRefCapsuleShape3DGDExtensionIternalConstructor(reference CapsuleShape3D) RefCapsuleShape3D {
	return newTypedRefGDExtensionIternalConstructor[CapsuleShape3D](reference)
}

var _ RefCharFXTransform = &RefCharFXTransformImpl{}
var _ Ref = &RefCharFXTransformImpl{}

type RefCharFXTransform interface {
	Ref
	TypedPtr() CharFXTransform
}

type RefCharFXTransformImpl TypedRef[CharFXTransform]

func (r *RefCharFXTransformImpl) Ptr() RefCounted {
	rg := (*TypedRef[CharFXTransform])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCharFXTransformImpl) TypedPtr() CharFXTransform {
	rg := (*TypedRef[CharFXTransform])(r)
	return rg.TypedPtr()
}

func (r *RefCharFXTransformImpl) Ref(from Ref) {
	rg := (*TypedRef[CharFXTransform])(r)
	rg.Ref(from)
}

func (r *RefCharFXTransformImpl) TypedRef(from *RefCharFXTransformImpl) {
	rg := (*TypedRef[CharFXTransform])(r)
	t := (*TypedRef[CharFXTransform])(from)
	rg.TypedRef((*TypedRef[CharFXTransform])(t))
}

func (r *RefCharFXTransformImpl) Unref() {
	rg := (*TypedRef[CharFXTransform])(r)
	rg.Unref()
}

func (r *RefCharFXTransformImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCharFXTransform(reference CharFXTransform) RefCharFXTransform {
	return (RefCharFXTransform)(NewTypedRef[CharFXTransform](reference))
}

func newRefCharFXTransformAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CharFXTransform](reference.(CharFXTransform)))
}

func newRefCharFXTransformGDExtensionIternalConstructor(reference CharFXTransform) RefCharFXTransform {
	return newTypedRefGDExtensionIternalConstructor[CharFXTransform](reference)
}

var _ RefCircleShape2D = &RefCircleShape2DImpl{}
var _ Ref = &RefCircleShape2DImpl{}

type RefCircleShape2D interface {
	Ref
	TypedPtr() CircleShape2D
}

type RefCircleShape2DImpl TypedRef[CircleShape2D]

func (r *RefCircleShape2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[CircleShape2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCircleShape2DImpl) TypedPtr() CircleShape2D {
	rg := (*TypedRef[CircleShape2D])(r)
	return rg.TypedPtr()
}

func (r *RefCircleShape2DImpl) Ref(from Ref) {
	rg := (*TypedRef[CircleShape2D])(r)
	rg.Ref(from)
}

func (r *RefCircleShape2DImpl) TypedRef(from *RefCircleShape2DImpl) {
	rg := (*TypedRef[CircleShape2D])(r)
	t := (*TypedRef[CircleShape2D])(from)
	rg.TypedRef((*TypedRef[CircleShape2D])(t))
}

func (r *RefCircleShape2DImpl) Unref() {
	rg := (*TypedRef[CircleShape2D])(r)
	rg.Unref()
}

func (r *RefCircleShape2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCircleShape2D(reference CircleShape2D) RefCircleShape2D {
	return (RefCircleShape2D)(NewTypedRef[CircleShape2D](reference))
}

func newRefCircleShape2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CircleShape2D](reference.(CircleShape2D)))
}

func newRefCircleShape2DGDExtensionIternalConstructor(reference CircleShape2D) RefCircleShape2D {
	return newTypedRefGDExtensionIternalConstructor[CircleShape2D](reference)
}

var _ RefCodeHighlighter = &RefCodeHighlighterImpl{}
var _ Ref = &RefCodeHighlighterImpl{}

type RefCodeHighlighter interface {
	Ref
	TypedPtr() CodeHighlighter
}

type RefCodeHighlighterImpl TypedRef[CodeHighlighter]

func (r *RefCodeHighlighterImpl) Ptr() RefCounted {
	rg := (*TypedRef[CodeHighlighter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCodeHighlighterImpl) TypedPtr() CodeHighlighter {
	rg := (*TypedRef[CodeHighlighter])(r)
	return rg.TypedPtr()
}

func (r *RefCodeHighlighterImpl) Ref(from Ref) {
	rg := (*TypedRef[CodeHighlighter])(r)
	rg.Ref(from)
}

func (r *RefCodeHighlighterImpl) TypedRef(from *RefCodeHighlighterImpl) {
	rg := (*TypedRef[CodeHighlighter])(r)
	t := (*TypedRef[CodeHighlighter])(from)
	rg.TypedRef((*TypedRef[CodeHighlighter])(t))
}

func (r *RefCodeHighlighterImpl) Unref() {
	rg := (*TypedRef[CodeHighlighter])(r)
	rg.Unref()
}

func (r *RefCodeHighlighterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCodeHighlighter(reference CodeHighlighter) RefCodeHighlighter {
	return (RefCodeHighlighter)(NewTypedRef[CodeHighlighter](reference))
}

func newRefCodeHighlighterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CodeHighlighter](reference.(CodeHighlighter)))
}

func newRefCodeHighlighterGDExtensionIternalConstructor(reference CodeHighlighter) RefCodeHighlighter {
	return newTypedRefGDExtensionIternalConstructor[CodeHighlighter](reference)
}

var _ RefCompressedCubemap = &RefCompressedCubemapImpl{}
var _ Ref = &RefCompressedCubemapImpl{}

type RefCompressedCubemap interface {
	Ref
	TypedPtr() CompressedCubemap
}

type RefCompressedCubemapImpl TypedRef[CompressedCubemap]

func (r *RefCompressedCubemapImpl) Ptr() RefCounted {
	rg := (*TypedRef[CompressedCubemap])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCompressedCubemapImpl) TypedPtr() CompressedCubemap {
	rg := (*TypedRef[CompressedCubemap])(r)
	return rg.TypedPtr()
}

func (r *RefCompressedCubemapImpl) Ref(from Ref) {
	rg := (*TypedRef[CompressedCubemap])(r)
	rg.Ref(from)
}

func (r *RefCompressedCubemapImpl) TypedRef(from *RefCompressedCubemapImpl) {
	rg := (*TypedRef[CompressedCubemap])(r)
	t := (*TypedRef[CompressedCubemap])(from)
	rg.TypedRef((*TypedRef[CompressedCubemap])(t))
}

func (r *RefCompressedCubemapImpl) Unref() {
	rg := (*TypedRef[CompressedCubemap])(r)
	rg.Unref()
}

func (r *RefCompressedCubemapImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCompressedCubemap(reference CompressedCubemap) RefCompressedCubemap {
	return (RefCompressedCubemap)(NewTypedRef[CompressedCubemap](reference))
}

func newRefCompressedCubemapAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CompressedCubemap](reference.(CompressedCubemap)))
}

func newRefCompressedCubemapGDExtensionIternalConstructor(reference CompressedCubemap) RefCompressedCubemap {
	return newTypedRefGDExtensionIternalConstructor[CompressedCubemap](reference)
}

var _ RefCompressedCubemapArray = &RefCompressedCubemapArrayImpl{}
var _ Ref = &RefCompressedCubemapArrayImpl{}

type RefCompressedCubemapArray interface {
	Ref
	TypedPtr() CompressedCubemapArray
}

type RefCompressedCubemapArrayImpl TypedRef[CompressedCubemapArray]

func (r *RefCompressedCubemapArrayImpl) Ptr() RefCounted {
	rg := (*TypedRef[CompressedCubemapArray])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCompressedCubemapArrayImpl) TypedPtr() CompressedCubemapArray {
	rg := (*TypedRef[CompressedCubemapArray])(r)
	return rg.TypedPtr()
}

func (r *RefCompressedCubemapArrayImpl) Ref(from Ref) {
	rg := (*TypedRef[CompressedCubemapArray])(r)
	rg.Ref(from)
}

func (r *RefCompressedCubemapArrayImpl) TypedRef(from *RefCompressedCubemapArrayImpl) {
	rg := (*TypedRef[CompressedCubemapArray])(r)
	t := (*TypedRef[CompressedCubemapArray])(from)
	rg.TypedRef((*TypedRef[CompressedCubemapArray])(t))
}

func (r *RefCompressedCubemapArrayImpl) Unref() {
	rg := (*TypedRef[CompressedCubemapArray])(r)
	rg.Unref()
}

func (r *RefCompressedCubemapArrayImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCompressedCubemapArray(reference CompressedCubemapArray) RefCompressedCubemapArray {
	return (RefCompressedCubemapArray)(NewTypedRef[CompressedCubemapArray](reference))
}

func newRefCompressedCubemapArrayAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CompressedCubemapArray](reference.(CompressedCubemapArray)))
}

func newRefCompressedCubemapArrayGDExtensionIternalConstructor(reference CompressedCubemapArray) RefCompressedCubemapArray {
	return newTypedRefGDExtensionIternalConstructor[CompressedCubemapArray](reference)
}

var _ RefCompressedTexture2D = &RefCompressedTexture2DImpl{}
var _ Ref = &RefCompressedTexture2DImpl{}

type RefCompressedTexture2D interface {
	Ref
	TypedPtr() CompressedTexture2D
}

type RefCompressedTexture2DImpl TypedRef[CompressedTexture2D]

func (r *RefCompressedTexture2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[CompressedTexture2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCompressedTexture2DImpl) TypedPtr() CompressedTexture2D {
	rg := (*TypedRef[CompressedTexture2D])(r)
	return rg.TypedPtr()
}

func (r *RefCompressedTexture2DImpl) Ref(from Ref) {
	rg := (*TypedRef[CompressedTexture2D])(r)
	rg.Ref(from)
}

func (r *RefCompressedTexture2DImpl) TypedRef(from *RefCompressedTexture2DImpl) {
	rg := (*TypedRef[CompressedTexture2D])(r)
	t := (*TypedRef[CompressedTexture2D])(from)
	rg.TypedRef((*TypedRef[CompressedTexture2D])(t))
}

func (r *RefCompressedTexture2DImpl) Unref() {
	rg := (*TypedRef[CompressedTexture2D])(r)
	rg.Unref()
}

func (r *RefCompressedTexture2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCompressedTexture2D(reference CompressedTexture2D) RefCompressedTexture2D {
	return (RefCompressedTexture2D)(NewTypedRef[CompressedTexture2D](reference))
}

func newRefCompressedTexture2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CompressedTexture2D](reference.(CompressedTexture2D)))
}

func newRefCompressedTexture2DGDExtensionIternalConstructor(reference CompressedTexture2D) RefCompressedTexture2D {
	return newTypedRefGDExtensionIternalConstructor[CompressedTexture2D](reference)
}

var _ RefCompressedTexture2DArray = &RefCompressedTexture2DArrayImpl{}
var _ Ref = &RefCompressedTexture2DArrayImpl{}

type RefCompressedTexture2DArray interface {
	Ref
	TypedPtr() CompressedTexture2DArray
}

type RefCompressedTexture2DArrayImpl TypedRef[CompressedTexture2DArray]

func (r *RefCompressedTexture2DArrayImpl) Ptr() RefCounted {
	rg := (*TypedRef[CompressedTexture2DArray])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCompressedTexture2DArrayImpl) TypedPtr() CompressedTexture2DArray {
	rg := (*TypedRef[CompressedTexture2DArray])(r)
	return rg.TypedPtr()
}

func (r *RefCompressedTexture2DArrayImpl) Ref(from Ref) {
	rg := (*TypedRef[CompressedTexture2DArray])(r)
	rg.Ref(from)
}

func (r *RefCompressedTexture2DArrayImpl) TypedRef(from *RefCompressedTexture2DArrayImpl) {
	rg := (*TypedRef[CompressedTexture2DArray])(r)
	t := (*TypedRef[CompressedTexture2DArray])(from)
	rg.TypedRef((*TypedRef[CompressedTexture2DArray])(t))
}

func (r *RefCompressedTexture2DArrayImpl) Unref() {
	rg := (*TypedRef[CompressedTexture2DArray])(r)
	rg.Unref()
}

func (r *RefCompressedTexture2DArrayImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCompressedTexture2DArray(reference CompressedTexture2DArray) RefCompressedTexture2DArray {
	return (RefCompressedTexture2DArray)(NewTypedRef[CompressedTexture2DArray](reference))
}

func newRefCompressedTexture2DArrayAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CompressedTexture2DArray](reference.(CompressedTexture2DArray)))
}

func newRefCompressedTexture2DArrayGDExtensionIternalConstructor(reference CompressedTexture2DArray) RefCompressedTexture2DArray {
	return newTypedRefGDExtensionIternalConstructor[CompressedTexture2DArray](reference)
}

var _ RefCompressedTexture3D = &RefCompressedTexture3DImpl{}
var _ Ref = &RefCompressedTexture3DImpl{}

type RefCompressedTexture3D interface {
	Ref
	TypedPtr() CompressedTexture3D
}

type RefCompressedTexture3DImpl TypedRef[CompressedTexture3D]

func (r *RefCompressedTexture3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[CompressedTexture3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCompressedTexture3DImpl) TypedPtr() CompressedTexture3D {
	rg := (*TypedRef[CompressedTexture3D])(r)
	return rg.TypedPtr()
}

func (r *RefCompressedTexture3DImpl) Ref(from Ref) {
	rg := (*TypedRef[CompressedTexture3D])(r)
	rg.Ref(from)
}

func (r *RefCompressedTexture3DImpl) TypedRef(from *RefCompressedTexture3DImpl) {
	rg := (*TypedRef[CompressedTexture3D])(r)
	t := (*TypedRef[CompressedTexture3D])(from)
	rg.TypedRef((*TypedRef[CompressedTexture3D])(t))
}

func (r *RefCompressedTexture3DImpl) Unref() {
	rg := (*TypedRef[CompressedTexture3D])(r)
	rg.Unref()
}

func (r *RefCompressedTexture3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCompressedTexture3D(reference CompressedTexture3D) RefCompressedTexture3D {
	return (RefCompressedTexture3D)(NewTypedRef[CompressedTexture3D](reference))
}

func newRefCompressedTexture3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CompressedTexture3D](reference.(CompressedTexture3D)))
}

func newRefCompressedTexture3DGDExtensionIternalConstructor(reference CompressedTexture3D) RefCompressedTexture3D {
	return newTypedRefGDExtensionIternalConstructor[CompressedTexture3D](reference)
}

var _ RefCompressedTextureLayered = &RefCompressedTextureLayeredImpl{}
var _ Ref = &RefCompressedTextureLayeredImpl{}

type RefCompressedTextureLayered interface {
	Ref
	TypedPtr() CompressedTextureLayered
}

type RefCompressedTextureLayeredImpl TypedRef[CompressedTextureLayered]

func (r *RefCompressedTextureLayeredImpl) Ptr() RefCounted {
	rg := (*TypedRef[CompressedTextureLayered])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCompressedTextureLayeredImpl) TypedPtr() CompressedTextureLayered {
	rg := (*TypedRef[CompressedTextureLayered])(r)
	return rg.TypedPtr()
}

func (r *RefCompressedTextureLayeredImpl) Ref(from Ref) {
	rg := (*TypedRef[CompressedTextureLayered])(r)
	rg.Ref(from)
}

func (r *RefCompressedTextureLayeredImpl) TypedRef(from *RefCompressedTextureLayeredImpl) {
	rg := (*TypedRef[CompressedTextureLayered])(r)
	t := (*TypedRef[CompressedTextureLayered])(from)
	rg.TypedRef((*TypedRef[CompressedTextureLayered])(t))
}

func (r *RefCompressedTextureLayeredImpl) Unref() {
	rg := (*TypedRef[CompressedTextureLayered])(r)
	rg.Unref()
}

func (r *RefCompressedTextureLayeredImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCompressedTextureLayered(reference CompressedTextureLayered) RefCompressedTextureLayered {
	return (RefCompressedTextureLayered)(NewTypedRef[CompressedTextureLayered](reference))
}

func newRefCompressedTextureLayeredAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CompressedTextureLayered](reference.(CompressedTextureLayered)))
}

func newRefCompressedTextureLayeredGDExtensionIternalConstructor(reference CompressedTextureLayered) RefCompressedTextureLayered {
	return newTypedRefGDExtensionIternalConstructor[CompressedTextureLayered](reference)
}

var _ RefConcavePolygonShape2D = &RefConcavePolygonShape2DImpl{}
var _ Ref = &RefConcavePolygonShape2DImpl{}

type RefConcavePolygonShape2D interface {
	Ref
	TypedPtr() ConcavePolygonShape2D
}

type RefConcavePolygonShape2DImpl TypedRef[ConcavePolygonShape2D]

func (r *RefConcavePolygonShape2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[ConcavePolygonShape2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefConcavePolygonShape2DImpl) TypedPtr() ConcavePolygonShape2D {
	rg := (*TypedRef[ConcavePolygonShape2D])(r)
	return rg.TypedPtr()
}

func (r *RefConcavePolygonShape2DImpl) Ref(from Ref) {
	rg := (*TypedRef[ConcavePolygonShape2D])(r)
	rg.Ref(from)
}

func (r *RefConcavePolygonShape2DImpl) TypedRef(from *RefConcavePolygonShape2DImpl) {
	rg := (*TypedRef[ConcavePolygonShape2D])(r)
	t := (*TypedRef[ConcavePolygonShape2D])(from)
	rg.TypedRef((*TypedRef[ConcavePolygonShape2D])(t))
}

func (r *RefConcavePolygonShape2DImpl) Unref() {
	rg := (*TypedRef[ConcavePolygonShape2D])(r)
	rg.Unref()
}

func (r *RefConcavePolygonShape2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefConcavePolygonShape2D(reference ConcavePolygonShape2D) RefConcavePolygonShape2D {
	return (RefConcavePolygonShape2D)(NewTypedRef[ConcavePolygonShape2D](reference))
}

func newRefConcavePolygonShape2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ConcavePolygonShape2D](reference.(ConcavePolygonShape2D)))
}

func newRefConcavePolygonShape2DGDExtensionIternalConstructor(reference ConcavePolygonShape2D) RefConcavePolygonShape2D {
	return newTypedRefGDExtensionIternalConstructor[ConcavePolygonShape2D](reference)
}

var _ RefConcavePolygonShape3D = &RefConcavePolygonShape3DImpl{}
var _ Ref = &RefConcavePolygonShape3DImpl{}

type RefConcavePolygonShape3D interface {
	Ref
	TypedPtr() ConcavePolygonShape3D
}

type RefConcavePolygonShape3DImpl TypedRef[ConcavePolygonShape3D]

func (r *RefConcavePolygonShape3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[ConcavePolygonShape3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefConcavePolygonShape3DImpl) TypedPtr() ConcavePolygonShape3D {
	rg := (*TypedRef[ConcavePolygonShape3D])(r)
	return rg.TypedPtr()
}

func (r *RefConcavePolygonShape3DImpl) Ref(from Ref) {
	rg := (*TypedRef[ConcavePolygonShape3D])(r)
	rg.Ref(from)
}

func (r *RefConcavePolygonShape3DImpl) TypedRef(from *RefConcavePolygonShape3DImpl) {
	rg := (*TypedRef[ConcavePolygonShape3D])(r)
	t := (*TypedRef[ConcavePolygonShape3D])(from)
	rg.TypedRef((*TypedRef[ConcavePolygonShape3D])(t))
}

func (r *RefConcavePolygonShape3DImpl) Unref() {
	rg := (*TypedRef[ConcavePolygonShape3D])(r)
	rg.Unref()
}

func (r *RefConcavePolygonShape3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefConcavePolygonShape3D(reference ConcavePolygonShape3D) RefConcavePolygonShape3D {
	return (RefConcavePolygonShape3D)(NewTypedRef[ConcavePolygonShape3D](reference))
}

func newRefConcavePolygonShape3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ConcavePolygonShape3D](reference.(ConcavePolygonShape3D)))
}

func newRefConcavePolygonShape3DGDExtensionIternalConstructor(reference ConcavePolygonShape3D) RefConcavePolygonShape3D {
	return newTypedRefGDExtensionIternalConstructor[ConcavePolygonShape3D](reference)
}

var _ RefConfigFile = &RefConfigFileImpl{}
var _ Ref = &RefConfigFileImpl{}

type RefConfigFile interface {
	Ref
	TypedPtr() ConfigFile
}

type RefConfigFileImpl TypedRef[ConfigFile]

func (r *RefConfigFileImpl) Ptr() RefCounted {
	rg := (*TypedRef[ConfigFile])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefConfigFileImpl) TypedPtr() ConfigFile {
	rg := (*TypedRef[ConfigFile])(r)
	return rg.TypedPtr()
}

func (r *RefConfigFileImpl) Ref(from Ref) {
	rg := (*TypedRef[ConfigFile])(r)
	rg.Ref(from)
}

func (r *RefConfigFileImpl) TypedRef(from *RefConfigFileImpl) {
	rg := (*TypedRef[ConfigFile])(r)
	t := (*TypedRef[ConfigFile])(from)
	rg.TypedRef((*TypedRef[ConfigFile])(t))
}

func (r *RefConfigFileImpl) Unref() {
	rg := (*TypedRef[ConfigFile])(r)
	rg.Unref()
}

func (r *RefConfigFileImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefConfigFile(reference ConfigFile) RefConfigFile {
	return (RefConfigFile)(NewTypedRef[ConfigFile](reference))
}

func newRefConfigFileAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ConfigFile](reference.(ConfigFile)))
}

func newRefConfigFileGDExtensionIternalConstructor(reference ConfigFile) RefConfigFile {
	return newTypedRefGDExtensionIternalConstructor[ConfigFile](reference)
}

var _ RefConvexPolygonShape2D = &RefConvexPolygonShape2DImpl{}
var _ Ref = &RefConvexPolygonShape2DImpl{}

type RefConvexPolygonShape2D interface {
	Ref
	TypedPtr() ConvexPolygonShape2D
}

type RefConvexPolygonShape2DImpl TypedRef[ConvexPolygonShape2D]

func (r *RefConvexPolygonShape2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[ConvexPolygonShape2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefConvexPolygonShape2DImpl) TypedPtr() ConvexPolygonShape2D {
	rg := (*TypedRef[ConvexPolygonShape2D])(r)
	return rg.TypedPtr()
}

func (r *RefConvexPolygonShape2DImpl) Ref(from Ref) {
	rg := (*TypedRef[ConvexPolygonShape2D])(r)
	rg.Ref(from)
}

func (r *RefConvexPolygonShape2DImpl) TypedRef(from *RefConvexPolygonShape2DImpl) {
	rg := (*TypedRef[ConvexPolygonShape2D])(r)
	t := (*TypedRef[ConvexPolygonShape2D])(from)
	rg.TypedRef((*TypedRef[ConvexPolygonShape2D])(t))
}

func (r *RefConvexPolygonShape2DImpl) Unref() {
	rg := (*TypedRef[ConvexPolygonShape2D])(r)
	rg.Unref()
}

func (r *RefConvexPolygonShape2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefConvexPolygonShape2D(reference ConvexPolygonShape2D) RefConvexPolygonShape2D {
	return (RefConvexPolygonShape2D)(NewTypedRef[ConvexPolygonShape2D](reference))
}

func newRefConvexPolygonShape2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ConvexPolygonShape2D](reference.(ConvexPolygonShape2D)))
}

func newRefConvexPolygonShape2DGDExtensionIternalConstructor(reference ConvexPolygonShape2D) RefConvexPolygonShape2D {
	return newTypedRefGDExtensionIternalConstructor[ConvexPolygonShape2D](reference)
}

var _ RefConvexPolygonShape3D = &RefConvexPolygonShape3DImpl{}
var _ Ref = &RefConvexPolygonShape3DImpl{}

type RefConvexPolygonShape3D interface {
	Ref
	TypedPtr() ConvexPolygonShape3D
}

type RefConvexPolygonShape3DImpl TypedRef[ConvexPolygonShape3D]

func (r *RefConvexPolygonShape3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[ConvexPolygonShape3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefConvexPolygonShape3DImpl) TypedPtr() ConvexPolygonShape3D {
	rg := (*TypedRef[ConvexPolygonShape3D])(r)
	return rg.TypedPtr()
}

func (r *RefConvexPolygonShape3DImpl) Ref(from Ref) {
	rg := (*TypedRef[ConvexPolygonShape3D])(r)
	rg.Ref(from)
}

func (r *RefConvexPolygonShape3DImpl) TypedRef(from *RefConvexPolygonShape3DImpl) {
	rg := (*TypedRef[ConvexPolygonShape3D])(r)
	t := (*TypedRef[ConvexPolygonShape3D])(from)
	rg.TypedRef((*TypedRef[ConvexPolygonShape3D])(t))
}

func (r *RefConvexPolygonShape3DImpl) Unref() {
	rg := (*TypedRef[ConvexPolygonShape3D])(r)
	rg.Unref()
}

func (r *RefConvexPolygonShape3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefConvexPolygonShape3D(reference ConvexPolygonShape3D) RefConvexPolygonShape3D {
	return (RefConvexPolygonShape3D)(NewTypedRef[ConvexPolygonShape3D](reference))
}

func newRefConvexPolygonShape3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ConvexPolygonShape3D](reference.(ConvexPolygonShape3D)))
}

func newRefConvexPolygonShape3DGDExtensionIternalConstructor(reference ConvexPolygonShape3D) RefConvexPolygonShape3D {
	return newTypedRefGDExtensionIternalConstructor[ConvexPolygonShape3D](reference)
}

var _ RefCrypto = &RefCryptoImpl{}
var _ Ref = &RefCryptoImpl{}

type RefCrypto interface {
	Ref
	TypedPtr() Crypto
}

type RefCryptoImpl TypedRef[Crypto]

func (r *RefCryptoImpl) Ptr() RefCounted {
	rg := (*TypedRef[Crypto])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCryptoImpl) TypedPtr() Crypto {
	rg := (*TypedRef[Crypto])(r)
	return rg.TypedPtr()
}

func (r *RefCryptoImpl) Ref(from Ref) {
	rg := (*TypedRef[Crypto])(r)
	rg.Ref(from)
}

func (r *RefCryptoImpl) TypedRef(from *RefCryptoImpl) {
	rg := (*TypedRef[Crypto])(r)
	t := (*TypedRef[Crypto])(from)
	rg.TypedRef((*TypedRef[Crypto])(t))
}

func (r *RefCryptoImpl) Unref() {
	rg := (*TypedRef[Crypto])(r)
	rg.Unref()
}

func (r *RefCryptoImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCrypto(reference Crypto) RefCrypto {
	return (RefCrypto)(NewTypedRef[Crypto](reference))
}

func newRefCryptoAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Crypto](reference.(Crypto)))
}

func newRefCryptoGDExtensionIternalConstructor(reference Crypto) RefCrypto {
	return newTypedRefGDExtensionIternalConstructor[Crypto](reference)
}

var _ RefCryptoKey = &RefCryptoKeyImpl{}
var _ Ref = &RefCryptoKeyImpl{}

type RefCryptoKey interface {
	Ref
	TypedPtr() CryptoKey
}

type RefCryptoKeyImpl TypedRef[CryptoKey]

func (r *RefCryptoKeyImpl) Ptr() RefCounted {
	rg := (*TypedRef[CryptoKey])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCryptoKeyImpl) TypedPtr() CryptoKey {
	rg := (*TypedRef[CryptoKey])(r)
	return rg.TypedPtr()
}

func (r *RefCryptoKeyImpl) Ref(from Ref) {
	rg := (*TypedRef[CryptoKey])(r)
	rg.Ref(from)
}

func (r *RefCryptoKeyImpl) TypedRef(from *RefCryptoKeyImpl) {
	rg := (*TypedRef[CryptoKey])(r)
	t := (*TypedRef[CryptoKey])(from)
	rg.TypedRef((*TypedRef[CryptoKey])(t))
}

func (r *RefCryptoKeyImpl) Unref() {
	rg := (*TypedRef[CryptoKey])(r)
	rg.Unref()
}

func (r *RefCryptoKeyImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCryptoKey(reference CryptoKey) RefCryptoKey {
	return (RefCryptoKey)(NewTypedRef[CryptoKey](reference))
}

func newRefCryptoKeyAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CryptoKey](reference.(CryptoKey)))
}

func newRefCryptoKeyGDExtensionIternalConstructor(reference CryptoKey) RefCryptoKey {
	return newTypedRefGDExtensionIternalConstructor[CryptoKey](reference)
}

var _ RefCubemap = &RefCubemapImpl{}
var _ Ref = &RefCubemapImpl{}

type RefCubemap interface {
	Ref
	TypedPtr() Cubemap
}

type RefCubemapImpl TypedRef[Cubemap]

func (r *RefCubemapImpl) Ptr() RefCounted {
	rg := (*TypedRef[Cubemap])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCubemapImpl) TypedPtr() Cubemap {
	rg := (*TypedRef[Cubemap])(r)
	return rg.TypedPtr()
}

func (r *RefCubemapImpl) Ref(from Ref) {
	rg := (*TypedRef[Cubemap])(r)
	rg.Ref(from)
}

func (r *RefCubemapImpl) TypedRef(from *RefCubemapImpl) {
	rg := (*TypedRef[Cubemap])(r)
	t := (*TypedRef[Cubemap])(from)
	rg.TypedRef((*TypedRef[Cubemap])(t))
}

func (r *RefCubemapImpl) Unref() {
	rg := (*TypedRef[Cubemap])(r)
	rg.Unref()
}

func (r *RefCubemapImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCubemap(reference Cubemap) RefCubemap {
	return (RefCubemap)(NewTypedRef[Cubemap](reference))
}

func newRefCubemapAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Cubemap](reference.(Cubemap)))
}

func newRefCubemapGDExtensionIternalConstructor(reference Cubemap) RefCubemap {
	return newTypedRefGDExtensionIternalConstructor[Cubemap](reference)
}

var _ RefCubemapArray = &RefCubemapArrayImpl{}
var _ Ref = &RefCubemapArrayImpl{}

type RefCubemapArray interface {
	Ref
	TypedPtr() CubemapArray
}

type RefCubemapArrayImpl TypedRef[CubemapArray]

func (r *RefCubemapArrayImpl) Ptr() RefCounted {
	rg := (*TypedRef[CubemapArray])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCubemapArrayImpl) TypedPtr() CubemapArray {
	rg := (*TypedRef[CubemapArray])(r)
	return rg.TypedPtr()
}

func (r *RefCubemapArrayImpl) Ref(from Ref) {
	rg := (*TypedRef[CubemapArray])(r)
	rg.Ref(from)
}

func (r *RefCubemapArrayImpl) TypedRef(from *RefCubemapArrayImpl) {
	rg := (*TypedRef[CubemapArray])(r)
	t := (*TypedRef[CubemapArray])(from)
	rg.TypedRef((*TypedRef[CubemapArray])(t))
}

func (r *RefCubemapArrayImpl) Unref() {
	rg := (*TypedRef[CubemapArray])(r)
	rg.Unref()
}

func (r *RefCubemapArrayImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCubemapArray(reference CubemapArray) RefCubemapArray {
	return (RefCubemapArray)(NewTypedRef[CubemapArray](reference))
}

func newRefCubemapArrayAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CubemapArray](reference.(CubemapArray)))
}

func newRefCubemapArrayGDExtensionIternalConstructor(reference CubemapArray) RefCubemapArray {
	return newTypedRefGDExtensionIternalConstructor[CubemapArray](reference)
}

var _ RefCurve = &RefCurveImpl{}
var _ Ref = &RefCurveImpl{}

type RefCurve interface {
	Ref
	TypedPtr() Curve
}

type RefCurveImpl TypedRef[Curve]

func (r *RefCurveImpl) Ptr() RefCounted {
	rg := (*TypedRef[Curve])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCurveImpl) TypedPtr() Curve {
	rg := (*TypedRef[Curve])(r)
	return rg.TypedPtr()
}

func (r *RefCurveImpl) Ref(from Ref) {
	rg := (*TypedRef[Curve])(r)
	rg.Ref(from)
}

func (r *RefCurveImpl) TypedRef(from *RefCurveImpl) {
	rg := (*TypedRef[Curve])(r)
	t := (*TypedRef[Curve])(from)
	rg.TypedRef((*TypedRef[Curve])(t))
}

func (r *RefCurveImpl) Unref() {
	rg := (*TypedRef[Curve])(r)
	rg.Unref()
}

func (r *RefCurveImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCurve(reference Curve) RefCurve {
	return (RefCurve)(NewTypedRef[Curve](reference))
}

func newRefCurveAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Curve](reference.(Curve)))
}

func newRefCurveGDExtensionIternalConstructor(reference Curve) RefCurve {
	return newTypedRefGDExtensionIternalConstructor[Curve](reference)
}

var _ RefCurve2D = &RefCurve2DImpl{}
var _ Ref = &RefCurve2DImpl{}

type RefCurve2D interface {
	Ref
	TypedPtr() Curve2D
}

type RefCurve2DImpl TypedRef[Curve2D]

func (r *RefCurve2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[Curve2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCurve2DImpl) TypedPtr() Curve2D {
	rg := (*TypedRef[Curve2D])(r)
	return rg.TypedPtr()
}

func (r *RefCurve2DImpl) Ref(from Ref) {
	rg := (*TypedRef[Curve2D])(r)
	rg.Ref(from)
}

func (r *RefCurve2DImpl) TypedRef(from *RefCurve2DImpl) {
	rg := (*TypedRef[Curve2D])(r)
	t := (*TypedRef[Curve2D])(from)
	rg.TypedRef((*TypedRef[Curve2D])(t))
}

func (r *RefCurve2DImpl) Unref() {
	rg := (*TypedRef[Curve2D])(r)
	rg.Unref()
}

func (r *RefCurve2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCurve2D(reference Curve2D) RefCurve2D {
	return (RefCurve2D)(NewTypedRef[Curve2D](reference))
}

func newRefCurve2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Curve2D](reference.(Curve2D)))
}

func newRefCurve2DGDExtensionIternalConstructor(reference Curve2D) RefCurve2D {
	return newTypedRefGDExtensionIternalConstructor[Curve2D](reference)
}

var _ RefCurve3D = &RefCurve3DImpl{}
var _ Ref = &RefCurve3DImpl{}

type RefCurve3D interface {
	Ref
	TypedPtr() Curve3D
}

type RefCurve3DImpl TypedRef[Curve3D]

func (r *RefCurve3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[Curve3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCurve3DImpl) TypedPtr() Curve3D {
	rg := (*TypedRef[Curve3D])(r)
	return rg.TypedPtr()
}

func (r *RefCurve3DImpl) Ref(from Ref) {
	rg := (*TypedRef[Curve3D])(r)
	rg.Ref(from)
}

func (r *RefCurve3DImpl) TypedRef(from *RefCurve3DImpl) {
	rg := (*TypedRef[Curve3D])(r)
	t := (*TypedRef[Curve3D])(from)
	rg.TypedRef((*TypedRef[Curve3D])(t))
}

func (r *RefCurve3DImpl) Unref() {
	rg := (*TypedRef[Curve3D])(r)
	rg.Unref()
}

func (r *RefCurve3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCurve3D(reference Curve3D) RefCurve3D {
	return (RefCurve3D)(NewTypedRef[Curve3D](reference))
}

func newRefCurve3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Curve3D](reference.(Curve3D)))
}

func newRefCurve3DGDExtensionIternalConstructor(reference Curve3D) RefCurve3D {
	return newTypedRefGDExtensionIternalConstructor[Curve3D](reference)
}

var _ RefCurveTexture = &RefCurveTextureImpl{}
var _ Ref = &RefCurveTextureImpl{}

type RefCurveTexture interface {
	Ref
	TypedPtr() CurveTexture
}

type RefCurveTextureImpl TypedRef[CurveTexture]

func (r *RefCurveTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[CurveTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCurveTextureImpl) TypedPtr() CurveTexture {
	rg := (*TypedRef[CurveTexture])(r)
	return rg.TypedPtr()
}

func (r *RefCurveTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[CurveTexture])(r)
	rg.Ref(from)
}

func (r *RefCurveTextureImpl) TypedRef(from *RefCurveTextureImpl) {
	rg := (*TypedRef[CurveTexture])(r)
	t := (*TypedRef[CurveTexture])(from)
	rg.TypedRef((*TypedRef[CurveTexture])(t))
}

func (r *RefCurveTextureImpl) Unref() {
	rg := (*TypedRef[CurveTexture])(r)
	rg.Unref()
}

func (r *RefCurveTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCurveTexture(reference CurveTexture) RefCurveTexture {
	return (RefCurveTexture)(NewTypedRef[CurveTexture](reference))
}

func newRefCurveTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CurveTexture](reference.(CurveTexture)))
}

func newRefCurveTextureGDExtensionIternalConstructor(reference CurveTexture) RefCurveTexture {
	return newTypedRefGDExtensionIternalConstructor[CurveTexture](reference)
}

var _ RefCurveXYZTexture = &RefCurveXYZTextureImpl{}
var _ Ref = &RefCurveXYZTextureImpl{}

type RefCurveXYZTexture interface {
	Ref
	TypedPtr() CurveXYZTexture
}

type RefCurveXYZTextureImpl TypedRef[CurveXYZTexture]

func (r *RefCurveXYZTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[CurveXYZTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCurveXYZTextureImpl) TypedPtr() CurveXYZTexture {
	rg := (*TypedRef[CurveXYZTexture])(r)
	return rg.TypedPtr()
}

func (r *RefCurveXYZTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[CurveXYZTexture])(r)
	rg.Ref(from)
}

func (r *RefCurveXYZTextureImpl) TypedRef(from *RefCurveXYZTextureImpl) {
	rg := (*TypedRef[CurveXYZTexture])(r)
	t := (*TypedRef[CurveXYZTexture])(from)
	rg.TypedRef((*TypedRef[CurveXYZTexture])(t))
}

func (r *RefCurveXYZTextureImpl) Unref() {
	rg := (*TypedRef[CurveXYZTexture])(r)
	rg.Unref()
}

func (r *RefCurveXYZTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCurveXYZTexture(reference CurveXYZTexture) RefCurveXYZTexture {
	return (RefCurveXYZTexture)(NewTypedRef[CurveXYZTexture](reference))
}

func newRefCurveXYZTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CurveXYZTexture](reference.(CurveXYZTexture)))
}

func newRefCurveXYZTextureGDExtensionIternalConstructor(reference CurveXYZTexture) RefCurveXYZTexture {
	return newTypedRefGDExtensionIternalConstructor[CurveXYZTexture](reference)
}

var _ RefCylinderMesh = &RefCylinderMeshImpl{}
var _ Ref = &RefCylinderMeshImpl{}

type RefCylinderMesh interface {
	Ref
	TypedPtr() CylinderMesh
}

type RefCylinderMeshImpl TypedRef[CylinderMesh]

func (r *RefCylinderMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[CylinderMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCylinderMeshImpl) TypedPtr() CylinderMesh {
	rg := (*TypedRef[CylinderMesh])(r)
	return rg.TypedPtr()
}

func (r *RefCylinderMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[CylinderMesh])(r)
	rg.Ref(from)
}

func (r *RefCylinderMeshImpl) TypedRef(from *RefCylinderMeshImpl) {
	rg := (*TypedRef[CylinderMesh])(r)
	t := (*TypedRef[CylinderMesh])(from)
	rg.TypedRef((*TypedRef[CylinderMesh])(t))
}

func (r *RefCylinderMeshImpl) Unref() {
	rg := (*TypedRef[CylinderMesh])(r)
	rg.Unref()
}

func (r *RefCylinderMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCylinderMesh(reference CylinderMesh) RefCylinderMesh {
	return (RefCylinderMesh)(NewTypedRef[CylinderMesh](reference))
}

func newRefCylinderMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CylinderMesh](reference.(CylinderMesh)))
}

func newRefCylinderMeshGDExtensionIternalConstructor(reference CylinderMesh) RefCylinderMesh {
	return newTypedRefGDExtensionIternalConstructor[CylinderMesh](reference)
}

var _ RefCylinderShape3D = &RefCylinderShape3DImpl{}
var _ Ref = &RefCylinderShape3DImpl{}

type RefCylinderShape3D interface {
	Ref
	TypedPtr() CylinderShape3D
}

type RefCylinderShape3DImpl TypedRef[CylinderShape3D]

func (r *RefCylinderShape3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[CylinderShape3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefCylinderShape3DImpl) TypedPtr() CylinderShape3D {
	rg := (*TypedRef[CylinderShape3D])(r)
	return rg.TypedPtr()
}

func (r *RefCylinderShape3DImpl) Ref(from Ref) {
	rg := (*TypedRef[CylinderShape3D])(r)
	rg.Ref(from)
}

func (r *RefCylinderShape3DImpl) TypedRef(from *RefCylinderShape3DImpl) {
	rg := (*TypedRef[CylinderShape3D])(r)
	t := (*TypedRef[CylinderShape3D])(from)
	rg.TypedRef((*TypedRef[CylinderShape3D])(t))
}

func (r *RefCylinderShape3DImpl) Unref() {
	rg := (*TypedRef[CylinderShape3D])(r)
	rg.Unref()
}

func (r *RefCylinderShape3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefCylinderShape3D(reference CylinderShape3D) RefCylinderShape3D {
	return (RefCylinderShape3D)(NewTypedRef[CylinderShape3D](reference))
}

func newRefCylinderShape3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[CylinderShape3D](reference.(CylinderShape3D)))
}

func newRefCylinderShape3DGDExtensionIternalConstructor(reference CylinderShape3D) RefCylinderShape3D {
	return newTypedRefGDExtensionIternalConstructor[CylinderShape3D](reference)
}

var _ RefDTLSServer = &RefDTLSServerImpl{}
var _ Ref = &RefDTLSServerImpl{}

type RefDTLSServer interface {
	Ref
	TypedPtr() DTLSServer
}

type RefDTLSServerImpl TypedRef[DTLSServer]

func (r *RefDTLSServerImpl) Ptr() RefCounted {
	rg := (*TypedRef[DTLSServer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefDTLSServerImpl) TypedPtr() DTLSServer {
	rg := (*TypedRef[DTLSServer])(r)
	return rg.TypedPtr()
}

func (r *RefDTLSServerImpl) Ref(from Ref) {
	rg := (*TypedRef[DTLSServer])(r)
	rg.Ref(from)
}

func (r *RefDTLSServerImpl) TypedRef(from *RefDTLSServerImpl) {
	rg := (*TypedRef[DTLSServer])(r)
	t := (*TypedRef[DTLSServer])(from)
	rg.TypedRef((*TypedRef[DTLSServer])(t))
}

func (r *RefDTLSServerImpl) Unref() {
	rg := (*TypedRef[DTLSServer])(r)
	rg.Unref()
}

func (r *RefDTLSServerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefDTLSServer(reference DTLSServer) RefDTLSServer {
	return (RefDTLSServer)(NewTypedRef[DTLSServer](reference))
}

func newRefDTLSServerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[DTLSServer](reference.(DTLSServer)))
}

func newRefDTLSServerGDExtensionIternalConstructor(reference DTLSServer) RefDTLSServer {
	return newTypedRefGDExtensionIternalConstructor[DTLSServer](reference)
}

var _ RefDirAccess = &RefDirAccessImpl{}
var _ Ref = &RefDirAccessImpl{}

type RefDirAccess interface {
	Ref
	TypedPtr() DirAccess
}

type RefDirAccessImpl TypedRef[DirAccess]

func (r *RefDirAccessImpl) Ptr() RefCounted {
	rg := (*TypedRef[DirAccess])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefDirAccessImpl) TypedPtr() DirAccess {
	rg := (*TypedRef[DirAccess])(r)
	return rg.TypedPtr()
}

func (r *RefDirAccessImpl) Ref(from Ref) {
	rg := (*TypedRef[DirAccess])(r)
	rg.Ref(from)
}

func (r *RefDirAccessImpl) TypedRef(from *RefDirAccessImpl) {
	rg := (*TypedRef[DirAccess])(r)
	t := (*TypedRef[DirAccess])(from)
	rg.TypedRef((*TypedRef[DirAccess])(t))
}

func (r *RefDirAccessImpl) Unref() {
	rg := (*TypedRef[DirAccess])(r)
	rg.Unref()
}

func (r *RefDirAccessImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefDirAccess(reference DirAccess) RefDirAccess {
	return (RefDirAccess)(NewTypedRef[DirAccess](reference))
}

func newRefDirAccessAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[DirAccess](reference.(DirAccess)))
}

func newRefDirAccessGDExtensionIternalConstructor(reference DirAccess) RefDirAccess {
	return newTypedRefGDExtensionIternalConstructor[DirAccess](reference)
}

var _ RefENetConnection = &RefENetConnectionImpl{}
var _ Ref = &RefENetConnectionImpl{}

type RefENetConnection interface {
	Ref
	TypedPtr() ENetConnection
}

type RefENetConnectionImpl TypedRef[ENetConnection]

func (r *RefENetConnectionImpl) Ptr() RefCounted {
	rg := (*TypedRef[ENetConnection])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefENetConnectionImpl) TypedPtr() ENetConnection {
	rg := (*TypedRef[ENetConnection])(r)
	return rg.TypedPtr()
}

func (r *RefENetConnectionImpl) Ref(from Ref) {
	rg := (*TypedRef[ENetConnection])(r)
	rg.Ref(from)
}

func (r *RefENetConnectionImpl) TypedRef(from *RefENetConnectionImpl) {
	rg := (*TypedRef[ENetConnection])(r)
	t := (*TypedRef[ENetConnection])(from)
	rg.TypedRef((*TypedRef[ENetConnection])(t))
}

func (r *RefENetConnectionImpl) Unref() {
	rg := (*TypedRef[ENetConnection])(r)
	rg.Unref()
}

func (r *RefENetConnectionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefENetConnection(reference ENetConnection) RefENetConnection {
	return (RefENetConnection)(NewTypedRef[ENetConnection](reference))
}

func newRefENetConnectionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ENetConnection](reference.(ENetConnection)))
}

func newRefENetConnectionGDExtensionIternalConstructor(reference ENetConnection) RefENetConnection {
	return newTypedRefGDExtensionIternalConstructor[ENetConnection](reference)
}

var _ RefENetMultiplayerPeer = &RefENetMultiplayerPeerImpl{}
var _ Ref = &RefENetMultiplayerPeerImpl{}

type RefENetMultiplayerPeer interface {
	Ref
	TypedPtr() ENetMultiplayerPeer
}

type RefENetMultiplayerPeerImpl TypedRef[ENetMultiplayerPeer]

func (r *RefENetMultiplayerPeerImpl) Ptr() RefCounted {
	rg := (*TypedRef[ENetMultiplayerPeer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefENetMultiplayerPeerImpl) TypedPtr() ENetMultiplayerPeer {
	rg := (*TypedRef[ENetMultiplayerPeer])(r)
	return rg.TypedPtr()
}

func (r *RefENetMultiplayerPeerImpl) Ref(from Ref) {
	rg := (*TypedRef[ENetMultiplayerPeer])(r)
	rg.Ref(from)
}

func (r *RefENetMultiplayerPeerImpl) TypedRef(from *RefENetMultiplayerPeerImpl) {
	rg := (*TypedRef[ENetMultiplayerPeer])(r)
	t := (*TypedRef[ENetMultiplayerPeer])(from)
	rg.TypedRef((*TypedRef[ENetMultiplayerPeer])(t))
}

func (r *RefENetMultiplayerPeerImpl) Unref() {
	rg := (*TypedRef[ENetMultiplayerPeer])(r)
	rg.Unref()
}

func (r *RefENetMultiplayerPeerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefENetMultiplayerPeer(reference ENetMultiplayerPeer) RefENetMultiplayerPeer {
	return (RefENetMultiplayerPeer)(NewTypedRef[ENetMultiplayerPeer](reference))
}

func newRefENetMultiplayerPeerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ENetMultiplayerPeer](reference.(ENetMultiplayerPeer)))
}

func newRefENetMultiplayerPeerGDExtensionIternalConstructor(reference ENetMultiplayerPeer) RefENetMultiplayerPeer {
	return newTypedRefGDExtensionIternalConstructor[ENetMultiplayerPeer](reference)
}

var _ RefENetPacketPeer = &RefENetPacketPeerImpl{}
var _ Ref = &RefENetPacketPeerImpl{}

type RefENetPacketPeer interface {
	Ref
	TypedPtr() ENetPacketPeer
}

type RefENetPacketPeerImpl TypedRef[ENetPacketPeer]

func (r *RefENetPacketPeerImpl) Ptr() RefCounted {
	rg := (*TypedRef[ENetPacketPeer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefENetPacketPeerImpl) TypedPtr() ENetPacketPeer {
	rg := (*TypedRef[ENetPacketPeer])(r)
	return rg.TypedPtr()
}

func (r *RefENetPacketPeerImpl) Ref(from Ref) {
	rg := (*TypedRef[ENetPacketPeer])(r)
	rg.Ref(from)
}

func (r *RefENetPacketPeerImpl) TypedRef(from *RefENetPacketPeerImpl) {
	rg := (*TypedRef[ENetPacketPeer])(r)
	t := (*TypedRef[ENetPacketPeer])(from)
	rg.TypedRef((*TypedRef[ENetPacketPeer])(t))
}

func (r *RefENetPacketPeerImpl) Unref() {
	rg := (*TypedRef[ENetPacketPeer])(r)
	rg.Unref()
}

func (r *RefENetPacketPeerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefENetPacketPeer(reference ENetPacketPeer) RefENetPacketPeer {
	return (RefENetPacketPeer)(NewTypedRef[ENetPacketPeer](reference))
}

func newRefENetPacketPeerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ENetPacketPeer](reference.(ENetPacketPeer)))
}

func newRefENetPacketPeerGDExtensionIternalConstructor(reference ENetPacketPeer) RefENetPacketPeer {
	return newTypedRefGDExtensionIternalConstructor[ENetPacketPeer](reference)
}

var _ RefEditorDebuggerPlugin = &RefEditorDebuggerPluginImpl{}
var _ Ref = &RefEditorDebuggerPluginImpl{}

type RefEditorDebuggerPlugin interface {
	Ref
	TypedPtr() EditorDebuggerPlugin
}

type RefEditorDebuggerPluginImpl TypedRef[EditorDebuggerPlugin]

func (r *RefEditorDebuggerPluginImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorDebuggerPlugin])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorDebuggerPluginImpl) TypedPtr() EditorDebuggerPlugin {
	rg := (*TypedRef[EditorDebuggerPlugin])(r)
	return rg.TypedPtr()
}

func (r *RefEditorDebuggerPluginImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorDebuggerPlugin])(r)
	rg.Ref(from)
}

func (r *RefEditorDebuggerPluginImpl) TypedRef(from *RefEditorDebuggerPluginImpl) {
	rg := (*TypedRef[EditorDebuggerPlugin])(r)
	t := (*TypedRef[EditorDebuggerPlugin])(from)
	rg.TypedRef((*TypedRef[EditorDebuggerPlugin])(t))
}

func (r *RefEditorDebuggerPluginImpl) Unref() {
	rg := (*TypedRef[EditorDebuggerPlugin])(r)
	rg.Unref()
}

func (r *RefEditorDebuggerPluginImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorDebuggerPlugin(reference EditorDebuggerPlugin) RefEditorDebuggerPlugin {
	return (RefEditorDebuggerPlugin)(NewTypedRef[EditorDebuggerPlugin](reference))
}

func newRefEditorDebuggerPluginAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorDebuggerPlugin](reference.(EditorDebuggerPlugin)))
}

func newRefEditorDebuggerPluginGDExtensionIternalConstructor(reference EditorDebuggerPlugin) RefEditorDebuggerPlugin {
	return newTypedRefGDExtensionIternalConstructor[EditorDebuggerPlugin](reference)
}

var _ RefEditorDebuggerSession = &RefEditorDebuggerSessionImpl{}
var _ Ref = &RefEditorDebuggerSessionImpl{}

type RefEditorDebuggerSession interface {
	Ref
	TypedPtr() EditorDebuggerSession
}

type RefEditorDebuggerSessionImpl TypedRef[EditorDebuggerSession]

func (r *RefEditorDebuggerSessionImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorDebuggerSession])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorDebuggerSessionImpl) TypedPtr() EditorDebuggerSession {
	rg := (*TypedRef[EditorDebuggerSession])(r)
	return rg.TypedPtr()
}

func (r *RefEditorDebuggerSessionImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorDebuggerSession])(r)
	rg.Ref(from)
}

func (r *RefEditorDebuggerSessionImpl) TypedRef(from *RefEditorDebuggerSessionImpl) {
	rg := (*TypedRef[EditorDebuggerSession])(r)
	t := (*TypedRef[EditorDebuggerSession])(from)
	rg.TypedRef((*TypedRef[EditorDebuggerSession])(t))
}

func (r *RefEditorDebuggerSessionImpl) Unref() {
	rg := (*TypedRef[EditorDebuggerSession])(r)
	rg.Unref()
}

func (r *RefEditorDebuggerSessionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorDebuggerSession(reference EditorDebuggerSession) RefEditorDebuggerSession {
	return (RefEditorDebuggerSession)(NewTypedRef[EditorDebuggerSession](reference))
}

func newRefEditorDebuggerSessionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorDebuggerSession](reference.(EditorDebuggerSession)))
}

func newRefEditorDebuggerSessionGDExtensionIternalConstructor(reference EditorDebuggerSession) RefEditorDebuggerSession {
	return newTypedRefGDExtensionIternalConstructor[EditorDebuggerSession](reference)
}

var _ RefEditorExportPlatform = &RefEditorExportPlatformImpl{}
var _ Ref = &RefEditorExportPlatformImpl{}

type RefEditorExportPlatform interface {
	Ref
	TypedPtr() EditorExportPlatform
}

type RefEditorExportPlatformImpl TypedRef[EditorExportPlatform]

func (r *RefEditorExportPlatformImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorExportPlatform])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorExportPlatformImpl) TypedPtr() EditorExportPlatform {
	rg := (*TypedRef[EditorExportPlatform])(r)
	return rg.TypedPtr()
}

func (r *RefEditorExportPlatformImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorExportPlatform])(r)
	rg.Ref(from)
}

func (r *RefEditorExportPlatformImpl) TypedRef(from *RefEditorExportPlatformImpl) {
	rg := (*TypedRef[EditorExportPlatform])(r)
	t := (*TypedRef[EditorExportPlatform])(from)
	rg.TypedRef((*TypedRef[EditorExportPlatform])(t))
}

func (r *RefEditorExportPlatformImpl) Unref() {
	rg := (*TypedRef[EditorExportPlatform])(r)
	rg.Unref()
}

func (r *RefEditorExportPlatformImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorExportPlatform(reference EditorExportPlatform) RefEditorExportPlatform {
	return (RefEditorExportPlatform)(NewTypedRef[EditorExportPlatform](reference))
}

func newRefEditorExportPlatformAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorExportPlatform](reference.(EditorExportPlatform)))
}

func newRefEditorExportPlatformGDExtensionIternalConstructor(reference EditorExportPlatform) RefEditorExportPlatform {
	return newTypedRefGDExtensionIternalConstructor[EditorExportPlatform](reference)
}

var _ RefEditorExportPlatformAndroid = &RefEditorExportPlatformAndroidImpl{}
var _ Ref = &RefEditorExportPlatformAndroidImpl{}

type RefEditorExportPlatformAndroid interface {
	Ref
	TypedPtr() EditorExportPlatformAndroid
}

type RefEditorExportPlatformAndroidImpl TypedRef[EditorExportPlatformAndroid]

func (r *RefEditorExportPlatformAndroidImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorExportPlatformAndroid])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorExportPlatformAndroidImpl) TypedPtr() EditorExportPlatformAndroid {
	rg := (*TypedRef[EditorExportPlatformAndroid])(r)
	return rg.TypedPtr()
}

func (r *RefEditorExportPlatformAndroidImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorExportPlatformAndroid])(r)
	rg.Ref(from)
}

func (r *RefEditorExportPlatformAndroidImpl) TypedRef(from *RefEditorExportPlatformAndroidImpl) {
	rg := (*TypedRef[EditorExportPlatformAndroid])(r)
	t := (*TypedRef[EditorExportPlatformAndroid])(from)
	rg.TypedRef((*TypedRef[EditorExportPlatformAndroid])(t))
}

func (r *RefEditorExportPlatformAndroidImpl) Unref() {
	rg := (*TypedRef[EditorExportPlatformAndroid])(r)
	rg.Unref()
}

func (r *RefEditorExportPlatformAndroidImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorExportPlatformAndroid(reference EditorExportPlatformAndroid) RefEditorExportPlatformAndroid {
	return (RefEditorExportPlatformAndroid)(NewTypedRef[EditorExportPlatformAndroid](reference))
}

func newRefEditorExportPlatformAndroidAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorExportPlatformAndroid](reference.(EditorExportPlatformAndroid)))
}

func newRefEditorExportPlatformAndroidGDExtensionIternalConstructor(reference EditorExportPlatformAndroid) RefEditorExportPlatformAndroid {
	return newTypedRefGDExtensionIternalConstructor[EditorExportPlatformAndroid](reference)
}

var _ RefEditorExportPlatformIOS = &RefEditorExportPlatformIOSImpl{}
var _ Ref = &RefEditorExportPlatformIOSImpl{}

type RefEditorExportPlatformIOS interface {
	Ref
	TypedPtr() EditorExportPlatformIOS
}

type RefEditorExportPlatformIOSImpl TypedRef[EditorExportPlatformIOS]

func (r *RefEditorExportPlatformIOSImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorExportPlatformIOS])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorExportPlatformIOSImpl) TypedPtr() EditorExportPlatformIOS {
	rg := (*TypedRef[EditorExportPlatformIOS])(r)
	return rg.TypedPtr()
}

func (r *RefEditorExportPlatformIOSImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorExportPlatformIOS])(r)
	rg.Ref(from)
}

func (r *RefEditorExportPlatformIOSImpl) TypedRef(from *RefEditorExportPlatformIOSImpl) {
	rg := (*TypedRef[EditorExportPlatformIOS])(r)
	t := (*TypedRef[EditorExportPlatformIOS])(from)
	rg.TypedRef((*TypedRef[EditorExportPlatformIOS])(t))
}

func (r *RefEditorExportPlatformIOSImpl) Unref() {
	rg := (*TypedRef[EditorExportPlatformIOS])(r)
	rg.Unref()
}

func (r *RefEditorExportPlatformIOSImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorExportPlatformIOS(reference EditorExportPlatformIOS) RefEditorExportPlatformIOS {
	return (RefEditorExportPlatformIOS)(NewTypedRef[EditorExportPlatformIOS](reference))
}

func newRefEditorExportPlatformIOSAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorExportPlatformIOS](reference.(EditorExportPlatformIOS)))
}

func newRefEditorExportPlatformIOSGDExtensionIternalConstructor(reference EditorExportPlatformIOS) RefEditorExportPlatformIOS {
	return newTypedRefGDExtensionIternalConstructor[EditorExportPlatformIOS](reference)
}

var _ RefEditorExportPlatformLinuxBSD = &RefEditorExportPlatformLinuxBSDImpl{}
var _ Ref = &RefEditorExportPlatformLinuxBSDImpl{}

type RefEditorExportPlatformLinuxBSD interface {
	Ref
	TypedPtr() EditorExportPlatformLinuxBSD
}

type RefEditorExportPlatformLinuxBSDImpl TypedRef[EditorExportPlatformLinuxBSD]

func (r *RefEditorExportPlatformLinuxBSDImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorExportPlatformLinuxBSD])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorExportPlatformLinuxBSDImpl) TypedPtr() EditorExportPlatformLinuxBSD {
	rg := (*TypedRef[EditorExportPlatformLinuxBSD])(r)
	return rg.TypedPtr()
}

func (r *RefEditorExportPlatformLinuxBSDImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorExportPlatformLinuxBSD])(r)
	rg.Ref(from)
}

func (r *RefEditorExportPlatformLinuxBSDImpl) TypedRef(from *RefEditorExportPlatformLinuxBSDImpl) {
	rg := (*TypedRef[EditorExportPlatformLinuxBSD])(r)
	t := (*TypedRef[EditorExportPlatformLinuxBSD])(from)
	rg.TypedRef((*TypedRef[EditorExportPlatformLinuxBSD])(t))
}

func (r *RefEditorExportPlatformLinuxBSDImpl) Unref() {
	rg := (*TypedRef[EditorExportPlatformLinuxBSD])(r)
	rg.Unref()
}

func (r *RefEditorExportPlatformLinuxBSDImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorExportPlatformLinuxBSD(reference EditorExportPlatformLinuxBSD) RefEditorExportPlatformLinuxBSD {
	return (RefEditorExportPlatformLinuxBSD)(NewTypedRef[EditorExportPlatformLinuxBSD](reference))
}

func newRefEditorExportPlatformLinuxBSDAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorExportPlatformLinuxBSD](reference.(EditorExportPlatformLinuxBSD)))
}

func newRefEditorExportPlatformLinuxBSDGDExtensionIternalConstructor(reference EditorExportPlatformLinuxBSD) RefEditorExportPlatformLinuxBSD {
	return newTypedRefGDExtensionIternalConstructor[EditorExportPlatformLinuxBSD](reference)
}

var _ RefEditorExportPlatformMacOS = &RefEditorExportPlatformMacOSImpl{}
var _ Ref = &RefEditorExportPlatformMacOSImpl{}

type RefEditorExportPlatformMacOS interface {
	Ref
	TypedPtr() EditorExportPlatformMacOS
}

type RefEditorExportPlatformMacOSImpl TypedRef[EditorExportPlatformMacOS]

func (r *RefEditorExportPlatformMacOSImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorExportPlatformMacOS])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorExportPlatformMacOSImpl) TypedPtr() EditorExportPlatformMacOS {
	rg := (*TypedRef[EditorExportPlatformMacOS])(r)
	return rg.TypedPtr()
}

func (r *RefEditorExportPlatformMacOSImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorExportPlatformMacOS])(r)
	rg.Ref(from)
}

func (r *RefEditorExportPlatformMacOSImpl) TypedRef(from *RefEditorExportPlatformMacOSImpl) {
	rg := (*TypedRef[EditorExportPlatformMacOS])(r)
	t := (*TypedRef[EditorExportPlatformMacOS])(from)
	rg.TypedRef((*TypedRef[EditorExportPlatformMacOS])(t))
}

func (r *RefEditorExportPlatformMacOSImpl) Unref() {
	rg := (*TypedRef[EditorExportPlatformMacOS])(r)
	rg.Unref()
}

func (r *RefEditorExportPlatformMacOSImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorExportPlatformMacOS(reference EditorExportPlatformMacOS) RefEditorExportPlatformMacOS {
	return (RefEditorExportPlatformMacOS)(NewTypedRef[EditorExportPlatformMacOS](reference))
}

func newRefEditorExportPlatformMacOSAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorExportPlatformMacOS](reference.(EditorExportPlatformMacOS)))
}

func newRefEditorExportPlatformMacOSGDExtensionIternalConstructor(reference EditorExportPlatformMacOS) RefEditorExportPlatformMacOS {
	return newTypedRefGDExtensionIternalConstructor[EditorExportPlatformMacOS](reference)
}

var _ RefEditorExportPlatformPC = &RefEditorExportPlatformPCImpl{}
var _ Ref = &RefEditorExportPlatformPCImpl{}

type RefEditorExportPlatformPC interface {
	Ref
	TypedPtr() EditorExportPlatformPC
}

type RefEditorExportPlatformPCImpl TypedRef[EditorExportPlatformPC]

func (r *RefEditorExportPlatformPCImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorExportPlatformPC])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorExportPlatformPCImpl) TypedPtr() EditorExportPlatformPC {
	rg := (*TypedRef[EditorExportPlatformPC])(r)
	return rg.TypedPtr()
}

func (r *RefEditorExportPlatformPCImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorExportPlatformPC])(r)
	rg.Ref(from)
}

func (r *RefEditorExportPlatformPCImpl) TypedRef(from *RefEditorExportPlatformPCImpl) {
	rg := (*TypedRef[EditorExportPlatformPC])(r)
	t := (*TypedRef[EditorExportPlatformPC])(from)
	rg.TypedRef((*TypedRef[EditorExportPlatformPC])(t))
}

func (r *RefEditorExportPlatformPCImpl) Unref() {
	rg := (*TypedRef[EditorExportPlatformPC])(r)
	rg.Unref()
}

func (r *RefEditorExportPlatformPCImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorExportPlatformPC(reference EditorExportPlatformPC) RefEditorExportPlatformPC {
	return (RefEditorExportPlatformPC)(NewTypedRef[EditorExportPlatformPC](reference))
}

func newRefEditorExportPlatformPCAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorExportPlatformPC](reference.(EditorExportPlatformPC)))
}

func newRefEditorExportPlatformPCGDExtensionIternalConstructor(reference EditorExportPlatformPC) RefEditorExportPlatformPC {
	return newTypedRefGDExtensionIternalConstructor[EditorExportPlatformPC](reference)
}

var _ RefEditorExportPlatformWeb = &RefEditorExportPlatformWebImpl{}
var _ Ref = &RefEditorExportPlatformWebImpl{}

type RefEditorExportPlatformWeb interface {
	Ref
	TypedPtr() EditorExportPlatformWeb
}

type RefEditorExportPlatformWebImpl TypedRef[EditorExportPlatformWeb]

func (r *RefEditorExportPlatformWebImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorExportPlatformWeb])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorExportPlatformWebImpl) TypedPtr() EditorExportPlatformWeb {
	rg := (*TypedRef[EditorExportPlatformWeb])(r)
	return rg.TypedPtr()
}

func (r *RefEditorExportPlatformWebImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorExportPlatformWeb])(r)
	rg.Ref(from)
}

func (r *RefEditorExportPlatformWebImpl) TypedRef(from *RefEditorExportPlatformWebImpl) {
	rg := (*TypedRef[EditorExportPlatformWeb])(r)
	t := (*TypedRef[EditorExportPlatformWeb])(from)
	rg.TypedRef((*TypedRef[EditorExportPlatformWeb])(t))
}

func (r *RefEditorExportPlatformWebImpl) Unref() {
	rg := (*TypedRef[EditorExportPlatformWeb])(r)
	rg.Unref()
}

func (r *RefEditorExportPlatformWebImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorExportPlatformWeb(reference EditorExportPlatformWeb) RefEditorExportPlatformWeb {
	return (RefEditorExportPlatformWeb)(NewTypedRef[EditorExportPlatformWeb](reference))
}

func newRefEditorExportPlatformWebAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorExportPlatformWeb](reference.(EditorExportPlatformWeb)))
}

func newRefEditorExportPlatformWebGDExtensionIternalConstructor(reference EditorExportPlatformWeb) RefEditorExportPlatformWeb {
	return newTypedRefGDExtensionIternalConstructor[EditorExportPlatformWeb](reference)
}

var _ RefEditorExportPlatformWindows = &RefEditorExportPlatformWindowsImpl{}
var _ Ref = &RefEditorExportPlatformWindowsImpl{}

type RefEditorExportPlatformWindows interface {
	Ref
	TypedPtr() EditorExportPlatformWindows
}

type RefEditorExportPlatformWindowsImpl TypedRef[EditorExportPlatformWindows]

func (r *RefEditorExportPlatformWindowsImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorExportPlatformWindows])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorExportPlatformWindowsImpl) TypedPtr() EditorExportPlatformWindows {
	rg := (*TypedRef[EditorExportPlatformWindows])(r)
	return rg.TypedPtr()
}

func (r *RefEditorExportPlatformWindowsImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorExportPlatformWindows])(r)
	rg.Ref(from)
}

func (r *RefEditorExportPlatformWindowsImpl) TypedRef(from *RefEditorExportPlatformWindowsImpl) {
	rg := (*TypedRef[EditorExportPlatformWindows])(r)
	t := (*TypedRef[EditorExportPlatformWindows])(from)
	rg.TypedRef((*TypedRef[EditorExportPlatformWindows])(t))
}

func (r *RefEditorExportPlatformWindowsImpl) Unref() {
	rg := (*TypedRef[EditorExportPlatformWindows])(r)
	rg.Unref()
}

func (r *RefEditorExportPlatformWindowsImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorExportPlatformWindows(reference EditorExportPlatformWindows) RefEditorExportPlatformWindows {
	return (RefEditorExportPlatformWindows)(NewTypedRef[EditorExportPlatformWindows](reference))
}

func newRefEditorExportPlatformWindowsAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorExportPlatformWindows](reference.(EditorExportPlatformWindows)))
}

func newRefEditorExportPlatformWindowsGDExtensionIternalConstructor(reference EditorExportPlatformWindows) RefEditorExportPlatformWindows {
	return newTypedRefGDExtensionIternalConstructor[EditorExportPlatformWindows](reference)
}

var _ RefEditorExportPlugin = &RefEditorExportPluginImpl{}
var _ Ref = &RefEditorExportPluginImpl{}

type RefEditorExportPlugin interface {
	Ref
	TypedPtr() EditorExportPlugin
}

type RefEditorExportPluginImpl TypedRef[EditorExportPlugin]

func (r *RefEditorExportPluginImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorExportPlugin])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorExportPluginImpl) TypedPtr() EditorExportPlugin {
	rg := (*TypedRef[EditorExportPlugin])(r)
	return rg.TypedPtr()
}

func (r *RefEditorExportPluginImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorExportPlugin])(r)
	rg.Ref(from)
}

func (r *RefEditorExportPluginImpl) TypedRef(from *RefEditorExportPluginImpl) {
	rg := (*TypedRef[EditorExportPlugin])(r)
	t := (*TypedRef[EditorExportPlugin])(from)
	rg.TypedRef((*TypedRef[EditorExportPlugin])(t))
}

func (r *RefEditorExportPluginImpl) Unref() {
	rg := (*TypedRef[EditorExportPlugin])(r)
	rg.Unref()
}

func (r *RefEditorExportPluginImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorExportPlugin(reference EditorExportPlugin) RefEditorExportPlugin {
	return (RefEditorExportPlugin)(NewTypedRef[EditorExportPlugin](reference))
}

func newRefEditorExportPluginAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorExportPlugin](reference.(EditorExportPlugin)))
}

func newRefEditorExportPluginGDExtensionIternalConstructor(reference EditorExportPlugin) RefEditorExportPlugin {
	return newTypedRefGDExtensionIternalConstructor[EditorExportPlugin](reference)
}

var _ RefEditorFeatureProfile = &RefEditorFeatureProfileImpl{}
var _ Ref = &RefEditorFeatureProfileImpl{}

type RefEditorFeatureProfile interface {
	Ref
	TypedPtr() EditorFeatureProfile
}

type RefEditorFeatureProfileImpl TypedRef[EditorFeatureProfile]

func (r *RefEditorFeatureProfileImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorFeatureProfile])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorFeatureProfileImpl) TypedPtr() EditorFeatureProfile {
	rg := (*TypedRef[EditorFeatureProfile])(r)
	return rg.TypedPtr()
}

func (r *RefEditorFeatureProfileImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorFeatureProfile])(r)
	rg.Ref(from)
}

func (r *RefEditorFeatureProfileImpl) TypedRef(from *RefEditorFeatureProfileImpl) {
	rg := (*TypedRef[EditorFeatureProfile])(r)
	t := (*TypedRef[EditorFeatureProfile])(from)
	rg.TypedRef((*TypedRef[EditorFeatureProfile])(t))
}

func (r *RefEditorFeatureProfileImpl) Unref() {
	rg := (*TypedRef[EditorFeatureProfile])(r)
	rg.Unref()
}

func (r *RefEditorFeatureProfileImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorFeatureProfile(reference EditorFeatureProfile) RefEditorFeatureProfile {
	return (RefEditorFeatureProfile)(NewTypedRef[EditorFeatureProfile](reference))
}

func newRefEditorFeatureProfileAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorFeatureProfile](reference.(EditorFeatureProfile)))
}

func newRefEditorFeatureProfileGDExtensionIternalConstructor(reference EditorFeatureProfile) RefEditorFeatureProfile {
	return newTypedRefGDExtensionIternalConstructor[EditorFeatureProfile](reference)
}

var _ RefEditorFileSystemImportFormatSupportQuery = &RefEditorFileSystemImportFormatSupportQueryImpl{}
var _ Ref = &RefEditorFileSystemImportFormatSupportQueryImpl{}

type RefEditorFileSystemImportFormatSupportQuery interface {
	Ref
	TypedPtr() EditorFileSystemImportFormatSupportQuery
}

type RefEditorFileSystemImportFormatSupportQueryImpl TypedRef[EditorFileSystemImportFormatSupportQuery]

func (r *RefEditorFileSystemImportFormatSupportQueryImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorFileSystemImportFormatSupportQuery])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorFileSystemImportFormatSupportQueryImpl) TypedPtr() EditorFileSystemImportFormatSupportQuery {
	rg := (*TypedRef[EditorFileSystemImportFormatSupportQuery])(r)
	return rg.TypedPtr()
}

func (r *RefEditorFileSystemImportFormatSupportQueryImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorFileSystemImportFormatSupportQuery])(r)
	rg.Ref(from)
}

func (r *RefEditorFileSystemImportFormatSupportQueryImpl) TypedRef(from *RefEditorFileSystemImportFormatSupportQueryImpl) {
	rg := (*TypedRef[EditorFileSystemImportFormatSupportQuery])(r)
	t := (*TypedRef[EditorFileSystemImportFormatSupportQuery])(from)
	rg.TypedRef((*TypedRef[EditorFileSystemImportFormatSupportQuery])(t))
}

func (r *RefEditorFileSystemImportFormatSupportQueryImpl) Unref() {
	rg := (*TypedRef[EditorFileSystemImportFormatSupportQuery])(r)
	rg.Unref()
}

func (r *RefEditorFileSystemImportFormatSupportQueryImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorFileSystemImportFormatSupportQuery(reference EditorFileSystemImportFormatSupportQuery) RefEditorFileSystemImportFormatSupportQuery {
	return (RefEditorFileSystemImportFormatSupportQuery)(NewTypedRef[EditorFileSystemImportFormatSupportQuery](reference))
}

func newRefEditorFileSystemImportFormatSupportQueryAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorFileSystemImportFormatSupportQuery](reference.(EditorFileSystemImportFormatSupportQuery)))
}

func newRefEditorFileSystemImportFormatSupportQueryGDExtensionIternalConstructor(reference EditorFileSystemImportFormatSupportQuery) RefEditorFileSystemImportFormatSupportQuery {
	return newTypedRefGDExtensionIternalConstructor[EditorFileSystemImportFormatSupportQuery](reference)
}

var _ RefEditorImportPlugin = &RefEditorImportPluginImpl{}
var _ Ref = &RefEditorImportPluginImpl{}

type RefEditorImportPlugin interface {
	Ref
	TypedPtr() EditorImportPlugin
}

type RefEditorImportPluginImpl TypedRef[EditorImportPlugin]

func (r *RefEditorImportPluginImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorImportPlugin])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorImportPluginImpl) TypedPtr() EditorImportPlugin {
	rg := (*TypedRef[EditorImportPlugin])(r)
	return rg.TypedPtr()
}

func (r *RefEditorImportPluginImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorImportPlugin])(r)
	rg.Ref(from)
}

func (r *RefEditorImportPluginImpl) TypedRef(from *RefEditorImportPluginImpl) {
	rg := (*TypedRef[EditorImportPlugin])(r)
	t := (*TypedRef[EditorImportPlugin])(from)
	rg.TypedRef((*TypedRef[EditorImportPlugin])(t))
}

func (r *RefEditorImportPluginImpl) Unref() {
	rg := (*TypedRef[EditorImportPlugin])(r)
	rg.Unref()
}

func (r *RefEditorImportPluginImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorImportPlugin(reference EditorImportPlugin) RefEditorImportPlugin {
	return (RefEditorImportPlugin)(NewTypedRef[EditorImportPlugin](reference))
}

func newRefEditorImportPluginAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorImportPlugin](reference.(EditorImportPlugin)))
}

func newRefEditorImportPluginGDExtensionIternalConstructor(reference EditorImportPlugin) RefEditorImportPlugin {
	return newTypedRefGDExtensionIternalConstructor[EditorImportPlugin](reference)
}

var _ RefEditorInspectorPlugin = &RefEditorInspectorPluginImpl{}
var _ Ref = &RefEditorInspectorPluginImpl{}

type RefEditorInspectorPlugin interface {
	Ref
	TypedPtr() EditorInspectorPlugin
}

type RefEditorInspectorPluginImpl TypedRef[EditorInspectorPlugin]

func (r *RefEditorInspectorPluginImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorInspectorPlugin])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorInspectorPluginImpl) TypedPtr() EditorInspectorPlugin {
	rg := (*TypedRef[EditorInspectorPlugin])(r)
	return rg.TypedPtr()
}

func (r *RefEditorInspectorPluginImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorInspectorPlugin])(r)
	rg.Ref(from)
}

func (r *RefEditorInspectorPluginImpl) TypedRef(from *RefEditorInspectorPluginImpl) {
	rg := (*TypedRef[EditorInspectorPlugin])(r)
	t := (*TypedRef[EditorInspectorPlugin])(from)
	rg.TypedRef((*TypedRef[EditorInspectorPlugin])(t))
}

func (r *RefEditorInspectorPluginImpl) Unref() {
	rg := (*TypedRef[EditorInspectorPlugin])(r)
	rg.Unref()
}

func (r *RefEditorInspectorPluginImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorInspectorPlugin(reference EditorInspectorPlugin) RefEditorInspectorPlugin {
	return (RefEditorInspectorPlugin)(NewTypedRef[EditorInspectorPlugin](reference))
}

func newRefEditorInspectorPluginAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorInspectorPlugin](reference.(EditorInspectorPlugin)))
}

func newRefEditorInspectorPluginGDExtensionIternalConstructor(reference EditorInspectorPlugin) RefEditorInspectorPlugin {
	return newTypedRefGDExtensionIternalConstructor[EditorInspectorPlugin](reference)
}

var _ RefEditorNode3DGizmo = &RefEditorNode3DGizmoImpl{}
var _ Ref = &RefEditorNode3DGizmoImpl{}

type RefEditorNode3DGizmo interface {
	Ref
	TypedPtr() EditorNode3DGizmo
}

type RefEditorNode3DGizmoImpl TypedRef[EditorNode3DGizmo]

func (r *RefEditorNode3DGizmoImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorNode3DGizmo])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorNode3DGizmoImpl) TypedPtr() EditorNode3DGizmo {
	rg := (*TypedRef[EditorNode3DGizmo])(r)
	return rg.TypedPtr()
}

func (r *RefEditorNode3DGizmoImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorNode3DGizmo])(r)
	rg.Ref(from)
}

func (r *RefEditorNode3DGizmoImpl) TypedRef(from *RefEditorNode3DGizmoImpl) {
	rg := (*TypedRef[EditorNode3DGizmo])(r)
	t := (*TypedRef[EditorNode3DGizmo])(from)
	rg.TypedRef((*TypedRef[EditorNode3DGizmo])(t))
}

func (r *RefEditorNode3DGizmoImpl) Unref() {
	rg := (*TypedRef[EditorNode3DGizmo])(r)
	rg.Unref()
}

func (r *RefEditorNode3DGizmoImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorNode3DGizmo(reference EditorNode3DGizmo) RefEditorNode3DGizmo {
	return (RefEditorNode3DGizmo)(NewTypedRef[EditorNode3DGizmo](reference))
}

func newRefEditorNode3DGizmoAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorNode3DGizmo](reference.(EditorNode3DGizmo)))
}

func newRefEditorNode3DGizmoGDExtensionIternalConstructor(reference EditorNode3DGizmo) RefEditorNode3DGizmo {
	return newTypedRefGDExtensionIternalConstructor[EditorNode3DGizmo](reference)
}

var _ RefEditorNode3DGizmoPlugin = &RefEditorNode3DGizmoPluginImpl{}
var _ Ref = &RefEditorNode3DGizmoPluginImpl{}

type RefEditorNode3DGizmoPlugin interface {
	Ref
	TypedPtr() EditorNode3DGizmoPlugin
}

type RefEditorNode3DGizmoPluginImpl TypedRef[EditorNode3DGizmoPlugin]

func (r *RefEditorNode3DGizmoPluginImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorNode3DGizmoPlugin])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorNode3DGizmoPluginImpl) TypedPtr() EditorNode3DGizmoPlugin {
	rg := (*TypedRef[EditorNode3DGizmoPlugin])(r)
	return rg.TypedPtr()
}

func (r *RefEditorNode3DGizmoPluginImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorNode3DGizmoPlugin])(r)
	rg.Ref(from)
}

func (r *RefEditorNode3DGizmoPluginImpl) TypedRef(from *RefEditorNode3DGizmoPluginImpl) {
	rg := (*TypedRef[EditorNode3DGizmoPlugin])(r)
	t := (*TypedRef[EditorNode3DGizmoPlugin])(from)
	rg.TypedRef((*TypedRef[EditorNode3DGizmoPlugin])(t))
}

func (r *RefEditorNode3DGizmoPluginImpl) Unref() {
	rg := (*TypedRef[EditorNode3DGizmoPlugin])(r)
	rg.Unref()
}

func (r *RefEditorNode3DGizmoPluginImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorNode3DGizmoPlugin(reference EditorNode3DGizmoPlugin) RefEditorNode3DGizmoPlugin {
	return (RefEditorNode3DGizmoPlugin)(NewTypedRef[EditorNode3DGizmoPlugin](reference))
}

func newRefEditorNode3DGizmoPluginAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorNode3DGizmoPlugin](reference.(EditorNode3DGizmoPlugin)))
}

func newRefEditorNode3DGizmoPluginGDExtensionIternalConstructor(reference EditorNode3DGizmoPlugin) RefEditorNode3DGizmoPlugin {
	return newTypedRefGDExtensionIternalConstructor[EditorNode3DGizmoPlugin](reference)
}

var _ RefEditorResourceConversionPlugin = &RefEditorResourceConversionPluginImpl{}
var _ Ref = &RefEditorResourceConversionPluginImpl{}

type RefEditorResourceConversionPlugin interface {
	Ref
	TypedPtr() EditorResourceConversionPlugin
}

type RefEditorResourceConversionPluginImpl TypedRef[EditorResourceConversionPlugin]

func (r *RefEditorResourceConversionPluginImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorResourceConversionPlugin])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorResourceConversionPluginImpl) TypedPtr() EditorResourceConversionPlugin {
	rg := (*TypedRef[EditorResourceConversionPlugin])(r)
	return rg.TypedPtr()
}

func (r *RefEditorResourceConversionPluginImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorResourceConversionPlugin])(r)
	rg.Ref(from)
}

func (r *RefEditorResourceConversionPluginImpl) TypedRef(from *RefEditorResourceConversionPluginImpl) {
	rg := (*TypedRef[EditorResourceConversionPlugin])(r)
	t := (*TypedRef[EditorResourceConversionPlugin])(from)
	rg.TypedRef((*TypedRef[EditorResourceConversionPlugin])(t))
}

func (r *RefEditorResourceConversionPluginImpl) Unref() {
	rg := (*TypedRef[EditorResourceConversionPlugin])(r)
	rg.Unref()
}

func (r *RefEditorResourceConversionPluginImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorResourceConversionPlugin(reference EditorResourceConversionPlugin) RefEditorResourceConversionPlugin {
	return (RefEditorResourceConversionPlugin)(NewTypedRef[EditorResourceConversionPlugin](reference))
}

func newRefEditorResourceConversionPluginAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorResourceConversionPlugin](reference.(EditorResourceConversionPlugin)))
}

func newRefEditorResourceConversionPluginGDExtensionIternalConstructor(reference EditorResourceConversionPlugin) RefEditorResourceConversionPlugin {
	return newTypedRefGDExtensionIternalConstructor[EditorResourceConversionPlugin](reference)
}

var _ RefEditorResourcePreviewGenerator = &RefEditorResourcePreviewGeneratorImpl{}
var _ Ref = &RefEditorResourcePreviewGeneratorImpl{}

type RefEditorResourcePreviewGenerator interface {
	Ref
	TypedPtr() EditorResourcePreviewGenerator
}

type RefEditorResourcePreviewGeneratorImpl TypedRef[EditorResourcePreviewGenerator]

func (r *RefEditorResourcePreviewGeneratorImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorResourcePreviewGenerator])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorResourcePreviewGeneratorImpl) TypedPtr() EditorResourcePreviewGenerator {
	rg := (*TypedRef[EditorResourcePreviewGenerator])(r)
	return rg.TypedPtr()
}

func (r *RefEditorResourcePreviewGeneratorImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorResourcePreviewGenerator])(r)
	rg.Ref(from)
}

func (r *RefEditorResourcePreviewGeneratorImpl) TypedRef(from *RefEditorResourcePreviewGeneratorImpl) {
	rg := (*TypedRef[EditorResourcePreviewGenerator])(r)
	t := (*TypedRef[EditorResourcePreviewGenerator])(from)
	rg.TypedRef((*TypedRef[EditorResourcePreviewGenerator])(t))
}

func (r *RefEditorResourcePreviewGeneratorImpl) Unref() {
	rg := (*TypedRef[EditorResourcePreviewGenerator])(r)
	rg.Unref()
}

func (r *RefEditorResourcePreviewGeneratorImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorResourcePreviewGenerator(reference EditorResourcePreviewGenerator) RefEditorResourcePreviewGenerator {
	return (RefEditorResourcePreviewGenerator)(NewTypedRef[EditorResourcePreviewGenerator](reference))
}

func newRefEditorResourcePreviewGeneratorAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorResourcePreviewGenerator](reference.(EditorResourcePreviewGenerator)))
}

func newRefEditorResourcePreviewGeneratorGDExtensionIternalConstructor(reference EditorResourcePreviewGenerator) RefEditorResourcePreviewGenerator {
	return newTypedRefGDExtensionIternalConstructor[EditorResourcePreviewGenerator](reference)
}

var _ RefEditorResourceTooltipPlugin = &RefEditorResourceTooltipPluginImpl{}
var _ Ref = &RefEditorResourceTooltipPluginImpl{}

type RefEditorResourceTooltipPlugin interface {
	Ref
	TypedPtr() EditorResourceTooltipPlugin
}

type RefEditorResourceTooltipPluginImpl TypedRef[EditorResourceTooltipPlugin]

func (r *RefEditorResourceTooltipPluginImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorResourceTooltipPlugin])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorResourceTooltipPluginImpl) TypedPtr() EditorResourceTooltipPlugin {
	rg := (*TypedRef[EditorResourceTooltipPlugin])(r)
	return rg.TypedPtr()
}

func (r *RefEditorResourceTooltipPluginImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorResourceTooltipPlugin])(r)
	rg.Ref(from)
}

func (r *RefEditorResourceTooltipPluginImpl) TypedRef(from *RefEditorResourceTooltipPluginImpl) {
	rg := (*TypedRef[EditorResourceTooltipPlugin])(r)
	t := (*TypedRef[EditorResourceTooltipPlugin])(from)
	rg.TypedRef((*TypedRef[EditorResourceTooltipPlugin])(t))
}

func (r *RefEditorResourceTooltipPluginImpl) Unref() {
	rg := (*TypedRef[EditorResourceTooltipPlugin])(r)
	rg.Unref()
}

func (r *RefEditorResourceTooltipPluginImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorResourceTooltipPlugin(reference EditorResourceTooltipPlugin) RefEditorResourceTooltipPlugin {
	return (RefEditorResourceTooltipPlugin)(NewTypedRef[EditorResourceTooltipPlugin](reference))
}

func newRefEditorResourceTooltipPluginAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorResourceTooltipPlugin](reference.(EditorResourceTooltipPlugin)))
}

func newRefEditorResourceTooltipPluginGDExtensionIternalConstructor(reference EditorResourceTooltipPlugin) RefEditorResourceTooltipPlugin {
	return newTypedRefGDExtensionIternalConstructor[EditorResourceTooltipPlugin](reference)
}

var _ RefEditorSceneFormatImporter = &RefEditorSceneFormatImporterImpl{}
var _ Ref = &RefEditorSceneFormatImporterImpl{}

type RefEditorSceneFormatImporter interface {
	Ref
	TypedPtr() EditorSceneFormatImporter
}

type RefEditorSceneFormatImporterImpl TypedRef[EditorSceneFormatImporter]

func (r *RefEditorSceneFormatImporterImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorSceneFormatImporter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorSceneFormatImporterImpl) TypedPtr() EditorSceneFormatImporter {
	rg := (*TypedRef[EditorSceneFormatImporter])(r)
	return rg.TypedPtr()
}

func (r *RefEditorSceneFormatImporterImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorSceneFormatImporter])(r)
	rg.Ref(from)
}

func (r *RefEditorSceneFormatImporterImpl) TypedRef(from *RefEditorSceneFormatImporterImpl) {
	rg := (*TypedRef[EditorSceneFormatImporter])(r)
	t := (*TypedRef[EditorSceneFormatImporter])(from)
	rg.TypedRef((*TypedRef[EditorSceneFormatImporter])(t))
}

func (r *RefEditorSceneFormatImporterImpl) Unref() {
	rg := (*TypedRef[EditorSceneFormatImporter])(r)
	rg.Unref()
}

func (r *RefEditorSceneFormatImporterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorSceneFormatImporter(reference EditorSceneFormatImporter) RefEditorSceneFormatImporter {
	return (RefEditorSceneFormatImporter)(NewTypedRef[EditorSceneFormatImporter](reference))
}

func newRefEditorSceneFormatImporterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorSceneFormatImporter](reference.(EditorSceneFormatImporter)))
}

func newRefEditorSceneFormatImporterGDExtensionIternalConstructor(reference EditorSceneFormatImporter) RefEditorSceneFormatImporter {
	return newTypedRefGDExtensionIternalConstructor[EditorSceneFormatImporter](reference)
}

var _ RefEditorSceneFormatImporterBlend = &RefEditorSceneFormatImporterBlendImpl{}
var _ Ref = &RefEditorSceneFormatImporterBlendImpl{}

type RefEditorSceneFormatImporterBlend interface {
	Ref
	TypedPtr() EditorSceneFormatImporterBlend
}

type RefEditorSceneFormatImporterBlendImpl TypedRef[EditorSceneFormatImporterBlend]

func (r *RefEditorSceneFormatImporterBlendImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorSceneFormatImporterBlend])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorSceneFormatImporterBlendImpl) TypedPtr() EditorSceneFormatImporterBlend {
	rg := (*TypedRef[EditorSceneFormatImporterBlend])(r)
	return rg.TypedPtr()
}

func (r *RefEditorSceneFormatImporterBlendImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorSceneFormatImporterBlend])(r)
	rg.Ref(from)
}

func (r *RefEditorSceneFormatImporterBlendImpl) TypedRef(from *RefEditorSceneFormatImporterBlendImpl) {
	rg := (*TypedRef[EditorSceneFormatImporterBlend])(r)
	t := (*TypedRef[EditorSceneFormatImporterBlend])(from)
	rg.TypedRef((*TypedRef[EditorSceneFormatImporterBlend])(t))
}

func (r *RefEditorSceneFormatImporterBlendImpl) Unref() {
	rg := (*TypedRef[EditorSceneFormatImporterBlend])(r)
	rg.Unref()
}

func (r *RefEditorSceneFormatImporterBlendImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorSceneFormatImporterBlend(reference EditorSceneFormatImporterBlend) RefEditorSceneFormatImporterBlend {
	return (RefEditorSceneFormatImporterBlend)(NewTypedRef[EditorSceneFormatImporterBlend](reference))
}

func newRefEditorSceneFormatImporterBlendAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorSceneFormatImporterBlend](reference.(EditorSceneFormatImporterBlend)))
}

func newRefEditorSceneFormatImporterBlendGDExtensionIternalConstructor(reference EditorSceneFormatImporterBlend) RefEditorSceneFormatImporterBlend {
	return newTypedRefGDExtensionIternalConstructor[EditorSceneFormatImporterBlend](reference)
}

var _ RefEditorSceneFormatImporterFBX = &RefEditorSceneFormatImporterFBXImpl{}
var _ Ref = &RefEditorSceneFormatImporterFBXImpl{}

type RefEditorSceneFormatImporterFBX interface {
	Ref
	TypedPtr() EditorSceneFormatImporterFBX
}

type RefEditorSceneFormatImporterFBXImpl TypedRef[EditorSceneFormatImporterFBX]

func (r *RefEditorSceneFormatImporterFBXImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorSceneFormatImporterFBX])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorSceneFormatImporterFBXImpl) TypedPtr() EditorSceneFormatImporterFBX {
	rg := (*TypedRef[EditorSceneFormatImporterFBX])(r)
	return rg.TypedPtr()
}

func (r *RefEditorSceneFormatImporterFBXImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorSceneFormatImporterFBX])(r)
	rg.Ref(from)
}

func (r *RefEditorSceneFormatImporterFBXImpl) TypedRef(from *RefEditorSceneFormatImporterFBXImpl) {
	rg := (*TypedRef[EditorSceneFormatImporterFBX])(r)
	t := (*TypedRef[EditorSceneFormatImporterFBX])(from)
	rg.TypedRef((*TypedRef[EditorSceneFormatImporterFBX])(t))
}

func (r *RefEditorSceneFormatImporterFBXImpl) Unref() {
	rg := (*TypedRef[EditorSceneFormatImporterFBX])(r)
	rg.Unref()
}

func (r *RefEditorSceneFormatImporterFBXImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorSceneFormatImporterFBX(reference EditorSceneFormatImporterFBX) RefEditorSceneFormatImporterFBX {
	return (RefEditorSceneFormatImporterFBX)(NewTypedRef[EditorSceneFormatImporterFBX](reference))
}

func newRefEditorSceneFormatImporterFBXAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorSceneFormatImporterFBX](reference.(EditorSceneFormatImporterFBX)))
}

func newRefEditorSceneFormatImporterFBXGDExtensionIternalConstructor(reference EditorSceneFormatImporterFBX) RefEditorSceneFormatImporterFBX {
	return newTypedRefGDExtensionIternalConstructor[EditorSceneFormatImporterFBX](reference)
}

var _ RefEditorSceneFormatImporterGLTF = &RefEditorSceneFormatImporterGLTFImpl{}
var _ Ref = &RefEditorSceneFormatImporterGLTFImpl{}

type RefEditorSceneFormatImporterGLTF interface {
	Ref
	TypedPtr() EditorSceneFormatImporterGLTF
}

type RefEditorSceneFormatImporterGLTFImpl TypedRef[EditorSceneFormatImporterGLTF]

func (r *RefEditorSceneFormatImporterGLTFImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorSceneFormatImporterGLTF])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorSceneFormatImporterGLTFImpl) TypedPtr() EditorSceneFormatImporterGLTF {
	rg := (*TypedRef[EditorSceneFormatImporterGLTF])(r)
	return rg.TypedPtr()
}

func (r *RefEditorSceneFormatImporterGLTFImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorSceneFormatImporterGLTF])(r)
	rg.Ref(from)
}

func (r *RefEditorSceneFormatImporterGLTFImpl) TypedRef(from *RefEditorSceneFormatImporterGLTFImpl) {
	rg := (*TypedRef[EditorSceneFormatImporterGLTF])(r)
	t := (*TypedRef[EditorSceneFormatImporterGLTF])(from)
	rg.TypedRef((*TypedRef[EditorSceneFormatImporterGLTF])(t))
}

func (r *RefEditorSceneFormatImporterGLTFImpl) Unref() {
	rg := (*TypedRef[EditorSceneFormatImporterGLTF])(r)
	rg.Unref()
}

func (r *RefEditorSceneFormatImporterGLTFImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorSceneFormatImporterGLTF(reference EditorSceneFormatImporterGLTF) RefEditorSceneFormatImporterGLTF {
	return (RefEditorSceneFormatImporterGLTF)(NewTypedRef[EditorSceneFormatImporterGLTF](reference))
}

func newRefEditorSceneFormatImporterGLTFAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorSceneFormatImporterGLTF](reference.(EditorSceneFormatImporterGLTF)))
}

func newRefEditorSceneFormatImporterGLTFGDExtensionIternalConstructor(reference EditorSceneFormatImporterGLTF) RefEditorSceneFormatImporterGLTF {
	return newTypedRefGDExtensionIternalConstructor[EditorSceneFormatImporterGLTF](reference)
}

var _ RefEditorScenePostImport = &RefEditorScenePostImportImpl{}
var _ Ref = &RefEditorScenePostImportImpl{}

type RefEditorScenePostImport interface {
	Ref
	TypedPtr() EditorScenePostImport
}

type RefEditorScenePostImportImpl TypedRef[EditorScenePostImport]

func (r *RefEditorScenePostImportImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorScenePostImport])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorScenePostImportImpl) TypedPtr() EditorScenePostImport {
	rg := (*TypedRef[EditorScenePostImport])(r)
	return rg.TypedPtr()
}

func (r *RefEditorScenePostImportImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorScenePostImport])(r)
	rg.Ref(from)
}

func (r *RefEditorScenePostImportImpl) TypedRef(from *RefEditorScenePostImportImpl) {
	rg := (*TypedRef[EditorScenePostImport])(r)
	t := (*TypedRef[EditorScenePostImport])(from)
	rg.TypedRef((*TypedRef[EditorScenePostImport])(t))
}

func (r *RefEditorScenePostImportImpl) Unref() {
	rg := (*TypedRef[EditorScenePostImport])(r)
	rg.Unref()
}

func (r *RefEditorScenePostImportImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorScenePostImport(reference EditorScenePostImport) RefEditorScenePostImport {
	return (RefEditorScenePostImport)(NewTypedRef[EditorScenePostImport](reference))
}

func newRefEditorScenePostImportAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorScenePostImport](reference.(EditorScenePostImport)))
}

func newRefEditorScenePostImportGDExtensionIternalConstructor(reference EditorScenePostImport) RefEditorScenePostImport {
	return newTypedRefGDExtensionIternalConstructor[EditorScenePostImport](reference)
}

var _ RefEditorScenePostImportPlugin = &RefEditorScenePostImportPluginImpl{}
var _ Ref = &RefEditorScenePostImportPluginImpl{}

type RefEditorScenePostImportPlugin interface {
	Ref
	TypedPtr() EditorScenePostImportPlugin
}

type RefEditorScenePostImportPluginImpl TypedRef[EditorScenePostImportPlugin]

func (r *RefEditorScenePostImportPluginImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorScenePostImportPlugin])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorScenePostImportPluginImpl) TypedPtr() EditorScenePostImportPlugin {
	rg := (*TypedRef[EditorScenePostImportPlugin])(r)
	return rg.TypedPtr()
}

func (r *RefEditorScenePostImportPluginImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorScenePostImportPlugin])(r)
	rg.Ref(from)
}

func (r *RefEditorScenePostImportPluginImpl) TypedRef(from *RefEditorScenePostImportPluginImpl) {
	rg := (*TypedRef[EditorScenePostImportPlugin])(r)
	t := (*TypedRef[EditorScenePostImportPlugin])(from)
	rg.TypedRef((*TypedRef[EditorScenePostImportPlugin])(t))
}

func (r *RefEditorScenePostImportPluginImpl) Unref() {
	rg := (*TypedRef[EditorScenePostImportPlugin])(r)
	rg.Unref()
}

func (r *RefEditorScenePostImportPluginImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorScenePostImportPlugin(reference EditorScenePostImportPlugin) RefEditorScenePostImportPlugin {
	return (RefEditorScenePostImportPlugin)(NewTypedRef[EditorScenePostImportPlugin](reference))
}

func newRefEditorScenePostImportPluginAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorScenePostImportPlugin](reference.(EditorScenePostImportPlugin)))
}

func newRefEditorScenePostImportPluginGDExtensionIternalConstructor(reference EditorScenePostImportPlugin) RefEditorScenePostImportPlugin {
	return newTypedRefGDExtensionIternalConstructor[EditorScenePostImportPlugin](reference)
}

var _ RefEditorScript = &RefEditorScriptImpl{}
var _ Ref = &RefEditorScriptImpl{}

type RefEditorScript interface {
	Ref
	TypedPtr() EditorScript
}

type RefEditorScriptImpl TypedRef[EditorScript]

func (r *RefEditorScriptImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorScript])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorScriptImpl) TypedPtr() EditorScript {
	rg := (*TypedRef[EditorScript])(r)
	return rg.TypedPtr()
}

func (r *RefEditorScriptImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorScript])(r)
	rg.Ref(from)
}

func (r *RefEditorScriptImpl) TypedRef(from *RefEditorScriptImpl) {
	rg := (*TypedRef[EditorScript])(r)
	t := (*TypedRef[EditorScript])(from)
	rg.TypedRef((*TypedRef[EditorScript])(t))
}

func (r *RefEditorScriptImpl) Unref() {
	rg := (*TypedRef[EditorScript])(r)
	rg.Unref()
}

func (r *RefEditorScriptImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorScript(reference EditorScript) RefEditorScript {
	return (RefEditorScript)(NewTypedRef[EditorScript](reference))
}

func newRefEditorScriptAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorScript](reference.(EditorScript)))
}

func newRefEditorScriptGDExtensionIternalConstructor(reference EditorScript) RefEditorScript {
	return newTypedRefGDExtensionIternalConstructor[EditorScript](reference)
}

var _ RefEditorSettings = &RefEditorSettingsImpl{}
var _ Ref = &RefEditorSettingsImpl{}

type RefEditorSettings interface {
	Ref
	TypedPtr() EditorSettings
}

type RefEditorSettingsImpl TypedRef[EditorSettings]

func (r *RefEditorSettingsImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorSettings])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorSettingsImpl) TypedPtr() EditorSettings {
	rg := (*TypedRef[EditorSettings])(r)
	return rg.TypedPtr()
}

func (r *RefEditorSettingsImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorSettings])(r)
	rg.Ref(from)
}

func (r *RefEditorSettingsImpl) TypedRef(from *RefEditorSettingsImpl) {
	rg := (*TypedRef[EditorSettings])(r)
	t := (*TypedRef[EditorSettings])(from)
	rg.TypedRef((*TypedRef[EditorSettings])(t))
}

func (r *RefEditorSettingsImpl) Unref() {
	rg := (*TypedRef[EditorSettings])(r)
	rg.Unref()
}

func (r *RefEditorSettingsImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorSettings(reference EditorSettings) RefEditorSettings {
	return (RefEditorSettings)(NewTypedRef[EditorSettings](reference))
}

func newRefEditorSettingsAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorSettings](reference.(EditorSettings)))
}

func newRefEditorSettingsGDExtensionIternalConstructor(reference EditorSettings) RefEditorSettings {
	return newTypedRefGDExtensionIternalConstructor[EditorSettings](reference)
}

var _ RefEditorSyntaxHighlighter = &RefEditorSyntaxHighlighterImpl{}
var _ Ref = &RefEditorSyntaxHighlighterImpl{}

type RefEditorSyntaxHighlighter interface {
	Ref
	TypedPtr() EditorSyntaxHighlighter
}

type RefEditorSyntaxHighlighterImpl TypedRef[EditorSyntaxHighlighter]

func (r *RefEditorSyntaxHighlighterImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorSyntaxHighlighter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorSyntaxHighlighterImpl) TypedPtr() EditorSyntaxHighlighter {
	rg := (*TypedRef[EditorSyntaxHighlighter])(r)
	return rg.TypedPtr()
}

func (r *RefEditorSyntaxHighlighterImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorSyntaxHighlighter])(r)
	rg.Ref(from)
}

func (r *RefEditorSyntaxHighlighterImpl) TypedRef(from *RefEditorSyntaxHighlighterImpl) {
	rg := (*TypedRef[EditorSyntaxHighlighter])(r)
	t := (*TypedRef[EditorSyntaxHighlighter])(from)
	rg.TypedRef((*TypedRef[EditorSyntaxHighlighter])(t))
}

func (r *RefEditorSyntaxHighlighterImpl) Unref() {
	rg := (*TypedRef[EditorSyntaxHighlighter])(r)
	rg.Unref()
}

func (r *RefEditorSyntaxHighlighterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorSyntaxHighlighter(reference EditorSyntaxHighlighter) RefEditorSyntaxHighlighter {
	return (RefEditorSyntaxHighlighter)(NewTypedRef[EditorSyntaxHighlighter](reference))
}

func newRefEditorSyntaxHighlighterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorSyntaxHighlighter](reference.(EditorSyntaxHighlighter)))
}

func newRefEditorSyntaxHighlighterGDExtensionIternalConstructor(reference EditorSyntaxHighlighter) RefEditorSyntaxHighlighter {
	return newTypedRefGDExtensionIternalConstructor[EditorSyntaxHighlighter](reference)
}

var _ RefEditorTranslationParserPlugin = &RefEditorTranslationParserPluginImpl{}
var _ Ref = &RefEditorTranslationParserPluginImpl{}

type RefEditorTranslationParserPlugin interface {
	Ref
	TypedPtr() EditorTranslationParserPlugin
}

type RefEditorTranslationParserPluginImpl TypedRef[EditorTranslationParserPlugin]

func (r *RefEditorTranslationParserPluginImpl) Ptr() RefCounted {
	rg := (*TypedRef[EditorTranslationParserPlugin])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEditorTranslationParserPluginImpl) TypedPtr() EditorTranslationParserPlugin {
	rg := (*TypedRef[EditorTranslationParserPlugin])(r)
	return rg.TypedPtr()
}

func (r *RefEditorTranslationParserPluginImpl) Ref(from Ref) {
	rg := (*TypedRef[EditorTranslationParserPlugin])(r)
	rg.Ref(from)
}

func (r *RefEditorTranslationParserPluginImpl) TypedRef(from *RefEditorTranslationParserPluginImpl) {
	rg := (*TypedRef[EditorTranslationParserPlugin])(r)
	t := (*TypedRef[EditorTranslationParserPlugin])(from)
	rg.TypedRef((*TypedRef[EditorTranslationParserPlugin])(t))
}

func (r *RefEditorTranslationParserPluginImpl) Unref() {
	rg := (*TypedRef[EditorTranslationParserPlugin])(r)
	rg.Unref()
}

func (r *RefEditorTranslationParserPluginImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEditorTranslationParserPlugin(reference EditorTranslationParserPlugin) RefEditorTranslationParserPlugin {
	return (RefEditorTranslationParserPlugin)(NewTypedRef[EditorTranslationParserPlugin](reference))
}

func newRefEditorTranslationParserPluginAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EditorTranslationParserPlugin](reference.(EditorTranslationParserPlugin)))
}

func newRefEditorTranslationParserPluginGDExtensionIternalConstructor(reference EditorTranslationParserPlugin) RefEditorTranslationParserPlugin {
	return newTypedRefGDExtensionIternalConstructor[EditorTranslationParserPlugin](reference)
}

var _ RefEncodedObjectAsID = &RefEncodedObjectAsIDImpl{}
var _ Ref = &RefEncodedObjectAsIDImpl{}

type RefEncodedObjectAsID interface {
	Ref
	TypedPtr() EncodedObjectAsID
}

type RefEncodedObjectAsIDImpl TypedRef[EncodedObjectAsID]

func (r *RefEncodedObjectAsIDImpl) Ptr() RefCounted {
	rg := (*TypedRef[EncodedObjectAsID])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEncodedObjectAsIDImpl) TypedPtr() EncodedObjectAsID {
	rg := (*TypedRef[EncodedObjectAsID])(r)
	return rg.TypedPtr()
}

func (r *RefEncodedObjectAsIDImpl) Ref(from Ref) {
	rg := (*TypedRef[EncodedObjectAsID])(r)
	rg.Ref(from)
}

func (r *RefEncodedObjectAsIDImpl) TypedRef(from *RefEncodedObjectAsIDImpl) {
	rg := (*TypedRef[EncodedObjectAsID])(r)
	t := (*TypedRef[EncodedObjectAsID])(from)
	rg.TypedRef((*TypedRef[EncodedObjectAsID])(t))
}

func (r *RefEncodedObjectAsIDImpl) Unref() {
	rg := (*TypedRef[EncodedObjectAsID])(r)
	rg.Unref()
}

func (r *RefEncodedObjectAsIDImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEncodedObjectAsID(reference EncodedObjectAsID) RefEncodedObjectAsID {
	return (RefEncodedObjectAsID)(NewTypedRef[EncodedObjectAsID](reference))
}

func newRefEncodedObjectAsIDAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EncodedObjectAsID](reference.(EncodedObjectAsID)))
}

func newRefEncodedObjectAsIDGDExtensionIternalConstructor(reference EncodedObjectAsID) RefEncodedObjectAsID {
	return newTypedRefGDExtensionIternalConstructor[EncodedObjectAsID](reference)
}

var _ RefEngineProfiler = &RefEngineProfilerImpl{}
var _ Ref = &RefEngineProfilerImpl{}

type RefEngineProfiler interface {
	Ref
	TypedPtr() EngineProfiler
}

type RefEngineProfilerImpl TypedRef[EngineProfiler]

func (r *RefEngineProfilerImpl) Ptr() RefCounted {
	rg := (*TypedRef[EngineProfiler])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEngineProfilerImpl) TypedPtr() EngineProfiler {
	rg := (*TypedRef[EngineProfiler])(r)
	return rg.TypedPtr()
}

func (r *RefEngineProfilerImpl) Ref(from Ref) {
	rg := (*TypedRef[EngineProfiler])(r)
	rg.Ref(from)
}

func (r *RefEngineProfilerImpl) TypedRef(from *RefEngineProfilerImpl) {
	rg := (*TypedRef[EngineProfiler])(r)
	t := (*TypedRef[EngineProfiler])(from)
	rg.TypedRef((*TypedRef[EngineProfiler])(t))
}

func (r *RefEngineProfilerImpl) Unref() {
	rg := (*TypedRef[EngineProfiler])(r)
	rg.Unref()
}

func (r *RefEngineProfilerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEngineProfiler(reference EngineProfiler) RefEngineProfiler {
	return (RefEngineProfiler)(NewTypedRef[EngineProfiler](reference))
}

func newRefEngineProfilerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[EngineProfiler](reference.(EngineProfiler)))
}

func newRefEngineProfilerGDExtensionIternalConstructor(reference EngineProfiler) RefEngineProfiler {
	return newTypedRefGDExtensionIternalConstructor[EngineProfiler](reference)
}

var _ RefEnvironment = &RefEnvironmentImpl{}
var _ Ref = &RefEnvironmentImpl{}

type RefEnvironment interface {
	Ref
	TypedPtr() Environment
}

type RefEnvironmentImpl TypedRef[Environment]

func (r *RefEnvironmentImpl) Ptr() RefCounted {
	rg := (*TypedRef[Environment])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefEnvironmentImpl) TypedPtr() Environment {
	rg := (*TypedRef[Environment])(r)
	return rg.TypedPtr()
}

func (r *RefEnvironmentImpl) Ref(from Ref) {
	rg := (*TypedRef[Environment])(r)
	rg.Ref(from)
}

func (r *RefEnvironmentImpl) TypedRef(from *RefEnvironmentImpl) {
	rg := (*TypedRef[Environment])(r)
	t := (*TypedRef[Environment])(from)
	rg.TypedRef((*TypedRef[Environment])(t))
}

func (r *RefEnvironmentImpl) Unref() {
	rg := (*TypedRef[Environment])(r)
	rg.Unref()
}

func (r *RefEnvironmentImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefEnvironment(reference Environment) RefEnvironment {
	return (RefEnvironment)(NewTypedRef[Environment](reference))
}

func newRefEnvironmentAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Environment](reference.(Environment)))
}

func newRefEnvironmentGDExtensionIternalConstructor(reference Environment) RefEnvironment {
	return newTypedRefGDExtensionIternalConstructor[Environment](reference)
}

var _ RefExpression = &RefExpressionImpl{}
var _ Ref = &RefExpressionImpl{}

type RefExpression interface {
	Ref
	TypedPtr() Expression
}

type RefExpressionImpl TypedRef[Expression]

func (r *RefExpressionImpl) Ptr() RefCounted {
	rg := (*TypedRef[Expression])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefExpressionImpl) TypedPtr() Expression {
	rg := (*TypedRef[Expression])(r)
	return rg.TypedPtr()
}

func (r *RefExpressionImpl) Ref(from Ref) {
	rg := (*TypedRef[Expression])(r)
	rg.Ref(from)
}

func (r *RefExpressionImpl) TypedRef(from *RefExpressionImpl) {
	rg := (*TypedRef[Expression])(r)
	t := (*TypedRef[Expression])(from)
	rg.TypedRef((*TypedRef[Expression])(t))
}

func (r *RefExpressionImpl) Unref() {
	rg := (*TypedRef[Expression])(r)
	rg.Unref()
}

func (r *RefExpressionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefExpression(reference Expression) RefExpression {
	return (RefExpression)(NewTypedRef[Expression](reference))
}

func newRefExpressionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Expression](reference.(Expression)))
}

func newRefExpressionGDExtensionIternalConstructor(reference Expression) RefExpression {
	return newTypedRefGDExtensionIternalConstructor[Expression](reference)
}

var _ RefFastNoiseLite = &RefFastNoiseLiteImpl{}
var _ Ref = &RefFastNoiseLiteImpl{}

type RefFastNoiseLite interface {
	Ref
	TypedPtr() FastNoiseLite
}

type RefFastNoiseLiteImpl TypedRef[FastNoiseLite]

func (r *RefFastNoiseLiteImpl) Ptr() RefCounted {
	rg := (*TypedRef[FastNoiseLite])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefFastNoiseLiteImpl) TypedPtr() FastNoiseLite {
	rg := (*TypedRef[FastNoiseLite])(r)
	return rg.TypedPtr()
}

func (r *RefFastNoiseLiteImpl) Ref(from Ref) {
	rg := (*TypedRef[FastNoiseLite])(r)
	rg.Ref(from)
}

func (r *RefFastNoiseLiteImpl) TypedRef(from *RefFastNoiseLiteImpl) {
	rg := (*TypedRef[FastNoiseLite])(r)
	t := (*TypedRef[FastNoiseLite])(from)
	rg.TypedRef((*TypedRef[FastNoiseLite])(t))
}

func (r *RefFastNoiseLiteImpl) Unref() {
	rg := (*TypedRef[FastNoiseLite])(r)
	rg.Unref()
}

func (r *RefFastNoiseLiteImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefFastNoiseLite(reference FastNoiseLite) RefFastNoiseLite {
	return (RefFastNoiseLite)(NewTypedRef[FastNoiseLite](reference))
}

func newRefFastNoiseLiteAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[FastNoiseLite](reference.(FastNoiseLite)))
}

func newRefFastNoiseLiteGDExtensionIternalConstructor(reference FastNoiseLite) RefFastNoiseLite {
	return newTypedRefGDExtensionIternalConstructor[FastNoiseLite](reference)
}

var _ RefFileAccess = &RefFileAccessImpl{}
var _ Ref = &RefFileAccessImpl{}

type RefFileAccess interface {
	Ref
	TypedPtr() FileAccess
}

type RefFileAccessImpl TypedRef[FileAccess]

func (r *RefFileAccessImpl) Ptr() RefCounted {
	rg := (*TypedRef[FileAccess])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefFileAccessImpl) TypedPtr() FileAccess {
	rg := (*TypedRef[FileAccess])(r)
	return rg.TypedPtr()
}

func (r *RefFileAccessImpl) Ref(from Ref) {
	rg := (*TypedRef[FileAccess])(r)
	rg.Ref(from)
}

func (r *RefFileAccessImpl) TypedRef(from *RefFileAccessImpl) {
	rg := (*TypedRef[FileAccess])(r)
	t := (*TypedRef[FileAccess])(from)
	rg.TypedRef((*TypedRef[FileAccess])(t))
}

func (r *RefFileAccessImpl) Unref() {
	rg := (*TypedRef[FileAccess])(r)
	rg.Unref()
}

func (r *RefFileAccessImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefFileAccess(reference FileAccess) RefFileAccess {
	return (RefFileAccess)(NewTypedRef[FileAccess](reference))
}

func newRefFileAccessAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[FileAccess](reference.(FileAccess)))
}

func newRefFileAccessGDExtensionIternalConstructor(reference FileAccess) RefFileAccess {
	return newTypedRefGDExtensionIternalConstructor[FileAccess](reference)
}

var _ RefFogMaterial = &RefFogMaterialImpl{}
var _ Ref = &RefFogMaterialImpl{}

type RefFogMaterial interface {
	Ref
	TypedPtr() FogMaterial
}

type RefFogMaterialImpl TypedRef[FogMaterial]

func (r *RefFogMaterialImpl) Ptr() RefCounted {
	rg := (*TypedRef[FogMaterial])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefFogMaterialImpl) TypedPtr() FogMaterial {
	rg := (*TypedRef[FogMaterial])(r)
	return rg.TypedPtr()
}

func (r *RefFogMaterialImpl) Ref(from Ref) {
	rg := (*TypedRef[FogMaterial])(r)
	rg.Ref(from)
}

func (r *RefFogMaterialImpl) TypedRef(from *RefFogMaterialImpl) {
	rg := (*TypedRef[FogMaterial])(r)
	t := (*TypedRef[FogMaterial])(from)
	rg.TypedRef((*TypedRef[FogMaterial])(t))
}

func (r *RefFogMaterialImpl) Unref() {
	rg := (*TypedRef[FogMaterial])(r)
	rg.Unref()
}

func (r *RefFogMaterialImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefFogMaterial(reference FogMaterial) RefFogMaterial {
	return (RefFogMaterial)(NewTypedRef[FogMaterial](reference))
}

func newRefFogMaterialAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[FogMaterial](reference.(FogMaterial)))
}

func newRefFogMaterialGDExtensionIternalConstructor(reference FogMaterial) RefFogMaterial {
	return newTypedRefGDExtensionIternalConstructor[FogMaterial](reference)
}

var _ RefFont = &RefFontImpl{}
var _ Ref = &RefFontImpl{}

type RefFont interface {
	Ref
	TypedPtr() Font
}

type RefFontImpl TypedRef[Font]

func (r *RefFontImpl) Ptr() RefCounted {
	rg := (*TypedRef[Font])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefFontImpl) TypedPtr() Font {
	rg := (*TypedRef[Font])(r)
	return rg.TypedPtr()
}

func (r *RefFontImpl) Ref(from Ref) {
	rg := (*TypedRef[Font])(r)
	rg.Ref(from)
}

func (r *RefFontImpl) TypedRef(from *RefFontImpl) {
	rg := (*TypedRef[Font])(r)
	t := (*TypedRef[Font])(from)
	rg.TypedRef((*TypedRef[Font])(t))
}

func (r *RefFontImpl) Unref() {
	rg := (*TypedRef[Font])(r)
	rg.Unref()
}

func (r *RefFontImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefFont(reference Font) RefFont {
	return (RefFont)(NewTypedRef[Font](reference))
}

func newRefFontAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Font](reference.(Font)))
}

func newRefFontGDExtensionIternalConstructor(reference Font) RefFont {
	return newTypedRefGDExtensionIternalConstructor[Font](reference)
}

var _ RefFontFile = &RefFontFileImpl{}
var _ Ref = &RefFontFileImpl{}

type RefFontFile interface {
	Ref
	TypedPtr() FontFile
}

type RefFontFileImpl TypedRef[FontFile]

func (r *RefFontFileImpl) Ptr() RefCounted {
	rg := (*TypedRef[FontFile])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefFontFileImpl) TypedPtr() FontFile {
	rg := (*TypedRef[FontFile])(r)
	return rg.TypedPtr()
}

func (r *RefFontFileImpl) Ref(from Ref) {
	rg := (*TypedRef[FontFile])(r)
	rg.Ref(from)
}

func (r *RefFontFileImpl) TypedRef(from *RefFontFileImpl) {
	rg := (*TypedRef[FontFile])(r)
	t := (*TypedRef[FontFile])(from)
	rg.TypedRef((*TypedRef[FontFile])(t))
}

func (r *RefFontFileImpl) Unref() {
	rg := (*TypedRef[FontFile])(r)
	rg.Unref()
}

func (r *RefFontFileImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefFontFile(reference FontFile) RefFontFile {
	return (RefFontFile)(NewTypedRef[FontFile](reference))
}

func newRefFontFileAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[FontFile](reference.(FontFile)))
}

func newRefFontFileGDExtensionIternalConstructor(reference FontFile) RefFontFile {
	return newTypedRefGDExtensionIternalConstructor[FontFile](reference)
}

var _ RefFontVariation = &RefFontVariationImpl{}
var _ Ref = &RefFontVariationImpl{}

type RefFontVariation interface {
	Ref
	TypedPtr() FontVariation
}

type RefFontVariationImpl TypedRef[FontVariation]

func (r *RefFontVariationImpl) Ptr() RefCounted {
	rg := (*TypedRef[FontVariation])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefFontVariationImpl) TypedPtr() FontVariation {
	rg := (*TypedRef[FontVariation])(r)
	return rg.TypedPtr()
}

func (r *RefFontVariationImpl) Ref(from Ref) {
	rg := (*TypedRef[FontVariation])(r)
	rg.Ref(from)
}

func (r *RefFontVariationImpl) TypedRef(from *RefFontVariationImpl) {
	rg := (*TypedRef[FontVariation])(r)
	t := (*TypedRef[FontVariation])(from)
	rg.TypedRef((*TypedRef[FontVariation])(t))
}

func (r *RefFontVariationImpl) Unref() {
	rg := (*TypedRef[FontVariation])(r)
	rg.Unref()
}

func (r *RefFontVariationImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefFontVariation(reference FontVariation) RefFontVariation {
	return (RefFontVariation)(NewTypedRef[FontVariation](reference))
}

func newRefFontVariationAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[FontVariation](reference.(FontVariation)))
}

func newRefFontVariationGDExtensionIternalConstructor(reference FontVariation) RefFontVariation {
	return newTypedRefGDExtensionIternalConstructor[FontVariation](reference)
}

var _ RefGDExtension = &RefGDExtensionImpl{}
var _ Ref = &RefGDExtensionImpl{}

type RefGDExtension interface {
	Ref
	TypedPtr() GDExtension
}

type RefGDExtensionImpl TypedRef[GDExtension]

func (r *RefGDExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[GDExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGDExtensionImpl) TypedPtr() GDExtension {
	rg := (*TypedRef[GDExtension])(r)
	return rg.TypedPtr()
}

func (r *RefGDExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[GDExtension])(r)
	rg.Ref(from)
}

func (r *RefGDExtensionImpl) TypedRef(from *RefGDExtensionImpl) {
	rg := (*TypedRef[GDExtension])(r)
	t := (*TypedRef[GDExtension])(from)
	rg.TypedRef((*TypedRef[GDExtension])(t))
}

func (r *RefGDExtensionImpl) Unref() {
	rg := (*TypedRef[GDExtension])(r)
	rg.Unref()
}

func (r *RefGDExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGDExtension(reference GDExtension) RefGDExtension {
	return (RefGDExtension)(NewTypedRef[GDExtension](reference))
}

func newRefGDExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GDExtension](reference.(GDExtension)))
}

func newRefGDExtensionGDExtensionIternalConstructor(reference GDExtension) RefGDExtension {
	return newTypedRefGDExtensionIternalConstructor[GDExtension](reference)
}

var _ RefGDScript = &RefGDScriptImpl{}
var _ Ref = &RefGDScriptImpl{}

type RefGDScript interface {
	Ref
	TypedPtr() GDScript
}

type RefGDScriptImpl TypedRef[GDScript]

func (r *RefGDScriptImpl) Ptr() RefCounted {
	rg := (*TypedRef[GDScript])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGDScriptImpl) TypedPtr() GDScript {
	rg := (*TypedRef[GDScript])(r)
	return rg.TypedPtr()
}

func (r *RefGDScriptImpl) Ref(from Ref) {
	rg := (*TypedRef[GDScript])(r)
	rg.Ref(from)
}

func (r *RefGDScriptImpl) TypedRef(from *RefGDScriptImpl) {
	rg := (*TypedRef[GDScript])(r)
	t := (*TypedRef[GDScript])(from)
	rg.TypedRef((*TypedRef[GDScript])(t))
}

func (r *RefGDScriptImpl) Unref() {
	rg := (*TypedRef[GDScript])(r)
	rg.Unref()
}

func (r *RefGDScriptImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGDScript(reference GDScript) RefGDScript {
	return (RefGDScript)(NewTypedRef[GDScript](reference))
}

func newRefGDScriptAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GDScript](reference.(GDScript)))
}

func newRefGDScriptGDExtensionIternalConstructor(reference GDScript) RefGDScript {
	return newTypedRefGDExtensionIternalConstructor[GDScript](reference)
}

var _ RefGLTFAccessor = &RefGLTFAccessorImpl{}
var _ Ref = &RefGLTFAccessorImpl{}

type RefGLTFAccessor interface {
	Ref
	TypedPtr() GLTFAccessor
}

type RefGLTFAccessorImpl TypedRef[GLTFAccessor]

func (r *RefGLTFAccessorImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFAccessor])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFAccessorImpl) TypedPtr() GLTFAccessor {
	rg := (*TypedRef[GLTFAccessor])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFAccessorImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFAccessor])(r)
	rg.Ref(from)
}

func (r *RefGLTFAccessorImpl) TypedRef(from *RefGLTFAccessorImpl) {
	rg := (*TypedRef[GLTFAccessor])(r)
	t := (*TypedRef[GLTFAccessor])(from)
	rg.TypedRef((*TypedRef[GLTFAccessor])(t))
}

func (r *RefGLTFAccessorImpl) Unref() {
	rg := (*TypedRef[GLTFAccessor])(r)
	rg.Unref()
}

func (r *RefGLTFAccessorImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFAccessor(reference GLTFAccessor) RefGLTFAccessor {
	return (RefGLTFAccessor)(NewTypedRef[GLTFAccessor](reference))
}

func newRefGLTFAccessorAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFAccessor](reference.(GLTFAccessor)))
}

func newRefGLTFAccessorGDExtensionIternalConstructor(reference GLTFAccessor) RefGLTFAccessor {
	return newTypedRefGDExtensionIternalConstructor[GLTFAccessor](reference)
}

var _ RefGLTFAnimation = &RefGLTFAnimationImpl{}
var _ Ref = &RefGLTFAnimationImpl{}

type RefGLTFAnimation interface {
	Ref
	TypedPtr() GLTFAnimation
}

type RefGLTFAnimationImpl TypedRef[GLTFAnimation]

func (r *RefGLTFAnimationImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFAnimation])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFAnimationImpl) TypedPtr() GLTFAnimation {
	rg := (*TypedRef[GLTFAnimation])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFAnimationImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFAnimation])(r)
	rg.Ref(from)
}

func (r *RefGLTFAnimationImpl) TypedRef(from *RefGLTFAnimationImpl) {
	rg := (*TypedRef[GLTFAnimation])(r)
	t := (*TypedRef[GLTFAnimation])(from)
	rg.TypedRef((*TypedRef[GLTFAnimation])(t))
}

func (r *RefGLTFAnimationImpl) Unref() {
	rg := (*TypedRef[GLTFAnimation])(r)
	rg.Unref()
}

func (r *RefGLTFAnimationImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFAnimation(reference GLTFAnimation) RefGLTFAnimation {
	return (RefGLTFAnimation)(NewTypedRef[GLTFAnimation](reference))
}

func newRefGLTFAnimationAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFAnimation](reference.(GLTFAnimation)))
}

func newRefGLTFAnimationGDExtensionIternalConstructor(reference GLTFAnimation) RefGLTFAnimation {
	return newTypedRefGDExtensionIternalConstructor[GLTFAnimation](reference)
}

var _ RefGLTFBufferView = &RefGLTFBufferViewImpl{}
var _ Ref = &RefGLTFBufferViewImpl{}

type RefGLTFBufferView interface {
	Ref
	TypedPtr() GLTFBufferView
}

type RefGLTFBufferViewImpl TypedRef[GLTFBufferView]

func (r *RefGLTFBufferViewImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFBufferView])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFBufferViewImpl) TypedPtr() GLTFBufferView {
	rg := (*TypedRef[GLTFBufferView])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFBufferViewImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFBufferView])(r)
	rg.Ref(from)
}

func (r *RefGLTFBufferViewImpl) TypedRef(from *RefGLTFBufferViewImpl) {
	rg := (*TypedRef[GLTFBufferView])(r)
	t := (*TypedRef[GLTFBufferView])(from)
	rg.TypedRef((*TypedRef[GLTFBufferView])(t))
}

func (r *RefGLTFBufferViewImpl) Unref() {
	rg := (*TypedRef[GLTFBufferView])(r)
	rg.Unref()
}

func (r *RefGLTFBufferViewImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFBufferView(reference GLTFBufferView) RefGLTFBufferView {
	return (RefGLTFBufferView)(NewTypedRef[GLTFBufferView](reference))
}

func newRefGLTFBufferViewAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFBufferView](reference.(GLTFBufferView)))
}

func newRefGLTFBufferViewGDExtensionIternalConstructor(reference GLTFBufferView) RefGLTFBufferView {
	return newTypedRefGDExtensionIternalConstructor[GLTFBufferView](reference)
}

var _ RefGLTFCamera = &RefGLTFCameraImpl{}
var _ Ref = &RefGLTFCameraImpl{}

type RefGLTFCamera interface {
	Ref
	TypedPtr() GLTFCamera
}

type RefGLTFCameraImpl TypedRef[GLTFCamera]

func (r *RefGLTFCameraImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFCamera])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFCameraImpl) TypedPtr() GLTFCamera {
	rg := (*TypedRef[GLTFCamera])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFCameraImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFCamera])(r)
	rg.Ref(from)
}

func (r *RefGLTFCameraImpl) TypedRef(from *RefGLTFCameraImpl) {
	rg := (*TypedRef[GLTFCamera])(r)
	t := (*TypedRef[GLTFCamera])(from)
	rg.TypedRef((*TypedRef[GLTFCamera])(t))
}

func (r *RefGLTFCameraImpl) Unref() {
	rg := (*TypedRef[GLTFCamera])(r)
	rg.Unref()
}

func (r *RefGLTFCameraImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFCamera(reference GLTFCamera) RefGLTFCamera {
	return (RefGLTFCamera)(NewTypedRef[GLTFCamera](reference))
}

func newRefGLTFCameraAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFCamera](reference.(GLTFCamera)))
}

func newRefGLTFCameraGDExtensionIternalConstructor(reference GLTFCamera) RefGLTFCamera {
	return newTypedRefGDExtensionIternalConstructor[GLTFCamera](reference)
}

var _ RefGLTFDocument = &RefGLTFDocumentImpl{}
var _ Ref = &RefGLTFDocumentImpl{}

type RefGLTFDocument interface {
	Ref
	TypedPtr() GLTFDocument
}

type RefGLTFDocumentImpl TypedRef[GLTFDocument]

func (r *RefGLTFDocumentImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFDocument])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFDocumentImpl) TypedPtr() GLTFDocument {
	rg := (*TypedRef[GLTFDocument])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFDocumentImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFDocument])(r)
	rg.Ref(from)
}

func (r *RefGLTFDocumentImpl) TypedRef(from *RefGLTFDocumentImpl) {
	rg := (*TypedRef[GLTFDocument])(r)
	t := (*TypedRef[GLTFDocument])(from)
	rg.TypedRef((*TypedRef[GLTFDocument])(t))
}

func (r *RefGLTFDocumentImpl) Unref() {
	rg := (*TypedRef[GLTFDocument])(r)
	rg.Unref()
}

func (r *RefGLTFDocumentImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFDocument(reference GLTFDocument) RefGLTFDocument {
	return (RefGLTFDocument)(NewTypedRef[GLTFDocument](reference))
}

func newRefGLTFDocumentAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFDocument](reference.(GLTFDocument)))
}

func newRefGLTFDocumentGDExtensionIternalConstructor(reference GLTFDocument) RefGLTFDocument {
	return newTypedRefGDExtensionIternalConstructor[GLTFDocument](reference)
}

var _ RefGLTFDocumentExtension = &RefGLTFDocumentExtensionImpl{}
var _ Ref = &RefGLTFDocumentExtensionImpl{}

type RefGLTFDocumentExtension interface {
	Ref
	TypedPtr() GLTFDocumentExtension
}

type RefGLTFDocumentExtensionImpl TypedRef[GLTFDocumentExtension]

func (r *RefGLTFDocumentExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFDocumentExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFDocumentExtensionImpl) TypedPtr() GLTFDocumentExtension {
	rg := (*TypedRef[GLTFDocumentExtension])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFDocumentExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFDocumentExtension])(r)
	rg.Ref(from)
}

func (r *RefGLTFDocumentExtensionImpl) TypedRef(from *RefGLTFDocumentExtensionImpl) {
	rg := (*TypedRef[GLTFDocumentExtension])(r)
	t := (*TypedRef[GLTFDocumentExtension])(from)
	rg.TypedRef((*TypedRef[GLTFDocumentExtension])(t))
}

func (r *RefGLTFDocumentExtensionImpl) Unref() {
	rg := (*TypedRef[GLTFDocumentExtension])(r)
	rg.Unref()
}

func (r *RefGLTFDocumentExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFDocumentExtension(reference GLTFDocumentExtension) RefGLTFDocumentExtension {
	return (RefGLTFDocumentExtension)(NewTypedRef[GLTFDocumentExtension](reference))
}

func newRefGLTFDocumentExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFDocumentExtension](reference.(GLTFDocumentExtension)))
}

func newRefGLTFDocumentExtensionGDExtensionIternalConstructor(reference GLTFDocumentExtension) RefGLTFDocumentExtension {
	return newTypedRefGDExtensionIternalConstructor[GLTFDocumentExtension](reference)
}

var _ RefGLTFDocumentExtensionConvertImporterMesh = &RefGLTFDocumentExtensionConvertImporterMeshImpl{}
var _ Ref = &RefGLTFDocumentExtensionConvertImporterMeshImpl{}

type RefGLTFDocumentExtensionConvertImporterMesh interface {
	Ref
	TypedPtr() GLTFDocumentExtensionConvertImporterMesh
}

type RefGLTFDocumentExtensionConvertImporterMeshImpl TypedRef[GLTFDocumentExtensionConvertImporterMesh]

func (r *RefGLTFDocumentExtensionConvertImporterMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFDocumentExtensionConvertImporterMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFDocumentExtensionConvertImporterMeshImpl) TypedPtr() GLTFDocumentExtensionConvertImporterMesh {
	rg := (*TypedRef[GLTFDocumentExtensionConvertImporterMesh])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFDocumentExtensionConvertImporterMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFDocumentExtensionConvertImporterMesh])(r)
	rg.Ref(from)
}

func (r *RefGLTFDocumentExtensionConvertImporterMeshImpl) TypedRef(from *RefGLTFDocumentExtensionConvertImporterMeshImpl) {
	rg := (*TypedRef[GLTFDocumentExtensionConvertImporterMesh])(r)
	t := (*TypedRef[GLTFDocumentExtensionConvertImporterMesh])(from)
	rg.TypedRef((*TypedRef[GLTFDocumentExtensionConvertImporterMesh])(t))
}

func (r *RefGLTFDocumentExtensionConvertImporterMeshImpl) Unref() {
	rg := (*TypedRef[GLTFDocumentExtensionConvertImporterMesh])(r)
	rg.Unref()
}

func (r *RefGLTFDocumentExtensionConvertImporterMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFDocumentExtensionConvertImporterMesh(reference GLTFDocumentExtensionConvertImporterMesh) RefGLTFDocumentExtensionConvertImporterMesh {
	return (RefGLTFDocumentExtensionConvertImporterMesh)(NewTypedRef[GLTFDocumentExtensionConvertImporterMesh](reference))
}

func newRefGLTFDocumentExtensionConvertImporterMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFDocumentExtensionConvertImporterMesh](reference.(GLTFDocumentExtensionConvertImporterMesh)))
}

func newRefGLTFDocumentExtensionConvertImporterMeshGDExtensionIternalConstructor(reference GLTFDocumentExtensionConvertImporterMesh) RefGLTFDocumentExtensionConvertImporterMesh {
	return newTypedRefGDExtensionIternalConstructor[GLTFDocumentExtensionConvertImporterMesh](reference)
}

var _ RefGLTFLight = &RefGLTFLightImpl{}
var _ Ref = &RefGLTFLightImpl{}

type RefGLTFLight interface {
	Ref
	TypedPtr() GLTFLight
}

type RefGLTFLightImpl TypedRef[GLTFLight]

func (r *RefGLTFLightImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFLight])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFLightImpl) TypedPtr() GLTFLight {
	rg := (*TypedRef[GLTFLight])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFLightImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFLight])(r)
	rg.Ref(from)
}

func (r *RefGLTFLightImpl) TypedRef(from *RefGLTFLightImpl) {
	rg := (*TypedRef[GLTFLight])(r)
	t := (*TypedRef[GLTFLight])(from)
	rg.TypedRef((*TypedRef[GLTFLight])(t))
}

func (r *RefGLTFLightImpl) Unref() {
	rg := (*TypedRef[GLTFLight])(r)
	rg.Unref()
}

func (r *RefGLTFLightImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFLight(reference GLTFLight) RefGLTFLight {
	return (RefGLTFLight)(NewTypedRef[GLTFLight](reference))
}

func newRefGLTFLightAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFLight](reference.(GLTFLight)))
}

func newRefGLTFLightGDExtensionIternalConstructor(reference GLTFLight) RefGLTFLight {
	return newTypedRefGDExtensionIternalConstructor[GLTFLight](reference)
}

var _ RefGLTFMesh = &RefGLTFMeshImpl{}
var _ Ref = &RefGLTFMeshImpl{}

type RefGLTFMesh interface {
	Ref
	TypedPtr() GLTFMesh
}

type RefGLTFMeshImpl TypedRef[GLTFMesh]

func (r *RefGLTFMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFMeshImpl) TypedPtr() GLTFMesh {
	rg := (*TypedRef[GLTFMesh])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFMesh])(r)
	rg.Ref(from)
}

func (r *RefGLTFMeshImpl) TypedRef(from *RefGLTFMeshImpl) {
	rg := (*TypedRef[GLTFMesh])(r)
	t := (*TypedRef[GLTFMesh])(from)
	rg.TypedRef((*TypedRef[GLTFMesh])(t))
}

func (r *RefGLTFMeshImpl) Unref() {
	rg := (*TypedRef[GLTFMesh])(r)
	rg.Unref()
}

func (r *RefGLTFMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFMesh(reference GLTFMesh) RefGLTFMesh {
	return (RefGLTFMesh)(NewTypedRef[GLTFMesh](reference))
}

func newRefGLTFMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFMesh](reference.(GLTFMesh)))
}

func newRefGLTFMeshGDExtensionIternalConstructor(reference GLTFMesh) RefGLTFMesh {
	return newTypedRefGDExtensionIternalConstructor[GLTFMesh](reference)
}

var _ RefGLTFNode = &RefGLTFNodeImpl{}
var _ Ref = &RefGLTFNodeImpl{}

type RefGLTFNode interface {
	Ref
	TypedPtr() GLTFNode
}

type RefGLTFNodeImpl TypedRef[GLTFNode]

func (r *RefGLTFNodeImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFNode])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFNodeImpl) TypedPtr() GLTFNode {
	rg := (*TypedRef[GLTFNode])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFNodeImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFNode])(r)
	rg.Ref(from)
}

func (r *RefGLTFNodeImpl) TypedRef(from *RefGLTFNodeImpl) {
	rg := (*TypedRef[GLTFNode])(r)
	t := (*TypedRef[GLTFNode])(from)
	rg.TypedRef((*TypedRef[GLTFNode])(t))
}

func (r *RefGLTFNodeImpl) Unref() {
	rg := (*TypedRef[GLTFNode])(r)
	rg.Unref()
}

func (r *RefGLTFNodeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFNode(reference GLTFNode) RefGLTFNode {
	return (RefGLTFNode)(NewTypedRef[GLTFNode](reference))
}

func newRefGLTFNodeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFNode](reference.(GLTFNode)))
}

func newRefGLTFNodeGDExtensionIternalConstructor(reference GLTFNode) RefGLTFNode {
	return newTypedRefGDExtensionIternalConstructor[GLTFNode](reference)
}

var _ RefGLTFPhysicsBody = &RefGLTFPhysicsBodyImpl{}
var _ Ref = &RefGLTFPhysicsBodyImpl{}

type RefGLTFPhysicsBody interface {
	Ref
	TypedPtr() GLTFPhysicsBody
}

type RefGLTFPhysicsBodyImpl TypedRef[GLTFPhysicsBody]

func (r *RefGLTFPhysicsBodyImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFPhysicsBody])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFPhysicsBodyImpl) TypedPtr() GLTFPhysicsBody {
	rg := (*TypedRef[GLTFPhysicsBody])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFPhysicsBodyImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFPhysicsBody])(r)
	rg.Ref(from)
}

func (r *RefGLTFPhysicsBodyImpl) TypedRef(from *RefGLTFPhysicsBodyImpl) {
	rg := (*TypedRef[GLTFPhysicsBody])(r)
	t := (*TypedRef[GLTFPhysicsBody])(from)
	rg.TypedRef((*TypedRef[GLTFPhysicsBody])(t))
}

func (r *RefGLTFPhysicsBodyImpl) Unref() {
	rg := (*TypedRef[GLTFPhysicsBody])(r)
	rg.Unref()
}

func (r *RefGLTFPhysicsBodyImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFPhysicsBody(reference GLTFPhysicsBody) RefGLTFPhysicsBody {
	return (RefGLTFPhysicsBody)(NewTypedRef[GLTFPhysicsBody](reference))
}

func newRefGLTFPhysicsBodyAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFPhysicsBody](reference.(GLTFPhysicsBody)))
}

func newRefGLTFPhysicsBodyGDExtensionIternalConstructor(reference GLTFPhysicsBody) RefGLTFPhysicsBody {
	return newTypedRefGDExtensionIternalConstructor[GLTFPhysicsBody](reference)
}

var _ RefGLTFPhysicsShape = &RefGLTFPhysicsShapeImpl{}
var _ Ref = &RefGLTFPhysicsShapeImpl{}

type RefGLTFPhysicsShape interface {
	Ref
	TypedPtr() GLTFPhysicsShape
}

type RefGLTFPhysicsShapeImpl TypedRef[GLTFPhysicsShape]

func (r *RefGLTFPhysicsShapeImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFPhysicsShape])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFPhysicsShapeImpl) TypedPtr() GLTFPhysicsShape {
	rg := (*TypedRef[GLTFPhysicsShape])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFPhysicsShapeImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFPhysicsShape])(r)
	rg.Ref(from)
}

func (r *RefGLTFPhysicsShapeImpl) TypedRef(from *RefGLTFPhysicsShapeImpl) {
	rg := (*TypedRef[GLTFPhysicsShape])(r)
	t := (*TypedRef[GLTFPhysicsShape])(from)
	rg.TypedRef((*TypedRef[GLTFPhysicsShape])(t))
}

func (r *RefGLTFPhysicsShapeImpl) Unref() {
	rg := (*TypedRef[GLTFPhysicsShape])(r)
	rg.Unref()
}

func (r *RefGLTFPhysicsShapeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFPhysicsShape(reference GLTFPhysicsShape) RefGLTFPhysicsShape {
	return (RefGLTFPhysicsShape)(NewTypedRef[GLTFPhysicsShape](reference))
}

func newRefGLTFPhysicsShapeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFPhysicsShape](reference.(GLTFPhysicsShape)))
}

func newRefGLTFPhysicsShapeGDExtensionIternalConstructor(reference GLTFPhysicsShape) RefGLTFPhysicsShape {
	return newTypedRefGDExtensionIternalConstructor[GLTFPhysicsShape](reference)
}

var _ RefGLTFSkeleton = &RefGLTFSkeletonImpl{}
var _ Ref = &RefGLTFSkeletonImpl{}

type RefGLTFSkeleton interface {
	Ref
	TypedPtr() GLTFSkeleton
}

type RefGLTFSkeletonImpl TypedRef[GLTFSkeleton]

func (r *RefGLTFSkeletonImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFSkeleton])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFSkeletonImpl) TypedPtr() GLTFSkeleton {
	rg := (*TypedRef[GLTFSkeleton])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFSkeletonImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFSkeleton])(r)
	rg.Ref(from)
}

func (r *RefGLTFSkeletonImpl) TypedRef(from *RefGLTFSkeletonImpl) {
	rg := (*TypedRef[GLTFSkeleton])(r)
	t := (*TypedRef[GLTFSkeleton])(from)
	rg.TypedRef((*TypedRef[GLTFSkeleton])(t))
}

func (r *RefGLTFSkeletonImpl) Unref() {
	rg := (*TypedRef[GLTFSkeleton])(r)
	rg.Unref()
}

func (r *RefGLTFSkeletonImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFSkeleton(reference GLTFSkeleton) RefGLTFSkeleton {
	return (RefGLTFSkeleton)(NewTypedRef[GLTFSkeleton](reference))
}

func newRefGLTFSkeletonAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFSkeleton](reference.(GLTFSkeleton)))
}

func newRefGLTFSkeletonGDExtensionIternalConstructor(reference GLTFSkeleton) RefGLTFSkeleton {
	return newTypedRefGDExtensionIternalConstructor[GLTFSkeleton](reference)
}

var _ RefGLTFSkin = &RefGLTFSkinImpl{}
var _ Ref = &RefGLTFSkinImpl{}

type RefGLTFSkin interface {
	Ref
	TypedPtr() GLTFSkin
}

type RefGLTFSkinImpl TypedRef[GLTFSkin]

func (r *RefGLTFSkinImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFSkin])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFSkinImpl) TypedPtr() GLTFSkin {
	rg := (*TypedRef[GLTFSkin])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFSkinImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFSkin])(r)
	rg.Ref(from)
}

func (r *RefGLTFSkinImpl) TypedRef(from *RefGLTFSkinImpl) {
	rg := (*TypedRef[GLTFSkin])(r)
	t := (*TypedRef[GLTFSkin])(from)
	rg.TypedRef((*TypedRef[GLTFSkin])(t))
}

func (r *RefGLTFSkinImpl) Unref() {
	rg := (*TypedRef[GLTFSkin])(r)
	rg.Unref()
}

func (r *RefGLTFSkinImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFSkin(reference GLTFSkin) RefGLTFSkin {
	return (RefGLTFSkin)(NewTypedRef[GLTFSkin](reference))
}

func newRefGLTFSkinAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFSkin](reference.(GLTFSkin)))
}

func newRefGLTFSkinGDExtensionIternalConstructor(reference GLTFSkin) RefGLTFSkin {
	return newTypedRefGDExtensionIternalConstructor[GLTFSkin](reference)
}

var _ RefGLTFSpecGloss = &RefGLTFSpecGlossImpl{}
var _ Ref = &RefGLTFSpecGlossImpl{}

type RefGLTFSpecGloss interface {
	Ref
	TypedPtr() GLTFSpecGloss
}

type RefGLTFSpecGlossImpl TypedRef[GLTFSpecGloss]

func (r *RefGLTFSpecGlossImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFSpecGloss])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFSpecGlossImpl) TypedPtr() GLTFSpecGloss {
	rg := (*TypedRef[GLTFSpecGloss])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFSpecGlossImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFSpecGloss])(r)
	rg.Ref(from)
}

func (r *RefGLTFSpecGlossImpl) TypedRef(from *RefGLTFSpecGlossImpl) {
	rg := (*TypedRef[GLTFSpecGloss])(r)
	t := (*TypedRef[GLTFSpecGloss])(from)
	rg.TypedRef((*TypedRef[GLTFSpecGloss])(t))
}

func (r *RefGLTFSpecGlossImpl) Unref() {
	rg := (*TypedRef[GLTFSpecGloss])(r)
	rg.Unref()
}

func (r *RefGLTFSpecGlossImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFSpecGloss(reference GLTFSpecGloss) RefGLTFSpecGloss {
	return (RefGLTFSpecGloss)(NewTypedRef[GLTFSpecGloss](reference))
}

func newRefGLTFSpecGlossAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFSpecGloss](reference.(GLTFSpecGloss)))
}

func newRefGLTFSpecGlossGDExtensionIternalConstructor(reference GLTFSpecGloss) RefGLTFSpecGloss {
	return newTypedRefGDExtensionIternalConstructor[GLTFSpecGloss](reference)
}

var _ RefGLTFState = &RefGLTFStateImpl{}
var _ Ref = &RefGLTFStateImpl{}

type RefGLTFState interface {
	Ref
	TypedPtr() GLTFState
}

type RefGLTFStateImpl TypedRef[GLTFState]

func (r *RefGLTFStateImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFState])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFStateImpl) TypedPtr() GLTFState {
	rg := (*TypedRef[GLTFState])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFStateImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFState])(r)
	rg.Ref(from)
}

func (r *RefGLTFStateImpl) TypedRef(from *RefGLTFStateImpl) {
	rg := (*TypedRef[GLTFState])(r)
	t := (*TypedRef[GLTFState])(from)
	rg.TypedRef((*TypedRef[GLTFState])(t))
}

func (r *RefGLTFStateImpl) Unref() {
	rg := (*TypedRef[GLTFState])(r)
	rg.Unref()
}

func (r *RefGLTFStateImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFState(reference GLTFState) RefGLTFState {
	return (RefGLTFState)(NewTypedRef[GLTFState](reference))
}

func newRefGLTFStateAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFState](reference.(GLTFState)))
}

func newRefGLTFStateGDExtensionIternalConstructor(reference GLTFState) RefGLTFState {
	return newTypedRefGDExtensionIternalConstructor[GLTFState](reference)
}

var _ RefGLTFTexture = &RefGLTFTextureImpl{}
var _ Ref = &RefGLTFTextureImpl{}

type RefGLTFTexture interface {
	Ref
	TypedPtr() GLTFTexture
}

type RefGLTFTextureImpl TypedRef[GLTFTexture]

func (r *RefGLTFTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFTextureImpl) TypedPtr() GLTFTexture {
	rg := (*TypedRef[GLTFTexture])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFTexture])(r)
	rg.Ref(from)
}

func (r *RefGLTFTextureImpl) TypedRef(from *RefGLTFTextureImpl) {
	rg := (*TypedRef[GLTFTexture])(r)
	t := (*TypedRef[GLTFTexture])(from)
	rg.TypedRef((*TypedRef[GLTFTexture])(t))
}

func (r *RefGLTFTextureImpl) Unref() {
	rg := (*TypedRef[GLTFTexture])(r)
	rg.Unref()
}

func (r *RefGLTFTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFTexture(reference GLTFTexture) RefGLTFTexture {
	return (RefGLTFTexture)(NewTypedRef[GLTFTexture](reference))
}

func newRefGLTFTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFTexture](reference.(GLTFTexture)))
}

func newRefGLTFTextureGDExtensionIternalConstructor(reference GLTFTexture) RefGLTFTexture {
	return newTypedRefGDExtensionIternalConstructor[GLTFTexture](reference)
}

var _ RefGLTFTextureSampler = &RefGLTFTextureSamplerImpl{}
var _ Ref = &RefGLTFTextureSamplerImpl{}

type RefGLTFTextureSampler interface {
	Ref
	TypedPtr() GLTFTextureSampler
}

type RefGLTFTextureSamplerImpl TypedRef[GLTFTextureSampler]

func (r *RefGLTFTextureSamplerImpl) Ptr() RefCounted {
	rg := (*TypedRef[GLTFTextureSampler])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGLTFTextureSamplerImpl) TypedPtr() GLTFTextureSampler {
	rg := (*TypedRef[GLTFTextureSampler])(r)
	return rg.TypedPtr()
}

func (r *RefGLTFTextureSamplerImpl) Ref(from Ref) {
	rg := (*TypedRef[GLTFTextureSampler])(r)
	rg.Ref(from)
}

func (r *RefGLTFTextureSamplerImpl) TypedRef(from *RefGLTFTextureSamplerImpl) {
	rg := (*TypedRef[GLTFTextureSampler])(r)
	t := (*TypedRef[GLTFTextureSampler])(from)
	rg.TypedRef((*TypedRef[GLTFTextureSampler])(t))
}

func (r *RefGLTFTextureSamplerImpl) Unref() {
	rg := (*TypedRef[GLTFTextureSampler])(r)
	rg.Unref()
}

func (r *RefGLTFTextureSamplerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGLTFTextureSampler(reference GLTFTextureSampler) RefGLTFTextureSampler {
	return (RefGLTFTextureSampler)(NewTypedRef[GLTFTextureSampler](reference))
}

func newRefGLTFTextureSamplerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GLTFTextureSampler](reference.(GLTFTextureSampler)))
}

func newRefGLTFTextureSamplerGDExtensionIternalConstructor(reference GLTFTextureSampler) RefGLTFTextureSampler {
	return newTypedRefGDExtensionIternalConstructor[GLTFTextureSampler](reference)
}

var _ RefGradient = &RefGradientImpl{}
var _ Ref = &RefGradientImpl{}

type RefGradient interface {
	Ref
	TypedPtr() Gradient
}

type RefGradientImpl TypedRef[Gradient]

func (r *RefGradientImpl) Ptr() RefCounted {
	rg := (*TypedRef[Gradient])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGradientImpl) TypedPtr() Gradient {
	rg := (*TypedRef[Gradient])(r)
	return rg.TypedPtr()
}

func (r *RefGradientImpl) Ref(from Ref) {
	rg := (*TypedRef[Gradient])(r)
	rg.Ref(from)
}

func (r *RefGradientImpl) TypedRef(from *RefGradientImpl) {
	rg := (*TypedRef[Gradient])(r)
	t := (*TypedRef[Gradient])(from)
	rg.TypedRef((*TypedRef[Gradient])(t))
}

func (r *RefGradientImpl) Unref() {
	rg := (*TypedRef[Gradient])(r)
	rg.Unref()
}

func (r *RefGradientImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGradient(reference Gradient) RefGradient {
	return (RefGradient)(NewTypedRef[Gradient](reference))
}

func newRefGradientAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Gradient](reference.(Gradient)))
}

func newRefGradientGDExtensionIternalConstructor(reference Gradient) RefGradient {
	return newTypedRefGDExtensionIternalConstructor[Gradient](reference)
}

var _ RefGradientTexture1D = &RefGradientTexture1DImpl{}
var _ Ref = &RefGradientTexture1DImpl{}

type RefGradientTexture1D interface {
	Ref
	TypedPtr() GradientTexture1D
}

type RefGradientTexture1DImpl TypedRef[GradientTexture1D]

func (r *RefGradientTexture1DImpl) Ptr() RefCounted {
	rg := (*TypedRef[GradientTexture1D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGradientTexture1DImpl) TypedPtr() GradientTexture1D {
	rg := (*TypedRef[GradientTexture1D])(r)
	return rg.TypedPtr()
}

func (r *RefGradientTexture1DImpl) Ref(from Ref) {
	rg := (*TypedRef[GradientTexture1D])(r)
	rg.Ref(from)
}

func (r *RefGradientTexture1DImpl) TypedRef(from *RefGradientTexture1DImpl) {
	rg := (*TypedRef[GradientTexture1D])(r)
	t := (*TypedRef[GradientTexture1D])(from)
	rg.TypedRef((*TypedRef[GradientTexture1D])(t))
}

func (r *RefGradientTexture1DImpl) Unref() {
	rg := (*TypedRef[GradientTexture1D])(r)
	rg.Unref()
}

func (r *RefGradientTexture1DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGradientTexture1D(reference GradientTexture1D) RefGradientTexture1D {
	return (RefGradientTexture1D)(NewTypedRef[GradientTexture1D](reference))
}

func newRefGradientTexture1DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GradientTexture1D](reference.(GradientTexture1D)))
}

func newRefGradientTexture1DGDExtensionIternalConstructor(reference GradientTexture1D) RefGradientTexture1D {
	return newTypedRefGDExtensionIternalConstructor[GradientTexture1D](reference)
}

var _ RefGradientTexture2D = &RefGradientTexture2DImpl{}
var _ Ref = &RefGradientTexture2DImpl{}

type RefGradientTexture2D interface {
	Ref
	TypedPtr() GradientTexture2D
}

type RefGradientTexture2DImpl TypedRef[GradientTexture2D]

func (r *RefGradientTexture2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[GradientTexture2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefGradientTexture2DImpl) TypedPtr() GradientTexture2D {
	rg := (*TypedRef[GradientTexture2D])(r)
	return rg.TypedPtr()
}

func (r *RefGradientTexture2DImpl) Ref(from Ref) {
	rg := (*TypedRef[GradientTexture2D])(r)
	rg.Ref(from)
}

func (r *RefGradientTexture2DImpl) TypedRef(from *RefGradientTexture2DImpl) {
	rg := (*TypedRef[GradientTexture2D])(r)
	t := (*TypedRef[GradientTexture2D])(from)
	rg.TypedRef((*TypedRef[GradientTexture2D])(t))
}

func (r *RefGradientTexture2DImpl) Unref() {
	rg := (*TypedRef[GradientTexture2D])(r)
	rg.Unref()
}

func (r *RefGradientTexture2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefGradientTexture2D(reference GradientTexture2D) RefGradientTexture2D {
	return (RefGradientTexture2D)(NewTypedRef[GradientTexture2D](reference))
}

func newRefGradientTexture2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[GradientTexture2D](reference.(GradientTexture2D)))
}

func newRefGradientTexture2DGDExtensionIternalConstructor(reference GradientTexture2D) RefGradientTexture2D {
	return newTypedRefGDExtensionIternalConstructor[GradientTexture2D](reference)
}

var _ RefHMACContext = &RefHMACContextImpl{}
var _ Ref = &RefHMACContextImpl{}

type RefHMACContext interface {
	Ref
	TypedPtr() HMACContext
}

type RefHMACContextImpl TypedRef[HMACContext]

func (r *RefHMACContextImpl) Ptr() RefCounted {
	rg := (*TypedRef[HMACContext])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefHMACContextImpl) TypedPtr() HMACContext {
	rg := (*TypedRef[HMACContext])(r)
	return rg.TypedPtr()
}

func (r *RefHMACContextImpl) Ref(from Ref) {
	rg := (*TypedRef[HMACContext])(r)
	rg.Ref(from)
}

func (r *RefHMACContextImpl) TypedRef(from *RefHMACContextImpl) {
	rg := (*TypedRef[HMACContext])(r)
	t := (*TypedRef[HMACContext])(from)
	rg.TypedRef((*TypedRef[HMACContext])(t))
}

func (r *RefHMACContextImpl) Unref() {
	rg := (*TypedRef[HMACContext])(r)
	rg.Unref()
}

func (r *RefHMACContextImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefHMACContext(reference HMACContext) RefHMACContext {
	return (RefHMACContext)(NewTypedRef[HMACContext](reference))
}

func newRefHMACContextAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[HMACContext](reference.(HMACContext)))
}

func newRefHMACContextGDExtensionIternalConstructor(reference HMACContext) RefHMACContext {
	return newTypedRefGDExtensionIternalConstructor[HMACContext](reference)
}

var _ RefHTTPClient = &RefHTTPClientImpl{}
var _ Ref = &RefHTTPClientImpl{}

type RefHTTPClient interface {
	Ref
	TypedPtr() HTTPClient
}

type RefHTTPClientImpl TypedRef[HTTPClient]

func (r *RefHTTPClientImpl) Ptr() RefCounted {
	rg := (*TypedRef[HTTPClient])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefHTTPClientImpl) TypedPtr() HTTPClient {
	rg := (*TypedRef[HTTPClient])(r)
	return rg.TypedPtr()
}

func (r *RefHTTPClientImpl) Ref(from Ref) {
	rg := (*TypedRef[HTTPClient])(r)
	rg.Ref(from)
}

func (r *RefHTTPClientImpl) TypedRef(from *RefHTTPClientImpl) {
	rg := (*TypedRef[HTTPClient])(r)
	t := (*TypedRef[HTTPClient])(from)
	rg.TypedRef((*TypedRef[HTTPClient])(t))
}

func (r *RefHTTPClientImpl) Unref() {
	rg := (*TypedRef[HTTPClient])(r)
	rg.Unref()
}

func (r *RefHTTPClientImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefHTTPClient(reference HTTPClient) RefHTTPClient {
	return (RefHTTPClient)(NewTypedRef[HTTPClient](reference))
}

func newRefHTTPClientAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[HTTPClient](reference.(HTTPClient)))
}

func newRefHTTPClientGDExtensionIternalConstructor(reference HTTPClient) RefHTTPClient {
	return newTypedRefGDExtensionIternalConstructor[HTTPClient](reference)
}

var _ RefHashingContext = &RefHashingContextImpl{}
var _ Ref = &RefHashingContextImpl{}

type RefHashingContext interface {
	Ref
	TypedPtr() HashingContext
}

type RefHashingContextImpl TypedRef[HashingContext]

func (r *RefHashingContextImpl) Ptr() RefCounted {
	rg := (*TypedRef[HashingContext])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefHashingContextImpl) TypedPtr() HashingContext {
	rg := (*TypedRef[HashingContext])(r)
	return rg.TypedPtr()
}

func (r *RefHashingContextImpl) Ref(from Ref) {
	rg := (*TypedRef[HashingContext])(r)
	rg.Ref(from)
}

func (r *RefHashingContextImpl) TypedRef(from *RefHashingContextImpl) {
	rg := (*TypedRef[HashingContext])(r)
	t := (*TypedRef[HashingContext])(from)
	rg.TypedRef((*TypedRef[HashingContext])(t))
}

func (r *RefHashingContextImpl) Unref() {
	rg := (*TypedRef[HashingContext])(r)
	rg.Unref()
}

func (r *RefHashingContextImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefHashingContext(reference HashingContext) RefHashingContext {
	return (RefHashingContext)(NewTypedRef[HashingContext](reference))
}

func newRefHashingContextAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[HashingContext](reference.(HashingContext)))
}

func newRefHashingContextGDExtensionIternalConstructor(reference HashingContext) RefHashingContext {
	return newTypedRefGDExtensionIternalConstructor[HashingContext](reference)
}

var _ RefHeightMapShape3D = &RefHeightMapShape3DImpl{}
var _ Ref = &RefHeightMapShape3DImpl{}

type RefHeightMapShape3D interface {
	Ref
	TypedPtr() HeightMapShape3D
}

type RefHeightMapShape3DImpl TypedRef[HeightMapShape3D]

func (r *RefHeightMapShape3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[HeightMapShape3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefHeightMapShape3DImpl) TypedPtr() HeightMapShape3D {
	rg := (*TypedRef[HeightMapShape3D])(r)
	return rg.TypedPtr()
}

func (r *RefHeightMapShape3DImpl) Ref(from Ref) {
	rg := (*TypedRef[HeightMapShape3D])(r)
	rg.Ref(from)
}

func (r *RefHeightMapShape3DImpl) TypedRef(from *RefHeightMapShape3DImpl) {
	rg := (*TypedRef[HeightMapShape3D])(r)
	t := (*TypedRef[HeightMapShape3D])(from)
	rg.TypedRef((*TypedRef[HeightMapShape3D])(t))
}

func (r *RefHeightMapShape3DImpl) Unref() {
	rg := (*TypedRef[HeightMapShape3D])(r)
	rg.Unref()
}

func (r *RefHeightMapShape3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefHeightMapShape3D(reference HeightMapShape3D) RefHeightMapShape3D {
	return (RefHeightMapShape3D)(NewTypedRef[HeightMapShape3D](reference))
}

func newRefHeightMapShape3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[HeightMapShape3D](reference.(HeightMapShape3D)))
}

func newRefHeightMapShape3DGDExtensionIternalConstructor(reference HeightMapShape3D) RefHeightMapShape3D {
	return newTypedRefGDExtensionIternalConstructor[HeightMapShape3D](reference)
}

var _ RefImage = &RefImageImpl{}
var _ Ref = &RefImageImpl{}

type RefImage interface {
	Ref
	TypedPtr() Image
}

type RefImageImpl TypedRef[Image]

func (r *RefImageImpl) Ptr() RefCounted {
	rg := (*TypedRef[Image])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefImageImpl) TypedPtr() Image {
	rg := (*TypedRef[Image])(r)
	return rg.TypedPtr()
}

func (r *RefImageImpl) Ref(from Ref) {
	rg := (*TypedRef[Image])(r)
	rg.Ref(from)
}

func (r *RefImageImpl) TypedRef(from *RefImageImpl) {
	rg := (*TypedRef[Image])(r)
	t := (*TypedRef[Image])(from)
	rg.TypedRef((*TypedRef[Image])(t))
}

func (r *RefImageImpl) Unref() {
	rg := (*TypedRef[Image])(r)
	rg.Unref()
}

func (r *RefImageImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefImage(reference Image) RefImage {
	return (RefImage)(NewTypedRef[Image](reference))
}

func newRefImageAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Image](reference.(Image)))
}

func newRefImageGDExtensionIternalConstructor(reference Image) RefImage {
	return newTypedRefGDExtensionIternalConstructor[Image](reference)
}

var _ RefImageFormatLoader = &RefImageFormatLoaderImpl{}
var _ Ref = &RefImageFormatLoaderImpl{}

type RefImageFormatLoader interface {
	Ref
	TypedPtr() ImageFormatLoader
}

type RefImageFormatLoaderImpl TypedRef[ImageFormatLoader]

func (r *RefImageFormatLoaderImpl) Ptr() RefCounted {
	rg := (*TypedRef[ImageFormatLoader])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefImageFormatLoaderImpl) TypedPtr() ImageFormatLoader {
	rg := (*TypedRef[ImageFormatLoader])(r)
	return rg.TypedPtr()
}

func (r *RefImageFormatLoaderImpl) Ref(from Ref) {
	rg := (*TypedRef[ImageFormatLoader])(r)
	rg.Ref(from)
}

func (r *RefImageFormatLoaderImpl) TypedRef(from *RefImageFormatLoaderImpl) {
	rg := (*TypedRef[ImageFormatLoader])(r)
	t := (*TypedRef[ImageFormatLoader])(from)
	rg.TypedRef((*TypedRef[ImageFormatLoader])(t))
}

func (r *RefImageFormatLoaderImpl) Unref() {
	rg := (*TypedRef[ImageFormatLoader])(r)
	rg.Unref()
}

func (r *RefImageFormatLoaderImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefImageFormatLoader(reference ImageFormatLoader) RefImageFormatLoader {
	return (RefImageFormatLoader)(NewTypedRef[ImageFormatLoader](reference))
}

func newRefImageFormatLoaderAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ImageFormatLoader](reference.(ImageFormatLoader)))
}

func newRefImageFormatLoaderGDExtensionIternalConstructor(reference ImageFormatLoader) RefImageFormatLoader {
	return newTypedRefGDExtensionIternalConstructor[ImageFormatLoader](reference)
}

var _ RefImageFormatLoaderExtension = &RefImageFormatLoaderExtensionImpl{}
var _ Ref = &RefImageFormatLoaderExtensionImpl{}

type RefImageFormatLoaderExtension interface {
	Ref
	TypedPtr() ImageFormatLoaderExtension
}

type RefImageFormatLoaderExtensionImpl TypedRef[ImageFormatLoaderExtension]

func (r *RefImageFormatLoaderExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[ImageFormatLoaderExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefImageFormatLoaderExtensionImpl) TypedPtr() ImageFormatLoaderExtension {
	rg := (*TypedRef[ImageFormatLoaderExtension])(r)
	return rg.TypedPtr()
}

func (r *RefImageFormatLoaderExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[ImageFormatLoaderExtension])(r)
	rg.Ref(from)
}

func (r *RefImageFormatLoaderExtensionImpl) TypedRef(from *RefImageFormatLoaderExtensionImpl) {
	rg := (*TypedRef[ImageFormatLoaderExtension])(r)
	t := (*TypedRef[ImageFormatLoaderExtension])(from)
	rg.TypedRef((*TypedRef[ImageFormatLoaderExtension])(t))
}

func (r *RefImageFormatLoaderExtensionImpl) Unref() {
	rg := (*TypedRef[ImageFormatLoaderExtension])(r)
	rg.Unref()
}

func (r *RefImageFormatLoaderExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefImageFormatLoaderExtension(reference ImageFormatLoaderExtension) RefImageFormatLoaderExtension {
	return (RefImageFormatLoaderExtension)(NewTypedRef[ImageFormatLoaderExtension](reference))
}

func newRefImageFormatLoaderExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ImageFormatLoaderExtension](reference.(ImageFormatLoaderExtension)))
}

func newRefImageFormatLoaderExtensionGDExtensionIternalConstructor(reference ImageFormatLoaderExtension) RefImageFormatLoaderExtension {
	return newTypedRefGDExtensionIternalConstructor[ImageFormatLoaderExtension](reference)
}

var _ RefImageTexture = &RefImageTextureImpl{}
var _ Ref = &RefImageTextureImpl{}

type RefImageTexture interface {
	Ref
	TypedPtr() ImageTexture
}

type RefImageTextureImpl TypedRef[ImageTexture]

func (r *RefImageTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[ImageTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefImageTextureImpl) TypedPtr() ImageTexture {
	rg := (*TypedRef[ImageTexture])(r)
	return rg.TypedPtr()
}

func (r *RefImageTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[ImageTexture])(r)
	rg.Ref(from)
}

func (r *RefImageTextureImpl) TypedRef(from *RefImageTextureImpl) {
	rg := (*TypedRef[ImageTexture])(r)
	t := (*TypedRef[ImageTexture])(from)
	rg.TypedRef((*TypedRef[ImageTexture])(t))
}

func (r *RefImageTextureImpl) Unref() {
	rg := (*TypedRef[ImageTexture])(r)
	rg.Unref()
}

func (r *RefImageTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefImageTexture(reference ImageTexture) RefImageTexture {
	return (RefImageTexture)(NewTypedRef[ImageTexture](reference))
}

func newRefImageTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ImageTexture](reference.(ImageTexture)))
}

func newRefImageTextureGDExtensionIternalConstructor(reference ImageTexture) RefImageTexture {
	return newTypedRefGDExtensionIternalConstructor[ImageTexture](reference)
}

var _ RefImageTexture3D = &RefImageTexture3DImpl{}
var _ Ref = &RefImageTexture3DImpl{}

type RefImageTexture3D interface {
	Ref
	TypedPtr() ImageTexture3D
}

type RefImageTexture3DImpl TypedRef[ImageTexture3D]

func (r *RefImageTexture3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[ImageTexture3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefImageTexture3DImpl) TypedPtr() ImageTexture3D {
	rg := (*TypedRef[ImageTexture3D])(r)
	return rg.TypedPtr()
}

func (r *RefImageTexture3DImpl) Ref(from Ref) {
	rg := (*TypedRef[ImageTexture3D])(r)
	rg.Ref(from)
}

func (r *RefImageTexture3DImpl) TypedRef(from *RefImageTexture3DImpl) {
	rg := (*TypedRef[ImageTexture3D])(r)
	t := (*TypedRef[ImageTexture3D])(from)
	rg.TypedRef((*TypedRef[ImageTexture3D])(t))
}

func (r *RefImageTexture3DImpl) Unref() {
	rg := (*TypedRef[ImageTexture3D])(r)
	rg.Unref()
}

func (r *RefImageTexture3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefImageTexture3D(reference ImageTexture3D) RefImageTexture3D {
	return (RefImageTexture3D)(NewTypedRef[ImageTexture3D](reference))
}

func newRefImageTexture3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ImageTexture3D](reference.(ImageTexture3D)))
}

func newRefImageTexture3DGDExtensionIternalConstructor(reference ImageTexture3D) RefImageTexture3D {
	return newTypedRefGDExtensionIternalConstructor[ImageTexture3D](reference)
}

var _ RefImageTextureLayered = &RefImageTextureLayeredImpl{}
var _ Ref = &RefImageTextureLayeredImpl{}

type RefImageTextureLayered interface {
	Ref
	TypedPtr() ImageTextureLayered
}

type RefImageTextureLayeredImpl TypedRef[ImageTextureLayered]

func (r *RefImageTextureLayeredImpl) Ptr() RefCounted {
	rg := (*TypedRef[ImageTextureLayered])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefImageTextureLayeredImpl) TypedPtr() ImageTextureLayered {
	rg := (*TypedRef[ImageTextureLayered])(r)
	return rg.TypedPtr()
}

func (r *RefImageTextureLayeredImpl) Ref(from Ref) {
	rg := (*TypedRef[ImageTextureLayered])(r)
	rg.Ref(from)
}

func (r *RefImageTextureLayeredImpl) TypedRef(from *RefImageTextureLayeredImpl) {
	rg := (*TypedRef[ImageTextureLayered])(r)
	t := (*TypedRef[ImageTextureLayered])(from)
	rg.TypedRef((*TypedRef[ImageTextureLayered])(t))
}

func (r *RefImageTextureLayeredImpl) Unref() {
	rg := (*TypedRef[ImageTextureLayered])(r)
	rg.Unref()
}

func (r *RefImageTextureLayeredImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefImageTextureLayered(reference ImageTextureLayered) RefImageTextureLayered {
	return (RefImageTextureLayered)(NewTypedRef[ImageTextureLayered](reference))
}

func newRefImageTextureLayeredAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ImageTextureLayered](reference.(ImageTextureLayered)))
}

func newRefImageTextureLayeredGDExtensionIternalConstructor(reference ImageTextureLayered) RefImageTextureLayered {
	return newTypedRefGDExtensionIternalConstructor[ImageTextureLayered](reference)
}

var _ RefImmediateMesh = &RefImmediateMeshImpl{}
var _ Ref = &RefImmediateMeshImpl{}

type RefImmediateMesh interface {
	Ref
	TypedPtr() ImmediateMesh
}

type RefImmediateMeshImpl TypedRef[ImmediateMesh]

func (r *RefImmediateMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[ImmediateMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefImmediateMeshImpl) TypedPtr() ImmediateMesh {
	rg := (*TypedRef[ImmediateMesh])(r)
	return rg.TypedPtr()
}

func (r *RefImmediateMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[ImmediateMesh])(r)
	rg.Ref(from)
}

func (r *RefImmediateMeshImpl) TypedRef(from *RefImmediateMeshImpl) {
	rg := (*TypedRef[ImmediateMesh])(r)
	t := (*TypedRef[ImmediateMesh])(from)
	rg.TypedRef((*TypedRef[ImmediateMesh])(t))
}

func (r *RefImmediateMeshImpl) Unref() {
	rg := (*TypedRef[ImmediateMesh])(r)
	rg.Unref()
}

func (r *RefImmediateMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefImmediateMesh(reference ImmediateMesh) RefImmediateMesh {
	return (RefImmediateMesh)(NewTypedRef[ImmediateMesh](reference))
}

func newRefImmediateMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ImmediateMesh](reference.(ImmediateMesh)))
}

func newRefImmediateMeshGDExtensionIternalConstructor(reference ImmediateMesh) RefImmediateMesh {
	return newTypedRefGDExtensionIternalConstructor[ImmediateMesh](reference)
}

var _ RefImporterMesh = &RefImporterMeshImpl{}
var _ Ref = &RefImporterMeshImpl{}

type RefImporterMesh interface {
	Ref
	TypedPtr() ImporterMesh
}

type RefImporterMeshImpl TypedRef[ImporterMesh]

func (r *RefImporterMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[ImporterMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefImporterMeshImpl) TypedPtr() ImporterMesh {
	rg := (*TypedRef[ImporterMesh])(r)
	return rg.TypedPtr()
}

func (r *RefImporterMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[ImporterMesh])(r)
	rg.Ref(from)
}

func (r *RefImporterMeshImpl) TypedRef(from *RefImporterMeshImpl) {
	rg := (*TypedRef[ImporterMesh])(r)
	t := (*TypedRef[ImporterMesh])(from)
	rg.TypedRef((*TypedRef[ImporterMesh])(t))
}

func (r *RefImporterMeshImpl) Unref() {
	rg := (*TypedRef[ImporterMesh])(r)
	rg.Unref()
}

func (r *RefImporterMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefImporterMesh(reference ImporterMesh) RefImporterMesh {
	return (RefImporterMesh)(NewTypedRef[ImporterMesh](reference))
}

func newRefImporterMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ImporterMesh](reference.(ImporterMesh)))
}

func newRefImporterMeshGDExtensionIternalConstructor(reference ImporterMesh) RefImporterMesh {
	return newTypedRefGDExtensionIternalConstructor[ImporterMesh](reference)
}

var _ RefInputEvent = &RefInputEventImpl{}
var _ Ref = &RefInputEventImpl{}

type RefInputEvent interface {
	Ref
	TypedPtr() InputEvent
}

type RefInputEventImpl TypedRef[InputEvent]

func (r *RefInputEventImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEvent])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventImpl) TypedPtr() InputEvent {
	rg := (*TypedRef[InputEvent])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEvent])(r)
	rg.Ref(from)
}

func (r *RefInputEventImpl) TypedRef(from *RefInputEventImpl) {
	rg := (*TypedRef[InputEvent])(r)
	t := (*TypedRef[InputEvent])(from)
	rg.TypedRef((*TypedRef[InputEvent])(t))
}

func (r *RefInputEventImpl) Unref() {
	rg := (*TypedRef[InputEvent])(r)
	rg.Unref()
}

func (r *RefInputEventImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEvent(reference InputEvent) RefInputEvent {
	return (RefInputEvent)(NewTypedRef[InputEvent](reference))
}

func newRefInputEventAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEvent](reference.(InputEvent)))
}

func newRefInputEventGDExtensionIternalConstructor(reference InputEvent) RefInputEvent {
	return newTypedRefGDExtensionIternalConstructor[InputEvent](reference)
}

var _ RefInputEventAction = &RefInputEventActionImpl{}
var _ Ref = &RefInputEventActionImpl{}

type RefInputEventAction interface {
	Ref
	TypedPtr() InputEventAction
}

type RefInputEventActionImpl TypedRef[InputEventAction]

func (r *RefInputEventActionImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventAction])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventActionImpl) TypedPtr() InputEventAction {
	rg := (*TypedRef[InputEventAction])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventActionImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventAction])(r)
	rg.Ref(from)
}

func (r *RefInputEventActionImpl) TypedRef(from *RefInputEventActionImpl) {
	rg := (*TypedRef[InputEventAction])(r)
	t := (*TypedRef[InputEventAction])(from)
	rg.TypedRef((*TypedRef[InputEventAction])(t))
}

func (r *RefInputEventActionImpl) Unref() {
	rg := (*TypedRef[InputEventAction])(r)
	rg.Unref()
}

func (r *RefInputEventActionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventAction(reference InputEventAction) RefInputEventAction {
	return (RefInputEventAction)(NewTypedRef[InputEventAction](reference))
}

func newRefInputEventActionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventAction](reference.(InputEventAction)))
}

func newRefInputEventActionGDExtensionIternalConstructor(reference InputEventAction) RefInputEventAction {
	return newTypedRefGDExtensionIternalConstructor[InputEventAction](reference)
}

var _ RefInputEventFromWindow = &RefInputEventFromWindowImpl{}
var _ Ref = &RefInputEventFromWindowImpl{}

type RefInputEventFromWindow interface {
	Ref
	TypedPtr() InputEventFromWindow
}

type RefInputEventFromWindowImpl TypedRef[InputEventFromWindow]

func (r *RefInputEventFromWindowImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventFromWindow])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventFromWindowImpl) TypedPtr() InputEventFromWindow {
	rg := (*TypedRef[InputEventFromWindow])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventFromWindowImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventFromWindow])(r)
	rg.Ref(from)
}

func (r *RefInputEventFromWindowImpl) TypedRef(from *RefInputEventFromWindowImpl) {
	rg := (*TypedRef[InputEventFromWindow])(r)
	t := (*TypedRef[InputEventFromWindow])(from)
	rg.TypedRef((*TypedRef[InputEventFromWindow])(t))
}

func (r *RefInputEventFromWindowImpl) Unref() {
	rg := (*TypedRef[InputEventFromWindow])(r)
	rg.Unref()
}

func (r *RefInputEventFromWindowImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventFromWindow(reference InputEventFromWindow) RefInputEventFromWindow {
	return (RefInputEventFromWindow)(NewTypedRef[InputEventFromWindow](reference))
}

func newRefInputEventFromWindowAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventFromWindow](reference.(InputEventFromWindow)))
}

func newRefInputEventFromWindowGDExtensionIternalConstructor(reference InputEventFromWindow) RefInputEventFromWindow {
	return newTypedRefGDExtensionIternalConstructor[InputEventFromWindow](reference)
}

var _ RefInputEventGesture = &RefInputEventGestureImpl{}
var _ Ref = &RefInputEventGestureImpl{}

type RefInputEventGesture interface {
	Ref
	TypedPtr() InputEventGesture
}

type RefInputEventGestureImpl TypedRef[InputEventGesture]

func (r *RefInputEventGestureImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventGesture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventGestureImpl) TypedPtr() InputEventGesture {
	rg := (*TypedRef[InputEventGesture])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventGestureImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventGesture])(r)
	rg.Ref(from)
}

func (r *RefInputEventGestureImpl) TypedRef(from *RefInputEventGestureImpl) {
	rg := (*TypedRef[InputEventGesture])(r)
	t := (*TypedRef[InputEventGesture])(from)
	rg.TypedRef((*TypedRef[InputEventGesture])(t))
}

func (r *RefInputEventGestureImpl) Unref() {
	rg := (*TypedRef[InputEventGesture])(r)
	rg.Unref()
}

func (r *RefInputEventGestureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventGesture(reference InputEventGesture) RefInputEventGesture {
	return (RefInputEventGesture)(NewTypedRef[InputEventGesture](reference))
}

func newRefInputEventGestureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventGesture](reference.(InputEventGesture)))
}

func newRefInputEventGestureGDExtensionIternalConstructor(reference InputEventGesture) RefInputEventGesture {
	return newTypedRefGDExtensionIternalConstructor[InputEventGesture](reference)
}

var _ RefInputEventJoypadButton = &RefInputEventJoypadButtonImpl{}
var _ Ref = &RefInputEventJoypadButtonImpl{}

type RefInputEventJoypadButton interface {
	Ref
	TypedPtr() InputEventJoypadButton
}

type RefInputEventJoypadButtonImpl TypedRef[InputEventJoypadButton]

func (r *RefInputEventJoypadButtonImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventJoypadButton])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventJoypadButtonImpl) TypedPtr() InputEventJoypadButton {
	rg := (*TypedRef[InputEventJoypadButton])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventJoypadButtonImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventJoypadButton])(r)
	rg.Ref(from)
}

func (r *RefInputEventJoypadButtonImpl) TypedRef(from *RefInputEventJoypadButtonImpl) {
	rg := (*TypedRef[InputEventJoypadButton])(r)
	t := (*TypedRef[InputEventJoypadButton])(from)
	rg.TypedRef((*TypedRef[InputEventJoypadButton])(t))
}

func (r *RefInputEventJoypadButtonImpl) Unref() {
	rg := (*TypedRef[InputEventJoypadButton])(r)
	rg.Unref()
}

func (r *RefInputEventJoypadButtonImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventJoypadButton(reference InputEventJoypadButton) RefInputEventJoypadButton {
	return (RefInputEventJoypadButton)(NewTypedRef[InputEventJoypadButton](reference))
}

func newRefInputEventJoypadButtonAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventJoypadButton](reference.(InputEventJoypadButton)))
}

func newRefInputEventJoypadButtonGDExtensionIternalConstructor(reference InputEventJoypadButton) RefInputEventJoypadButton {
	return newTypedRefGDExtensionIternalConstructor[InputEventJoypadButton](reference)
}

var _ RefInputEventJoypadMotion = &RefInputEventJoypadMotionImpl{}
var _ Ref = &RefInputEventJoypadMotionImpl{}

type RefInputEventJoypadMotion interface {
	Ref
	TypedPtr() InputEventJoypadMotion
}

type RefInputEventJoypadMotionImpl TypedRef[InputEventJoypadMotion]

func (r *RefInputEventJoypadMotionImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventJoypadMotion])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventJoypadMotionImpl) TypedPtr() InputEventJoypadMotion {
	rg := (*TypedRef[InputEventJoypadMotion])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventJoypadMotionImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventJoypadMotion])(r)
	rg.Ref(from)
}

func (r *RefInputEventJoypadMotionImpl) TypedRef(from *RefInputEventJoypadMotionImpl) {
	rg := (*TypedRef[InputEventJoypadMotion])(r)
	t := (*TypedRef[InputEventJoypadMotion])(from)
	rg.TypedRef((*TypedRef[InputEventJoypadMotion])(t))
}

func (r *RefInputEventJoypadMotionImpl) Unref() {
	rg := (*TypedRef[InputEventJoypadMotion])(r)
	rg.Unref()
}

func (r *RefInputEventJoypadMotionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventJoypadMotion(reference InputEventJoypadMotion) RefInputEventJoypadMotion {
	return (RefInputEventJoypadMotion)(NewTypedRef[InputEventJoypadMotion](reference))
}

func newRefInputEventJoypadMotionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventJoypadMotion](reference.(InputEventJoypadMotion)))
}

func newRefInputEventJoypadMotionGDExtensionIternalConstructor(reference InputEventJoypadMotion) RefInputEventJoypadMotion {
	return newTypedRefGDExtensionIternalConstructor[InputEventJoypadMotion](reference)
}

var _ RefInputEventKey = &RefInputEventKeyImpl{}
var _ Ref = &RefInputEventKeyImpl{}

type RefInputEventKey interface {
	Ref
	TypedPtr() InputEventKey
}

type RefInputEventKeyImpl TypedRef[InputEventKey]

func (r *RefInputEventKeyImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventKey])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventKeyImpl) TypedPtr() InputEventKey {
	rg := (*TypedRef[InputEventKey])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventKeyImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventKey])(r)
	rg.Ref(from)
}

func (r *RefInputEventKeyImpl) TypedRef(from *RefInputEventKeyImpl) {
	rg := (*TypedRef[InputEventKey])(r)
	t := (*TypedRef[InputEventKey])(from)
	rg.TypedRef((*TypedRef[InputEventKey])(t))
}

func (r *RefInputEventKeyImpl) Unref() {
	rg := (*TypedRef[InputEventKey])(r)
	rg.Unref()
}

func (r *RefInputEventKeyImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventKey(reference InputEventKey) RefInputEventKey {
	return (RefInputEventKey)(NewTypedRef[InputEventKey](reference))
}

func newRefInputEventKeyAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventKey](reference.(InputEventKey)))
}

func newRefInputEventKeyGDExtensionIternalConstructor(reference InputEventKey) RefInputEventKey {
	return newTypedRefGDExtensionIternalConstructor[InputEventKey](reference)
}

var _ RefInputEventMIDI = &RefInputEventMIDIImpl{}
var _ Ref = &RefInputEventMIDIImpl{}

type RefInputEventMIDI interface {
	Ref
	TypedPtr() InputEventMIDI
}

type RefInputEventMIDIImpl TypedRef[InputEventMIDI]

func (r *RefInputEventMIDIImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventMIDI])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventMIDIImpl) TypedPtr() InputEventMIDI {
	rg := (*TypedRef[InputEventMIDI])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventMIDIImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventMIDI])(r)
	rg.Ref(from)
}

func (r *RefInputEventMIDIImpl) TypedRef(from *RefInputEventMIDIImpl) {
	rg := (*TypedRef[InputEventMIDI])(r)
	t := (*TypedRef[InputEventMIDI])(from)
	rg.TypedRef((*TypedRef[InputEventMIDI])(t))
}

func (r *RefInputEventMIDIImpl) Unref() {
	rg := (*TypedRef[InputEventMIDI])(r)
	rg.Unref()
}

func (r *RefInputEventMIDIImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventMIDI(reference InputEventMIDI) RefInputEventMIDI {
	return (RefInputEventMIDI)(NewTypedRef[InputEventMIDI](reference))
}

func newRefInputEventMIDIAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventMIDI](reference.(InputEventMIDI)))
}

func newRefInputEventMIDIGDExtensionIternalConstructor(reference InputEventMIDI) RefInputEventMIDI {
	return newTypedRefGDExtensionIternalConstructor[InputEventMIDI](reference)
}

var _ RefInputEventMagnifyGesture = &RefInputEventMagnifyGestureImpl{}
var _ Ref = &RefInputEventMagnifyGestureImpl{}

type RefInputEventMagnifyGesture interface {
	Ref
	TypedPtr() InputEventMagnifyGesture
}

type RefInputEventMagnifyGestureImpl TypedRef[InputEventMagnifyGesture]

func (r *RefInputEventMagnifyGestureImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventMagnifyGesture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventMagnifyGestureImpl) TypedPtr() InputEventMagnifyGesture {
	rg := (*TypedRef[InputEventMagnifyGesture])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventMagnifyGestureImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventMagnifyGesture])(r)
	rg.Ref(from)
}

func (r *RefInputEventMagnifyGestureImpl) TypedRef(from *RefInputEventMagnifyGestureImpl) {
	rg := (*TypedRef[InputEventMagnifyGesture])(r)
	t := (*TypedRef[InputEventMagnifyGesture])(from)
	rg.TypedRef((*TypedRef[InputEventMagnifyGesture])(t))
}

func (r *RefInputEventMagnifyGestureImpl) Unref() {
	rg := (*TypedRef[InputEventMagnifyGesture])(r)
	rg.Unref()
}

func (r *RefInputEventMagnifyGestureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventMagnifyGesture(reference InputEventMagnifyGesture) RefInputEventMagnifyGesture {
	return (RefInputEventMagnifyGesture)(NewTypedRef[InputEventMagnifyGesture](reference))
}

func newRefInputEventMagnifyGestureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventMagnifyGesture](reference.(InputEventMagnifyGesture)))
}

func newRefInputEventMagnifyGestureGDExtensionIternalConstructor(reference InputEventMagnifyGesture) RefInputEventMagnifyGesture {
	return newTypedRefGDExtensionIternalConstructor[InputEventMagnifyGesture](reference)
}

var _ RefInputEventMouse = &RefInputEventMouseImpl{}
var _ Ref = &RefInputEventMouseImpl{}

type RefInputEventMouse interface {
	Ref
	TypedPtr() InputEventMouse
}

type RefInputEventMouseImpl TypedRef[InputEventMouse]

func (r *RefInputEventMouseImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventMouse])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventMouseImpl) TypedPtr() InputEventMouse {
	rg := (*TypedRef[InputEventMouse])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventMouseImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventMouse])(r)
	rg.Ref(from)
}

func (r *RefInputEventMouseImpl) TypedRef(from *RefInputEventMouseImpl) {
	rg := (*TypedRef[InputEventMouse])(r)
	t := (*TypedRef[InputEventMouse])(from)
	rg.TypedRef((*TypedRef[InputEventMouse])(t))
}

func (r *RefInputEventMouseImpl) Unref() {
	rg := (*TypedRef[InputEventMouse])(r)
	rg.Unref()
}

func (r *RefInputEventMouseImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventMouse(reference InputEventMouse) RefInputEventMouse {
	return (RefInputEventMouse)(NewTypedRef[InputEventMouse](reference))
}

func newRefInputEventMouseAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventMouse](reference.(InputEventMouse)))
}

func newRefInputEventMouseGDExtensionIternalConstructor(reference InputEventMouse) RefInputEventMouse {
	return newTypedRefGDExtensionIternalConstructor[InputEventMouse](reference)
}

var _ RefInputEventMouseButton = &RefInputEventMouseButtonImpl{}
var _ Ref = &RefInputEventMouseButtonImpl{}

type RefInputEventMouseButton interface {
	Ref
	TypedPtr() InputEventMouseButton
}

type RefInputEventMouseButtonImpl TypedRef[InputEventMouseButton]

func (r *RefInputEventMouseButtonImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventMouseButton])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventMouseButtonImpl) TypedPtr() InputEventMouseButton {
	rg := (*TypedRef[InputEventMouseButton])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventMouseButtonImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventMouseButton])(r)
	rg.Ref(from)
}

func (r *RefInputEventMouseButtonImpl) TypedRef(from *RefInputEventMouseButtonImpl) {
	rg := (*TypedRef[InputEventMouseButton])(r)
	t := (*TypedRef[InputEventMouseButton])(from)
	rg.TypedRef((*TypedRef[InputEventMouseButton])(t))
}

func (r *RefInputEventMouseButtonImpl) Unref() {
	rg := (*TypedRef[InputEventMouseButton])(r)
	rg.Unref()
}

func (r *RefInputEventMouseButtonImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventMouseButton(reference InputEventMouseButton) RefInputEventMouseButton {
	return (RefInputEventMouseButton)(NewTypedRef[InputEventMouseButton](reference))
}

func newRefInputEventMouseButtonAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventMouseButton](reference.(InputEventMouseButton)))
}

func newRefInputEventMouseButtonGDExtensionIternalConstructor(reference InputEventMouseButton) RefInputEventMouseButton {
	return newTypedRefGDExtensionIternalConstructor[InputEventMouseButton](reference)
}

var _ RefInputEventMouseMotion = &RefInputEventMouseMotionImpl{}
var _ Ref = &RefInputEventMouseMotionImpl{}

type RefInputEventMouseMotion interface {
	Ref
	TypedPtr() InputEventMouseMotion
}

type RefInputEventMouseMotionImpl TypedRef[InputEventMouseMotion]

func (r *RefInputEventMouseMotionImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventMouseMotion])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventMouseMotionImpl) TypedPtr() InputEventMouseMotion {
	rg := (*TypedRef[InputEventMouseMotion])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventMouseMotionImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventMouseMotion])(r)
	rg.Ref(from)
}

func (r *RefInputEventMouseMotionImpl) TypedRef(from *RefInputEventMouseMotionImpl) {
	rg := (*TypedRef[InputEventMouseMotion])(r)
	t := (*TypedRef[InputEventMouseMotion])(from)
	rg.TypedRef((*TypedRef[InputEventMouseMotion])(t))
}

func (r *RefInputEventMouseMotionImpl) Unref() {
	rg := (*TypedRef[InputEventMouseMotion])(r)
	rg.Unref()
}

func (r *RefInputEventMouseMotionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventMouseMotion(reference InputEventMouseMotion) RefInputEventMouseMotion {
	return (RefInputEventMouseMotion)(NewTypedRef[InputEventMouseMotion](reference))
}

func newRefInputEventMouseMotionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventMouseMotion](reference.(InputEventMouseMotion)))
}

func newRefInputEventMouseMotionGDExtensionIternalConstructor(reference InputEventMouseMotion) RefInputEventMouseMotion {
	return newTypedRefGDExtensionIternalConstructor[InputEventMouseMotion](reference)
}

var _ RefInputEventPanGesture = &RefInputEventPanGestureImpl{}
var _ Ref = &RefInputEventPanGestureImpl{}

type RefInputEventPanGesture interface {
	Ref
	TypedPtr() InputEventPanGesture
}

type RefInputEventPanGestureImpl TypedRef[InputEventPanGesture]

func (r *RefInputEventPanGestureImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventPanGesture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventPanGestureImpl) TypedPtr() InputEventPanGesture {
	rg := (*TypedRef[InputEventPanGesture])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventPanGestureImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventPanGesture])(r)
	rg.Ref(from)
}

func (r *RefInputEventPanGestureImpl) TypedRef(from *RefInputEventPanGestureImpl) {
	rg := (*TypedRef[InputEventPanGesture])(r)
	t := (*TypedRef[InputEventPanGesture])(from)
	rg.TypedRef((*TypedRef[InputEventPanGesture])(t))
}

func (r *RefInputEventPanGestureImpl) Unref() {
	rg := (*TypedRef[InputEventPanGesture])(r)
	rg.Unref()
}

func (r *RefInputEventPanGestureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventPanGesture(reference InputEventPanGesture) RefInputEventPanGesture {
	return (RefInputEventPanGesture)(NewTypedRef[InputEventPanGesture](reference))
}

func newRefInputEventPanGestureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventPanGesture](reference.(InputEventPanGesture)))
}

func newRefInputEventPanGestureGDExtensionIternalConstructor(reference InputEventPanGesture) RefInputEventPanGesture {
	return newTypedRefGDExtensionIternalConstructor[InputEventPanGesture](reference)
}

var _ RefInputEventScreenDrag = &RefInputEventScreenDragImpl{}
var _ Ref = &RefInputEventScreenDragImpl{}

type RefInputEventScreenDrag interface {
	Ref
	TypedPtr() InputEventScreenDrag
}

type RefInputEventScreenDragImpl TypedRef[InputEventScreenDrag]

func (r *RefInputEventScreenDragImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventScreenDrag])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventScreenDragImpl) TypedPtr() InputEventScreenDrag {
	rg := (*TypedRef[InputEventScreenDrag])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventScreenDragImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventScreenDrag])(r)
	rg.Ref(from)
}

func (r *RefInputEventScreenDragImpl) TypedRef(from *RefInputEventScreenDragImpl) {
	rg := (*TypedRef[InputEventScreenDrag])(r)
	t := (*TypedRef[InputEventScreenDrag])(from)
	rg.TypedRef((*TypedRef[InputEventScreenDrag])(t))
}

func (r *RefInputEventScreenDragImpl) Unref() {
	rg := (*TypedRef[InputEventScreenDrag])(r)
	rg.Unref()
}

func (r *RefInputEventScreenDragImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventScreenDrag(reference InputEventScreenDrag) RefInputEventScreenDrag {
	return (RefInputEventScreenDrag)(NewTypedRef[InputEventScreenDrag](reference))
}

func newRefInputEventScreenDragAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventScreenDrag](reference.(InputEventScreenDrag)))
}

func newRefInputEventScreenDragGDExtensionIternalConstructor(reference InputEventScreenDrag) RefInputEventScreenDrag {
	return newTypedRefGDExtensionIternalConstructor[InputEventScreenDrag](reference)
}

var _ RefInputEventScreenTouch = &RefInputEventScreenTouchImpl{}
var _ Ref = &RefInputEventScreenTouchImpl{}

type RefInputEventScreenTouch interface {
	Ref
	TypedPtr() InputEventScreenTouch
}

type RefInputEventScreenTouchImpl TypedRef[InputEventScreenTouch]

func (r *RefInputEventScreenTouchImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventScreenTouch])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventScreenTouchImpl) TypedPtr() InputEventScreenTouch {
	rg := (*TypedRef[InputEventScreenTouch])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventScreenTouchImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventScreenTouch])(r)
	rg.Ref(from)
}

func (r *RefInputEventScreenTouchImpl) TypedRef(from *RefInputEventScreenTouchImpl) {
	rg := (*TypedRef[InputEventScreenTouch])(r)
	t := (*TypedRef[InputEventScreenTouch])(from)
	rg.TypedRef((*TypedRef[InputEventScreenTouch])(t))
}

func (r *RefInputEventScreenTouchImpl) Unref() {
	rg := (*TypedRef[InputEventScreenTouch])(r)
	rg.Unref()
}

func (r *RefInputEventScreenTouchImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventScreenTouch(reference InputEventScreenTouch) RefInputEventScreenTouch {
	return (RefInputEventScreenTouch)(NewTypedRef[InputEventScreenTouch](reference))
}

func newRefInputEventScreenTouchAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventScreenTouch](reference.(InputEventScreenTouch)))
}

func newRefInputEventScreenTouchGDExtensionIternalConstructor(reference InputEventScreenTouch) RefInputEventScreenTouch {
	return newTypedRefGDExtensionIternalConstructor[InputEventScreenTouch](reference)
}

var _ RefInputEventShortcut = &RefInputEventShortcutImpl{}
var _ Ref = &RefInputEventShortcutImpl{}

type RefInputEventShortcut interface {
	Ref
	TypedPtr() InputEventShortcut
}

type RefInputEventShortcutImpl TypedRef[InputEventShortcut]

func (r *RefInputEventShortcutImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventShortcut])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventShortcutImpl) TypedPtr() InputEventShortcut {
	rg := (*TypedRef[InputEventShortcut])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventShortcutImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventShortcut])(r)
	rg.Ref(from)
}

func (r *RefInputEventShortcutImpl) TypedRef(from *RefInputEventShortcutImpl) {
	rg := (*TypedRef[InputEventShortcut])(r)
	t := (*TypedRef[InputEventShortcut])(from)
	rg.TypedRef((*TypedRef[InputEventShortcut])(t))
}

func (r *RefInputEventShortcutImpl) Unref() {
	rg := (*TypedRef[InputEventShortcut])(r)
	rg.Unref()
}

func (r *RefInputEventShortcutImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventShortcut(reference InputEventShortcut) RefInputEventShortcut {
	return (RefInputEventShortcut)(NewTypedRef[InputEventShortcut](reference))
}

func newRefInputEventShortcutAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventShortcut](reference.(InputEventShortcut)))
}

func newRefInputEventShortcutGDExtensionIternalConstructor(reference InputEventShortcut) RefInputEventShortcut {
	return newTypedRefGDExtensionIternalConstructor[InputEventShortcut](reference)
}

var _ RefInputEventWithModifiers = &RefInputEventWithModifiersImpl{}
var _ Ref = &RefInputEventWithModifiersImpl{}

type RefInputEventWithModifiers interface {
	Ref
	TypedPtr() InputEventWithModifiers
}

type RefInputEventWithModifiersImpl TypedRef[InputEventWithModifiers]

func (r *RefInputEventWithModifiersImpl) Ptr() RefCounted {
	rg := (*TypedRef[InputEventWithModifiers])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefInputEventWithModifiersImpl) TypedPtr() InputEventWithModifiers {
	rg := (*TypedRef[InputEventWithModifiers])(r)
	return rg.TypedPtr()
}

func (r *RefInputEventWithModifiersImpl) Ref(from Ref) {
	rg := (*TypedRef[InputEventWithModifiers])(r)
	rg.Ref(from)
}

func (r *RefInputEventWithModifiersImpl) TypedRef(from *RefInputEventWithModifiersImpl) {
	rg := (*TypedRef[InputEventWithModifiers])(r)
	t := (*TypedRef[InputEventWithModifiers])(from)
	rg.TypedRef((*TypedRef[InputEventWithModifiers])(t))
}

func (r *RefInputEventWithModifiersImpl) Unref() {
	rg := (*TypedRef[InputEventWithModifiers])(r)
	rg.Unref()
}

func (r *RefInputEventWithModifiersImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefInputEventWithModifiers(reference InputEventWithModifiers) RefInputEventWithModifiers {
	return (RefInputEventWithModifiers)(NewTypedRef[InputEventWithModifiers](reference))
}

func newRefInputEventWithModifiersAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[InputEventWithModifiers](reference.(InputEventWithModifiers)))
}

func newRefInputEventWithModifiersGDExtensionIternalConstructor(reference InputEventWithModifiers) RefInputEventWithModifiers {
	return newTypedRefGDExtensionIternalConstructor[InputEventWithModifiers](reference)
}

var _ RefIntervalTweener = &RefIntervalTweenerImpl{}
var _ Ref = &RefIntervalTweenerImpl{}

type RefIntervalTweener interface {
	Ref
	TypedPtr() IntervalTweener
}

type RefIntervalTweenerImpl TypedRef[IntervalTweener]

func (r *RefIntervalTweenerImpl) Ptr() RefCounted {
	rg := (*TypedRef[IntervalTweener])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefIntervalTweenerImpl) TypedPtr() IntervalTweener {
	rg := (*TypedRef[IntervalTweener])(r)
	return rg.TypedPtr()
}

func (r *RefIntervalTweenerImpl) Ref(from Ref) {
	rg := (*TypedRef[IntervalTweener])(r)
	rg.Ref(from)
}

func (r *RefIntervalTweenerImpl) TypedRef(from *RefIntervalTweenerImpl) {
	rg := (*TypedRef[IntervalTweener])(r)
	t := (*TypedRef[IntervalTweener])(from)
	rg.TypedRef((*TypedRef[IntervalTweener])(t))
}

func (r *RefIntervalTweenerImpl) Unref() {
	rg := (*TypedRef[IntervalTweener])(r)
	rg.Unref()
}

func (r *RefIntervalTweenerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefIntervalTweener(reference IntervalTweener) RefIntervalTweener {
	return (RefIntervalTweener)(NewTypedRef[IntervalTweener](reference))
}

func newRefIntervalTweenerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[IntervalTweener](reference.(IntervalTweener)))
}

func newRefIntervalTweenerGDExtensionIternalConstructor(reference IntervalTweener) RefIntervalTweener {
	return newTypedRefGDExtensionIternalConstructor[IntervalTweener](reference)
}

var _ RefJSON = &RefJSONImpl{}
var _ Ref = &RefJSONImpl{}

type RefJSON interface {
	Ref
	TypedPtr() JSON
}

type RefJSONImpl TypedRef[JSON]

func (r *RefJSONImpl) Ptr() RefCounted {
	rg := (*TypedRef[JSON])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefJSONImpl) TypedPtr() JSON {
	rg := (*TypedRef[JSON])(r)
	return rg.TypedPtr()
}

func (r *RefJSONImpl) Ref(from Ref) {
	rg := (*TypedRef[JSON])(r)
	rg.Ref(from)
}

func (r *RefJSONImpl) TypedRef(from *RefJSONImpl) {
	rg := (*TypedRef[JSON])(r)
	t := (*TypedRef[JSON])(from)
	rg.TypedRef((*TypedRef[JSON])(t))
}

func (r *RefJSONImpl) Unref() {
	rg := (*TypedRef[JSON])(r)
	rg.Unref()
}

func (r *RefJSONImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefJSON(reference JSON) RefJSON {
	return (RefJSON)(NewTypedRef[JSON](reference))
}

func newRefJSONAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[JSON](reference.(JSON)))
}

func newRefJSONGDExtensionIternalConstructor(reference JSON) RefJSON {
	return newTypedRefGDExtensionIternalConstructor[JSON](reference)
}

var _ RefJavaClass = &RefJavaClassImpl{}
var _ Ref = &RefJavaClassImpl{}

type RefJavaClass interface {
	Ref
	TypedPtr() JavaClass
}

type RefJavaClassImpl TypedRef[JavaClass]

func (r *RefJavaClassImpl) Ptr() RefCounted {
	rg := (*TypedRef[JavaClass])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefJavaClassImpl) TypedPtr() JavaClass {
	rg := (*TypedRef[JavaClass])(r)
	return rg.TypedPtr()
}

func (r *RefJavaClassImpl) Ref(from Ref) {
	rg := (*TypedRef[JavaClass])(r)
	rg.Ref(from)
}

func (r *RefJavaClassImpl) TypedRef(from *RefJavaClassImpl) {
	rg := (*TypedRef[JavaClass])(r)
	t := (*TypedRef[JavaClass])(from)
	rg.TypedRef((*TypedRef[JavaClass])(t))
}

func (r *RefJavaClassImpl) Unref() {
	rg := (*TypedRef[JavaClass])(r)
	rg.Unref()
}

func (r *RefJavaClassImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefJavaClass(reference JavaClass) RefJavaClass {
	return (RefJavaClass)(NewTypedRef[JavaClass](reference))
}

func newRefJavaClassAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[JavaClass](reference.(JavaClass)))
}

func newRefJavaClassGDExtensionIternalConstructor(reference JavaClass) RefJavaClass {
	return newTypedRefGDExtensionIternalConstructor[JavaClass](reference)
}

var _ RefJavaScriptObject = &RefJavaScriptObjectImpl{}
var _ Ref = &RefJavaScriptObjectImpl{}

type RefJavaScriptObject interface {
	Ref
	TypedPtr() JavaScriptObject
}

type RefJavaScriptObjectImpl TypedRef[JavaScriptObject]

func (r *RefJavaScriptObjectImpl) Ptr() RefCounted {
	rg := (*TypedRef[JavaScriptObject])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefJavaScriptObjectImpl) TypedPtr() JavaScriptObject {
	rg := (*TypedRef[JavaScriptObject])(r)
	return rg.TypedPtr()
}

func (r *RefJavaScriptObjectImpl) Ref(from Ref) {
	rg := (*TypedRef[JavaScriptObject])(r)
	rg.Ref(from)
}

func (r *RefJavaScriptObjectImpl) TypedRef(from *RefJavaScriptObjectImpl) {
	rg := (*TypedRef[JavaScriptObject])(r)
	t := (*TypedRef[JavaScriptObject])(from)
	rg.TypedRef((*TypedRef[JavaScriptObject])(t))
}

func (r *RefJavaScriptObjectImpl) Unref() {
	rg := (*TypedRef[JavaScriptObject])(r)
	rg.Unref()
}

func (r *RefJavaScriptObjectImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefJavaScriptObject(reference JavaScriptObject) RefJavaScriptObject {
	return (RefJavaScriptObject)(NewTypedRef[JavaScriptObject](reference))
}

func newRefJavaScriptObjectAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[JavaScriptObject](reference.(JavaScriptObject)))
}

func newRefJavaScriptObjectGDExtensionIternalConstructor(reference JavaScriptObject) RefJavaScriptObject {
	return newTypedRefGDExtensionIternalConstructor[JavaScriptObject](reference)
}

var _ RefKinematicCollision2D = &RefKinematicCollision2DImpl{}
var _ Ref = &RefKinematicCollision2DImpl{}

type RefKinematicCollision2D interface {
	Ref
	TypedPtr() KinematicCollision2D
}

type RefKinematicCollision2DImpl TypedRef[KinematicCollision2D]

func (r *RefKinematicCollision2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[KinematicCollision2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefKinematicCollision2DImpl) TypedPtr() KinematicCollision2D {
	rg := (*TypedRef[KinematicCollision2D])(r)
	return rg.TypedPtr()
}

func (r *RefKinematicCollision2DImpl) Ref(from Ref) {
	rg := (*TypedRef[KinematicCollision2D])(r)
	rg.Ref(from)
}

func (r *RefKinematicCollision2DImpl) TypedRef(from *RefKinematicCollision2DImpl) {
	rg := (*TypedRef[KinematicCollision2D])(r)
	t := (*TypedRef[KinematicCollision2D])(from)
	rg.TypedRef((*TypedRef[KinematicCollision2D])(t))
}

func (r *RefKinematicCollision2DImpl) Unref() {
	rg := (*TypedRef[KinematicCollision2D])(r)
	rg.Unref()
}

func (r *RefKinematicCollision2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefKinematicCollision2D(reference KinematicCollision2D) RefKinematicCollision2D {
	return (RefKinematicCollision2D)(NewTypedRef[KinematicCollision2D](reference))
}

func newRefKinematicCollision2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[KinematicCollision2D](reference.(KinematicCollision2D)))
}

func newRefKinematicCollision2DGDExtensionIternalConstructor(reference KinematicCollision2D) RefKinematicCollision2D {
	return newTypedRefGDExtensionIternalConstructor[KinematicCollision2D](reference)
}

var _ RefKinematicCollision3D = &RefKinematicCollision3DImpl{}
var _ Ref = &RefKinematicCollision3DImpl{}

type RefKinematicCollision3D interface {
	Ref
	TypedPtr() KinematicCollision3D
}

type RefKinematicCollision3DImpl TypedRef[KinematicCollision3D]

func (r *RefKinematicCollision3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[KinematicCollision3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefKinematicCollision3DImpl) TypedPtr() KinematicCollision3D {
	rg := (*TypedRef[KinematicCollision3D])(r)
	return rg.TypedPtr()
}

func (r *RefKinematicCollision3DImpl) Ref(from Ref) {
	rg := (*TypedRef[KinematicCollision3D])(r)
	rg.Ref(from)
}

func (r *RefKinematicCollision3DImpl) TypedRef(from *RefKinematicCollision3DImpl) {
	rg := (*TypedRef[KinematicCollision3D])(r)
	t := (*TypedRef[KinematicCollision3D])(from)
	rg.TypedRef((*TypedRef[KinematicCollision3D])(t))
}

func (r *RefKinematicCollision3DImpl) Unref() {
	rg := (*TypedRef[KinematicCollision3D])(r)
	rg.Unref()
}

func (r *RefKinematicCollision3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefKinematicCollision3D(reference KinematicCollision3D) RefKinematicCollision3D {
	return (RefKinematicCollision3D)(NewTypedRef[KinematicCollision3D](reference))
}

func newRefKinematicCollision3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[KinematicCollision3D](reference.(KinematicCollision3D)))
}

func newRefKinematicCollision3DGDExtensionIternalConstructor(reference KinematicCollision3D) RefKinematicCollision3D {
	return newTypedRefGDExtensionIternalConstructor[KinematicCollision3D](reference)
}

var _ RefLabelSettings = &RefLabelSettingsImpl{}
var _ Ref = &RefLabelSettingsImpl{}

type RefLabelSettings interface {
	Ref
	TypedPtr() LabelSettings
}

type RefLabelSettingsImpl TypedRef[LabelSettings]

func (r *RefLabelSettingsImpl) Ptr() RefCounted {
	rg := (*TypedRef[LabelSettings])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefLabelSettingsImpl) TypedPtr() LabelSettings {
	rg := (*TypedRef[LabelSettings])(r)
	return rg.TypedPtr()
}

func (r *RefLabelSettingsImpl) Ref(from Ref) {
	rg := (*TypedRef[LabelSettings])(r)
	rg.Ref(from)
}

func (r *RefLabelSettingsImpl) TypedRef(from *RefLabelSettingsImpl) {
	rg := (*TypedRef[LabelSettings])(r)
	t := (*TypedRef[LabelSettings])(from)
	rg.TypedRef((*TypedRef[LabelSettings])(t))
}

func (r *RefLabelSettingsImpl) Unref() {
	rg := (*TypedRef[LabelSettings])(r)
	rg.Unref()
}

func (r *RefLabelSettingsImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefLabelSettings(reference LabelSettings) RefLabelSettings {
	return (RefLabelSettings)(NewTypedRef[LabelSettings](reference))
}

func newRefLabelSettingsAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[LabelSettings](reference.(LabelSettings)))
}

func newRefLabelSettingsGDExtensionIternalConstructor(reference LabelSettings) RefLabelSettings {
	return newTypedRefGDExtensionIternalConstructor[LabelSettings](reference)
}

var _ RefLightmapGIData = &RefLightmapGIDataImpl{}
var _ Ref = &RefLightmapGIDataImpl{}

type RefLightmapGIData interface {
	Ref
	TypedPtr() LightmapGIData
}

type RefLightmapGIDataImpl TypedRef[LightmapGIData]

func (r *RefLightmapGIDataImpl) Ptr() RefCounted {
	rg := (*TypedRef[LightmapGIData])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefLightmapGIDataImpl) TypedPtr() LightmapGIData {
	rg := (*TypedRef[LightmapGIData])(r)
	return rg.TypedPtr()
}

func (r *RefLightmapGIDataImpl) Ref(from Ref) {
	rg := (*TypedRef[LightmapGIData])(r)
	rg.Ref(from)
}

func (r *RefLightmapGIDataImpl) TypedRef(from *RefLightmapGIDataImpl) {
	rg := (*TypedRef[LightmapGIData])(r)
	t := (*TypedRef[LightmapGIData])(from)
	rg.TypedRef((*TypedRef[LightmapGIData])(t))
}

func (r *RefLightmapGIDataImpl) Unref() {
	rg := (*TypedRef[LightmapGIData])(r)
	rg.Unref()
}

func (r *RefLightmapGIDataImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefLightmapGIData(reference LightmapGIData) RefLightmapGIData {
	return (RefLightmapGIData)(NewTypedRef[LightmapGIData](reference))
}

func newRefLightmapGIDataAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[LightmapGIData](reference.(LightmapGIData)))
}

func newRefLightmapGIDataGDExtensionIternalConstructor(reference LightmapGIData) RefLightmapGIData {
	return newTypedRefGDExtensionIternalConstructor[LightmapGIData](reference)
}

var _ RefLightmapper = &RefLightmapperImpl{}
var _ Ref = &RefLightmapperImpl{}

type RefLightmapper interface {
	Ref
	TypedPtr() Lightmapper
}

type RefLightmapperImpl TypedRef[Lightmapper]

func (r *RefLightmapperImpl) Ptr() RefCounted {
	rg := (*TypedRef[Lightmapper])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefLightmapperImpl) TypedPtr() Lightmapper {
	rg := (*TypedRef[Lightmapper])(r)
	return rg.TypedPtr()
}

func (r *RefLightmapperImpl) Ref(from Ref) {
	rg := (*TypedRef[Lightmapper])(r)
	rg.Ref(from)
}

func (r *RefLightmapperImpl) TypedRef(from *RefLightmapperImpl) {
	rg := (*TypedRef[Lightmapper])(r)
	t := (*TypedRef[Lightmapper])(from)
	rg.TypedRef((*TypedRef[Lightmapper])(t))
}

func (r *RefLightmapperImpl) Unref() {
	rg := (*TypedRef[Lightmapper])(r)
	rg.Unref()
}

func (r *RefLightmapperImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefLightmapper(reference Lightmapper) RefLightmapper {
	return (RefLightmapper)(NewTypedRef[Lightmapper](reference))
}

func newRefLightmapperAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Lightmapper](reference.(Lightmapper)))
}

func newRefLightmapperGDExtensionIternalConstructor(reference Lightmapper) RefLightmapper {
	return newTypedRefGDExtensionIternalConstructor[Lightmapper](reference)
}

var _ RefLightmapperRD = &RefLightmapperRDImpl{}
var _ Ref = &RefLightmapperRDImpl{}

type RefLightmapperRD interface {
	Ref
	TypedPtr() LightmapperRD
}

type RefLightmapperRDImpl TypedRef[LightmapperRD]

func (r *RefLightmapperRDImpl) Ptr() RefCounted {
	rg := (*TypedRef[LightmapperRD])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefLightmapperRDImpl) TypedPtr() LightmapperRD {
	rg := (*TypedRef[LightmapperRD])(r)
	return rg.TypedPtr()
}

func (r *RefLightmapperRDImpl) Ref(from Ref) {
	rg := (*TypedRef[LightmapperRD])(r)
	rg.Ref(from)
}

func (r *RefLightmapperRDImpl) TypedRef(from *RefLightmapperRDImpl) {
	rg := (*TypedRef[LightmapperRD])(r)
	t := (*TypedRef[LightmapperRD])(from)
	rg.TypedRef((*TypedRef[LightmapperRD])(t))
}

func (r *RefLightmapperRDImpl) Unref() {
	rg := (*TypedRef[LightmapperRD])(r)
	rg.Unref()
}

func (r *RefLightmapperRDImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefLightmapperRD(reference LightmapperRD) RefLightmapperRD {
	return (RefLightmapperRD)(NewTypedRef[LightmapperRD](reference))
}

func newRefLightmapperRDAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[LightmapperRD](reference.(LightmapperRD)))
}

func newRefLightmapperRDGDExtensionIternalConstructor(reference LightmapperRD) RefLightmapperRD {
	return newTypedRefGDExtensionIternalConstructor[LightmapperRD](reference)
}

var _ RefMaterial = &RefMaterialImpl{}
var _ Ref = &RefMaterialImpl{}

type RefMaterial interface {
	Ref
	TypedPtr() Material
}

type RefMaterialImpl TypedRef[Material]

func (r *RefMaterialImpl) Ptr() RefCounted {
	rg := (*TypedRef[Material])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMaterialImpl) TypedPtr() Material {
	rg := (*TypedRef[Material])(r)
	return rg.TypedPtr()
}

func (r *RefMaterialImpl) Ref(from Ref) {
	rg := (*TypedRef[Material])(r)
	rg.Ref(from)
}

func (r *RefMaterialImpl) TypedRef(from *RefMaterialImpl) {
	rg := (*TypedRef[Material])(r)
	t := (*TypedRef[Material])(from)
	rg.TypedRef((*TypedRef[Material])(t))
}

func (r *RefMaterialImpl) Unref() {
	rg := (*TypedRef[Material])(r)
	rg.Unref()
}

func (r *RefMaterialImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMaterial(reference Material) RefMaterial {
	return (RefMaterial)(NewTypedRef[Material](reference))
}

func newRefMaterialAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Material](reference.(Material)))
}

func newRefMaterialGDExtensionIternalConstructor(reference Material) RefMaterial {
	return newTypedRefGDExtensionIternalConstructor[Material](reference)
}

var _ RefMesh = &RefMeshImpl{}
var _ Ref = &RefMeshImpl{}

type RefMesh interface {
	Ref
	TypedPtr() Mesh
}

type RefMeshImpl TypedRef[Mesh]

func (r *RefMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[Mesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMeshImpl) TypedPtr() Mesh {
	rg := (*TypedRef[Mesh])(r)
	return rg.TypedPtr()
}

func (r *RefMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[Mesh])(r)
	rg.Ref(from)
}

func (r *RefMeshImpl) TypedRef(from *RefMeshImpl) {
	rg := (*TypedRef[Mesh])(r)
	t := (*TypedRef[Mesh])(from)
	rg.TypedRef((*TypedRef[Mesh])(t))
}

func (r *RefMeshImpl) Unref() {
	rg := (*TypedRef[Mesh])(r)
	rg.Unref()
}

func (r *RefMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMesh(reference Mesh) RefMesh {
	return (RefMesh)(NewTypedRef[Mesh](reference))
}

func newRefMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Mesh](reference.(Mesh)))
}

func newRefMeshGDExtensionIternalConstructor(reference Mesh) RefMesh {
	return newTypedRefGDExtensionIternalConstructor[Mesh](reference)
}

var _ RefMeshConvexDecompositionSettings = &RefMeshConvexDecompositionSettingsImpl{}
var _ Ref = &RefMeshConvexDecompositionSettingsImpl{}

type RefMeshConvexDecompositionSettings interface {
	Ref
	TypedPtr() MeshConvexDecompositionSettings
}

type RefMeshConvexDecompositionSettingsImpl TypedRef[MeshConvexDecompositionSettings]

func (r *RefMeshConvexDecompositionSettingsImpl) Ptr() RefCounted {
	rg := (*TypedRef[MeshConvexDecompositionSettings])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMeshConvexDecompositionSettingsImpl) TypedPtr() MeshConvexDecompositionSettings {
	rg := (*TypedRef[MeshConvexDecompositionSettings])(r)
	return rg.TypedPtr()
}

func (r *RefMeshConvexDecompositionSettingsImpl) Ref(from Ref) {
	rg := (*TypedRef[MeshConvexDecompositionSettings])(r)
	rg.Ref(from)
}

func (r *RefMeshConvexDecompositionSettingsImpl) TypedRef(from *RefMeshConvexDecompositionSettingsImpl) {
	rg := (*TypedRef[MeshConvexDecompositionSettings])(r)
	t := (*TypedRef[MeshConvexDecompositionSettings])(from)
	rg.TypedRef((*TypedRef[MeshConvexDecompositionSettings])(t))
}

func (r *RefMeshConvexDecompositionSettingsImpl) Unref() {
	rg := (*TypedRef[MeshConvexDecompositionSettings])(r)
	rg.Unref()
}

func (r *RefMeshConvexDecompositionSettingsImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMeshConvexDecompositionSettings(reference MeshConvexDecompositionSettings) RefMeshConvexDecompositionSettings {
	return (RefMeshConvexDecompositionSettings)(NewTypedRef[MeshConvexDecompositionSettings](reference))
}

func newRefMeshConvexDecompositionSettingsAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MeshConvexDecompositionSettings](reference.(MeshConvexDecompositionSettings)))
}

func newRefMeshConvexDecompositionSettingsGDExtensionIternalConstructor(reference MeshConvexDecompositionSettings) RefMeshConvexDecompositionSettings {
	return newTypedRefGDExtensionIternalConstructor[MeshConvexDecompositionSettings](reference)
}

var _ RefMeshDataTool = &RefMeshDataToolImpl{}
var _ Ref = &RefMeshDataToolImpl{}

type RefMeshDataTool interface {
	Ref
	TypedPtr() MeshDataTool
}

type RefMeshDataToolImpl TypedRef[MeshDataTool]

func (r *RefMeshDataToolImpl) Ptr() RefCounted {
	rg := (*TypedRef[MeshDataTool])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMeshDataToolImpl) TypedPtr() MeshDataTool {
	rg := (*TypedRef[MeshDataTool])(r)
	return rg.TypedPtr()
}

func (r *RefMeshDataToolImpl) Ref(from Ref) {
	rg := (*TypedRef[MeshDataTool])(r)
	rg.Ref(from)
}

func (r *RefMeshDataToolImpl) TypedRef(from *RefMeshDataToolImpl) {
	rg := (*TypedRef[MeshDataTool])(r)
	t := (*TypedRef[MeshDataTool])(from)
	rg.TypedRef((*TypedRef[MeshDataTool])(t))
}

func (r *RefMeshDataToolImpl) Unref() {
	rg := (*TypedRef[MeshDataTool])(r)
	rg.Unref()
}

func (r *RefMeshDataToolImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMeshDataTool(reference MeshDataTool) RefMeshDataTool {
	return (RefMeshDataTool)(NewTypedRef[MeshDataTool](reference))
}

func newRefMeshDataToolAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MeshDataTool](reference.(MeshDataTool)))
}

func newRefMeshDataToolGDExtensionIternalConstructor(reference MeshDataTool) RefMeshDataTool {
	return newTypedRefGDExtensionIternalConstructor[MeshDataTool](reference)
}

var _ RefMeshLibrary = &RefMeshLibraryImpl{}
var _ Ref = &RefMeshLibraryImpl{}

type RefMeshLibrary interface {
	Ref
	TypedPtr() MeshLibrary
}

type RefMeshLibraryImpl TypedRef[MeshLibrary]

func (r *RefMeshLibraryImpl) Ptr() RefCounted {
	rg := (*TypedRef[MeshLibrary])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMeshLibraryImpl) TypedPtr() MeshLibrary {
	rg := (*TypedRef[MeshLibrary])(r)
	return rg.TypedPtr()
}

func (r *RefMeshLibraryImpl) Ref(from Ref) {
	rg := (*TypedRef[MeshLibrary])(r)
	rg.Ref(from)
}

func (r *RefMeshLibraryImpl) TypedRef(from *RefMeshLibraryImpl) {
	rg := (*TypedRef[MeshLibrary])(r)
	t := (*TypedRef[MeshLibrary])(from)
	rg.TypedRef((*TypedRef[MeshLibrary])(t))
}

func (r *RefMeshLibraryImpl) Unref() {
	rg := (*TypedRef[MeshLibrary])(r)
	rg.Unref()
}

func (r *RefMeshLibraryImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMeshLibrary(reference MeshLibrary) RefMeshLibrary {
	return (RefMeshLibrary)(NewTypedRef[MeshLibrary](reference))
}

func newRefMeshLibraryAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MeshLibrary](reference.(MeshLibrary)))
}

func newRefMeshLibraryGDExtensionIternalConstructor(reference MeshLibrary) RefMeshLibrary {
	return newTypedRefGDExtensionIternalConstructor[MeshLibrary](reference)
}

var _ RefMeshTexture = &RefMeshTextureImpl{}
var _ Ref = &RefMeshTextureImpl{}

type RefMeshTexture interface {
	Ref
	TypedPtr() MeshTexture
}

type RefMeshTextureImpl TypedRef[MeshTexture]

func (r *RefMeshTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[MeshTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMeshTextureImpl) TypedPtr() MeshTexture {
	rg := (*TypedRef[MeshTexture])(r)
	return rg.TypedPtr()
}

func (r *RefMeshTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[MeshTexture])(r)
	rg.Ref(from)
}

func (r *RefMeshTextureImpl) TypedRef(from *RefMeshTextureImpl) {
	rg := (*TypedRef[MeshTexture])(r)
	t := (*TypedRef[MeshTexture])(from)
	rg.TypedRef((*TypedRef[MeshTexture])(t))
}

func (r *RefMeshTextureImpl) Unref() {
	rg := (*TypedRef[MeshTexture])(r)
	rg.Unref()
}

func (r *RefMeshTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMeshTexture(reference MeshTexture) RefMeshTexture {
	return (RefMeshTexture)(NewTypedRef[MeshTexture](reference))
}

func newRefMeshTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MeshTexture](reference.(MeshTexture)))
}

func newRefMeshTextureGDExtensionIternalConstructor(reference MeshTexture) RefMeshTexture {
	return newTypedRefGDExtensionIternalConstructor[MeshTexture](reference)
}

var _ RefMethodTweener = &RefMethodTweenerImpl{}
var _ Ref = &RefMethodTweenerImpl{}

type RefMethodTweener interface {
	Ref
	TypedPtr() MethodTweener
}

type RefMethodTweenerImpl TypedRef[MethodTweener]

func (r *RefMethodTweenerImpl) Ptr() RefCounted {
	rg := (*TypedRef[MethodTweener])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMethodTweenerImpl) TypedPtr() MethodTweener {
	rg := (*TypedRef[MethodTweener])(r)
	return rg.TypedPtr()
}

func (r *RefMethodTweenerImpl) Ref(from Ref) {
	rg := (*TypedRef[MethodTweener])(r)
	rg.Ref(from)
}

func (r *RefMethodTweenerImpl) TypedRef(from *RefMethodTweenerImpl) {
	rg := (*TypedRef[MethodTweener])(r)
	t := (*TypedRef[MethodTweener])(from)
	rg.TypedRef((*TypedRef[MethodTweener])(t))
}

func (r *RefMethodTweenerImpl) Unref() {
	rg := (*TypedRef[MethodTweener])(r)
	rg.Unref()
}

func (r *RefMethodTweenerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMethodTweener(reference MethodTweener) RefMethodTweener {
	return (RefMethodTweener)(NewTypedRef[MethodTweener](reference))
}

func newRefMethodTweenerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MethodTweener](reference.(MethodTweener)))
}

func newRefMethodTweenerGDExtensionIternalConstructor(reference MethodTweener) RefMethodTweener {
	return newTypedRefGDExtensionIternalConstructor[MethodTweener](reference)
}

var _ RefMissingResource = &RefMissingResourceImpl{}
var _ Ref = &RefMissingResourceImpl{}

type RefMissingResource interface {
	Ref
	TypedPtr() MissingResource
}

type RefMissingResourceImpl TypedRef[MissingResource]

func (r *RefMissingResourceImpl) Ptr() RefCounted {
	rg := (*TypedRef[MissingResource])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMissingResourceImpl) TypedPtr() MissingResource {
	rg := (*TypedRef[MissingResource])(r)
	return rg.TypedPtr()
}

func (r *RefMissingResourceImpl) Ref(from Ref) {
	rg := (*TypedRef[MissingResource])(r)
	rg.Ref(from)
}

func (r *RefMissingResourceImpl) TypedRef(from *RefMissingResourceImpl) {
	rg := (*TypedRef[MissingResource])(r)
	t := (*TypedRef[MissingResource])(from)
	rg.TypedRef((*TypedRef[MissingResource])(t))
}

func (r *RefMissingResourceImpl) Unref() {
	rg := (*TypedRef[MissingResource])(r)
	rg.Unref()
}

func (r *RefMissingResourceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMissingResource(reference MissingResource) RefMissingResource {
	return (RefMissingResource)(NewTypedRef[MissingResource](reference))
}

func newRefMissingResourceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MissingResource](reference.(MissingResource)))
}

func newRefMissingResourceGDExtensionIternalConstructor(reference MissingResource) RefMissingResource {
	return newTypedRefGDExtensionIternalConstructor[MissingResource](reference)
}

var _ RefMobileVRInterface = &RefMobileVRInterfaceImpl{}
var _ Ref = &RefMobileVRInterfaceImpl{}

type RefMobileVRInterface interface {
	Ref
	TypedPtr() MobileVRInterface
}

type RefMobileVRInterfaceImpl TypedRef[MobileVRInterface]

func (r *RefMobileVRInterfaceImpl) Ptr() RefCounted {
	rg := (*TypedRef[MobileVRInterface])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMobileVRInterfaceImpl) TypedPtr() MobileVRInterface {
	rg := (*TypedRef[MobileVRInterface])(r)
	return rg.TypedPtr()
}

func (r *RefMobileVRInterfaceImpl) Ref(from Ref) {
	rg := (*TypedRef[MobileVRInterface])(r)
	rg.Ref(from)
}

func (r *RefMobileVRInterfaceImpl) TypedRef(from *RefMobileVRInterfaceImpl) {
	rg := (*TypedRef[MobileVRInterface])(r)
	t := (*TypedRef[MobileVRInterface])(from)
	rg.TypedRef((*TypedRef[MobileVRInterface])(t))
}

func (r *RefMobileVRInterfaceImpl) Unref() {
	rg := (*TypedRef[MobileVRInterface])(r)
	rg.Unref()
}

func (r *RefMobileVRInterfaceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMobileVRInterface(reference MobileVRInterface) RefMobileVRInterface {
	return (RefMobileVRInterface)(NewTypedRef[MobileVRInterface](reference))
}

func newRefMobileVRInterfaceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MobileVRInterface](reference.(MobileVRInterface)))
}

func newRefMobileVRInterfaceGDExtensionIternalConstructor(reference MobileVRInterface) RefMobileVRInterface {
	return newTypedRefGDExtensionIternalConstructor[MobileVRInterface](reference)
}

var _ RefMultiMesh = &RefMultiMeshImpl{}
var _ Ref = &RefMultiMeshImpl{}

type RefMultiMesh interface {
	Ref
	TypedPtr() MultiMesh
}

type RefMultiMeshImpl TypedRef[MultiMesh]

func (r *RefMultiMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[MultiMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMultiMeshImpl) TypedPtr() MultiMesh {
	rg := (*TypedRef[MultiMesh])(r)
	return rg.TypedPtr()
}

func (r *RefMultiMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[MultiMesh])(r)
	rg.Ref(from)
}

func (r *RefMultiMeshImpl) TypedRef(from *RefMultiMeshImpl) {
	rg := (*TypedRef[MultiMesh])(r)
	t := (*TypedRef[MultiMesh])(from)
	rg.TypedRef((*TypedRef[MultiMesh])(t))
}

func (r *RefMultiMeshImpl) Unref() {
	rg := (*TypedRef[MultiMesh])(r)
	rg.Unref()
}

func (r *RefMultiMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMultiMesh(reference MultiMesh) RefMultiMesh {
	return (RefMultiMesh)(NewTypedRef[MultiMesh](reference))
}

func newRefMultiMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MultiMesh](reference.(MultiMesh)))
}

func newRefMultiMeshGDExtensionIternalConstructor(reference MultiMesh) RefMultiMesh {
	return newTypedRefGDExtensionIternalConstructor[MultiMesh](reference)
}

var _ RefMultiplayerAPI = &RefMultiplayerAPIImpl{}
var _ Ref = &RefMultiplayerAPIImpl{}

type RefMultiplayerAPI interface {
	Ref
	TypedPtr() MultiplayerAPI
}

type RefMultiplayerAPIImpl TypedRef[MultiplayerAPI]

func (r *RefMultiplayerAPIImpl) Ptr() RefCounted {
	rg := (*TypedRef[MultiplayerAPI])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMultiplayerAPIImpl) TypedPtr() MultiplayerAPI {
	rg := (*TypedRef[MultiplayerAPI])(r)
	return rg.TypedPtr()
}

func (r *RefMultiplayerAPIImpl) Ref(from Ref) {
	rg := (*TypedRef[MultiplayerAPI])(r)
	rg.Ref(from)
}

func (r *RefMultiplayerAPIImpl) TypedRef(from *RefMultiplayerAPIImpl) {
	rg := (*TypedRef[MultiplayerAPI])(r)
	t := (*TypedRef[MultiplayerAPI])(from)
	rg.TypedRef((*TypedRef[MultiplayerAPI])(t))
}

func (r *RefMultiplayerAPIImpl) Unref() {
	rg := (*TypedRef[MultiplayerAPI])(r)
	rg.Unref()
}

func (r *RefMultiplayerAPIImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMultiplayerAPI(reference MultiplayerAPI) RefMultiplayerAPI {
	return (RefMultiplayerAPI)(NewTypedRef[MultiplayerAPI](reference))
}

func newRefMultiplayerAPIAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MultiplayerAPI](reference.(MultiplayerAPI)))
}

func newRefMultiplayerAPIGDExtensionIternalConstructor(reference MultiplayerAPI) RefMultiplayerAPI {
	return newTypedRefGDExtensionIternalConstructor[MultiplayerAPI](reference)
}

var _ RefMultiplayerAPIExtension = &RefMultiplayerAPIExtensionImpl{}
var _ Ref = &RefMultiplayerAPIExtensionImpl{}

type RefMultiplayerAPIExtension interface {
	Ref
	TypedPtr() MultiplayerAPIExtension
}

type RefMultiplayerAPIExtensionImpl TypedRef[MultiplayerAPIExtension]

func (r *RefMultiplayerAPIExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[MultiplayerAPIExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMultiplayerAPIExtensionImpl) TypedPtr() MultiplayerAPIExtension {
	rg := (*TypedRef[MultiplayerAPIExtension])(r)
	return rg.TypedPtr()
}

func (r *RefMultiplayerAPIExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[MultiplayerAPIExtension])(r)
	rg.Ref(from)
}

func (r *RefMultiplayerAPIExtensionImpl) TypedRef(from *RefMultiplayerAPIExtensionImpl) {
	rg := (*TypedRef[MultiplayerAPIExtension])(r)
	t := (*TypedRef[MultiplayerAPIExtension])(from)
	rg.TypedRef((*TypedRef[MultiplayerAPIExtension])(t))
}

func (r *RefMultiplayerAPIExtensionImpl) Unref() {
	rg := (*TypedRef[MultiplayerAPIExtension])(r)
	rg.Unref()
}

func (r *RefMultiplayerAPIExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMultiplayerAPIExtension(reference MultiplayerAPIExtension) RefMultiplayerAPIExtension {
	return (RefMultiplayerAPIExtension)(NewTypedRef[MultiplayerAPIExtension](reference))
}

func newRefMultiplayerAPIExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MultiplayerAPIExtension](reference.(MultiplayerAPIExtension)))
}

func newRefMultiplayerAPIExtensionGDExtensionIternalConstructor(reference MultiplayerAPIExtension) RefMultiplayerAPIExtension {
	return newTypedRefGDExtensionIternalConstructor[MultiplayerAPIExtension](reference)
}

var _ RefMultiplayerPeer = &RefMultiplayerPeerImpl{}
var _ Ref = &RefMultiplayerPeerImpl{}

type RefMultiplayerPeer interface {
	Ref
	TypedPtr() MultiplayerPeer
}

type RefMultiplayerPeerImpl TypedRef[MultiplayerPeer]

func (r *RefMultiplayerPeerImpl) Ptr() RefCounted {
	rg := (*TypedRef[MultiplayerPeer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMultiplayerPeerImpl) TypedPtr() MultiplayerPeer {
	rg := (*TypedRef[MultiplayerPeer])(r)
	return rg.TypedPtr()
}

func (r *RefMultiplayerPeerImpl) Ref(from Ref) {
	rg := (*TypedRef[MultiplayerPeer])(r)
	rg.Ref(from)
}

func (r *RefMultiplayerPeerImpl) TypedRef(from *RefMultiplayerPeerImpl) {
	rg := (*TypedRef[MultiplayerPeer])(r)
	t := (*TypedRef[MultiplayerPeer])(from)
	rg.TypedRef((*TypedRef[MultiplayerPeer])(t))
}

func (r *RefMultiplayerPeerImpl) Unref() {
	rg := (*TypedRef[MultiplayerPeer])(r)
	rg.Unref()
}

func (r *RefMultiplayerPeerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMultiplayerPeer(reference MultiplayerPeer) RefMultiplayerPeer {
	return (RefMultiplayerPeer)(NewTypedRef[MultiplayerPeer](reference))
}

func newRefMultiplayerPeerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MultiplayerPeer](reference.(MultiplayerPeer)))
}

func newRefMultiplayerPeerGDExtensionIternalConstructor(reference MultiplayerPeer) RefMultiplayerPeer {
	return newTypedRefGDExtensionIternalConstructor[MultiplayerPeer](reference)
}

var _ RefMultiplayerPeerExtension = &RefMultiplayerPeerExtensionImpl{}
var _ Ref = &RefMultiplayerPeerExtensionImpl{}

type RefMultiplayerPeerExtension interface {
	Ref
	TypedPtr() MultiplayerPeerExtension
}

type RefMultiplayerPeerExtensionImpl TypedRef[MultiplayerPeerExtension]

func (r *RefMultiplayerPeerExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[MultiplayerPeerExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMultiplayerPeerExtensionImpl) TypedPtr() MultiplayerPeerExtension {
	rg := (*TypedRef[MultiplayerPeerExtension])(r)
	return rg.TypedPtr()
}

func (r *RefMultiplayerPeerExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[MultiplayerPeerExtension])(r)
	rg.Ref(from)
}

func (r *RefMultiplayerPeerExtensionImpl) TypedRef(from *RefMultiplayerPeerExtensionImpl) {
	rg := (*TypedRef[MultiplayerPeerExtension])(r)
	t := (*TypedRef[MultiplayerPeerExtension])(from)
	rg.TypedRef((*TypedRef[MultiplayerPeerExtension])(t))
}

func (r *RefMultiplayerPeerExtensionImpl) Unref() {
	rg := (*TypedRef[MultiplayerPeerExtension])(r)
	rg.Unref()
}

func (r *RefMultiplayerPeerExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMultiplayerPeerExtension(reference MultiplayerPeerExtension) RefMultiplayerPeerExtension {
	return (RefMultiplayerPeerExtension)(NewTypedRef[MultiplayerPeerExtension](reference))
}

func newRefMultiplayerPeerExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[MultiplayerPeerExtension](reference.(MultiplayerPeerExtension)))
}

func newRefMultiplayerPeerExtensionGDExtensionIternalConstructor(reference MultiplayerPeerExtension) RefMultiplayerPeerExtension {
	return newTypedRefGDExtensionIternalConstructor[MultiplayerPeerExtension](reference)
}

var _ RefMutex = &RefMutexImpl{}
var _ Ref = &RefMutexImpl{}

type RefMutex interface {
	Ref
	TypedPtr() Mutex
}

type RefMutexImpl TypedRef[Mutex]

func (r *RefMutexImpl) Ptr() RefCounted {
	rg := (*TypedRef[Mutex])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefMutexImpl) TypedPtr() Mutex {
	rg := (*TypedRef[Mutex])(r)
	return rg.TypedPtr()
}

func (r *RefMutexImpl) Ref(from Ref) {
	rg := (*TypedRef[Mutex])(r)
	rg.Ref(from)
}

func (r *RefMutexImpl) TypedRef(from *RefMutexImpl) {
	rg := (*TypedRef[Mutex])(r)
	t := (*TypedRef[Mutex])(from)
	rg.TypedRef((*TypedRef[Mutex])(t))
}

func (r *RefMutexImpl) Unref() {
	rg := (*TypedRef[Mutex])(r)
	rg.Unref()
}

func (r *RefMutexImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefMutex(reference Mutex) RefMutex {
	return (RefMutex)(NewTypedRef[Mutex](reference))
}

func newRefMutexAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Mutex](reference.(Mutex)))
}

func newRefMutexGDExtensionIternalConstructor(reference Mutex) RefMutex {
	return newTypedRefGDExtensionIternalConstructor[Mutex](reference)
}

var _ RefNavigationMesh = &RefNavigationMeshImpl{}
var _ Ref = &RefNavigationMeshImpl{}

type RefNavigationMesh interface {
	Ref
	TypedPtr() NavigationMesh
}

type RefNavigationMeshImpl TypedRef[NavigationMesh]

func (r *RefNavigationMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[NavigationMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNavigationMeshImpl) TypedPtr() NavigationMesh {
	rg := (*TypedRef[NavigationMesh])(r)
	return rg.TypedPtr()
}

func (r *RefNavigationMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[NavigationMesh])(r)
	rg.Ref(from)
}

func (r *RefNavigationMeshImpl) TypedRef(from *RefNavigationMeshImpl) {
	rg := (*TypedRef[NavigationMesh])(r)
	t := (*TypedRef[NavigationMesh])(from)
	rg.TypedRef((*TypedRef[NavigationMesh])(t))
}

func (r *RefNavigationMeshImpl) Unref() {
	rg := (*TypedRef[NavigationMesh])(r)
	rg.Unref()
}

func (r *RefNavigationMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNavigationMesh(reference NavigationMesh) RefNavigationMesh {
	return (RefNavigationMesh)(NewTypedRef[NavigationMesh](reference))
}

func newRefNavigationMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[NavigationMesh](reference.(NavigationMesh)))
}

func newRefNavigationMeshGDExtensionIternalConstructor(reference NavigationMesh) RefNavigationMesh {
	return newTypedRefGDExtensionIternalConstructor[NavigationMesh](reference)
}

var _ RefNavigationMeshSourceGeometryData2D = &RefNavigationMeshSourceGeometryData2DImpl{}
var _ Ref = &RefNavigationMeshSourceGeometryData2DImpl{}

type RefNavigationMeshSourceGeometryData2D interface {
	Ref
	TypedPtr() NavigationMeshSourceGeometryData2D
}

type RefNavigationMeshSourceGeometryData2DImpl TypedRef[NavigationMeshSourceGeometryData2D]

func (r *RefNavigationMeshSourceGeometryData2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[NavigationMeshSourceGeometryData2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNavigationMeshSourceGeometryData2DImpl) TypedPtr() NavigationMeshSourceGeometryData2D {
	rg := (*TypedRef[NavigationMeshSourceGeometryData2D])(r)
	return rg.TypedPtr()
}

func (r *RefNavigationMeshSourceGeometryData2DImpl) Ref(from Ref) {
	rg := (*TypedRef[NavigationMeshSourceGeometryData2D])(r)
	rg.Ref(from)
}

func (r *RefNavigationMeshSourceGeometryData2DImpl) TypedRef(from *RefNavigationMeshSourceGeometryData2DImpl) {
	rg := (*TypedRef[NavigationMeshSourceGeometryData2D])(r)
	t := (*TypedRef[NavigationMeshSourceGeometryData2D])(from)
	rg.TypedRef((*TypedRef[NavigationMeshSourceGeometryData2D])(t))
}

func (r *RefNavigationMeshSourceGeometryData2DImpl) Unref() {
	rg := (*TypedRef[NavigationMeshSourceGeometryData2D])(r)
	rg.Unref()
}

func (r *RefNavigationMeshSourceGeometryData2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNavigationMeshSourceGeometryData2D(reference NavigationMeshSourceGeometryData2D) RefNavigationMeshSourceGeometryData2D {
	return (RefNavigationMeshSourceGeometryData2D)(NewTypedRef[NavigationMeshSourceGeometryData2D](reference))
}

func newRefNavigationMeshSourceGeometryData2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[NavigationMeshSourceGeometryData2D](reference.(NavigationMeshSourceGeometryData2D)))
}

func newRefNavigationMeshSourceGeometryData2DGDExtensionIternalConstructor(reference NavigationMeshSourceGeometryData2D) RefNavigationMeshSourceGeometryData2D {
	return newTypedRefGDExtensionIternalConstructor[NavigationMeshSourceGeometryData2D](reference)
}

var _ RefNavigationMeshSourceGeometryData3D = &RefNavigationMeshSourceGeometryData3DImpl{}
var _ Ref = &RefNavigationMeshSourceGeometryData3DImpl{}

type RefNavigationMeshSourceGeometryData3D interface {
	Ref
	TypedPtr() NavigationMeshSourceGeometryData3D
}

type RefNavigationMeshSourceGeometryData3DImpl TypedRef[NavigationMeshSourceGeometryData3D]

func (r *RefNavigationMeshSourceGeometryData3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[NavigationMeshSourceGeometryData3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNavigationMeshSourceGeometryData3DImpl) TypedPtr() NavigationMeshSourceGeometryData3D {
	rg := (*TypedRef[NavigationMeshSourceGeometryData3D])(r)
	return rg.TypedPtr()
}

func (r *RefNavigationMeshSourceGeometryData3DImpl) Ref(from Ref) {
	rg := (*TypedRef[NavigationMeshSourceGeometryData3D])(r)
	rg.Ref(from)
}

func (r *RefNavigationMeshSourceGeometryData3DImpl) TypedRef(from *RefNavigationMeshSourceGeometryData3DImpl) {
	rg := (*TypedRef[NavigationMeshSourceGeometryData3D])(r)
	t := (*TypedRef[NavigationMeshSourceGeometryData3D])(from)
	rg.TypedRef((*TypedRef[NavigationMeshSourceGeometryData3D])(t))
}

func (r *RefNavigationMeshSourceGeometryData3DImpl) Unref() {
	rg := (*TypedRef[NavigationMeshSourceGeometryData3D])(r)
	rg.Unref()
}

func (r *RefNavigationMeshSourceGeometryData3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNavigationMeshSourceGeometryData3D(reference NavigationMeshSourceGeometryData3D) RefNavigationMeshSourceGeometryData3D {
	return (RefNavigationMeshSourceGeometryData3D)(NewTypedRef[NavigationMeshSourceGeometryData3D](reference))
}

func newRefNavigationMeshSourceGeometryData3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[NavigationMeshSourceGeometryData3D](reference.(NavigationMeshSourceGeometryData3D)))
}

func newRefNavigationMeshSourceGeometryData3DGDExtensionIternalConstructor(reference NavigationMeshSourceGeometryData3D) RefNavigationMeshSourceGeometryData3D {
	return newTypedRefGDExtensionIternalConstructor[NavigationMeshSourceGeometryData3D](reference)
}

var _ RefNavigationPathQueryParameters2D = &RefNavigationPathQueryParameters2DImpl{}
var _ Ref = &RefNavigationPathQueryParameters2DImpl{}

type RefNavigationPathQueryParameters2D interface {
	Ref
	TypedPtr() NavigationPathQueryParameters2D
}

type RefNavigationPathQueryParameters2DImpl TypedRef[NavigationPathQueryParameters2D]

func (r *RefNavigationPathQueryParameters2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[NavigationPathQueryParameters2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNavigationPathQueryParameters2DImpl) TypedPtr() NavigationPathQueryParameters2D {
	rg := (*TypedRef[NavigationPathQueryParameters2D])(r)
	return rg.TypedPtr()
}

func (r *RefNavigationPathQueryParameters2DImpl) Ref(from Ref) {
	rg := (*TypedRef[NavigationPathQueryParameters2D])(r)
	rg.Ref(from)
}

func (r *RefNavigationPathQueryParameters2DImpl) TypedRef(from *RefNavigationPathQueryParameters2DImpl) {
	rg := (*TypedRef[NavigationPathQueryParameters2D])(r)
	t := (*TypedRef[NavigationPathQueryParameters2D])(from)
	rg.TypedRef((*TypedRef[NavigationPathQueryParameters2D])(t))
}

func (r *RefNavigationPathQueryParameters2DImpl) Unref() {
	rg := (*TypedRef[NavigationPathQueryParameters2D])(r)
	rg.Unref()
}

func (r *RefNavigationPathQueryParameters2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNavigationPathQueryParameters2D(reference NavigationPathQueryParameters2D) RefNavigationPathQueryParameters2D {
	return (RefNavigationPathQueryParameters2D)(NewTypedRef[NavigationPathQueryParameters2D](reference))
}

func newRefNavigationPathQueryParameters2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[NavigationPathQueryParameters2D](reference.(NavigationPathQueryParameters2D)))
}

func newRefNavigationPathQueryParameters2DGDExtensionIternalConstructor(reference NavigationPathQueryParameters2D) RefNavigationPathQueryParameters2D {
	return newTypedRefGDExtensionIternalConstructor[NavigationPathQueryParameters2D](reference)
}

var _ RefNavigationPathQueryParameters3D = &RefNavigationPathQueryParameters3DImpl{}
var _ Ref = &RefNavigationPathQueryParameters3DImpl{}

type RefNavigationPathQueryParameters3D interface {
	Ref
	TypedPtr() NavigationPathQueryParameters3D
}

type RefNavigationPathQueryParameters3DImpl TypedRef[NavigationPathQueryParameters3D]

func (r *RefNavigationPathQueryParameters3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[NavigationPathQueryParameters3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNavigationPathQueryParameters3DImpl) TypedPtr() NavigationPathQueryParameters3D {
	rg := (*TypedRef[NavigationPathQueryParameters3D])(r)
	return rg.TypedPtr()
}

func (r *RefNavigationPathQueryParameters3DImpl) Ref(from Ref) {
	rg := (*TypedRef[NavigationPathQueryParameters3D])(r)
	rg.Ref(from)
}

func (r *RefNavigationPathQueryParameters3DImpl) TypedRef(from *RefNavigationPathQueryParameters3DImpl) {
	rg := (*TypedRef[NavigationPathQueryParameters3D])(r)
	t := (*TypedRef[NavigationPathQueryParameters3D])(from)
	rg.TypedRef((*TypedRef[NavigationPathQueryParameters3D])(t))
}

func (r *RefNavigationPathQueryParameters3DImpl) Unref() {
	rg := (*TypedRef[NavigationPathQueryParameters3D])(r)
	rg.Unref()
}

func (r *RefNavigationPathQueryParameters3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNavigationPathQueryParameters3D(reference NavigationPathQueryParameters3D) RefNavigationPathQueryParameters3D {
	return (RefNavigationPathQueryParameters3D)(NewTypedRef[NavigationPathQueryParameters3D](reference))
}

func newRefNavigationPathQueryParameters3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[NavigationPathQueryParameters3D](reference.(NavigationPathQueryParameters3D)))
}

func newRefNavigationPathQueryParameters3DGDExtensionIternalConstructor(reference NavigationPathQueryParameters3D) RefNavigationPathQueryParameters3D {
	return newTypedRefGDExtensionIternalConstructor[NavigationPathQueryParameters3D](reference)
}

var _ RefNavigationPathQueryResult2D = &RefNavigationPathQueryResult2DImpl{}
var _ Ref = &RefNavigationPathQueryResult2DImpl{}

type RefNavigationPathQueryResult2D interface {
	Ref
	TypedPtr() NavigationPathQueryResult2D
}

type RefNavigationPathQueryResult2DImpl TypedRef[NavigationPathQueryResult2D]

func (r *RefNavigationPathQueryResult2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[NavigationPathQueryResult2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNavigationPathQueryResult2DImpl) TypedPtr() NavigationPathQueryResult2D {
	rg := (*TypedRef[NavigationPathQueryResult2D])(r)
	return rg.TypedPtr()
}

func (r *RefNavigationPathQueryResult2DImpl) Ref(from Ref) {
	rg := (*TypedRef[NavigationPathQueryResult2D])(r)
	rg.Ref(from)
}

func (r *RefNavigationPathQueryResult2DImpl) TypedRef(from *RefNavigationPathQueryResult2DImpl) {
	rg := (*TypedRef[NavigationPathQueryResult2D])(r)
	t := (*TypedRef[NavigationPathQueryResult2D])(from)
	rg.TypedRef((*TypedRef[NavigationPathQueryResult2D])(t))
}

func (r *RefNavigationPathQueryResult2DImpl) Unref() {
	rg := (*TypedRef[NavigationPathQueryResult2D])(r)
	rg.Unref()
}

func (r *RefNavigationPathQueryResult2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNavigationPathQueryResult2D(reference NavigationPathQueryResult2D) RefNavigationPathQueryResult2D {
	return (RefNavigationPathQueryResult2D)(NewTypedRef[NavigationPathQueryResult2D](reference))
}

func newRefNavigationPathQueryResult2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[NavigationPathQueryResult2D](reference.(NavigationPathQueryResult2D)))
}

func newRefNavigationPathQueryResult2DGDExtensionIternalConstructor(reference NavigationPathQueryResult2D) RefNavigationPathQueryResult2D {
	return newTypedRefGDExtensionIternalConstructor[NavigationPathQueryResult2D](reference)
}

var _ RefNavigationPathQueryResult3D = &RefNavigationPathQueryResult3DImpl{}
var _ Ref = &RefNavigationPathQueryResult3DImpl{}

type RefNavigationPathQueryResult3D interface {
	Ref
	TypedPtr() NavigationPathQueryResult3D
}

type RefNavigationPathQueryResult3DImpl TypedRef[NavigationPathQueryResult3D]

func (r *RefNavigationPathQueryResult3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[NavigationPathQueryResult3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNavigationPathQueryResult3DImpl) TypedPtr() NavigationPathQueryResult3D {
	rg := (*TypedRef[NavigationPathQueryResult3D])(r)
	return rg.TypedPtr()
}

func (r *RefNavigationPathQueryResult3DImpl) Ref(from Ref) {
	rg := (*TypedRef[NavigationPathQueryResult3D])(r)
	rg.Ref(from)
}

func (r *RefNavigationPathQueryResult3DImpl) TypedRef(from *RefNavigationPathQueryResult3DImpl) {
	rg := (*TypedRef[NavigationPathQueryResult3D])(r)
	t := (*TypedRef[NavigationPathQueryResult3D])(from)
	rg.TypedRef((*TypedRef[NavigationPathQueryResult3D])(t))
}

func (r *RefNavigationPathQueryResult3DImpl) Unref() {
	rg := (*TypedRef[NavigationPathQueryResult3D])(r)
	rg.Unref()
}

func (r *RefNavigationPathQueryResult3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNavigationPathQueryResult3D(reference NavigationPathQueryResult3D) RefNavigationPathQueryResult3D {
	return (RefNavigationPathQueryResult3D)(NewTypedRef[NavigationPathQueryResult3D](reference))
}

func newRefNavigationPathQueryResult3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[NavigationPathQueryResult3D](reference.(NavigationPathQueryResult3D)))
}

func newRefNavigationPathQueryResult3DGDExtensionIternalConstructor(reference NavigationPathQueryResult3D) RefNavigationPathQueryResult3D {
	return newTypedRefGDExtensionIternalConstructor[NavigationPathQueryResult3D](reference)
}

var _ RefNavigationPolygon = &RefNavigationPolygonImpl{}
var _ Ref = &RefNavigationPolygonImpl{}

type RefNavigationPolygon interface {
	Ref
	TypedPtr() NavigationPolygon
}

type RefNavigationPolygonImpl TypedRef[NavigationPolygon]

func (r *RefNavigationPolygonImpl) Ptr() RefCounted {
	rg := (*TypedRef[NavigationPolygon])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNavigationPolygonImpl) TypedPtr() NavigationPolygon {
	rg := (*TypedRef[NavigationPolygon])(r)
	return rg.TypedPtr()
}

func (r *RefNavigationPolygonImpl) Ref(from Ref) {
	rg := (*TypedRef[NavigationPolygon])(r)
	rg.Ref(from)
}

func (r *RefNavigationPolygonImpl) TypedRef(from *RefNavigationPolygonImpl) {
	rg := (*TypedRef[NavigationPolygon])(r)
	t := (*TypedRef[NavigationPolygon])(from)
	rg.TypedRef((*TypedRef[NavigationPolygon])(t))
}

func (r *RefNavigationPolygonImpl) Unref() {
	rg := (*TypedRef[NavigationPolygon])(r)
	rg.Unref()
}

func (r *RefNavigationPolygonImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNavigationPolygon(reference NavigationPolygon) RefNavigationPolygon {
	return (RefNavigationPolygon)(NewTypedRef[NavigationPolygon](reference))
}

func newRefNavigationPolygonAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[NavigationPolygon](reference.(NavigationPolygon)))
}

func newRefNavigationPolygonGDExtensionIternalConstructor(reference NavigationPolygon) RefNavigationPolygon {
	return newTypedRefGDExtensionIternalConstructor[NavigationPolygon](reference)
}

var _ RefNode3DGizmo = &RefNode3DGizmoImpl{}
var _ Ref = &RefNode3DGizmoImpl{}

type RefNode3DGizmo interface {
	Ref
	TypedPtr() Node3DGizmo
}

type RefNode3DGizmoImpl TypedRef[Node3DGizmo]

func (r *RefNode3DGizmoImpl) Ptr() RefCounted {
	rg := (*TypedRef[Node3DGizmo])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNode3DGizmoImpl) TypedPtr() Node3DGizmo {
	rg := (*TypedRef[Node3DGizmo])(r)
	return rg.TypedPtr()
}

func (r *RefNode3DGizmoImpl) Ref(from Ref) {
	rg := (*TypedRef[Node3DGizmo])(r)
	rg.Ref(from)
}

func (r *RefNode3DGizmoImpl) TypedRef(from *RefNode3DGizmoImpl) {
	rg := (*TypedRef[Node3DGizmo])(r)
	t := (*TypedRef[Node3DGizmo])(from)
	rg.TypedRef((*TypedRef[Node3DGizmo])(t))
}

func (r *RefNode3DGizmoImpl) Unref() {
	rg := (*TypedRef[Node3DGizmo])(r)
	rg.Unref()
}

func (r *RefNode3DGizmoImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNode3DGizmo(reference Node3DGizmo) RefNode3DGizmo {
	return (RefNode3DGizmo)(NewTypedRef[Node3DGizmo](reference))
}

func newRefNode3DGizmoAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Node3DGizmo](reference.(Node3DGizmo)))
}

func newRefNode3DGizmoGDExtensionIternalConstructor(reference Node3DGizmo) RefNode3DGizmo {
	return newTypedRefGDExtensionIternalConstructor[Node3DGizmo](reference)
}

var _ RefNoise = &RefNoiseImpl{}
var _ Ref = &RefNoiseImpl{}

type RefNoise interface {
	Ref
	TypedPtr() Noise
}

type RefNoiseImpl TypedRef[Noise]

func (r *RefNoiseImpl) Ptr() RefCounted {
	rg := (*TypedRef[Noise])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNoiseImpl) TypedPtr() Noise {
	rg := (*TypedRef[Noise])(r)
	return rg.TypedPtr()
}

func (r *RefNoiseImpl) Ref(from Ref) {
	rg := (*TypedRef[Noise])(r)
	rg.Ref(from)
}

func (r *RefNoiseImpl) TypedRef(from *RefNoiseImpl) {
	rg := (*TypedRef[Noise])(r)
	t := (*TypedRef[Noise])(from)
	rg.TypedRef((*TypedRef[Noise])(t))
}

func (r *RefNoiseImpl) Unref() {
	rg := (*TypedRef[Noise])(r)
	rg.Unref()
}

func (r *RefNoiseImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNoise(reference Noise) RefNoise {
	return (RefNoise)(NewTypedRef[Noise](reference))
}

func newRefNoiseAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Noise](reference.(Noise)))
}

func newRefNoiseGDExtensionIternalConstructor(reference Noise) RefNoise {
	return newTypedRefGDExtensionIternalConstructor[Noise](reference)
}

var _ RefNoiseTexture2D = &RefNoiseTexture2DImpl{}
var _ Ref = &RefNoiseTexture2DImpl{}

type RefNoiseTexture2D interface {
	Ref
	TypedPtr() NoiseTexture2D
}

type RefNoiseTexture2DImpl TypedRef[NoiseTexture2D]

func (r *RefNoiseTexture2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[NoiseTexture2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNoiseTexture2DImpl) TypedPtr() NoiseTexture2D {
	rg := (*TypedRef[NoiseTexture2D])(r)
	return rg.TypedPtr()
}

func (r *RefNoiseTexture2DImpl) Ref(from Ref) {
	rg := (*TypedRef[NoiseTexture2D])(r)
	rg.Ref(from)
}

func (r *RefNoiseTexture2DImpl) TypedRef(from *RefNoiseTexture2DImpl) {
	rg := (*TypedRef[NoiseTexture2D])(r)
	t := (*TypedRef[NoiseTexture2D])(from)
	rg.TypedRef((*TypedRef[NoiseTexture2D])(t))
}

func (r *RefNoiseTexture2DImpl) Unref() {
	rg := (*TypedRef[NoiseTexture2D])(r)
	rg.Unref()
}

func (r *RefNoiseTexture2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNoiseTexture2D(reference NoiseTexture2D) RefNoiseTexture2D {
	return (RefNoiseTexture2D)(NewTypedRef[NoiseTexture2D](reference))
}

func newRefNoiseTexture2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[NoiseTexture2D](reference.(NoiseTexture2D)))
}

func newRefNoiseTexture2DGDExtensionIternalConstructor(reference NoiseTexture2D) RefNoiseTexture2D {
	return newTypedRefGDExtensionIternalConstructor[NoiseTexture2D](reference)
}

var _ RefNoiseTexture3D = &RefNoiseTexture3DImpl{}
var _ Ref = &RefNoiseTexture3DImpl{}

type RefNoiseTexture3D interface {
	Ref
	TypedPtr() NoiseTexture3D
}

type RefNoiseTexture3DImpl TypedRef[NoiseTexture3D]

func (r *RefNoiseTexture3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[NoiseTexture3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefNoiseTexture3DImpl) TypedPtr() NoiseTexture3D {
	rg := (*TypedRef[NoiseTexture3D])(r)
	return rg.TypedPtr()
}

func (r *RefNoiseTexture3DImpl) Ref(from Ref) {
	rg := (*TypedRef[NoiseTexture3D])(r)
	rg.Ref(from)
}

func (r *RefNoiseTexture3DImpl) TypedRef(from *RefNoiseTexture3DImpl) {
	rg := (*TypedRef[NoiseTexture3D])(r)
	t := (*TypedRef[NoiseTexture3D])(from)
	rg.TypedRef((*TypedRef[NoiseTexture3D])(t))
}

func (r *RefNoiseTexture3DImpl) Unref() {
	rg := (*TypedRef[NoiseTexture3D])(r)
	rg.Unref()
}

func (r *RefNoiseTexture3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefNoiseTexture3D(reference NoiseTexture3D) RefNoiseTexture3D {
	return (RefNoiseTexture3D)(NewTypedRef[NoiseTexture3D](reference))
}

func newRefNoiseTexture3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[NoiseTexture3D](reference.(NoiseTexture3D)))
}

func newRefNoiseTexture3DGDExtensionIternalConstructor(reference NoiseTexture3D) RefNoiseTexture3D {
	return newTypedRefGDExtensionIternalConstructor[NoiseTexture3D](reference)
}

var _ RefORMMaterial3D = &RefORMMaterial3DImpl{}
var _ Ref = &RefORMMaterial3DImpl{}

type RefORMMaterial3D interface {
	Ref
	TypedPtr() ORMMaterial3D
}

type RefORMMaterial3DImpl TypedRef[ORMMaterial3D]

func (r *RefORMMaterial3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[ORMMaterial3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefORMMaterial3DImpl) TypedPtr() ORMMaterial3D {
	rg := (*TypedRef[ORMMaterial3D])(r)
	return rg.TypedPtr()
}

func (r *RefORMMaterial3DImpl) Ref(from Ref) {
	rg := (*TypedRef[ORMMaterial3D])(r)
	rg.Ref(from)
}

func (r *RefORMMaterial3DImpl) TypedRef(from *RefORMMaterial3DImpl) {
	rg := (*TypedRef[ORMMaterial3D])(r)
	t := (*TypedRef[ORMMaterial3D])(from)
	rg.TypedRef((*TypedRef[ORMMaterial3D])(t))
}

func (r *RefORMMaterial3DImpl) Unref() {
	rg := (*TypedRef[ORMMaterial3D])(r)
	rg.Unref()
}

func (r *RefORMMaterial3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefORMMaterial3D(reference ORMMaterial3D) RefORMMaterial3D {
	return (RefORMMaterial3D)(NewTypedRef[ORMMaterial3D](reference))
}

func newRefORMMaterial3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ORMMaterial3D](reference.(ORMMaterial3D)))
}

func newRefORMMaterial3DGDExtensionIternalConstructor(reference ORMMaterial3D) RefORMMaterial3D {
	return newTypedRefGDExtensionIternalConstructor[ORMMaterial3D](reference)
}

var _ RefOccluder3D = &RefOccluder3DImpl{}
var _ Ref = &RefOccluder3DImpl{}

type RefOccluder3D interface {
	Ref
	TypedPtr() Occluder3D
}

type RefOccluder3DImpl TypedRef[Occluder3D]

func (r *RefOccluder3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[Occluder3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOccluder3DImpl) TypedPtr() Occluder3D {
	rg := (*TypedRef[Occluder3D])(r)
	return rg.TypedPtr()
}

func (r *RefOccluder3DImpl) Ref(from Ref) {
	rg := (*TypedRef[Occluder3D])(r)
	rg.Ref(from)
}

func (r *RefOccluder3DImpl) TypedRef(from *RefOccluder3DImpl) {
	rg := (*TypedRef[Occluder3D])(r)
	t := (*TypedRef[Occluder3D])(from)
	rg.TypedRef((*TypedRef[Occluder3D])(t))
}

func (r *RefOccluder3DImpl) Unref() {
	rg := (*TypedRef[Occluder3D])(r)
	rg.Unref()
}

func (r *RefOccluder3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOccluder3D(reference Occluder3D) RefOccluder3D {
	return (RefOccluder3D)(NewTypedRef[Occluder3D](reference))
}

func newRefOccluder3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Occluder3D](reference.(Occluder3D)))
}

func newRefOccluder3DGDExtensionIternalConstructor(reference Occluder3D) RefOccluder3D {
	return newTypedRefGDExtensionIternalConstructor[Occluder3D](reference)
}

var _ RefOccluderPolygon2D = &RefOccluderPolygon2DImpl{}
var _ Ref = &RefOccluderPolygon2DImpl{}

type RefOccluderPolygon2D interface {
	Ref
	TypedPtr() OccluderPolygon2D
}

type RefOccluderPolygon2DImpl TypedRef[OccluderPolygon2D]

func (r *RefOccluderPolygon2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[OccluderPolygon2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOccluderPolygon2DImpl) TypedPtr() OccluderPolygon2D {
	rg := (*TypedRef[OccluderPolygon2D])(r)
	return rg.TypedPtr()
}

func (r *RefOccluderPolygon2DImpl) Ref(from Ref) {
	rg := (*TypedRef[OccluderPolygon2D])(r)
	rg.Ref(from)
}

func (r *RefOccluderPolygon2DImpl) TypedRef(from *RefOccluderPolygon2DImpl) {
	rg := (*TypedRef[OccluderPolygon2D])(r)
	t := (*TypedRef[OccluderPolygon2D])(from)
	rg.TypedRef((*TypedRef[OccluderPolygon2D])(t))
}

func (r *RefOccluderPolygon2DImpl) Unref() {
	rg := (*TypedRef[OccluderPolygon2D])(r)
	rg.Unref()
}

func (r *RefOccluderPolygon2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOccluderPolygon2D(reference OccluderPolygon2D) RefOccluderPolygon2D {
	return (RefOccluderPolygon2D)(NewTypedRef[OccluderPolygon2D](reference))
}

func newRefOccluderPolygon2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OccluderPolygon2D](reference.(OccluderPolygon2D)))
}

func newRefOccluderPolygon2DGDExtensionIternalConstructor(reference OccluderPolygon2D) RefOccluderPolygon2D {
	return newTypedRefGDExtensionIternalConstructor[OccluderPolygon2D](reference)
}

var _ RefOfflineMultiplayerPeer = &RefOfflineMultiplayerPeerImpl{}
var _ Ref = &RefOfflineMultiplayerPeerImpl{}

type RefOfflineMultiplayerPeer interface {
	Ref
	TypedPtr() OfflineMultiplayerPeer
}

type RefOfflineMultiplayerPeerImpl TypedRef[OfflineMultiplayerPeer]

func (r *RefOfflineMultiplayerPeerImpl) Ptr() RefCounted {
	rg := (*TypedRef[OfflineMultiplayerPeer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOfflineMultiplayerPeerImpl) TypedPtr() OfflineMultiplayerPeer {
	rg := (*TypedRef[OfflineMultiplayerPeer])(r)
	return rg.TypedPtr()
}

func (r *RefOfflineMultiplayerPeerImpl) Ref(from Ref) {
	rg := (*TypedRef[OfflineMultiplayerPeer])(r)
	rg.Ref(from)
}

func (r *RefOfflineMultiplayerPeerImpl) TypedRef(from *RefOfflineMultiplayerPeerImpl) {
	rg := (*TypedRef[OfflineMultiplayerPeer])(r)
	t := (*TypedRef[OfflineMultiplayerPeer])(from)
	rg.TypedRef((*TypedRef[OfflineMultiplayerPeer])(t))
}

func (r *RefOfflineMultiplayerPeerImpl) Unref() {
	rg := (*TypedRef[OfflineMultiplayerPeer])(r)
	rg.Unref()
}

func (r *RefOfflineMultiplayerPeerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOfflineMultiplayerPeer(reference OfflineMultiplayerPeer) RefOfflineMultiplayerPeer {
	return (RefOfflineMultiplayerPeer)(NewTypedRef[OfflineMultiplayerPeer](reference))
}

func newRefOfflineMultiplayerPeerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OfflineMultiplayerPeer](reference.(OfflineMultiplayerPeer)))
}

func newRefOfflineMultiplayerPeerGDExtensionIternalConstructor(reference OfflineMultiplayerPeer) RefOfflineMultiplayerPeer {
	return newTypedRefGDExtensionIternalConstructor[OfflineMultiplayerPeer](reference)
}

var _ RefOggPacketSequence = &RefOggPacketSequenceImpl{}
var _ Ref = &RefOggPacketSequenceImpl{}

type RefOggPacketSequence interface {
	Ref
	TypedPtr() OggPacketSequence
}

type RefOggPacketSequenceImpl TypedRef[OggPacketSequence]

func (r *RefOggPacketSequenceImpl) Ptr() RefCounted {
	rg := (*TypedRef[OggPacketSequence])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOggPacketSequenceImpl) TypedPtr() OggPacketSequence {
	rg := (*TypedRef[OggPacketSequence])(r)
	return rg.TypedPtr()
}

func (r *RefOggPacketSequenceImpl) Ref(from Ref) {
	rg := (*TypedRef[OggPacketSequence])(r)
	rg.Ref(from)
}

func (r *RefOggPacketSequenceImpl) TypedRef(from *RefOggPacketSequenceImpl) {
	rg := (*TypedRef[OggPacketSequence])(r)
	t := (*TypedRef[OggPacketSequence])(from)
	rg.TypedRef((*TypedRef[OggPacketSequence])(t))
}

func (r *RefOggPacketSequenceImpl) Unref() {
	rg := (*TypedRef[OggPacketSequence])(r)
	rg.Unref()
}

func (r *RefOggPacketSequenceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOggPacketSequence(reference OggPacketSequence) RefOggPacketSequence {
	return (RefOggPacketSequence)(NewTypedRef[OggPacketSequence](reference))
}

func newRefOggPacketSequenceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OggPacketSequence](reference.(OggPacketSequence)))
}

func newRefOggPacketSequenceGDExtensionIternalConstructor(reference OggPacketSequence) RefOggPacketSequence {
	return newTypedRefGDExtensionIternalConstructor[OggPacketSequence](reference)
}

var _ RefOggPacketSequencePlayback = &RefOggPacketSequencePlaybackImpl{}
var _ Ref = &RefOggPacketSequencePlaybackImpl{}

type RefOggPacketSequencePlayback interface {
	Ref
	TypedPtr() OggPacketSequencePlayback
}

type RefOggPacketSequencePlaybackImpl TypedRef[OggPacketSequencePlayback]

func (r *RefOggPacketSequencePlaybackImpl) Ptr() RefCounted {
	rg := (*TypedRef[OggPacketSequencePlayback])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOggPacketSequencePlaybackImpl) TypedPtr() OggPacketSequencePlayback {
	rg := (*TypedRef[OggPacketSequencePlayback])(r)
	return rg.TypedPtr()
}

func (r *RefOggPacketSequencePlaybackImpl) Ref(from Ref) {
	rg := (*TypedRef[OggPacketSequencePlayback])(r)
	rg.Ref(from)
}

func (r *RefOggPacketSequencePlaybackImpl) TypedRef(from *RefOggPacketSequencePlaybackImpl) {
	rg := (*TypedRef[OggPacketSequencePlayback])(r)
	t := (*TypedRef[OggPacketSequencePlayback])(from)
	rg.TypedRef((*TypedRef[OggPacketSequencePlayback])(t))
}

func (r *RefOggPacketSequencePlaybackImpl) Unref() {
	rg := (*TypedRef[OggPacketSequencePlayback])(r)
	rg.Unref()
}

func (r *RefOggPacketSequencePlaybackImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOggPacketSequencePlayback(reference OggPacketSequencePlayback) RefOggPacketSequencePlayback {
	return (RefOggPacketSequencePlayback)(NewTypedRef[OggPacketSequencePlayback](reference))
}

func newRefOggPacketSequencePlaybackAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OggPacketSequencePlayback](reference.(OggPacketSequencePlayback)))
}

func newRefOggPacketSequencePlaybackGDExtensionIternalConstructor(reference OggPacketSequencePlayback) RefOggPacketSequencePlayback {
	return newTypedRefGDExtensionIternalConstructor[OggPacketSequencePlayback](reference)
}

var _ RefOpenXRAPIExtension = &RefOpenXRAPIExtensionImpl{}
var _ Ref = &RefOpenXRAPIExtensionImpl{}

type RefOpenXRAPIExtension interface {
	Ref
	TypedPtr() OpenXRAPIExtension
}

type RefOpenXRAPIExtensionImpl TypedRef[OpenXRAPIExtension]

func (r *RefOpenXRAPIExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[OpenXRAPIExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOpenXRAPIExtensionImpl) TypedPtr() OpenXRAPIExtension {
	rg := (*TypedRef[OpenXRAPIExtension])(r)
	return rg.TypedPtr()
}

func (r *RefOpenXRAPIExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[OpenXRAPIExtension])(r)
	rg.Ref(from)
}

func (r *RefOpenXRAPIExtensionImpl) TypedRef(from *RefOpenXRAPIExtensionImpl) {
	rg := (*TypedRef[OpenXRAPIExtension])(r)
	t := (*TypedRef[OpenXRAPIExtension])(from)
	rg.TypedRef((*TypedRef[OpenXRAPIExtension])(t))
}

func (r *RefOpenXRAPIExtensionImpl) Unref() {
	rg := (*TypedRef[OpenXRAPIExtension])(r)
	rg.Unref()
}

func (r *RefOpenXRAPIExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOpenXRAPIExtension(reference OpenXRAPIExtension) RefOpenXRAPIExtension {
	return (RefOpenXRAPIExtension)(NewTypedRef[OpenXRAPIExtension](reference))
}

func newRefOpenXRAPIExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OpenXRAPIExtension](reference.(OpenXRAPIExtension)))
}

func newRefOpenXRAPIExtensionGDExtensionIternalConstructor(reference OpenXRAPIExtension) RefOpenXRAPIExtension {
	return newTypedRefGDExtensionIternalConstructor[OpenXRAPIExtension](reference)
}

var _ RefOpenXRAction = &RefOpenXRActionImpl{}
var _ Ref = &RefOpenXRActionImpl{}

type RefOpenXRAction interface {
	Ref
	TypedPtr() OpenXRAction
}

type RefOpenXRActionImpl TypedRef[OpenXRAction]

func (r *RefOpenXRActionImpl) Ptr() RefCounted {
	rg := (*TypedRef[OpenXRAction])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOpenXRActionImpl) TypedPtr() OpenXRAction {
	rg := (*TypedRef[OpenXRAction])(r)
	return rg.TypedPtr()
}

func (r *RefOpenXRActionImpl) Ref(from Ref) {
	rg := (*TypedRef[OpenXRAction])(r)
	rg.Ref(from)
}

func (r *RefOpenXRActionImpl) TypedRef(from *RefOpenXRActionImpl) {
	rg := (*TypedRef[OpenXRAction])(r)
	t := (*TypedRef[OpenXRAction])(from)
	rg.TypedRef((*TypedRef[OpenXRAction])(t))
}

func (r *RefOpenXRActionImpl) Unref() {
	rg := (*TypedRef[OpenXRAction])(r)
	rg.Unref()
}

func (r *RefOpenXRActionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOpenXRAction(reference OpenXRAction) RefOpenXRAction {
	return (RefOpenXRAction)(NewTypedRef[OpenXRAction](reference))
}

func newRefOpenXRActionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OpenXRAction](reference.(OpenXRAction)))
}

func newRefOpenXRActionGDExtensionIternalConstructor(reference OpenXRAction) RefOpenXRAction {
	return newTypedRefGDExtensionIternalConstructor[OpenXRAction](reference)
}

var _ RefOpenXRActionMap = &RefOpenXRActionMapImpl{}
var _ Ref = &RefOpenXRActionMapImpl{}

type RefOpenXRActionMap interface {
	Ref
	TypedPtr() OpenXRActionMap
}

type RefOpenXRActionMapImpl TypedRef[OpenXRActionMap]

func (r *RefOpenXRActionMapImpl) Ptr() RefCounted {
	rg := (*TypedRef[OpenXRActionMap])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOpenXRActionMapImpl) TypedPtr() OpenXRActionMap {
	rg := (*TypedRef[OpenXRActionMap])(r)
	return rg.TypedPtr()
}

func (r *RefOpenXRActionMapImpl) Ref(from Ref) {
	rg := (*TypedRef[OpenXRActionMap])(r)
	rg.Ref(from)
}

func (r *RefOpenXRActionMapImpl) TypedRef(from *RefOpenXRActionMapImpl) {
	rg := (*TypedRef[OpenXRActionMap])(r)
	t := (*TypedRef[OpenXRActionMap])(from)
	rg.TypedRef((*TypedRef[OpenXRActionMap])(t))
}

func (r *RefOpenXRActionMapImpl) Unref() {
	rg := (*TypedRef[OpenXRActionMap])(r)
	rg.Unref()
}

func (r *RefOpenXRActionMapImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOpenXRActionMap(reference OpenXRActionMap) RefOpenXRActionMap {
	return (RefOpenXRActionMap)(NewTypedRef[OpenXRActionMap](reference))
}

func newRefOpenXRActionMapAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OpenXRActionMap](reference.(OpenXRActionMap)))
}

func newRefOpenXRActionMapGDExtensionIternalConstructor(reference OpenXRActionMap) RefOpenXRActionMap {
	return newTypedRefGDExtensionIternalConstructor[OpenXRActionMap](reference)
}

var _ RefOpenXRActionSet = &RefOpenXRActionSetImpl{}
var _ Ref = &RefOpenXRActionSetImpl{}

type RefOpenXRActionSet interface {
	Ref
	TypedPtr() OpenXRActionSet
}

type RefOpenXRActionSetImpl TypedRef[OpenXRActionSet]

func (r *RefOpenXRActionSetImpl) Ptr() RefCounted {
	rg := (*TypedRef[OpenXRActionSet])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOpenXRActionSetImpl) TypedPtr() OpenXRActionSet {
	rg := (*TypedRef[OpenXRActionSet])(r)
	return rg.TypedPtr()
}

func (r *RefOpenXRActionSetImpl) Ref(from Ref) {
	rg := (*TypedRef[OpenXRActionSet])(r)
	rg.Ref(from)
}

func (r *RefOpenXRActionSetImpl) TypedRef(from *RefOpenXRActionSetImpl) {
	rg := (*TypedRef[OpenXRActionSet])(r)
	t := (*TypedRef[OpenXRActionSet])(from)
	rg.TypedRef((*TypedRef[OpenXRActionSet])(t))
}

func (r *RefOpenXRActionSetImpl) Unref() {
	rg := (*TypedRef[OpenXRActionSet])(r)
	rg.Unref()
}

func (r *RefOpenXRActionSetImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOpenXRActionSet(reference OpenXRActionSet) RefOpenXRActionSet {
	return (RefOpenXRActionSet)(NewTypedRef[OpenXRActionSet](reference))
}

func newRefOpenXRActionSetAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OpenXRActionSet](reference.(OpenXRActionSet)))
}

func newRefOpenXRActionSetGDExtensionIternalConstructor(reference OpenXRActionSet) RefOpenXRActionSet {
	return newTypedRefGDExtensionIternalConstructor[OpenXRActionSet](reference)
}

var _ RefOpenXRIPBinding = &RefOpenXRIPBindingImpl{}
var _ Ref = &RefOpenXRIPBindingImpl{}

type RefOpenXRIPBinding interface {
	Ref
	TypedPtr() OpenXRIPBinding
}

type RefOpenXRIPBindingImpl TypedRef[OpenXRIPBinding]

func (r *RefOpenXRIPBindingImpl) Ptr() RefCounted {
	rg := (*TypedRef[OpenXRIPBinding])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOpenXRIPBindingImpl) TypedPtr() OpenXRIPBinding {
	rg := (*TypedRef[OpenXRIPBinding])(r)
	return rg.TypedPtr()
}

func (r *RefOpenXRIPBindingImpl) Ref(from Ref) {
	rg := (*TypedRef[OpenXRIPBinding])(r)
	rg.Ref(from)
}

func (r *RefOpenXRIPBindingImpl) TypedRef(from *RefOpenXRIPBindingImpl) {
	rg := (*TypedRef[OpenXRIPBinding])(r)
	t := (*TypedRef[OpenXRIPBinding])(from)
	rg.TypedRef((*TypedRef[OpenXRIPBinding])(t))
}

func (r *RefOpenXRIPBindingImpl) Unref() {
	rg := (*TypedRef[OpenXRIPBinding])(r)
	rg.Unref()
}

func (r *RefOpenXRIPBindingImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOpenXRIPBinding(reference OpenXRIPBinding) RefOpenXRIPBinding {
	return (RefOpenXRIPBinding)(NewTypedRef[OpenXRIPBinding](reference))
}

func newRefOpenXRIPBindingAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OpenXRIPBinding](reference.(OpenXRIPBinding)))
}

func newRefOpenXRIPBindingGDExtensionIternalConstructor(reference OpenXRIPBinding) RefOpenXRIPBinding {
	return newTypedRefGDExtensionIternalConstructor[OpenXRIPBinding](reference)
}

var _ RefOpenXRInteractionProfile = &RefOpenXRInteractionProfileImpl{}
var _ Ref = &RefOpenXRInteractionProfileImpl{}

type RefOpenXRInteractionProfile interface {
	Ref
	TypedPtr() OpenXRInteractionProfile
}

type RefOpenXRInteractionProfileImpl TypedRef[OpenXRInteractionProfile]

func (r *RefOpenXRInteractionProfileImpl) Ptr() RefCounted {
	rg := (*TypedRef[OpenXRInteractionProfile])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOpenXRInteractionProfileImpl) TypedPtr() OpenXRInteractionProfile {
	rg := (*TypedRef[OpenXRInteractionProfile])(r)
	return rg.TypedPtr()
}

func (r *RefOpenXRInteractionProfileImpl) Ref(from Ref) {
	rg := (*TypedRef[OpenXRInteractionProfile])(r)
	rg.Ref(from)
}

func (r *RefOpenXRInteractionProfileImpl) TypedRef(from *RefOpenXRInteractionProfileImpl) {
	rg := (*TypedRef[OpenXRInteractionProfile])(r)
	t := (*TypedRef[OpenXRInteractionProfile])(from)
	rg.TypedRef((*TypedRef[OpenXRInteractionProfile])(t))
}

func (r *RefOpenXRInteractionProfileImpl) Unref() {
	rg := (*TypedRef[OpenXRInteractionProfile])(r)
	rg.Unref()
}

func (r *RefOpenXRInteractionProfileImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOpenXRInteractionProfile(reference OpenXRInteractionProfile) RefOpenXRInteractionProfile {
	return (RefOpenXRInteractionProfile)(NewTypedRef[OpenXRInteractionProfile](reference))
}

func newRefOpenXRInteractionProfileAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OpenXRInteractionProfile](reference.(OpenXRInteractionProfile)))
}

func newRefOpenXRInteractionProfileGDExtensionIternalConstructor(reference OpenXRInteractionProfile) RefOpenXRInteractionProfile {
	return newTypedRefGDExtensionIternalConstructor[OpenXRInteractionProfile](reference)
}

var _ RefOpenXRInterface = &RefOpenXRInterfaceImpl{}
var _ Ref = &RefOpenXRInterfaceImpl{}

type RefOpenXRInterface interface {
	Ref
	TypedPtr() OpenXRInterface
}

type RefOpenXRInterfaceImpl TypedRef[OpenXRInterface]

func (r *RefOpenXRInterfaceImpl) Ptr() RefCounted {
	rg := (*TypedRef[OpenXRInterface])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOpenXRInterfaceImpl) TypedPtr() OpenXRInterface {
	rg := (*TypedRef[OpenXRInterface])(r)
	return rg.TypedPtr()
}

func (r *RefOpenXRInterfaceImpl) Ref(from Ref) {
	rg := (*TypedRef[OpenXRInterface])(r)
	rg.Ref(from)
}

func (r *RefOpenXRInterfaceImpl) TypedRef(from *RefOpenXRInterfaceImpl) {
	rg := (*TypedRef[OpenXRInterface])(r)
	t := (*TypedRef[OpenXRInterface])(from)
	rg.TypedRef((*TypedRef[OpenXRInterface])(t))
}

func (r *RefOpenXRInterfaceImpl) Unref() {
	rg := (*TypedRef[OpenXRInterface])(r)
	rg.Unref()
}

func (r *RefOpenXRInterfaceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOpenXRInterface(reference OpenXRInterface) RefOpenXRInterface {
	return (RefOpenXRInterface)(NewTypedRef[OpenXRInterface](reference))
}

func newRefOpenXRInterfaceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OpenXRInterface](reference.(OpenXRInterface)))
}

func newRefOpenXRInterfaceGDExtensionIternalConstructor(reference OpenXRInterface) RefOpenXRInterface {
	return newTypedRefGDExtensionIternalConstructor[OpenXRInterface](reference)
}

var _ RefOptimizedTranslation = &RefOptimizedTranslationImpl{}
var _ Ref = &RefOptimizedTranslationImpl{}

type RefOptimizedTranslation interface {
	Ref
	TypedPtr() OptimizedTranslation
}

type RefOptimizedTranslationImpl TypedRef[OptimizedTranslation]

func (r *RefOptimizedTranslationImpl) Ptr() RefCounted {
	rg := (*TypedRef[OptimizedTranslation])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefOptimizedTranslationImpl) TypedPtr() OptimizedTranslation {
	rg := (*TypedRef[OptimizedTranslation])(r)
	return rg.TypedPtr()
}

func (r *RefOptimizedTranslationImpl) Ref(from Ref) {
	rg := (*TypedRef[OptimizedTranslation])(r)
	rg.Ref(from)
}

func (r *RefOptimizedTranslationImpl) TypedRef(from *RefOptimizedTranslationImpl) {
	rg := (*TypedRef[OptimizedTranslation])(r)
	t := (*TypedRef[OptimizedTranslation])(from)
	rg.TypedRef((*TypedRef[OptimizedTranslation])(t))
}

func (r *RefOptimizedTranslationImpl) Unref() {
	rg := (*TypedRef[OptimizedTranslation])(r)
	rg.Unref()
}

func (r *RefOptimizedTranslationImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefOptimizedTranslation(reference OptimizedTranslation) RefOptimizedTranslation {
	return (RefOptimizedTranslation)(NewTypedRef[OptimizedTranslation](reference))
}

func newRefOptimizedTranslationAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[OptimizedTranslation](reference.(OptimizedTranslation)))
}

func newRefOptimizedTranslationGDExtensionIternalConstructor(reference OptimizedTranslation) RefOptimizedTranslation {
	return newTypedRefGDExtensionIternalConstructor[OptimizedTranslation](reference)
}

var _ RefPCKPacker = &RefPCKPackerImpl{}
var _ Ref = &RefPCKPackerImpl{}

type RefPCKPacker interface {
	Ref
	TypedPtr() PCKPacker
}

type RefPCKPackerImpl TypedRef[PCKPacker]

func (r *RefPCKPackerImpl) Ptr() RefCounted {
	rg := (*TypedRef[PCKPacker])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPCKPackerImpl) TypedPtr() PCKPacker {
	rg := (*TypedRef[PCKPacker])(r)
	return rg.TypedPtr()
}

func (r *RefPCKPackerImpl) Ref(from Ref) {
	rg := (*TypedRef[PCKPacker])(r)
	rg.Ref(from)
}

func (r *RefPCKPackerImpl) TypedRef(from *RefPCKPackerImpl) {
	rg := (*TypedRef[PCKPacker])(r)
	t := (*TypedRef[PCKPacker])(from)
	rg.TypedRef((*TypedRef[PCKPacker])(t))
}

func (r *RefPCKPackerImpl) Unref() {
	rg := (*TypedRef[PCKPacker])(r)
	rg.Unref()
}

func (r *RefPCKPackerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPCKPacker(reference PCKPacker) RefPCKPacker {
	return (RefPCKPacker)(NewTypedRef[PCKPacker](reference))
}

func newRefPCKPackerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PCKPacker](reference.(PCKPacker)))
}

func newRefPCKPackerGDExtensionIternalConstructor(reference PCKPacker) RefPCKPacker {
	return newTypedRefGDExtensionIternalConstructor[PCKPacker](reference)
}

var _ RefPackedDataContainer = &RefPackedDataContainerImpl{}
var _ Ref = &RefPackedDataContainerImpl{}

type RefPackedDataContainer interface {
	Ref
	TypedPtr() PackedDataContainer
}

type RefPackedDataContainerImpl TypedRef[PackedDataContainer]

func (r *RefPackedDataContainerImpl) Ptr() RefCounted {
	rg := (*TypedRef[PackedDataContainer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPackedDataContainerImpl) TypedPtr() PackedDataContainer {
	rg := (*TypedRef[PackedDataContainer])(r)
	return rg.TypedPtr()
}

func (r *RefPackedDataContainerImpl) Ref(from Ref) {
	rg := (*TypedRef[PackedDataContainer])(r)
	rg.Ref(from)
}

func (r *RefPackedDataContainerImpl) TypedRef(from *RefPackedDataContainerImpl) {
	rg := (*TypedRef[PackedDataContainer])(r)
	t := (*TypedRef[PackedDataContainer])(from)
	rg.TypedRef((*TypedRef[PackedDataContainer])(t))
}

func (r *RefPackedDataContainerImpl) Unref() {
	rg := (*TypedRef[PackedDataContainer])(r)
	rg.Unref()
}

func (r *RefPackedDataContainerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPackedDataContainer(reference PackedDataContainer) RefPackedDataContainer {
	return (RefPackedDataContainer)(NewTypedRef[PackedDataContainer](reference))
}

func newRefPackedDataContainerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PackedDataContainer](reference.(PackedDataContainer)))
}

func newRefPackedDataContainerGDExtensionIternalConstructor(reference PackedDataContainer) RefPackedDataContainer {
	return newTypedRefGDExtensionIternalConstructor[PackedDataContainer](reference)
}

var _ RefPackedDataContainerRef = &RefPackedDataContainerRefImpl{}
var _ Ref = &RefPackedDataContainerRefImpl{}

type RefPackedDataContainerRef interface {
	Ref
	TypedPtr() PackedDataContainerRef
}

type RefPackedDataContainerRefImpl TypedRef[PackedDataContainerRef]

func (r *RefPackedDataContainerRefImpl) Ptr() RefCounted {
	rg := (*TypedRef[PackedDataContainerRef])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPackedDataContainerRefImpl) TypedPtr() PackedDataContainerRef {
	rg := (*TypedRef[PackedDataContainerRef])(r)
	return rg.TypedPtr()
}

func (r *RefPackedDataContainerRefImpl) Ref(from Ref) {
	rg := (*TypedRef[PackedDataContainerRef])(r)
	rg.Ref(from)
}

func (r *RefPackedDataContainerRefImpl) TypedRef(from *RefPackedDataContainerRefImpl) {
	rg := (*TypedRef[PackedDataContainerRef])(r)
	t := (*TypedRef[PackedDataContainerRef])(from)
	rg.TypedRef((*TypedRef[PackedDataContainerRef])(t))
}

func (r *RefPackedDataContainerRefImpl) Unref() {
	rg := (*TypedRef[PackedDataContainerRef])(r)
	rg.Unref()
}

func (r *RefPackedDataContainerRefImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPackedDataContainerRef(reference PackedDataContainerRef) RefPackedDataContainerRef {
	return (RefPackedDataContainerRef)(NewTypedRef[PackedDataContainerRef](reference))
}

func newRefPackedDataContainerRefAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PackedDataContainerRef](reference.(PackedDataContainerRef)))
}

func newRefPackedDataContainerRefGDExtensionIternalConstructor(reference PackedDataContainerRef) RefPackedDataContainerRef {
	return newTypedRefGDExtensionIternalConstructor[PackedDataContainerRef](reference)
}

var _ RefPackedScene = &RefPackedSceneImpl{}
var _ Ref = &RefPackedSceneImpl{}

type RefPackedScene interface {
	Ref
	TypedPtr() PackedScene
}

type RefPackedSceneImpl TypedRef[PackedScene]

func (r *RefPackedSceneImpl) Ptr() RefCounted {
	rg := (*TypedRef[PackedScene])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPackedSceneImpl) TypedPtr() PackedScene {
	rg := (*TypedRef[PackedScene])(r)
	return rg.TypedPtr()
}

func (r *RefPackedSceneImpl) Ref(from Ref) {
	rg := (*TypedRef[PackedScene])(r)
	rg.Ref(from)
}

func (r *RefPackedSceneImpl) TypedRef(from *RefPackedSceneImpl) {
	rg := (*TypedRef[PackedScene])(r)
	t := (*TypedRef[PackedScene])(from)
	rg.TypedRef((*TypedRef[PackedScene])(t))
}

func (r *RefPackedSceneImpl) Unref() {
	rg := (*TypedRef[PackedScene])(r)
	rg.Unref()
}

func (r *RefPackedSceneImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPackedScene(reference PackedScene) RefPackedScene {
	return (RefPackedScene)(NewTypedRef[PackedScene](reference))
}

func newRefPackedSceneAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PackedScene](reference.(PackedScene)))
}

func newRefPackedSceneGDExtensionIternalConstructor(reference PackedScene) RefPackedScene {
	return newTypedRefGDExtensionIternalConstructor[PackedScene](reference)
}

var _ RefPacketPeer = &RefPacketPeerImpl{}
var _ Ref = &RefPacketPeerImpl{}

type RefPacketPeer interface {
	Ref
	TypedPtr() PacketPeer
}

type RefPacketPeerImpl TypedRef[PacketPeer]

func (r *RefPacketPeerImpl) Ptr() RefCounted {
	rg := (*TypedRef[PacketPeer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPacketPeerImpl) TypedPtr() PacketPeer {
	rg := (*TypedRef[PacketPeer])(r)
	return rg.TypedPtr()
}

func (r *RefPacketPeerImpl) Ref(from Ref) {
	rg := (*TypedRef[PacketPeer])(r)
	rg.Ref(from)
}

func (r *RefPacketPeerImpl) TypedRef(from *RefPacketPeerImpl) {
	rg := (*TypedRef[PacketPeer])(r)
	t := (*TypedRef[PacketPeer])(from)
	rg.TypedRef((*TypedRef[PacketPeer])(t))
}

func (r *RefPacketPeerImpl) Unref() {
	rg := (*TypedRef[PacketPeer])(r)
	rg.Unref()
}

func (r *RefPacketPeerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPacketPeer(reference PacketPeer) RefPacketPeer {
	return (RefPacketPeer)(NewTypedRef[PacketPeer](reference))
}

func newRefPacketPeerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PacketPeer](reference.(PacketPeer)))
}

func newRefPacketPeerGDExtensionIternalConstructor(reference PacketPeer) RefPacketPeer {
	return newTypedRefGDExtensionIternalConstructor[PacketPeer](reference)
}

var _ RefPacketPeerDTLS = &RefPacketPeerDTLSImpl{}
var _ Ref = &RefPacketPeerDTLSImpl{}

type RefPacketPeerDTLS interface {
	Ref
	TypedPtr() PacketPeerDTLS
}

type RefPacketPeerDTLSImpl TypedRef[PacketPeerDTLS]

func (r *RefPacketPeerDTLSImpl) Ptr() RefCounted {
	rg := (*TypedRef[PacketPeerDTLS])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPacketPeerDTLSImpl) TypedPtr() PacketPeerDTLS {
	rg := (*TypedRef[PacketPeerDTLS])(r)
	return rg.TypedPtr()
}

func (r *RefPacketPeerDTLSImpl) Ref(from Ref) {
	rg := (*TypedRef[PacketPeerDTLS])(r)
	rg.Ref(from)
}

func (r *RefPacketPeerDTLSImpl) TypedRef(from *RefPacketPeerDTLSImpl) {
	rg := (*TypedRef[PacketPeerDTLS])(r)
	t := (*TypedRef[PacketPeerDTLS])(from)
	rg.TypedRef((*TypedRef[PacketPeerDTLS])(t))
}

func (r *RefPacketPeerDTLSImpl) Unref() {
	rg := (*TypedRef[PacketPeerDTLS])(r)
	rg.Unref()
}

func (r *RefPacketPeerDTLSImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPacketPeerDTLS(reference PacketPeerDTLS) RefPacketPeerDTLS {
	return (RefPacketPeerDTLS)(NewTypedRef[PacketPeerDTLS](reference))
}

func newRefPacketPeerDTLSAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PacketPeerDTLS](reference.(PacketPeerDTLS)))
}

func newRefPacketPeerDTLSGDExtensionIternalConstructor(reference PacketPeerDTLS) RefPacketPeerDTLS {
	return newTypedRefGDExtensionIternalConstructor[PacketPeerDTLS](reference)
}

var _ RefPacketPeerExtension = &RefPacketPeerExtensionImpl{}
var _ Ref = &RefPacketPeerExtensionImpl{}

type RefPacketPeerExtension interface {
	Ref
	TypedPtr() PacketPeerExtension
}

type RefPacketPeerExtensionImpl TypedRef[PacketPeerExtension]

func (r *RefPacketPeerExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[PacketPeerExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPacketPeerExtensionImpl) TypedPtr() PacketPeerExtension {
	rg := (*TypedRef[PacketPeerExtension])(r)
	return rg.TypedPtr()
}

func (r *RefPacketPeerExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[PacketPeerExtension])(r)
	rg.Ref(from)
}

func (r *RefPacketPeerExtensionImpl) TypedRef(from *RefPacketPeerExtensionImpl) {
	rg := (*TypedRef[PacketPeerExtension])(r)
	t := (*TypedRef[PacketPeerExtension])(from)
	rg.TypedRef((*TypedRef[PacketPeerExtension])(t))
}

func (r *RefPacketPeerExtensionImpl) Unref() {
	rg := (*TypedRef[PacketPeerExtension])(r)
	rg.Unref()
}

func (r *RefPacketPeerExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPacketPeerExtension(reference PacketPeerExtension) RefPacketPeerExtension {
	return (RefPacketPeerExtension)(NewTypedRef[PacketPeerExtension](reference))
}

func newRefPacketPeerExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PacketPeerExtension](reference.(PacketPeerExtension)))
}

func newRefPacketPeerExtensionGDExtensionIternalConstructor(reference PacketPeerExtension) RefPacketPeerExtension {
	return newTypedRefGDExtensionIternalConstructor[PacketPeerExtension](reference)
}

var _ RefPacketPeerStream = &RefPacketPeerStreamImpl{}
var _ Ref = &RefPacketPeerStreamImpl{}

type RefPacketPeerStream interface {
	Ref
	TypedPtr() PacketPeerStream
}

type RefPacketPeerStreamImpl TypedRef[PacketPeerStream]

func (r *RefPacketPeerStreamImpl) Ptr() RefCounted {
	rg := (*TypedRef[PacketPeerStream])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPacketPeerStreamImpl) TypedPtr() PacketPeerStream {
	rg := (*TypedRef[PacketPeerStream])(r)
	return rg.TypedPtr()
}

func (r *RefPacketPeerStreamImpl) Ref(from Ref) {
	rg := (*TypedRef[PacketPeerStream])(r)
	rg.Ref(from)
}

func (r *RefPacketPeerStreamImpl) TypedRef(from *RefPacketPeerStreamImpl) {
	rg := (*TypedRef[PacketPeerStream])(r)
	t := (*TypedRef[PacketPeerStream])(from)
	rg.TypedRef((*TypedRef[PacketPeerStream])(t))
}

func (r *RefPacketPeerStreamImpl) Unref() {
	rg := (*TypedRef[PacketPeerStream])(r)
	rg.Unref()
}

func (r *RefPacketPeerStreamImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPacketPeerStream(reference PacketPeerStream) RefPacketPeerStream {
	return (RefPacketPeerStream)(NewTypedRef[PacketPeerStream](reference))
}

func newRefPacketPeerStreamAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PacketPeerStream](reference.(PacketPeerStream)))
}

func newRefPacketPeerStreamGDExtensionIternalConstructor(reference PacketPeerStream) RefPacketPeerStream {
	return newTypedRefGDExtensionIternalConstructor[PacketPeerStream](reference)
}

var _ RefPacketPeerUDP = &RefPacketPeerUDPImpl{}
var _ Ref = &RefPacketPeerUDPImpl{}

type RefPacketPeerUDP interface {
	Ref
	TypedPtr() PacketPeerUDP
}

type RefPacketPeerUDPImpl TypedRef[PacketPeerUDP]

func (r *RefPacketPeerUDPImpl) Ptr() RefCounted {
	rg := (*TypedRef[PacketPeerUDP])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPacketPeerUDPImpl) TypedPtr() PacketPeerUDP {
	rg := (*TypedRef[PacketPeerUDP])(r)
	return rg.TypedPtr()
}

func (r *RefPacketPeerUDPImpl) Ref(from Ref) {
	rg := (*TypedRef[PacketPeerUDP])(r)
	rg.Ref(from)
}

func (r *RefPacketPeerUDPImpl) TypedRef(from *RefPacketPeerUDPImpl) {
	rg := (*TypedRef[PacketPeerUDP])(r)
	t := (*TypedRef[PacketPeerUDP])(from)
	rg.TypedRef((*TypedRef[PacketPeerUDP])(t))
}

func (r *RefPacketPeerUDPImpl) Unref() {
	rg := (*TypedRef[PacketPeerUDP])(r)
	rg.Unref()
}

func (r *RefPacketPeerUDPImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPacketPeerUDP(reference PacketPeerUDP) RefPacketPeerUDP {
	return (RefPacketPeerUDP)(NewTypedRef[PacketPeerUDP](reference))
}

func newRefPacketPeerUDPAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PacketPeerUDP](reference.(PacketPeerUDP)))
}

func newRefPacketPeerUDPGDExtensionIternalConstructor(reference PacketPeerUDP) RefPacketPeerUDP {
	return newTypedRefGDExtensionIternalConstructor[PacketPeerUDP](reference)
}

var _ RefPanoramaSkyMaterial = &RefPanoramaSkyMaterialImpl{}
var _ Ref = &RefPanoramaSkyMaterialImpl{}

type RefPanoramaSkyMaterial interface {
	Ref
	TypedPtr() PanoramaSkyMaterial
}

type RefPanoramaSkyMaterialImpl TypedRef[PanoramaSkyMaterial]

func (r *RefPanoramaSkyMaterialImpl) Ptr() RefCounted {
	rg := (*TypedRef[PanoramaSkyMaterial])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPanoramaSkyMaterialImpl) TypedPtr() PanoramaSkyMaterial {
	rg := (*TypedRef[PanoramaSkyMaterial])(r)
	return rg.TypedPtr()
}

func (r *RefPanoramaSkyMaterialImpl) Ref(from Ref) {
	rg := (*TypedRef[PanoramaSkyMaterial])(r)
	rg.Ref(from)
}

func (r *RefPanoramaSkyMaterialImpl) TypedRef(from *RefPanoramaSkyMaterialImpl) {
	rg := (*TypedRef[PanoramaSkyMaterial])(r)
	t := (*TypedRef[PanoramaSkyMaterial])(from)
	rg.TypedRef((*TypedRef[PanoramaSkyMaterial])(t))
}

func (r *RefPanoramaSkyMaterialImpl) Unref() {
	rg := (*TypedRef[PanoramaSkyMaterial])(r)
	rg.Unref()
}

func (r *RefPanoramaSkyMaterialImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPanoramaSkyMaterial(reference PanoramaSkyMaterial) RefPanoramaSkyMaterial {
	return (RefPanoramaSkyMaterial)(NewTypedRef[PanoramaSkyMaterial](reference))
}

func newRefPanoramaSkyMaterialAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PanoramaSkyMaterial](reference.(PanoramaSkyMaterial)))
}

func newRefPanoramaSkyMaterialGDExtensionIternalConstructor(reference PanoramaSkyMaterial) RefPanoramaSkyMaterial {
	return newTypedRefGDExtensionIternalConstructor[PanoramaSkyMaterial](reference)
}

var _ RefParticleProcessMaterial = &RefParticleProcessMaterialImpl{}
var _ Ref = &RefParticleProcessMaterialImpl{}

type RefParticleProcessMaterial interface {
	Ref
	TypedPtr() ParticleProcessMaterial
}

type RefParticleProcessMaterialImpl TypedRef[ParticleProcessMaterial]

func (r *RefParticleProcessMaterialImpl) Ptr() RefCounted {
	rg := (*TypedRef[ParticleProcessMaterial])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefParticleProcessMaterialImpl) TypedPtr() ParticleProcessMaterial {
	rg := (*TypedRef[ParticleProcessMaterial])(r)
	return rg.TypedPtr()
}

func (r *RefParticleProcessMaterialImpl) Ref(from Ref) {
	rg := (*TypedRef[ParticleProcessMaterial])(r)
	rg.Ref(from)
}

func (r *RefParticleProcessMaterialImpl) TypedRef(from *RefParticleProcessMaterialImpl) {
	rg := (*TypedRef[ParticleProcessMaterial])(r)
	t := (*TypedRef[ParticleProcessMaterial])(from)
	rg.TypedRef((*TypedRef[ParticleProcessMaterial])(t))
}

func (r *RefParticleProcessMaterialImpl) Unref() {
	rg := (*TypedRef[ParticleProcessMaterial])(r)
	rg.Unref()
}

func (r *RefParticleProcessMaterialImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefParticleProcessMaterial(reference ParticleProcessMaterial) RefParticleProcessMaterial {
	return (RefParticleProcessMaterial)(NewTypedRef[ParticleProcessMaterial](reference))
}

func newRefParticleProcessMaterialAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ParticleProcessMaterial](reference.(ParticleProcessMaterial)))
}

func newRefParticleProcessMaterialGDExtensionIternalConstructor(reference ParticleProcessMaterial) RefParticleProcessMaterial {
	return newTypedRefGDExtensionIternalConstructor[ParticleProcessMaterial](reference)
}

var _ RefPhysicalSkyMaterial = &RefPhysicalSkyMaterialImpl{}
var _ Ref = &RefPhysicalSkyMaterialImpl{}

type RefPhysicalSkyMaterial interface {
	Ref
	TypedPtr() PhysicalSkyMaterial
}

type RefPhysicalSkyMaterialImpl TypedRef[PhysicalSkyMaterial]

func (r *RefPhysicalSkyMaterialImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicalSkyMaterial])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicalSkyMaterialImpl) TypedPtr() PhysicalSkyMaterial {
	rg := (*TypedRef[PhysicalSkyMaterial])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicalSkyMaterialImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicalSkyMaterial])(r)
	rg.Ref(from)
}

func (r *RefPhysicalSkyMaterialImpl) TypedRef(from *RefPhysicalSkyMaterialImpl) {
	rg := (*TypedRef[PhysicalSkyMaterial])(r)
	t := (*TypedRef[PhysicalSkyMaterial])(from)
	rg.TypedRef((*TypedRef[PhysicalSkyMaterial])(t))
}

func (r *RefPhysicalSkyMaterialImpl) Unref() {
	rg := (*TypedRef[PhysicalSkyMaterial])(r)
	rg.Unref()
}

func (r *RefPhysicalSkyMaterialImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicalSkyMaterial(reference PhysicalSkyMaterial) RefPhysicalSkyMaterial {
	return (RefPhysicalSkyMaterial)(NewTypedRef[PhysicalSkyMaterial](reference))
}

func newRefPhysicalSkyMaterialAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicalSkyMaterial](reference.(PhysicalSkyMaterial)))
}

func newRefPhysicalSkyMaterialGDExtensionIternalConstructor(reference PhysicalSkyMaterial) RefPhysicalSkyMaterial {
	return newTypedRefGDExtensionIternalConstructor[PhysicalSkyMaterial](reference)
}

var _ RefPhysicsMaterial = &RefPhysicsMaterialImpl{}
var _ Ref = &RefPhysicsMaterialImpl{}

type RefPhysicsMaterial interface {
	Ref
	TypedPtr() PhysicsMaterial
}

type RefPhysicsMaterialImpl TypedRef[PhysicsMaterial]

func (r *RefPhysicsMaterialImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicsMaterial])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicsMaterialImpl) TypedPtr() PhysicsMaterial {
	rg := (*TypedRef[PhysicsMaterial])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicsMaterialImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicsMaterial])(r)
	rg.Ref(from)
}

func (r *RefPhysicsMaterialImpl) TypedRef(from *RefPhysicsMaterialImpl) {
	rg := (*TypedRef[PhysicsMaterial])(r)
	t := (*TypedRef[PhysicsMaterial])(from)
	rg.TypedRef((*TypedRef[PhysicsMaterial])(t))
}

func (r *RefPhysicsMaterialImpl) Unref() {
	rg := (*TypedRef[PhysicsMaterial])(r)
	rg.Unref()
}

func (r *RefPhysicsMaterialImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicsMaterial(reference PhysicsMaterial) RefPhysicsMaterial {
	return (RefPhysicsMaterial)(NewTypedRef[PhysicsMaterial](reference))
}

func newRefPhysicsMaterialAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicsMaterial](reference.(PhysicsMaterial)))
}

func newRefPhysicsMaterialGDExtensionIternalConstructor(reference PhysicsMaterial) RefPhysicsMaterial {
	return newTypedRefGDExtensionIternalConstructor[PhysicsMaterial](reference)
}

var _ RefPhysicsPointQueryParameters2D = &RefPhysicsPointQueryParameters2DImpl{}
var _ Ref = &RefPhysicsPointQueryParameters2DImpl{}

type RefPhysicsPointQueryParameters2D interface {
	Ref
	TypedPtr() PhysicsPointQueryParameters2D
}

type RefPhysicsPointQueryParameters2DImpl TypedRef[PhysicsPointQueryParameters2D]

func (r *RefPhysicsPointQueryParameters2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicsPointQueryParameters2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicsPointQueryParameters2DImpl) TypedPtr() PhysicsPointQueryParameters2D {
	rg := (*TypedRef[PhysicsPointQueryParameters2D])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicsPointQueryParameters2DImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicsPointQueryParameters2D])(r)
	rg.Ref(from)
}

func (r *RefPhysicsPointQueryParameters2DImpl) TypedRef(from *RefPhysicsPointQueryParameters2DImpl) {
	rg := (*TypedRef[PhysicsPointQueryParameters2D])(r)
	t := (*TypedRef[PhysicsPointQueryParameters2D])(from)
	rg.TypedRef((*TypedRef[PhysicsPointQueryParameters2D])(t))
}

func (r *RefPhysicsPointQueryParameters2DImpl) Unref() {
	rg := (*TypedRef[PhysicsPointQueryParameters2D])(r)
	rg.Unref()
}

func (r *RefPhysicsPointQueryParameters2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicsPointQueryParameters2D(reference PhysicsPointQueryParameters2D) RefPhysicsPointQueryParameters2D {
	return (RefPhysicsPointQueryParameters2D)(NewTypedRef[PhysicsPointQueryParameters2D](reference))
}

func newRefPhysicsPointQueryParameters2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicsPointQueryParameters2D](reference.(PhysicsPointQueryParameters2D)))
}

func newRefPhysicsPointQueryParameters2DGDExtensionIternalConstructor(reference PhysicsPointQueryParameters2D) RefPhysicsPointQueryParameters2D {
	return newTypedRefGDExtensionIternalConstructor[PhysicsPointQueryParameters2D](reference)
}

var _ RefPhysicsPointQueryParameters3D = &RefPhysicsPointQueryParameters3DImpl{}
var _ Ref = &RefPhysicsPointQueryParameters3DImpl{}

type RefPhysicsPointQueryParameters3D interface {
	Ref
	TypedPtr() PhysicsPointQueryParameters3D
}

type RefPhysicsPointQueryParameters3DImpl TypedRef[PhysicsPointQueryParameters3D]

func (r *RefPhysicsPointQueryParameters3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicsPointQueryParameters3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicsPointQueryParameters3DImpl) TypedPtr() PhysicsPointQueryParameters3D {
	rg := (*TypedRef[PhysicsPointQueryParameters3D])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicsPointQueryParameters3DImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicsPointQueryParameters3D])(r)
	rg.Ref(from)
}

func (r *RefPhysicsPointQueryParameters3DImpl) TypedRef(from *RefPhysicsPointQueryParameters3DImpl) {
	rg := (*TypedRef[PhysicsPointQueryParameters3D])(r)
	t := (*TypedRef[PhysicsPointQueryParameters3D])(from)
	rg.TypedRef((*TypedRef[PhysicsPointQueryParameters3D])(t))
}

func (r *RefPhysicsPointQueryParameters3DImpl) Unref() {
	rg := (*TypedRef[PhysicsPointQueryParameters3D])(r)
	rg.Unref()
}

func (r *RefPhysicsPointQueryParameters3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicsPointQueryParameters3D(reference PhysicsPointQueryParameters3D) RefPhysicsPointQueryParameters3D {
	return (RefPhysicsPointQueryParameters3D)(NewTypedRef[PhysicsPointQueryParameters3D](reference))
}

func newRefPhysicsPointQueryParameters3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicsPointQueryParameters3D](reference.(PhysicsPointQueryParameters3D)))
}

func newRefPhysicsPointQueryParameters3DGDExtensionIternalConstructor(reference PhysicsPointQueryParameters3D) RefPhysicsPointQueryParameters3D {
	return newTypedRefGDExtensionIternalConstructor[PhysicsPointQueryParameters3D](reference)
}

var _ RefPhysicsRayQueryParameters2D = &RefPhysicsRayQueryParameters2DImpl{}
var _ Ref = &RefPhysicsRayQueryParameters2DImpl{}

type RefPhysicsRayQueryParameters2D interface {
	Ref
	TypedPtr() PhysicsRayQueryParameters2D
}

type RefPhysicsRayQueryParameters2DImpl TypedRef[PhysicsRayQueryParameters2D]

func (r *RefPhysicsRayQueryParameters2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicsRayQueryParameters2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicsRayQueryParameters2DImpl) TypedPtr() PhysicsRayQueryParameters2D {
	rg := (*TypedRef[PhysicsRayQueryParameters2D])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicsRayQueryParameters2DImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicsRayQueryParameters2D])(r)
	rg.Ref(from)
}

func (r *RefPhysicsRayQueryParameters2DImpl) TypedRef(from *RefPhysicsRayQueryParameters2DImpl) {
	rg := (*TypedRef[PhysicsRayQueryParameters2D])(r)
	t := (*TypedRef[PhysicsRayQueryParameters2D])(from)
	rg.TypedRef((*TypedRef[PhysicsRayQueryParameters2D])(t))
}

func (r *RefPhysicsRayQueryParameters2DImpl) Unref() {
	rg := (*TypedRef[PhysicsRayQueryParameters2D])(r)
	rg.Unref()
}

func (r *RefPhysicsRayQueryParameters2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicsRayQueryParameters2D(reference PhysicsRayQueryParameters2D) RefPhysicsRayQueryParameters2D {
	return (RefPhysicsRayQueryParameters2D)(NewTypedRef[PhysicsRayQueryParameters2D](reference))
}

func newRefPhysicsRayQueryParameters2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicsRayQueryParameters2D](reference.(PhysicsRayQueryParameters2D)))
}

func newRefPhysicsRayQueryParameters2DGDExtensionIternalConstructor(reference PhysicsRayQueryParameters2D) RefPhysicsRayQueryParameters2D {
	return newTypedRefGDExtensionIternalConstructor[PhysicsRayQueryParameters2D](reference)
}

var _ RefPhysicsRayQueryParameters3D = &RefPhysicsRayQueryParameters3DImpl{}
var _ Ref = &RefPhysicsRayQueryParameters3DImpl{}

type RefPhysicsRayQueryParameters3D interface {
	Ref
	TypedPtr() PhysicsRayQueryParameters3D
}

type RefPhysicsRayQueryParameters3DImpl TypedRef[PhysicsRayQueryParameters3D]

func (r *RefPhysicsRayQueryParameters3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicsRayQueryParameters3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicsRayQueryParameters3DImpl) TypedPtr() PhysicsRayQueryParameters3D {
	rg := (*TypedRef[PhysicsRayQueryParameters3D])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicsRayQueryParameters3DImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicsRayQueryParameters3D])(r)
	rg.Ref(from)
}

func (r *RefPhysicsRayQueryParameters3DImpl) TypedRef(from *RefPhysicsRayQueryParameters3DImpl) {
	rg := (*TypedRef[PhysicsRayQueryParameters3D])(r)
	t := (*TypedRef[PhysicsRayQueryParameters3D])(from)
	rg.TypedRef((*TypedRef[PhysicsRayQueryParameters3D])(t))
}

func (r *RefPhysicsRayQueryParameters3DImpl) Unref() {
	rg := (*TypedRef[PhysicsRayQueryParameters3D])(r)
	rg.Unref()
}

func (r *RefPhysicsRayQueryParameters3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicsRayQueryParameters3D(reference PhysicsRayQueryParameters3D) RefPhysicsRayQueryParameters3D {
	return (RefPhysicsRayQueryParameters3D)(NewTypedRef[PhysicsRayQueryParameters3D](reference))
}

func newRefPhysicsRayQueryParameters3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicsRayQueryParameters3D](reference.(PhysicsRayQueryParameters3D)))
}

func newRefPhysicsRayQueryParameters3DGDExtensionIternalConstructor(reference PhysicsRayQueryParameters3D) RefPhysicsRayQueryParameters3D {
	return newTypedRefGDExtensionIternalConstructor[PhysicsRayQueryParameters3D](reference)
}

var _ RefPhysicsShapeQueryParameters2D = &RefPhysicsShapeQueryParameters2DImpl{}
var _ Ref = &RefPhysicsShapeQueryParameters2DImpl{}

type RefPhysicsShapeQueryParameters2D interface {
	Ref
	TypedPtr() PhysicsShapeQueryParameters2D
}

type RefPhysicsShapeQueryParameters2DImpl TypedRef[PhysicsShapeQueryParameters2D]

func (r *RefPhysicsShapeQueryParameters2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicsShapeQueryParameters2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicsShapeQueryParameters2DImpl) TypedPtr() PhysicsShapeQueryParameters2D {
	rg := (*TypedRef[PhysicsShapeQueryParameters2D])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicsShapeQueryParameters2DImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicsShapeQueryParameters2D])(r)
	rg.Ref(from)
}

func (r *RefPhysicsShapeQueryParameters2DImpl) TypedRef(from *RefPhysicsShapeQueryParameters2DImpl) {
	rg := (*TypedRef[PhysicsShapeQueryParameters2D])(r)
	t := (*TypedRef[PhysicsShapeQueryParameters2D])(from)
	rg.TypedRef((*TypedRef[PhysicsShapeQueryParameters2D])(t))
}

func (r *RefPhysicsShapeQueryParameters2DImpl) Unref() {
	rg := (*TypedRef[PhysicsShapeQueryParameters2D])(r)
	rg.Unref()
}

func (r *RefPhysicsShapeQueryParameters2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicsShapeQueryParameters2D(reference PhysicsShapeQueryParameters2D) RefPhysicsShapeQueryParameters2D {
	return (RefPhysicsShapeQueryParameters2D)(NewTypedRef[PhysicsShapeQueryParameters2D](reference))
}

func newRefPhysicsShapeQueryParameters2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicsShapeQueryParameters2D](reference.(PhysicsShapeQueryParameters2D)))
}

func newRefPhysicsShapeQueryParameters2DGDExtensionIternalConstructor(reference PhysicsShapeQueryParameters2D) RefPhysicsShapeQueryParameters2D {
	return newTypedRefGDExtensionIternalConstructor[PhysicsShapeQueryParameters2D](reference)
}

var _ RefPhysicsShapeQueryParameters3D = &RefPhysicsShapeQueryParameters3DImpl{}
var _ Ref = &RefPhysicsShapeQueryParameters3DImpl{}

type RefPhysicsShapeQueryParameters3D interface {
	Ref
	TypedPtr() PhysicsShapeQueryParameters3D
}

type RefPhysicsShapeQueryParameters3DImpl TypedRef[PhysicsShapeQueryParameters3D]

func (r *RefPhysicsShapeQueryParameters3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicsShapeQueryParameters3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicsShapeQueryParameters3DImpl) TypedPtr() PhysicsShapeQueryParameters3D {
	rg := (*TypedRef[PhysicsShapeQueryParameters3D])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicsShapeQueryParameters3DImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicsShapeQueryParameters3D])(r)
	rg.Ref(from)
}

func (r *RefPhysicsShapeQueryParameters3DImpl) TypedRef(from *RefPhysicsShapeQueryParameters3DImpl) {
	rg := (*TypedRef[PhysicsShapeQueryParameters3D])(r)
	t := (*TypedRef[PhysicsShapeQueryParameters3D])(from)
	rg.TypedRef((*TypedRef[PhysicsShapeQueryParameters3D])(t))
}

func (r *RefPhysicsShapeQueryParameters3DImpl) Unref() {
	rg := (*TypedRef[PhysicsShapeQueryParameters3D])(r)
	rg.Unref()
}

func (r *RefPhysicsShapeQueryParameters3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicsShapeQueryParameters3D(reference PhysicsShapeQueryParameters3D) RefPhysicsShapeQueryParameters3D {
	return (RefPhysicsShapeQueryParameters3D)(NewTypedRef[PhysicsShapeQueryParameters3D](reference))
}

func newRefPhysicsShapeQueryParameters3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicsShapeQueryParameters3D](reference.(PhysicsShapeQueryParameters3D)))
}

func newRefPhysicsShapeQueryParameters3DGDExtensionIternalConstructor(reference PhysicsShapeQueryParameters3D) RefPhysicsShapeQueryParameters3D {
	return newTypedRefGDExtensionIternalConstructor[PhysicsShapeQueryParameters3D](reference)
}

var _ RefPhysicsTestMotionParameters2D = &RefPhysicsTestMotionParameters2DImpl{}
var _ Ref = &RefPhysicsTestMotionParameters2DImpl{}

type RefPhysicsTestMotionParameters2D interface {
	Ref
	TypedPtr() PhysicsTestMotionParameters2D
}

type RefPhysicsTestMotionParameters2DImpl TypedRef[PhysicsTestMotionParameters2D]

func (r *RefPhysicsTestMotionParameters2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicsTestMotionParameters2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicsTestMotionParameters2DImpl) TypedPtr() PhysicsTestMotionParameters2D {
	rg := (*TypedRef[PhysicsTestMotionParameters2D])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicsTestMotionParameters2DImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicsTestMotionParameters2D])(r)
	rg.Ref(from)
}

func (r *RefPhysicsTestMotionParameters2DImpl) TypedRef(from *RefPhysicsTestMotionParameters2DImpl) {
	rg := (*TypedRef[PhysicsTestMotionParameters2D])(r)
	t := (*TypedRef[PhysicsTestMotionParameters2D])(from)
	rg.TypedRef((*TypedRef[PhysicsTestMotionParameters2D])(t))
}

func (r *RefPhysicsTestMotionParameters2DImpl) Unref() {
	rg := (*TypedRef[PhysicsTestMotionParameters2D])(r)
	rg.Unref()
}

func (r *RefPhysicsTestMotionParameters2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicsTestMotionParameters2D(reference PhysicsTestMotionParameters2D) RefPhysicsTestMotionParameters2D {
	return (RefPhysicsTestMotionParameters2D)(NewTypedRef[PhysicsTestMotionParameters2D](reference))
}

func newRefPhysicsTestMotionParameters2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicsTestMotionParameters2D](reference.(PhysicsTestMotionParameters2D)))
}

func newRefPhysicsTestMotionParameters2DGDExtensionIternalConstructor(reference PhysicsTestMotionParameters2D) RefPhysicsTestMotionParameters2D {
	return newTypedRefGDExtensionIternalConstructor[PhysicsTestMotionParameters2D](reference)
}

var _ RefPhysicsTestMotionParameters3D = &RefPhysicsTestMotionParameters3DImpl{}
var _ Ref = &RefPhysicsTestMotionParameters3DImpl{}

type RefPhysicsTestMotionParameters3D interface {
	Ref
	TypedPtr() PhysicsTestMotionParameters3D
}

type RefPhysicsTestMotionParameters3DImpl TypedRef[PhysicsTestMotionParameters3D]

func (r *RefPhysicsTestMotionParameters3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicsTestMotionParameters3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicsTestMotionParameters3DImpl) TypedPtr() PhysicsTestMotionParameters3D {
	rg := (*TypedRef[PhysicsTestMotionParameters3D])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicsTestMotionParameters3DImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicsTestMotionParameters3D])(r)
	rg.Ref(from)
}

func (r *RefPhysicsTestMotionParameters3DImpl) TypedRef(from *RefPhysicsTestMotionParameters3DImpl) {
	rg := (*TypedRef[PhysicsTestMotionParameters3D])(r)
	t := (*TypedRef[PhysicsTestMotionParameters3D])(from)
	rg.TypedRef((*TypedRef[PhysicsTestMotionParameters3D])(t))
}

func (r *RefPhysicsTestMotionParameters3DImpl) Unref() {
	rg := (*TypedRef[PhysicsTestMotionParameters3D])(r)
	rg.Unref()
}

func (r *RefPhysicsTestMotionParameters3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicsTestMotionParameters3D(reference PhysicsTestMotionParameters3D) RefPhysicsTestMotionParameters3D {
	return (RefPhysicsTestMotionParameters3D)(NewTypedRef[PhysicsTestMotionParameters3D](reference))
}

func newRefPhysicsTestMotionParameters3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicsTestMotionParameters3D](reference.(PhysicsTestMotionParameters3D)))
}

func newRefPhysicsTestMotionParameters3DGDExtensionIternalConstructor(reference PhysicsTestMotionParameters3D) RefPhysicsTestMotionParameters3D {
	return newTypedRefGDExtensionIternalConstructor[PhysicsTestMotionParameters3D](reference)
}

var _ RefPhysicsTestMotionResult2D = &RefPhysicsTestMotionResult2DImpl{}
var _ Ref = &RefPhysicsTestMotionResult2DImpl{}

type RefPhysicsTestMotionResult2D interface {
	Ref
	TypedPtr() PhysicsTestMotionResult2D
}

type RefPhysicsTestMotionResult2DImpl TypedRef[PhysicsTestMotionResult2D]

func (r *RefPhysicsTestMotionResult2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicsTestMotionResult2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicsTestMotionResult2DImpl) TypedPtr() PhysicsTestMotionResult2D {
	rg := (*TypedRef[PhysicsTestMotionResult2D])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicsTestMotionResult2DImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicsTestMotionResult2D])(r)
	rg.Ref(from)
}

func (r *RefPhysicsTestMotionResult2DImpl) TypedRef(from *RefPhysicsTestMotionResult2DImpl) {
	rg := (*TypedRef[PhysicsTestMotionResult2D])(r)
	t := (*TypedRef[PhysicsTestMotionResult2D])(from)
	rg.TypedRef((*TypedRef[PhysicsTestMotionResult2D])(t))
}

func (r *RefPhysicsTestMotionResult2DImpl) Unref() {
	rg := (*TypedRef[PhysicsTestMotionResult2D])(r)
	rg.Unref()
}

func (r *RefPhysicsTestMotionResult2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicsTestMotionResult2D(reference PhysicsTestMotionResult2D) RefPhysicsTestMotionResult2D {
	return (RefPhysicsTestMotionResult2D)(NewTypedRef[PhysicsTestMotionResult2D](reference))
}

func newRefPhysicsTestMotionResult2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicsTestMotionResult2D](reference.(PhysicsTestMotionResult2D)))
}

func newRefPhysicsTestMotionResult2DGDExtensionIternalConstructor(reference PhysicsTestMotionResult2D) RefPhysicsTestMotionResult2D {
	return newTypedRefGDExtensionIternalConstructor[PhysicsTestMotionResult2D](reference)
}

var _ RefPhysicsTestMotionResult3D = &RefPhysicsTestMotionResult3DImpl{}
var _ Ref = &RefPhysicsTestMotionResult3DImpl{}

type RefPhysicsTestMotionResult3D interface {
	Ref
	TypedPtr() PhysicsTestMotionResult3D
}

type RefPhysicsTestMotionResult3DImpl TypedRef[PhysicsTestMotionResult3D]

func (r *RefPhysicsTestMotionResult3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PhysicsTestMotionResult3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPhysicsTestMotionResult3DImpl) TypedPtr() PhysicsTestMotionResult3D {
	rg := (*TypedRef[PhysicsTestMotionResult3D])(r)
	return rg.TypedPtr()
}

func (r *RefPhysicsTestMotionResult3DImpl) Ref(from Ref) {
	rg := (*TypedRef[PhysicsTestMotionResult3D])(r)
	rg.Ref(from)
}

func (r *RefPhysicsTestMotionResult3DImpl) TypedRef(from *RefPhysicsTestMotionResult3DImpl) {
	rg := (*TypedRef[PhysicsTestMotionResult3D])(r)
	t := (*TypedRef[PhysicsTestMotionResult3D])(from)
	rg.TypedRef((*TypedRef[PhysicsTestMotionResult3D])(t))
}

func (r *RefPhysicsTestMotionResult3DImpl) Unref() {
	rg := (*TypedRef[PhysicsTestMotionResult3D])(r)
	rg.Unref()
}

func (r *RefPhysicsTestMotionResult3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPhysicsTestMotionResult3D(reference PhysicsTestMotionResult3D) RefPhysicsTestMotionResult3D {
	return (RefPhysicsTestMotionResult3D)(NewTypedRef[PhysicsTestMotionResult3D](reference))
}

func newRefPhysicsTestMotionResult3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PhysicsTestMotionResult3D](reference.(PhysicsTestMotionResult3D)))
}

func newRefPhysicsTestMotionResult3DGDExtensionIternalConstructor(reference PhysicsTestMotionResult3D) RefPhysicsTestMotionResult3D {
	return newTypedRefGDExtensionIternalConstructor[PhysicsTestMotionResult3D](reference)
}

var _ RefPlaceholderCubemap = &RefPlaceholderCubemapImpl{}
var _ Ref = &RefPlaceholderCubemapImpl{}

type RefPlaceholderCubemap interface {
	Ref
	TypedPtr() PlaceholderCubemap
}

type RefPlaceholderCubemapImpl TypedRef[PlaceholderCubemap]

func (r *RefPlaceholderCubemapImpl) Ptr() RefCounted {
	rg := (*TypedRef[PlaceholderCubemap])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPlaceholderCubemapImpl) TypedPtr() PlaceholderCubemap {
	rg := (*TypedRef[PlaceholderCubemap])(r)
	return rg.TypedPtr()
}

func (r *RefPlaceholderCubemapImpl) Ref(from Ref) {
	rg := (*TypedRef[PlaceholderCubemap])(r)
	rg.Ref(from)
}

func (r *RefPlaceholderCubemapImpl) TypedRef(from *RefPlaceholderCubemapImpl) {
	rg := (*TypedRef[PlaceholderCubemap])(r)
	t := (*TypedRef[PlaceholderCubemap])(from)
	rg.TypedRef((*TypedRef[PlaceholderCubemap])(t))
}

func (r *RefPlaceholderCubemapImpl) Unref() {
	rg := (*TypedRef[PlaceholderCubemap])(r)
	rg.Unref()
}

func (r *RefPlaceholderCubemapImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPlaceholderCubemap(reference PlaceholderCubemap) RefPlaceholderCubemap {
	return (RefPlaceholderCubemap)(NewTypedRef[PlaceholderCubemap](reference))
}

func newRefPlaceholderCubemapAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PlaceholderCubemap](reference.(PlaceholderCubemap)))
}

func newRefPlaceholderCubemapGDExtensionIternalConstructor(reference PlaceholderCubemap) RefPlaceholderCubemap {
	return newTypedRefGDExtensionIternalConstructor[PlaceholderCubemap](reference)
}

var _ RefPlaceholderCubemapArray = &RefPlaceholderCubemapArrayImpl{}
var _ Ref = &RefPlaceholderCubemapArrayImpl{}

type RefPlaceholderCubemapArray interface {
	Ref
	TypedPtr() PlaceholderCubemapArray
}

type RefPlaceholderCubemapArrayImpl TypedRef[PlaceholderCubemapArray]

func (r *RefPlaceholderCubemapArrayImpl) Ptr() RefCounted {
	rg := (*TypedRef[PlaceholderCubemapArray])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPlaceholderCubemapArrayImpl) TypedPtr() PlaceholderCubemapArray {
	rg := (*TypedRef[PlaceholderCubemapArray])(r)
	return rg.TypedPtr()
}

func (r *RefPlaceholderCubemapArrayImpl) Ref(from Ref) {
	rg := (*TypedRef[PlaceholderCubemapArray])(r)
	rg.Ref(from)
}

func (r *RefPlaceholderCubemapArrayImpl) TypedRef(from *RefPlaceholderCubemapArrayImpl) {
	rg := (*TypedRef[PlaceholderCubemapArray])(r)
	t := (*TypedRef[PlaceholderCubemapArray])(from)
	rg.TypedRef((*TypedRef[PlaceholderCubemapArray])(t))
}

func (r *RefPlaceholderCubemapArrayImpl) Unref() {
	rg := (*TypedRef[PlaceholderCubemapArray])(r)
	rg.Unref()
}

func (r *RefPlaceholderCubemapArrayImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPlaceholderCubemapArray(reference PlaceholderCubemapArray) RefPlaceholderCubemapArray {
	return (RefPlaceholderCubemapArray)(NewTypedRef[PlaceholderCubemapArray](reference))
}

func newRefPlaceholderCubemapArrayAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PlaceholderCubemapArray](reference.(PlaceholderCubemapArray)))
}

func newRefPlaceholderCubemapArrayGDExtensionIternalConstructor(reference PlaceholderCubemapArray) RefPlaceholderCubemapArray {
	return newTypedRefGDExtensionIternalConstructor[PlaceholderCubemapArray](reference)
}

var _ RefPlaceholderMaterial = &RefPlaceholderMaterialImpl{}
var _ Ref = &RefPlaceholderMaterialImpl{}

type RefPlaceholderMaterial interface {
	Ref
	TypedPtr() PlaceholderMaterial
}

type RefPlaceholderMaterialImpl TypedRef[PlaceholderMaterial]

func (r *RefPlaceholderMaterialImpl) Ptr() RefCounted {
	rg := (*TypedRef[PlaceholderMaterial])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPlaceholderMaterialImpl) TypedPtr() PlaceholderMaterial {
	rg := (*TypedRef[PlaceholderMaterial])(r)
	return rg.TypedPtr()
}

func (r *RefPlaceholderMaterialImpl) Ref(from Ref) {
	rg := (*TypedRef[PlaceholderMaterial])(r)
	rg.Ref(from)
}

func (r *RefPlaceholderMaterialImpl) TypedRef(from *RefPlaceholderMaterialImpl) {
	rg := (*TypedRef[PlaceholderMaterial])(r)
	t := (*TypedRef[PlaceholderMaterial])(from)
	rg.TypedRef((*TypedRef[PlaceholderMaterial])(t))
}

func (r *RefPlaceholderMaterialImpl) Unref() {
	rg := (*TypedRef[PlaceholderMaterial])(r)
	rg.Unref()
}

func (r *RefPlaceholderMaterialImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPlaceholderMaterial(reference PlaceholderMaterial) RefPlaceholderMaterial {
	return (RefPlaceholderMaterial)(NewTypedRef[PlaceholderMaterial](reference))
}

func newRefPlaceholderMaterialAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PlaceholderMaterial](reference.(PlaceholderMaterial)))
}

func newRefPlaceholderMaterialGDExtensionIternalConstructor(reference PlaceholderMaterial) RefPlaceholderMaterial {
	return newTypedRefGDExtensionIternalConstructor[PlaceholderMaterial](reference)
}

var _ RefPlaceholderMesh = &RefPlaceholderMeshImpl{}
var _ Ref = &RefPlaceholderMeshImpl{}

type RefPlaceholderMesh interface {
	Ref
	TypedPtr() PlaceholderMesh
}

type RefPlaceholderMeshImpl TypedRef[PlaceholderMesh]

func (r *RefPlaceholderMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[PlaceholderMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPlaceholderMeshImpl) TypedPtr() PlaceholderMesh {
	rg := (*TypedRef[PlaceholderMesh])(r)
	return rg.TypedPtr()
}

func (r *RefPlaceholderMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[PlaceholderMesh])(r)
	rg.Ref(from)
}

func (r *RefPlaceholderMeshImpl) TypedRef(from *RefPlaceholderMeshImpl) {
	rg := (*TypedRef[PlaceholderMesh])(r)
	t := (*TypedRef[PlaceholderMesh])(from)
	rg.TypedRef((*TypedRef[PlaceholderMesh])(t))
}

func (r *RefPlaceholderMeshImpl) Unref() {
	rg := (*TypedRef[PlaceholderMesh])(r)
	rg.Unref()
}

func (r *RefPlaceholderMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPlaceholderMesh(reference PlaceholderMesh) RefPlaceholderMesh {
	return (RefPlaceholderMesh)(NewTypedRef[PlaceholderMesh](reference))
}

func newRefPlaceholderMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PlaceholderMesh](reference.(PlaceholderMesh)))
}

func newRefPlaceholderMeshGDExtensionIternalConstructor(reference PlaceholderMesh) RefPlaceholderMesh {
	return newTypedRefGDExtensionIternalConstructor[PlaceholderMesh](reference)
}

var _ RefPlaceholderTexture2D = &RefPlaceholderTexture2DImpl{}
var _ Ref = &RefPlaceholderTexture2DImpl{}

type RefPlaceholderTexture2D interface {
	Ref
	TypedPtr() PlaceholderTexture2D
}

type RefPlaceholderTexture2DImpl TypedRef[PlaceholderTexture2D]

func (r *RefPlaceholderTexture2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PlaceholderTexture2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPlaceholderTexture2DImpl) TypedPtr() PlaceholderTexture2D {
	rg := (*TypedRef[PlaceholderTexture2D])(r)
	return rg.TypedPtr()
}

func (r *RefPlaceholderTexture2DImpl) Ref(from Ref) {
	rg := (*TypedRef[PlaceholderTexture2D])(r)
	rg.Ref(from)
}

func (r *RefPlaceholderTexture2DImpl) TypedRef(from *RefPlaceholderTexture2DImpl) {
	rg := (*TypedRef[PlaceholderTexture2D])(r)
	t := (*TypedRef[PlaceholderTexture2D])(from)
	rg.TypedRef((*TypedRef[PlaceholderTexture2D])(t))
}

func (r *RefPlaceholderTexture2DImpl) Unref() {
	rg := (*TypedRef[PlaceholderTexture2D])(r)
	rg.Unref()
}

func (r *RefPlaceholderTexture2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPlaceholderTexture2D(reference PlaceholderTexture2D) RefPlaceholderTexture2D {
	return (RefPlaceholderTexture2D)(NewTypedRef[PlaceholderTexture2D](reference))
}

func newRefPlaceholderTexture2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PlaceholderTexture2D](reference.(PlaceholderTexture2D)))
}

func newRefPlaceholderTexture2DGDExtensionIternalConstructor(reference PlaceholderTexture2D) RefPlaceholderTexture2D {
	return newTypedRefGDExtensionIternalConstructor[PlaceholderTexture2D](reference)
}

var _ RefPlaceholderTexture2DArray = &RefPlaceholderTexture2DArrayImpl{}
var _ Ref = &RefPlaceholderTexture2DArrayImpl{}

type RefPlaceholderTexture2DArray interface {
	Ref
	TypedPtr() PlaceholderTexture2DArray
}

type RefPlaceholderTexture2DArrayImpl TypedRef[PlaceholderTexture2DArray]

func (r *RefPlaceholderTexture2DArrayImpl) Ptr() RefCounted {
	rg := (*TypedRef[PlaceholderTexture2DArray])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPlaceholderTexture2DArrayImpl) TypedPtr() PlaceholderTexture2DArray {
	rg := (*TypedRef[PlaceholderTexture2DArray])(r)
	return rg.TypedPtr()
}

func (r *RefPlaceholderTexture2DArrayImpl) Ref(from Ref) {
	rg := (*TypedRef[PlaceholderTexture2DArray])(r)
	rg.Ref(from)
}

func (r *RefPlaceholderTexture2DArrayImpl) TypedRef(from *RefPlaceholderTexture2DArrayImpl) {
	rg := (*TypedRef[PlaceholderTexture2DArray])(r)
	t := (*TypedRef[PlaceholderTexture2DArray])(from)
	rg.TypedRef((*TypedRef[PlaceholderTexture2DArray])(t))
}

func (r *RefPlaceholderTexture2DArrayImpl) Unref() {
	rg := (*TypedRef[PlaceholderTexture2DArray])(r)
	rg.Unref()
}

func (r *RefPlaceholderTexture2DArrayImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPlaceholderTexture2DArray(reference PlaceholderTexture2DArray) RefPlaceholderTexture2DArray {
	return (RefPlaceholderTexture2DArray)(NewTypedRef[PlaceholderTexture2DArray](reference))
}

func newRefPlaceholderTexture2DArrayAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PlaceholderTexture2DArray](reference.(PlaceholderTexture2DArray)))
}

func newRefPlaceholderTexture2DArrayGDExtensionIternalConstructor(reference PlaceholderTexture2DArray) RefPlaceholderTexture2DArray {
	return newTypedRefGDExtensionIternalConstructor[PlaceholderTexture2DArray](reference)
}

var _ RefPlaceholderTexture3D = &RefPlaceholderTexture3DImpl{}
var _ Ref = &RefPlaceholderTexture3DImpl{}

type RefPlaceholderTexture3D interface {
	Ref
	TypedPtr() PlaceholderTexture3D
}

type RefPlaceholderTexture3DImpl TypedRef[PlaceholderTexture3D]

func (r *RefPlaceholderTexture3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PlaceholderTexture3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPlaceholderTexture3DImpl) TypedPtr() PlaceholderTexture3D {
	rg := (*TypedRef[PlaceholderTexture3D])(r)
	return rg.TypedPtr()
}

func (r *RefPlaceholderTexture3DImpl) Ref(from Ref) {
	rg := (*TypedRef[PlaceholderTexture3D])(r)
	rg.Ref(from)
}

func (r *RefPlaceholderTexture3DImpl) TypedRef(from *RefPlaceholderTexture3DImpl) {
	rg := (*TypedRef[PlaceholderTexture3D])(r)
	t := (*TypedRef[PlaceholderTexture3D])(from)
	rg.TypedRef((*TypedRef[PlaceholderTexture3D])(t))
}

func (r *RefPlaceholderTexture3DImpl) Unref() {
	rg := (*TypedRef[PlaceholderTexture3D])(r)
	rg.Unref()
}

func (r *RefPlaceholderTexture3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPlaceholderTexture3D(reference PlaceholderTexture3D) RefPlaceholderTexture3D {
	return (RefPlaceholderTexture3D)(NewTypedRef[PlaceholderTexture3D](reference))
}

func newRefPlaceholderTexture3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PlaceholderTexture3D](reference.(PlaceholderTexture3D)))
}

func newRefPlaceholderTexture3DGDExtensionIternalConstructor(reference PlaceholderTexture3D) RefPlaceholderTexture3D {
	return newTypedRefGDExtensionIternalConstructor[PlaceholderTexture3D](reference)
}

var _ RefPlaceholderTextureLayered = &RefPlaceholderTextureLayeredImpl{}
var _ Ref = &RefPlaceholderTextureLayeredImpl{}

type RefPlaceholderTextureLayered interface {
	Ref
	TypedPtr() PlaceholderTextureLayered
}

type RefPlaceholderTextureLayeredImpl TypedRef[PlaceholderTextureLayered]

func (r *RefPlaceholderTextureLayeredImpl) Ptr() RefCounted {
	rg := (*TypedRef[PlaceholderTextureLayered])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPlaceholderTextureLayeredImpl) TypedPtr() PlaceholderTextureLayered {
	rg := (*TypedRef[PlaceholderTextureLayered])(r)
	return rg.TypedPtr()
}

func (r *RefPlaceholderTextureLayeredImpl) Ref(from Ref) {
	rg := (*TypedRef[PlaceholderTextureLayered])(r)
	rg.Ref(from)
}

func (r *RefPlaceholderTextureLayeredImpl) TypedRef(from *RefPlaceholderTextureLayeredImpl) {
	rg := (*TypedRef[PlaceholderTextureLayered])(r)
	t := (*TypedRef[PlaceholderTextureLayered])(from)
	rg.TypedRef((*TypedRef[PlaceholderTextureLayered])(t))
}

func (r *RefPlaceholderTextureLayeredImpl) Unref() {
	rg := (*TypedRef[PlaceholderTextureLayered])(r)
	rg.Unref()
}

func (r *RefPlaceholderTextureLayeredImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPlaceholderTextureLayered(reference PlaceholderTextureLayered) RefPlaceholderTextureLayered {
	return (RefPlaceholderTextureLayered)(NewTypedRef[PlaceholderTextureLayered](reference))
}

func newRefPlaceholderTextureLayeredAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PlaceholderTextureLayered](reference.(PlaceholderTextureLayered)))
}

func newRefPlaceholderTextureLayeredGDExtensionIternalConstructor(reference PlaceholderTextureLayered) RefPlaceholderTextureLayered {
	return newTypedRefGDExtensionIternalConstructor[PlaceholderTextureLayered](reference)
}

var _ RefPlaneMesh = &RefPlaneMeshImpl{}
var _ Ref = &RefPlaneMeshImpl{}

type RefPlaneMesh interface {
	Ref
	TypedPtr() PlaneMesh
}

type RefPlaneMeshImpl TypedRef[PlaneMesh]

func (r *RefPlaneMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[PlaneMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPlaneMeshImpl) TypedPtr() PlaneMesh {
	rg := (*TypedRef[PlaneMesh])(r)
	return rg.TypedPtr()
}

func (r *RefPlaneMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[PlaneMesh])(r)
	rg.Ref(from)
}

func (r *RefPlaneMeshImpl) TypedRef(from *RefPlaneMeshImpl) {
	rg := (*TypedRef[PlaneMesh])(r)
	t := (*TypedRef[PlaneMesh])(from)
	rg.TypedRef((*TypedRef[PlaneMesh])(t))
}

func (r *RefPlaneMeshImpl) Unref() {
	rg := (*TypedRef[PlaneMesh])(r)
	rg.Unref()
}

func (r *RefPlaneMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPlaneMesh(reference PlaneMesh) RefPlaneMesh {
	return (RefPlaneMesh)(NewTypedRef[PlaneMesh](reference))
}

func newRefPlaneMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PlaneMesh](reference.(PlaneMesh)))
}

func newRefPlaneMeshGDExtensionIternalConstructor(reference PlaneMesh) RefPlaneMesh {
	return newTypedRefGDExtensionIternalConstructor[PlaneMesh](reference)
}

var _ RefPointMesh = &RefPointMeshImpl{}
var _ Ref = &RefPointMeshImpl{}

type RefPointMesh interface {
	Ref
	TypedPtr() PointMesh
}

type RefPointMeshImpl TypedRef[PointMesh]

func (r *RefPointMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[PointMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPointMeshImpl) TypedPtr() PointMesh {
	rg := (*TypedRef[PointMesh])(r)
	return rg.TypedPtr()
}

func (r *RefPointMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[PointMesh])(r)
	rg.Ref(from)
}

func (r *RefPointMeshImpl) TypedRef(from *RefPointMeshImpl) {
	rg := (*TypedRef[PointMesh])(r)
	t := (*TypedRef[PointMesh])(from)
	rg.TypedRef((*TypedRef[PointMesh])(t))
}

func (r *RefPointMeshImpl) Unref() {
	rg := (*TypedRef[PointMesh])(r)
	rg.Unref()
}

func (r *RefPointMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPointMesh(reference PointMesh) RefPointMesh {
	return (RefPointMesh)(NewTypedRef[PointMesh](reference))
}

func newRefPointMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PointMesh](reference.(PointMesh)))
}

func newRefPointMeshGDExtensionIternalConstructor(reference PointMesh) RefPointMesh {
	return newTypedRefGDExtensionIternalConstructor[PointMesh](reference)
}

var _ RefPolygonOccluder3D = &RefPolygonOccluder3DImpl{}
var _ Ref = &RefPolygonOccluder3DImpl{}

type RefPolygonOccluder3D interface {
	Ref
	TypedPtr() PolygonOccluder3D
}

type RefPolygonOccluder3DImpl TypedRef[PolygonOccluder3D]

func (r *RefPolygonOccluder3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PolygonOccluder3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPolygonOccluder3DImpl) TypedPtr() PolygonOccluder3D {
	rg := (*TypedRef[PolygonOccluder3D])(r)
	return rg.TypedPtr()
}

func (r *RefPolygonOccluder3DImpl) Ref(from Ref) {
	rg := (*TypedRef[PolygonOccluder3D])(r)
	rg.Ref(from)
}

func (r *RefPolygonOccluder3DImpl) TypedRef(from *RefPolygonOccluder3DImpl) {
	rg := (*TypedRef[PolygonOccluder3D])(r)
	t := (*TypedRef[PolygonOccluder3D])(from)
	rg.TypedRef((*TypedRef[PolygonOccluder3D])(t))
}

func (r *RefPolygonOccluder3DImpl) Unref() {
	rg := (*TypedRef[PolygonOccluder3D])(r)
	rg.Unref()
}

func (r *RefPolygonOccluder3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPolygonOccluder3D(reference PolygonOccluder3D) RefPolygonOccluder3D {
	return (RefPolygonOccluder3D)(NewTypedRef[PolygonOccluder3D](reference))
}

func newRefPolygonOccluder3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PolygonOccluder3D](reference.(PolygonOccluder3D)))
}

func newRefPolygonOccluder3DGDExtensionIternalConstructor(reference PolygonOccluder3D) RefPolygonOccluder3D {
	return newTypedRefGDExtensionIternalConstructor[PolygonOccluder3D](reference)
}

var _ RefPolygonPathFinder = &RefPolygonPathFinderImpl{}
var _ Ref = &RefPolygonPathFinderImpl{}

type RefPolygonPathFinder interface {
	Ref
	TypedPtr() PolygonPathFinder
}

type RefPolygonPathFinderImpl TypedRef[PolygonPathFinder]

func (r *RefPolygonPathFinderImpl) Ptr() RefCounted {
	rg := (*TypedRef[PolygonPathFinder])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPolygonPathFinderImpl) TypedPtr() PolygonPathFinder {
	rg := (*TypedRef[PolygonPathFinder])(r)
	return rg.TypedPtr()
}

func (r *RefPolygonPathFinderImpl) Ref(from Ref) {
	rg := (*TypedRef[PolygonPathFinder])(r)
	rg.Ref(from)
}

func (r *RefPolygonPathFinderImpl) TypedRef(from *RefPolygonPathFinderImpl) {
	rg := (*TypedRef[PolygonPathFinder])(r)
	t := (*TypedRef[PolygonPathFinder])(from)
	rg.TypedRef((*TypedRef[PolygonPathFinder])(t))
}

func (r *RefPolygonPathFinderImpl) Unref() {
	rg := (*TypedRef[PolygonPathFinder])(r)
	rg.Unref()
}

func (r *RefPolygonPathFinderImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPolygonPathFinder(reference PolygonPathFinder) RefPolygonPathFinder {
	return (RefPolygonPathFinder)(NewTypedRef[PolygonPathFinder](reference))
}

func newRefPolygonPathFinderAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PolygonPathFinder](reference.(PolygonPathFinder)))
}

func newRefPolygonPathFinderGDExtensionIternalConstructor(reference PolygonPathFinder) RefPolygonPathFinder {
	return newTypedRefGDExtensionIternalConstructor[PolygonPathFinder](reference)
}

var _ RefPortableCompressedTexture2D = &RefPortableCompressedTexture2DImpl{}
var _ Ref = &RefPortableCompressedTexture2DImpl{}

type RefPortableCompressedTexture2D interface {
	Ref
	TypedPtr() PortableCompressedTexture2D
}

type RefPortableCompressedTexture2DImpl TypedRef[PortableCompressedTexture2D]

func (r *RefPortableCompressedTexture2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[PortableCompressedTexture2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPortableCompressedTexture2DImpl) TypedPtr() PortableCompressedTexture2D {
	rg := (*TypedRef[PortableCompressedTexture2D])(r)
	return rg.TypedPtr()
}

func (r *RefPortableCompressedTexture2DImpl) Ref(from Ref) {
	rg := (*TypedRef[PortableCompressedTexture2D])(r)
	rg.Ref(from)
}

func (r *RefPortableCompressedTexture2DImpl) TypedRef(from *RefPortableCompressedTexture2DImpl) {
	rg := (*TypedRef[PortableCompressedTexture2D])(r)
	t := (*TypedRef[PortableCompressedTexture2D])(from)
	rg.TypedRef((*TypedRef[PortableCompressedTexture2D])(t))
}

func (r *RefPortableCompressedTexture2DImpl) Unref() {
	rg := (*TypedRef[PortableCompressedTexture2D])(r)
	rg.Unref()
}

func (r *RefPortableCompressedTexture2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPortableCompressedTexture2D(reference PortableCompressedTexture2D) RefPortableCompressedTexture2D {
	return (RefPortableCompressedTexture2D)(NewTypedRef[PortableCompressedTexture2D](reference))
}

func newRefPortableCompressedTexture2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PortableCompressedTexture2D](reference.(PortableCompressedTexture2D)))
}

func newRefPortableCompressedTexture2DGDExtensionIternalConstructor(reference PortableCompressedTexture2D) RefPortableCompressedTexture2D {
	return newTypedRefGDExtensionIternalConstructor[PortableCompressedTexture2D](reference)
}

var _ RefPrimitiveMesh = &RefPrimitiveMeshImpl{}
var _ Ref = &RefPrimitiveMeshImpl{}

type RefPrimitiveMesh interface {
	Ref
	TypedPtr() PrimitiveMesh
}

type RefPrimitiveMeshImpl TypedRef[PrimitiveMesh]

func (r *RefPrimitiveMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[PrimitiveMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPrimitiveMeshImpl) TypedPtr() PrimitiveMesh {
	rg := (*TypedRef[PrimitiveMesh])(r)
	return rg.TypedPtr()
}

func (r *RefPrimitiveMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[PrimitiveMesh])(r)
	rg.Ref(from)
}

func (r *RefPrimitiveMeshImpl) TypedRef(from *RefPrimitiveMeshImpl) {
	rg := (*TypedRef[PrimitiveMesh])(r)
	t := (*TypedRef[PrimitiveMesh])(from)
	rg.TypedRef((*TypedRef[PrimitiveMesh])(t))
}

func (r *RefPrimitiveMeshImpl) Unref() {
	rg := (*TypedRef[PrimitiveMesh])(r)
	rg.Unref()
}

func (r *RefPrimitiveMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPrimitiveMesh(reference PrimitiveMesh) RefPrimitiveMesh {
	return (RefPrimitiveMesh)(NewTypedRef[PrimitiveMesh](reference))
}

func newRefPrimitiveMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PrimitiveMesh](reference.(PrimitiveMesh)))
}

func newRefPrimitiveMeshGDExtensionIternalConstructor(reference PrimitiveMesh) RefPrimitiveMesh {
	return newTypedRefGDExtensionIternalConstructor[PrimitiveMesh](reference)
}

var _ RefPrismMesh = &RefPrismMeshImpl{}
var _ Ref = &RefPrismMeshImpl{}

type RefPrismMesh interface {
	Ref
	TypedPtr() PrismMesh
}

type RefPrismMeshImpl TypedRef[PrismMesh]

func (r *RefPrismMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[PrismMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPrismMeshImpl) TypedPtr() PrismMesh {
	rg := (*TypedRef[PrismMesh])(r)
	return rg.TypedPtr()
}

func (r *RefPrismMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[PrismMesh])(r)
	rg.Ref(from)
}

func (r *RefPrismMeshImpl) TypedRef(from *RefPrismMeshImpl) {
	rg := (*TypedRef[PrismMesh])(r)
	t := (*TypedRef[PrismMesh])(from)
	rg.TypedRef((*TypedRef[PrismMesh])(t))
}

func (r *RefPrismMeshImpl) Unref() {
	rg := (*TypedRef[PrismMesh])(r)
	rg.Unref()
}

func (r *RefPrismMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPrismMesh(reference PrismMesh) RefPrismMesh {
	return (RefPrismMesh)(NewTypedRef[PrismMesh](reference))
}

func newRefPrismMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PrismMesh](reference.(PrismMesh)))
}

func newRefPrismMeshGDExtensionIternalConstructor(reference PrismMesh) RefPrismMesh {
	return newTypedRefGDExtensionIternalConstructor[PrismMesh](reference)
}

var _ RefProceduralSkyMaterial = &RefProceduralSkyMaterialImpl{}
var _ Ref = &RefProceduralSkyMaterialImpl{}

type RefProceduralSkyMaterial interface {
	Ref
	TypedPtr() ProceduralSkyMaterial
}

type RefProceduralSkyMaterialImpl TypedRef[ProceduralSkyMaterial]

func (r *RefProceduralSkyMaterialImpl) Ptr() RefCounted {
	rg := (*TypedRef[ProceduralSkyMaterial])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefProceduralSkyMaterialImpl) TypedPtr() ProceduralSkyMaterial {
	rg := (*TypedRef[ProceduralSkyMaterial])(r)
	return rg.TypedPtr()
}

func (r *RefProceduralSkyMaterialImpl) Ref(from Ref) {
	rg := (*TypedRef[ProceduralSkyMaterial])(r)
	rg.Ref(from)
}

func (r *RefProceduralSkyMaterialImpl) TypedRef(from *RefProceduralSkyMaterialImpl) {
	rg := (*TypedRef[ProceduralSkyMaterial])(r)
	t := (*TypedRef[ProceduralSkyMaterial])(from)
	rg.TypedRef((*TypedRef[ProceduralSkyMaterial])(t))
}

func (r *RefProceduralSkyMaterialImpl) Unref() {
	rg := (*TypedRef[ProceduralSkyMaterial])(r)
	rg.Unref()
}

func (r *RefProceduralSkyMaterialImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefProceduralSkyMaterial(reference ProceduralSkyMaterial) RefProceduralSkyMaterial {
	return (RefProceduralSkyMaterial)(NewTypedRef[ProceduralSkyMaterial](reference))
}

func newRefProceduralSkyMaterialAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ProceduralSkyMaterial](reference.(ProceduralSkyMaterial)))
}

func newRefProceduralSkyMaterialGDExtensionIternalConstructor(reference ProceduralSkyMaterial) RefProceduralSkyMaterial {
	return newTypedRefGDExtensionIternalConstructor[ProceduralSkyMaterial](reference)
}

var _ RefPropertyTweener = &RefPropertyTweenerImpl{}
var _ Ref = &RefPropertyTweenerImpl{}

type RefPropertyTweener interface {
	Ref
	TypedPtr() PropertyTweener
}

type RefPropertyTweenerImpl TypedRef[PropertyTweener]

func (r *RefPropertyTweenerImpl) Ptr() RefCounted {
	rg := (*TypedRef[PropertyTweener])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefPropertyTweenerImpl) TypedPtr() PropertyTweener {
	rg := (*TypedRef[PropertyTweener])(r)
	return rg.TypedPtr()
}

func (r *RefPropertyTweenerImpl) Ref(from Ref) {
	rg := (*TypedRef[PropertyTweener])(r)
	rg.Ref(from)
}

func (r *RefPropertyTweenerImpl) TypedRef(from *RefPropertyTweenerImpl) {
	rg := (*TypedRef[PropertyTweener])(r)
	t := (*TypedRef[PropertyTweener])(from)
	rg.TypedRef((*TypedRef[PropertyTweener])(t))
}

func (r *RefPropertyTweenerImpl) Unref() {
	rg := (*TypedRef[PropertyTweener])(r)
	rg.Unref()
}

func (r *RefPropertyTweenerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefPropertyTweener(reference PropertyTweener) RefPropertyTweener {
	return (RefPropertyTweener)(NewTypedRef[PropertyTweener](reference))
}

func newRefPropertyTweenerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[PropertyTweener](reference.(PropertyTweener)))
}

func newRefPropertyTweenerGDExtensionIternalConstructor(reference PropertyTweener) RefPropertyTweener {
	return newTypedRefGDExtensionIternalConstructor[PropertyTweener](reference)
}

var _ RefQuadMesh = &RefQuadMeshImpl{}
var _ Ref = &RefQuadMeshImpl{}

type RefQuadMesh interface {
	Ref
	TypedPtr() QuadMesh
}

type RefQuadMeshImpl TypedRef[QuadMesh]

func (r *RefQuadMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[QuadMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefQuadMeshImpl) TypedPtr() QuadMesh {
	rg := (*TypedRef[QuadMesh])(r)
	return rg.TypedPtr()
}

func (r *RefQuadMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[QuadMesh])(r)
	rg.Ref(from)
}

func (r *RefQuadMeshImpl) TypedRef(from *RefQuadMeshImpl) {
	rg := (*TypedRef[QuadMesh])(r)
	t := (*TypedRef[QuadMesh])(from)
	rg.TypedRef((*TypedRef[QuadMesh])(t))
}

func (r *RefQuadMeshImpl) Unref() {
	rg := (*TypedRef[QuadMesh])(r)
	rg.Unref()
}

func (r *RefQuadMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefQuadMesh(reference QuadMesh) RefQuadMesh {
	return (RefQuadMesh)(NewTypedRef[QuadMesh](reference))
}

func newRefQuadMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[QuadMesh](reference.(QuadMesh)))
}

func newRefQuadMeshGDExtensionIternalConstructor(reference QuadMesh) RefQuadMesh {
	return newTypedRefGDExtensionIternalConstructor[QuadMesh](reference)
}

var _ RefQuadOccluder3D = &RefQuadOccluder3DImpl{}
var _ Ref = &RefQuadOccluder3DImpl{}

type RefQuadOccluder3D interface {
	Ref
	TypedPtr() QuadOccluder3D
}

type RefQuadOccluder3DImpl TypedRef[QuadOccluder3D]

func (r *RefQuadOccluder3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[QuadOccluder3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefQuadOccluder3DImpl) TypedPtr() QuadOccluder3D {
	rg := (*TypedRef[QuadOccluder3D])(r)
	return rg.TypedPtr()
}

func (r *RefQuadOccluder3DImpl) Ref(from Ref) {
	rg := (*TypedRef[QuadOccluder3D])(r)
	rg.Ref(from)
}

func (r *RefQuadOccluder3DImpl) TypedRef(from *RefQuadOccluder3DImpl) {
	rg := (*TypedRef[QuadOccluder3D])(r)
	t := (*TypedRef[QuadOccluder3D])(from)
	rg.TypedRef((*TypedRef[QuadOccluder3D])(t))
}

func (r *RefQuadOccluder3DImpl) Unref() {
	rg := (*TypedRef[QuadOccluder3D])(r)
	rg.Unref()
}

func (r *RefQuadOccluder3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefQuadOccluder3D(reference QuadOccluder3D) RefQuadOccluder3D {
	return (RefQuadOccluder3D)(NewTypedRef[QuadOccluder3D](reference))
}

func newRefQuadOccluder3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[QuadOccluder3D](reference.(QuadOccluder3D)))
}

func newRefQuadOccluder3DGDExtensionIternalConstructor(reference QuadOccluder3D) RefQuadOccluder3D {
	return newTypedRefGDExtensionIternalConstructor[QuadOccluder3D](reference)
}

var _ RefRDAttachmentFormat = &RefRDAttachmentFormatImpl{}
var _ Ref = &RefRDAttachmentFormatImpl{}

type RefRDAttachmentFormat interface {
	Ref
	TypedPtr() RDAttachmentFormat
}

type RefRDAttachmentFormatImpl TypedRef[RDAttachmentFormat]

func (r *RefRDAttachmentFormatImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDAttachmentFormat])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDAttachmentFormatImpl) TypedPtr() RDAttachmentFormat {
	rg := (*TypedRef[RDAttachmentFormat])(r)
	return rg.TypedPtr()
}

func (r *RefRDAttachmentFormatImpl) Ref(from Ref) {
	rg := (*TypedRef[RDAttachmentFormat])(r)
	rg.Ref(from)
}

func (r *RefRDAttachmentFormatImpl) TypedRef(from *RefRDAttachmentFormatImpl) {
	rg := (*TypedRef[RDAttachmentFormat])(r)
	t := (*TypedRef[RDAttachmentFormat])(from)
	rg.TypedRef((*TypedRef[RDAttachmentFormat])(t))
}

func (r *RefRDAttachmentFormatImpl) Unref() {
	rg := (*TypedRef[RDAttachmentFormat])(r)
	rg.Unref()
}

func (r *RefRDAttachmentFormatImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDAttachmentFormat(reference RDAttachmentFormat) RefRDAttachmentFormat {
	return (RefRDAttachmentFormat)(NewTypedRef[RDAttachmentFormat](reference))
}

func newRefRDAttachmentFormatAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDAttachmentFormat](reference.(RDAttachmentFormat)))
}

func newRefRDAttachmentFormatGDExtensionIternalConstructor(reference RDAttachmentFormat) RefRDAttachmentFormat {
	return newTypedRefGDExtensionIternalConstructor[RDAttachmentFormat](reference)
}

var _ RefRDFramebufferPass = &RefRDFramebufferPassImpl{}
var _ Ref = &RefRDFramebufferPassImpl{}

type RefRDFramebufferPass interface {
	Ref
	TypedPtr() RDFramebufferPass
}

type RefRDFramebufferPassImpl TypedRef[RDFramebufferPass]

func (r *RefRDFramebufferPassImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDFramebufferPass])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDFramebufferPassImpl) TypedPtr() RDFramebufferPass {
	rg := (*TypedRef[RDFramebufferPass])(r)
	return rg.TypedPtr()
}

func (r *RefRDFramebufferPassImpl) Ref(from Ref) {
	rg := (*TypedRef[RDFramebufferPass])(r)
	rg.Ref(from)
}

func (r *RefRDFramebufferPassImpl) TypedRef(from *RefRDFramebufferPassImpl) {
	rg := (*TypedRef[RDFramebufferPass])(r)
	t := (*TypedRef[RDFramebufferPass])(from)
	rg.TypedRef((*TypedRef[RDFramebufferPass])(t))
}

func (r *RefRDFramebufferPassImpl) Unref() {
	rg := (*TypedRef[RDFramebufferPass])(r)
	rg.Unref()
}

func (r *RefRDFramebufferPassImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDFramebufferPass(reference RDFramebufferPass) RefRDFramebufferPass {
	return (RefRDFramebufferPass)(NewTypedRef[RDFramebufferPass](reference))
}

func newRefRDFramebufferPassAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDFramebufferPass](reference.(RDFramebufferPass)))
}

func newRefRDFramebufferPassGDExtensionIternalConstructor(reference RDFramebufferPass) RefRDFramebufferPass {
	return newTypedRefGDExtensionIternalConstructor[RDFramebufferPass](reference)
}

var _ RefRDPipelineColorBlendState = &RefRDPipelineColorBlendStateImpl{}
var _ Ref = &RefRDPipelineColorBlendStateImpl{}

type RefRDPipelineColorBlendState interface {
	Ref
	TypedPtr() RDPipelineColorBlendState
}

type RefRDPipelineColorBlendStateImpl TypedRef[RDPipelineColorBlendState]

func (r *RefRDPipelineColorBlendStateImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDPipelineColorBlendState])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDPipelineColorBlendStateImpl) TypedPtr() RDPipelineColorBlendState {
	rg := (*TypedRef[RDPipelineColorBlendState])(r)
	return rg.TypedPtr()
}

func (r *RefRDPipelineColorBlendStateImpl) Ref(from Ref) {
	rg := (*TypedRef[RDPipelineColorBlendState])(r)
	rg.Ref(from)
}

func (r *RefRDPipelineColorBlendStateImpl) TypedRef(from *RefRDPipelineColorBlendStateImpl) {
	rg := (*TypedRef[RDPipelineColorBlendState])(r)
	t := (*TypedRef[RDPipelineColorBlendState])(from)
	rg.TypedRef((*TypedRef[RDPipelineColorBlendState])(t))
}

func (r *RefRDPipelineColorBlendStateImpl) Unref() {
	rg := (*TypedRef[RDPipelineColorBlendState])(r)
	rg.Unref()
}

func (r *RefRDPipelineColorBlendStateImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDPipelineColorBlendState(reference RDPipelineColorBlendState) RefRDPipelineColorBlendState {
	return (RefRDPipelineColorBlendState)(NewTypedRef[RDPipelineColorBlendState](reference))
}

func newRefRDPipelineColorBlendStateAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDPipelineColorBlendState](reference.(RDPipelineColorBlendState)))
}

func newRefRDPipelineColorBlendStateGDExtensionIternalConstructor(reference RDPipelineColorBlendState) RefRDPipelineColorBlendState {
	return newTypedRefGDExtensionIternalConstructor[RDPipelineColorBlendState](reference)
}

var _ RefRDPipelineColorBlendStateAttachment = &RefRDPipelineColorBlendStateAttachmentImpl{}
var _ Ref = &RefRDPipelineColorBlendStateAttachmentImpl{}

type RefRDPipelineColorBlendStateAttachment interface {
	Ref
	TypedPtr() RDPipelineColorBlendStateAttachment
}

type RefRDPipelineColorBlendStateAttachmentImpl TypedRef[RDPipelineColorBlendStateAttachment]

func (r *RefRDPipelineColorBlendStateAttachmentImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDPipelineColorBlendStateAttachment])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDPipelineColorBlendStateAttachmentImpl) TypedPtr() RDPipelineColorBlendStateAttachment {
	rg := (*TypedRef[RDPipelineColorBlendStateAttachment])(r)
	return rg.TypedPtr()
}

func (r *RefRDPipelineColorBlendStateAttachmentImpl) Ref(from Ref) {
	rg := (*TypedRef[RDPipelineColorBlendStateAttachment])(r)
	rg.Ref(from)
}

func (r *RefRDPipelineColorBlendStateAttachmentImpl) TypedRef(from *RefRDPipelineColorBlendStateAttachmentImpl) {
	rg := (*TypedRef[RDPipelineColorBlendStateAttachment])(r)
	t := (*TypedRef[RDPipelineColorBlendStateAttachment])(from)
	rg.TypedRef((*TypedRef[RDPipelineColorBlendStateAttachment])(t))
}

func (r *RefRDPipelineColorBlendStateAttachmentImpl) Unref() {
	rg := (*TypedRef[RDPipelineColorBlendStateAttachment])(r)
	rg.Unref()
}

func (r *RefRDPipelineColorBlendStateAttachmentImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDPipelineColorBlendStateAttachment(reference RDPipelineColorBlendStateAttachment) RefRDPipelineColorBlendStateAttachment {
	return (RefRDPipelineColorBlendStateAttachment)(NewTypedRef[RDPipelineColorBlendStateAttachment](reference))
}

func newRefRDPipelineColorBlendStateAttachmentAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDPipelineColorBlendStateAttachment](reference.(RDPipelineColorBlendStateAttachment)))
}

func newRefRDPipelineColorBlendStateAttachmentGDExtensionIternalConstructor(reference RDPipelineColorBlendStateAttachment) RefRDPipelineColorBlendStateAttachment {
	return newTypedRefGDExtensionIternalConstructor[RDPipelineColorBlendStateAttachment](reference)
}

var _ RefRDPipelineDepthStencilState = &RefRDPipelineDepthStencilStateImpl{}
var _ Ref = &RefRDPipelineDepthStencilStateImpl{}

type RefRDPipelineDepthStencilState interface {
	Ref
	TypedPtr() RDPipelineDepthStencilState
}

type RefRDPipelineDepthStencilStateImpl TypedRef[RDPipelineDepthStencilState]

func (r *RefRDPipelineDepthStencilStateImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDPipelineDepthStencilState])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDPipelineDepthStencilStateImpl) TypedPtr() RDPipelineDepthStencilState {
	rg := (*TypedRef[RDPipelineDepthStencilState])(r)
	return rg.TypedPtr()
}

func (r *RefRDPipelineDepthStencilStateImpl) Ref(from Ref) {
	rg := (*TypedRef[RDPipelineDepthStencilState])(r)
	rg.Ref(from)
}

func (r *RefRDPipelineDepthStencilStateImpl) TypedRef(from *RefRDPipelineDepthStencilStateImpl) {
	rg := (*TypedRef[RDPipelineDepthStencilState])(r)
	t := (*TypedRef[RDPipelineDepthStencilState])(from)
	rg.TypedRef((*TypedRef[RDPipelineDepthStencilState])(t))
}

func (r *RefRDPipelineDepthStencilStateImpl) Unref() {
	rg := (*TypedRef[RDPipelineDepthStencilState])(r)
	rg.Unref()
}

func (r *RefRDPipelineDepthStencilStateImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDPipelineDepthStencilState(reference RDPipelineDepthStencilState) RefRDPipelineDepthStencilState {
	return (RefRDPipelineDepthStencilState)(NewTypedRef[RDPipelineDepthStencilState](reference))
}

func newRefRDPipelineDepthStencilStateAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDPipelineDepthStencilState](reference.(RDPipelineDepthStencilState)))
}

func newRefRDPipelineDepthStencilStateGDExtensionIternalConstructor(reference RDPipelineDepthStencilState) RefRDPipelineDepthStencilState {
	return newTypedRefGDExtensionIternalConstructor[RDPipelineDepthStencilState](reference)
}

var _ RefRDPipelineMultisampleState = &RefRDPipelineMultisampleStateImpl{}
var _ Ref = &RefRDPipelineMultisampleStateImpl{}

type RefRDPipelineMultisampleState interface {
	Ref
	TypedPtr() RDPipelineMultisampleState
}

type RefRDPipelineMultisampleStateImpl TypedRef[RDPipelineMultisampleState]

func (r *RefRDPipelineMultisampleStateImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDPipelineMultisampleState])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDPipelineMultisampleStateImpl) TypedPtr() RDPipelineMultisampleState {
	rg := (*TypedRef[RDPipelineMultisampleState])(r)
	return rg.TypedPtr()
}

func (r *RefRDPipelineMultisampleStateImpl) Ref(from Ref) {
	rg := (*TypedRef[RDPipelineMultisampleState])(r)
	rg.Ref(from)
}

func (r *RefRDPipelineMultisampleStateImpl) TypedRef(from *RefRDPipelineMultisampleStateImpl) {
	rg := (*TypedRef[RDPipelineMultisampleState])(r)
	t := (*TypedRef[RDPipelineMultisampleState])(from)
	rg.TypedRef((*TypedRef[RDPipelineMultisampleState])(t))
}

func (r *RefRDPipelineMultisampleStateImpl) Unref() {
	rg := (*TypedRef[RDPipelineMultisampleState])(r)
	rg.Unref()
}

func (r *RefRDPipelineMultisampleStateImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDPipelineMultisampleState(reference RDPipelineMultisampleState) RefRDPipelineMultisampleState {
	return (RefRDPipelineMultisampleState)(NewTypedRef[RDPipelineMultisampleState](reference))
}

func newRefRDPipelineMultisampleStateAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDPipelineMultisampleState](reference.(RDPipelineMultisampleState)))
}

func newRefRDPipelineMultisampleStateGDExtensionIternalConstructor(reference RDPipelineMultisampleState) RefRDPipelineMultisampleState {
	return newTypedRefGDExtensionIternalConstructor[RDPipelineMultisampleState](reference)
}

var _ RefRDPipelineRasterizationState = &RefRDPipelineRasterizationStateImpl{}
var _ Ref = &RefRDPipelineRasterizationStateImpl{}

type RefRDPipelineRasterizationState interface {
	Ref
	TypedPtr() RDPipelineRasterizationState
}

type RefRDPipelineRasterizationStateImpl TypedRef[RDPipelineRasterizationState]

func (r *RefRDPipelineRasterizationStateImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDPipelineRasterizationState])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDPipelineRasterizationStateImpl) TypedPtr() RDPipelineRasterizationState {
	rg := (*TypedRef[RDPipelineRasterizationState])(r)
	return rg.TypedPtr()
}

func (r *RefRDPipelineRasterizationStateImpl) Ref(from Ref) {
	rg := (*TypedRef[RDPipelineRasterizationState])(r)
	rg.Ref(from)
}

func (r *RefRDPipelineRasterizationStateImpl) TypedRef(from *RefRDPipelineRasterizationStateImpl) {
	rg := (*TypedRef[RDPipelineRasterizationState])(r)
	t := (*TypedRef[RDPipelineRasterizationState])(from)
	rg.TypedRef((*TypedRef[RDPipelineRasterizationState])(t))
}

func (r *RefRDPipelineRasterizationStateImpl) Unref() {
	rg := (*TypedRef[RDPipelineRasterizationState])(r)
	rg.Unref()
}

func (r *RefRDPipelineRasterizationStateImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDPipelineRasterizationState(reference RDPipelineRasterizationState) RefRDPipelineRasterizationState {
	return (RefRDPipelineRasterizationState)(NewTypedRef[RDPipelineRasterizationState](reference))
}

func newRefRDPipelineRasterizationStateAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDPipelineRasterizationState](reference.(RDPipelineRasterizationState)))
}

func newRefRDPipelineRasterizationStateGDExtensionIternalConstructor(reference RDPipelineRasterizationState) RefRDPipelineRasterizationState {
	return newTypedRefGDExtensionIternalConstructor[RDPipelineRasterizationState](reference)
}

var _ RefRDPipelineSpecializationConstant = &RefRDPipelineSpecializationConstantImpl{}
var _ Ref = &RefRDPipelineSpecializationConstantImpl{}

type RefRDPipelineSpecializationConstant interface {
	Ref
	TypedPtr() RDPipelineSpecializationConstant
}

type RefRDPipelineSpecializationConstantImpl TypedRef[RDPipelineSpecializationConstant]

func (r *RefRDPipelineSpecializationConstantImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDPipelineSpecializationConstant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDPipelineSpecializationConstantImpl) TypedPtr() RDPipelineSpecializationConstant {
	rg := (*TypedRef[RDPipelineSpecializationConstant])(r)
	return rg.TypedPtr()
}

func (r *RefRDPipelineSpecializationConstantImpl) Ref(from Ref) {
	rg := (*TypedRef[RDPipelineSpecializationConstant])(r)
	rg.Ref(from)
}

func (r *RefRDPipelineSpecializationConstantImpl) TypedRef(from *RefRDPipelineSpecializationConstantImpl) {
	rg := (*TypedRef[RDPipelineSpecializationConstant])(r)
	t := (*TypedRef[RDPipelineSpecializationConstant])(from)
	rg.TypedRef((*TypedRef[RDPipelineSpecializationConstant])(t))
}

func (r *RefRDPipelineSpecializationConstantImpl) Unref() {
	rg := (*TypedRef[RDPipelineSpecializationConstant])(r)
	rg.Unref()
}

func (r *RefRDPipelineSpecializationConstantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDPipelineSpecializationConstant(reference RDPipelineSpecializationConstant) RefRDPipelineSpecializationConstant {
	return (RefRDPipelineSpecializationConstant)(NewTypedRef[RDPipelineSpecializationConstant](reference))
}

func newRefRDPipelineSpecializationConstantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDPipelineSpecializationConstant](reference.(RDPipelineSpecializationConstant)))
}

func newRefRDPipelineSpecializationConstantGDExtensionIternalConstructor(reference RDPipelineSpecializationConstant) RefRDPipelineSpecializationConstant {
	return newTypedRefGDExtensionIternalConstructor[RDPipelineSpecializationConstant](reference)
}

var _ RefRDSamplerState = &RefRDSamplerStateImpl{}
var _ Ref = &RefRDSamplerStateImpl{}

type RefRDSamplerState interface {
	Ref
	TypedPtr() RDSamplerState
}

type RefRDSamplerStateImpl TypedRef[RDSamplerState]

func (r *RefRDSamplerStateImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDSamplerState])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDSamplerStateImpl) TypedPtr() RDSamplerState {
	rg := (*TypedRef[RDSamplerState])(r)
	return rg.TypedPtr()
}

func (r *RefRDSamplerStateImpl) Ref(from Ref) {
	rg := (*TypedRef[RDSamplerState])(r)
	rg.Ref(from)
}

func (r *RefRDSamplerStateImpl) TypedRef(from *RefRDSamplerStateImpl) {
	rg := (*TypedRef[RDSamplerState])(r)
	t := (*TypedRef[RDSamplerState])(from)
	rg.TypedRef((*TypedRef[RDSamplerState])(t))
}

func (r *RefRDSamplerStateImpl) Unref() {
	rg := (*TypedRef[RDSamplerState])(r)
	rg.Unref()
}

func (r *RefRDSamplerStateImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDSamplerState(reference RDSamplerState) RefRDSamplerState {
	return (RefRDSamplerState)(NewTypedRef[RDSamplerState](reference))
}

func newRefRDSamplerStateAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDSamplerState](reference.(RDSamplerState)))
}

func newRefRDSamplerStateGDExtensionIternalConstructor(reference RDSamplerState) RefRDSamplerState {
	return newTypedRefGDExtensionIternalConstructor[RDSamplerState](reference)
}

var _ RefRDShaderFile = &RefRDShaderFileImpl{}
var _ Ref = &RefRDShaderFileImpl{}

type RefRDShaderFile interface {
	Ref
	TypedPtr() RDShaderFile
}

type RefRDShaderFileImpl TypedRef[RDShaderFile]

func (r *RefRDShaderFileImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDShaderFile])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDShaderFileImpl) TypedPtr() RDShaderFile {
	rg := (*TypedRef[RDShaderFile])(r)
	return rg.TypedPtr()
}

func (r *RefRDShaderFileImpl) Ref(from Ref) {
	rg := (*TypedRef[RDShaderFile])(r)
	rg.Ref(from)
}

func (r *RefRDShaderFileImpl) TypedRef(from *RefRDShaderFileImpl) {
	rg := (*TypedRef[RDShaderFile])(r)
	t := (*TypedRef[RDShaderFile])(from)
	rg.TypedRef((*TypedRef[RDShaderFile])(t))
}

func (r *RefRDShaderFileImpl) Unref() {
	rg := (*TypedRef[RDShaderFile])(r)
	rg.Unref()
}

func (r *RefRDShaderFileImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDShaderFile(reference RDShaderFile) RefRDShaderFile {
	return (RefRDShaderFile)(NewTypedRef[RDShaderFile](reference))
}

func newRefRDShaderFileAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDShaderFile](reference.(RDShaderFile)))
}

func newRefRDShaderFileGDExtensionIternalConstructor(reference RDShaderFile) RefRDShaderFile {
	return newTypedRefGDExtensionIternalConstructor[RDShaderFile](reference)
}

var _ RefRDShaderSPIRV = &RefRDShaderSPIRVImpl{}
var _ Ref = &RefRDShaderSPIRVImpl{}

type RefRDShaderSPIRV interface {
	Ref
	TypedPtr() RDShaderSPIRV
}

type RefRDShaderSPIRVImpl TypedRef[RDShaderSPIRV]

func (r *RefRDShaderSPIRVImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDShaderSPIRV])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDShaderSPIRVImpl) TypedPtr() RDShaderSPIRV {
	rg := (*TypedRef[RDShaderSPIRV])(r)
	return rg.TypedPtr()
}

func (r *RefRDShaderSPIRVImpl) Ref(from Ref) {
	rg := (*TypedRef[RDShaderSPIRV])(r)
	rg.Ref(from)
}

func (r *RefRDShaderSPIRVImpl) TypedRef(from *RefRDShaderSPIRVImpl) {
	rg := (*TypedRef[RDShaderSPIRV])(r)
	t := (*TypedRef[RDShaderSPIRV])(from)
	rg.TypedRef((*TypedRef[RDShaderSPIRV])(t))
}

func (r *RefRDShaderSPIRVImpl) Unref() {
	rg := (*TypedRef[RDShaderSPIRV])(r)
	rg.Unref()
}

func (r *RefRDShaderSPIRVImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDShaderSPIRV(reference RDShaderSPIRV) RefRDShaderSPIRV {
	return (RefRDShaderSPIRV)(NewTypedRef[RDShaderSPIRV](reference))
}

func newRefRDShaderSPIRVAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDShaderSPIRV](reference.(RDShaderSPIRV)))
}

func newRefRDShaderSPIRVGDExtensionIternalConstructor(reference RDShaderSPIRV) RefRDShaderSPIRV {
	return newTypedRefGDExtensionIternalConstructor[RDShaderSPIRV](reference)
}

var _ RefRDShaderSource = &RefRDShaderSourceImpl{}
var _ Ref = &RefRDShaderSourceImpl{}

type RefRDShaderSource interface {
	Ref
	TypedPtr() RDShaderSource
}

type RefRDShaderSourceImpl TypedRef[RDShaderSource]

func (r *RefRDShaderSourceImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDShaderSource])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDShaderSourceImpl) TypedPtr() RDShaderSource {
	rg := (*TypedRef[RDShaderSource])(r)
	return rg.TypedPtr()
}

func (r *RefRDShaderSourceImpl) Ref(from Ref) {
	rg := (*TypedRef[RDShaderSource])(r)
	rg.Ref(from)
}

func (r *RefRDShaderSourceImpl) TypedRef(from *RefRDShaderSourceImpl) {
	rg := (*TypedRef[RDShaderSource])(r)
	t := (*TypedRef[RDShaderSource])(from)
	rg.TypedRef((*TypedRef[RDShaderSource])(t))
}

func (r *RefRDShaderSourceImpl) Unref() {
	rg := (*TypedRef[RDShaderSource])(r)
	rg.Unref()
}

func (r *RefRDShaderSourceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDShaderSource(reference RDShaderSource) RefRDShaderSource {
	return (RefRDShaderSource)(NewTypedRef[RDShaderSource](reference))
}

func newRefRDShaderSourceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDShaderSource](reference.(RDShaderSource)))
}

func newRefRDShaderSourceGDExtensionIternalConstructor(reference RDShaderSource) RefRDShaderSource {
	return newTypedRefGDExtensionIternalConstructor[RDShaderSource](reference)
}

var _ RefRDTextureFormat = &RefRDTextureFormatImpl{}
var _ Ref = &RefRDTextureFormatImpl{}

type RefRDTextureFormat interface {
	Ref
	TypedPtr() RDTextureFormat
}

type RefRDTextureFormatImpl TypedRef[RDTextureFormat]

func (r *RefRDTextureFormatImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDTextureFormat])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDTextureFormatImpl) TypedPtr() RDTextureFormat {
	rg := (*TypedRef[RDTextureFormat])(r)
	return rg.TypedPtr()
}

func (r *RefRDTextureFormatImpl) Ref(from Ref) {
	rg := (*TypedRef[RDTextureFormat])(r)
	rg.Ref(from)
}

func (r *RefRDTextureFormatImpl) TypedRef(from *RefRDTextureFormatImpl) {
	rg := (*TypedRef[RDTextureFormat])(r)
	t := (*TypedRef[RDTextureFormat])(from)
	rg.TypedRef((*TypedRef[RDTextureFormat])(t))
}

func (r *RefRDTextureFormatImpl) Unref() {
	rg := (*TypedRef[RDTextureFormat])(r)
	rg.Unref()
}

func (r *RefRDTextureFormatImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDTextureFormat(reference RDTextureFormat) RefRDTextureFormat {
	return (RefRDTextureFormat)(NewTypedRef[RDTextureFormat](reference))
}

func newRefRDTextureFormatAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDTextureFormat](reference.(RDTextureFormat)))
}

func newRefRDTextureFormatGDExtensionIternalConstructor(reference RDTextureFormat) RefRDTextureFormat {
	return newTypedRefGDExtensionIternalConstructor[RDTextureFormat](reference)
}

var _ RefRDTextureView = &RefRDTextureViewImpl{}
var _ Ref = &RefRDTextureViewImpl{}

type RefRDTextureView interface {
	Ref
	TypedPtr() RDTextureView
}

type RefRDTextureViewImpl TypedRef[RDTextureView]

func (r *RefRDTextureViewImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDTextureView])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDTextureViewImpl) TypedPtr() RDTextureView {
	rg := (*TypedRef[RDTextureView])(r)
	return rg.TypedPtr()
}

func (r *RefRDTextureViewImpl) Ref(from Ref) {
	rg := (*TypedRef[RDTextureView])(r)
	rg.Ref(from)
}

func (r *RefRDTextureViewImpl) TypedRef(from *RefRDTextureViewImpl) {
	rg := (*TypedRef[RDTextureView])(r)
	t := (*TypedRef[RDTextureView])(from)
	rg.TypedRef((*TypedRef[RDTextureView])(t))
}

func (r *RefRDTextureViewImpl) Unref() {
	rg := (*TypedRef[RDTextureView])(r)
	rg.Unref()
}

func (r *RefRDTextureViewImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDTextureView(reference RDTextureView) RefRDTextureView {
	return (RefRDTextureView)(NewTypedRef[RDTextureView](reference))
}

func newRefRDTextureViewAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDTextureView](reference.(RDTextureView)))
}

func newRefRDTextureViewGDExtensionIternalConstructor(reference RDTextureView) RefRDTextureView {
	return newTypedRefGDExtensionIternalConstructor[RDTextureView](reference)
}

var _ RefRDUniform = &RefRDUniformImpl{}
var _ Ref = &RefRDUniformImpl{}

type RefRDUniform interface {
	Ref
	TypedPtr() RDUniform
}

type RefRDUniformImpl TypedRef[RDUniform]

func (r *RefRDUniformImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDUniform])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDUniformImpl) TypedPtr() RDUniform {
	rg := (*TypedRef[RDUniform])(r)
	return rg.TypedPtr()
}

func (r *RefRDUniformImpl) Ref(from Ref) {
	rg := (*TypedRef[RDUniform])(r)
	rg.Ref(from)
}

func (r *RefRDUniformImpl) TypedRef(from *RefRDUniformImpl) {
	rg := (*TypedRef[RDUniform])(r)
	t := (*TypedRef[RDUniform])(from)
	rg.TypedRef((*TypedRef[RDUniform])(t))
}

func (r *RefRDUniformImpl) Unref() {
	rg := (*TypedRef[RDUniform])(r)
	rg.Unref()
}

func (r *RefRDUniformImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDUniform(reference RDUniform) RefRDUniform {
	return (RefRDUniform)(NewTypedRef[RDUniform](reference))
}

func newRefRDUniformAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDUniform](reference.(RDUniform)))
}

func newRefRDUniformGDExtensionIternalConstructor(reference RDUniform) RefRDUniform {
	return newTypedRefGDExtensionIternalConstructor[RDUniform](reference)
}

var _ RefRDVertexAttribute = &RefRDVertexAttributeImpl{}
var _ Ref = &RefRDVertexAttributeImpl{}

type RefRDVertexAttribute interface {
	Ref
	TypedPtr() RDVertexAttribute
}

type RefRDVertexAttributeImpl TypedRef[RDVertexAttribute]

func (r *RefRDVertexAttributeImpl) Ptr() RefCounted {
	rg := (*TypedRef[RDVertexAttribute])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRDVertexAttributeImpl) TypedPtr() RDVertexAttribute {
	rg := (*TypedRef[RDVertexAttribute])(r)
	return rg.TypedPtr()
}

func (r *RefRDVertexAttributeImpl) Ref(from Ref) {
	rg := (*TypedRef[RDVertexAttribute])(r)
	rg.Ref(from)
}

func (r *RefRDVertexAttributeImpl) TypedRef(from *RefRDVertexAttributeImpl) {
	rg := (*TypedRef[RDVertexAttribute])(r)
	t := (*TypedRef[RDVertexAttribute])(from)
	rg.TypedRef((*TypedRef[RDVertexAttribute])(t))
}

func (r *RefRDVertexAttributeImpl) Unref() {
	rg := (*TypedRef[RDVertexAttribute])(r)
	rg.Unref()
}

func (r *RefRDVertexAttributeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRDVertexAttribute(reference RDVertexAttribute) RefRDVertexAttribute {
	return (RefRDVertexAttribute)(NewTypedRef[RDVertexAttribute](reference))
}

func newRefRDVertexAttributeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RDVertexAttribute](reference.(RDVertexAttribute)))
}

func newRefRDVertexAttributeGDExtensionIternalConstructor(reference RDVertexAttribute) RefRDVertexAttribute {
	return newTypedRefGDExtensionIternalConstructor[RDVertexAttribute](reference)
}

var _ RefRandomNumberGenerator = &RefRandomNumberGeneratorImpl{}
var _ Ref = &RefRandomNumberGeneratorImpl{}

type RefRandomNumberGenerator interface {
	Ref
	TypedPtr() RandomNumberGenerator
}

type RefRandomNumberGeneratorImpl TypedRef[RandomNumberGenerator]

func (r *RefRandomNumberGeneratorImpl) Ptr() RefCounted {
	rg := (*TypedRef[RandomNumberGenerator])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRandomNumberGeneratorImpl) TypedPtr() RandomNumberGenerator {
	rg := (*TypedRef[RandomNumberGenerator])(r)
	return rg.TypedPtr()
}

func (r *RefRandomNumberGeneratorImpl) Ref(from Ref) {
	rg := (*TypedRef[RandomNumberGenerator])(r)
	rg.Ref(from)
}

func (r *RefRandomNumberGeneratorImpl) TypedRef(from *RefRandomNumberGeneratorImpl) {
	rg := (*TypedRef[RandomNumberGenerator])(r)
	t := (*TypedRef[RandomNumberGenerator])(from)
	rg.TypedRef((*TypedRef[RandomNumberGenerator])(t))
}

func (r *RefRandomNumberGeneratorImpl) Unref() {
	rg := (*TypedRef[RandomNumberGenerator])(r)
	rg.Unref()
}

func (r *RefRandomNumberGeneratorImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRandomNumberGenerator(reference RandomNumberGenerator) RefRandomNumberGenerator {
	return (RefRandomNumberGenerator)(NewTypedRef[RandomNumberGenerator](reference))
}

func newRefRandomNumberGeneratorAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RandomNumberGenerator](reference.(RandomNumberGenerator)))
}

func newRefRandomNumberGeneratorGDExtensionIternalConstructor(reference RandomNumberGenerator) RefRandomNumberGenerator {
	return newTypedRefGDExtensionIternalConstructor[RandomNumberGenerator](reference)
}

var _ RefRectangleShape2D = &RefRectangleShape2DImpl{}
var _ Ref = &RefRectangleShape2DImpl{}

type RefRectangleShape2D interface {
	Ref
	TypedPtr() RectangleShape2D
}

type RefRectangleShape2DImpl TypedRef[RectangleShape2D]

func (r *RefRectangleShape2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[RectangleShape2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRectangleShape2DImpl) TypedPtr() RectangleShape2D {
	rg := (*TypedRef[RectangleShape2D])(r)
	return rg.TypedPtr()
}

func (r *RefRectangleShape2DImpl) Ref(from Ref) {
	rg := (*TypedRef[RectangleShape2D])(r)
	rg.Ref(from)
}

func (r *RefRectangleShape2DImpl) TypedRef(from *RefRectangleShape2DImpl) {
	rg := (*TypedRef[RectangleShape2D])(r)
	t := (*TypedRef[RectangleShape2D])(from)
	rg.TypedRef((*TypedRef[RectangleShape2D])(t))
}

func (r *RefRectangleShape2DImpl) Unref() {
	rg := (*TypedRef[RectangleShape2D])(r)
	rg.Unref()
}

func (r *RefRectangleShape2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRectangleShape2D(reference RectangleShape2D) RefRectangleShape2D {
	return (RefRectangleShape2D)(NewTypedRef[RectangleShape2D](reference))
}

func newRefRectangleShape2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RectangleShape2D](reference.(RectangleShape2D)))
}

func newRefRectangleShape2DGDExtensionIternalConstructor(reference RectangleShape2D) RefRectangleShape2D {
	return newTypedRefGDExtensionIternalConstructor[RectangleShape2D](reference)
}

var _ RefRefCounted = &RefRefCountedImpl{}
var _ Ref = &RefRefCountedImpl{}

type RefRefCounted interface {
	Ref
	TypedPtr() RefCounted
}

type RefRefCountedImpl TypedRef[RefCounted]

func (r *RefRefCountedImpl) Ptr() RefCounted {
	rg := (*TypedRef[RefCounted])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRefCountedImpl) TypedPtr() RefCounted {
	rg := (*TypedRef[RefCounted])(r)
	return rg.TypedPtr()
}

func (r *RefRefCountedImpl) Ref(from Ref) {
	rg := (*TypedRef[RefCounted])(r)
	rg.Ref(from)
}

func (r *RefRefCountedImpl) TypedRef(from *RefRefCountedImpl) {
	rg := (*TypedRef[RefCounted])(r)
	t := (*TypedRef[RefCounted])(from)
	rg.TypedRef((*TypedRef[RefCounted])(t))
}

func (r *RefRefCountedImpl) Unref() {
	rg := (*TypedRef[RefCounted])(r)
	rg.Unref()
}

func (r *RefRefCountedImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRefCounted(reference RefCounted) RefRefCounted {
	return (RefRefCounted)(NewTypedRef[RefCounted](reference))
}

func newRefRefCountedAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RefCounted](reference.(RefCounted)))
}

func newRefRefCountedGDExtensionIternalConstructor(reference RefCounted) RefRefCounted {
	return newTypedRefGDExtensionIternalConstructor[RefCounted](reference)
}

var _ RefRegEx = &RefRegExImpl{}
var _ Ref = &RefRegExImpl{}

type RefRegEx interface {
	Ref
	TypedPtr() RegEx
}

type RefRegExImpl TypedRef[RegEx]

func (r *RefRegExImpl) Ptr() RefCounted {
	rg := (*TypedRef[RegEx])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRegExImpl) TypedPtr() RegEx {
	rg := (*TypedRef[RegEx])(r)
	return rg.TypedPtr()
}

func (r *RefRegExImpl) Ref(from Ref) {
	rg := (*TypedRef[RegEx])(r)
	rg.Ref(from)
}

func (r *RefRegExImpl) TypedRef(from *RefRegExImpl) {
	rg := (*TypedRef[RegEx])(r)
	t := (*TypedRef[RegEx])(from)
	rg.TypedRef((*TypedRef[RegEx])(t))
}

func (r *RefRegExImpl) Unref() {
	rg := (*TypedRef[RegEx])(r)
	rg.Unref()
}

func (r *RefRegExImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRegEx(reference RegEx) RefRegEx {
	return (RefRegEx)(NewTypedRef[RegEx](reference))
}

func newRefRegExAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RegEx](reference.(RegEx)))
}

func newRefRegExGDExtensionIternalConstructor(reference RegEx) RefRegEx {
	return newTypedRefGDExtensionIternalConstructor[RegEx](reference)
}

var _ RefRegExMatch = &RefRegExMatchImpl{}
var _ Ref = &RefRegExMatchImpl{}

type RefRegExMatch interface {
	Ref
	TypedPtr() RegExMatch
}

type RefRegExMatchImpl TypedRef[RegExMatch]

func (r *RefRegExMatchImpl) Ptr() RefCounted {
	rg := (*TypedRef[RegExMatch])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRegExMatchImpl) TypedPtr() RegExMatch {
	rg := (*TypedRef[RegExMatch])(r)
	return rg.TypedPtr()
}

func (r *RefRegExMatchImpl) Ref(from Ref) {
	rg := (*TypedRef[RegExMatch])(r)
	rg.Ref(from)
}

func (r *RefRegExMatchImpl) TypedRef(from *RefRegExMatchImpl) {
	rg := (*TypedRef[RegExMatch])(r)
	t := (*TypedRef[RegExMatch])(from)
	rg.TypedRef((*TypedRef[RegExMatch])(t))
}

func (r *RefRegExMatchImpl) Unref() {
	rg := (*TypedRef[RegExMatch])(r)
	rg.Unref()
}

func (r *RefRegExMatchImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRegExMatch(reference RegExMatch) RefRegExMatch {
	return (RefRegExMatch)(NewTypedRef[RegExMatch](reference))
}

func newRefRegExMatchAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RegExMatch](reference.(RegExMatch)))
}

func newRefRegExMatchGDExtensionIternalConstructor(reference RegExMatch) RefRegExMatch {
	return newTypedRefGDExtensionIternalConstructor[RegExMatch](reference)
}

var _ RefRenderSceneBuffers = &RefRenderSceneBuffersImpl{}
var _ Ref = &RefRenderSceneBuffersImpl{}

type RefRenderSceneBuffers interface {
	Ref
	TypedPtr() RenderSceneBuffers
}

type RefRenderSceneBuffersImpl TypedRef[RenderSceneBuffers]

func (r *RefRenderSceneBuffersImpl) Ptr() RefCounted {
	rg := (*TypedRef[RenderSceneBuffers])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRenderSceneBuffersImpl) TypedPtr() RenderSceneBuffers {
	rg := (*TypedRef[RenderSceneBuffers])(r)
	return rg.TypedPtr()
}

func (r *RefRenderSceneBuffersImpl) Ref(from Ref) {
	rg := (*TypedRef[RenderSceneBuffers])(r)
	rg.Ref(from)
}

func (r *RefRenderSceneBuffersImpl) TypedRef(from *RefRenderSceneBuffersImpl) {
	rg := (*TypedRef[RenderSceneBuffers])(r)
	t := (*TypedRef[RenderSceneBuffers])(from)
	rg.TypedRef((*TypedRef[RenderSceneBuffers])(t))
}

func (r *RefRenderSceneBuffersImpl) Unref() {
	rg := (*TypedRef[RenderSceneBuffers])(r)
	rg.Unref()
}

func (r *RefRenderSceneBuffersImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRenderSceneBuffers(reference RenderSceneBuffers) RefRenderSceneBuffers {
	return (RefRenderSceneBuffers)(NewTypedRef[RenderSceneBuffers](reference))
}

func newRefRenderSceneBuffersAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RenderSceneBuffers](reference.(RenderSceneBuffers)))
}

func newRefRenderSceneBuffersGDExtensionIternalConstructor(reference RenderSceneBuffers) RefRenderSceneBuffers {
	return newTypedRefGDExtensionIternalConstructor[RenderSceneBuffers](reference)
}

var _ RefRenderSceneBuffersConfiguration = &RefRenderSceneBuffersConfigurationImpl{}
var _ Ref = &RefRenderSceneBuffersConfigurationImpl{}

type RefRenderSceneBuffersConfiguration interface {
	Ref
	TypedPtr() RenderSceneBuffersConfiguration
}

type RefRenderSceneBuffersConfigurationImpl TypedRef[RenderSceneBuffersConfiguration]

func (r *RefRenderSceneBuffersConfigurationImpl) Ptr() RefCounted {
	rg := (*TypedRef[RenderSceneBuffersConfiguration])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRenderSceneBuffersConfigurationImpl) TypedPtr() RenderSceneBuffersConfiguration {
	rg := (*TypedRef[RenderSceneBuffersConfiguration])(r)
	return rg.TypedPtr()
}

func (r *RefRenderSceneBuffersConfigurationImpl) Ref(from Ref) {
	rg := (*TypedRef[RenderSceneBuffersConfiguration])(r)
	rg.Ref(from)
}

func (r *RefRenderSceneBuffersConfigurationImpl) TypedRef(from *RefRenderSceneBuffersConfigurationImpl) {
	rg := (*TypedRef[RenderSceneBuffersConfiguration])(r)
	t := (*TypedRef[RenderSceneBuffersConfiguration])(from)
	rg.TypedRef((*TypedRef[RenderSceneBuffersConfiguration])(t))
}

func (r *RefRenderSceneBuffersConfigurationImpl) Unref() {
	rg := (*TypedRef[RenderSceneBuffersConfiguration])(r)
	rg.Unref()
}

func (r *RefRenderSceneBuffersConfigurationImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRenderSceneBuffersConfiguration(reference RenderSceneBuffersConfiguration) RefRenderSceneBuffersConfiguration {
	return (RefRenderSceneBuffersConfiguration)(NewTypedRef[RenderSceneBuffersConfiguration](reference))
}

func newRefRenderSceneBuffersConfigurationAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RenderSceneBuffersConfiguration](reference.(RenderSceneBuffersConfiguration)))
}

func newRefRenderSceneBuffersConfigurationGDExtensionIternalConstructor(reference RenderSceneBuffersConfiguration) RefRenderSceneBuffersConfiguration {
	return newTypedRefGDExtensionIternalConstructor[RenderSceneBuffersConfiguration](reference)
}

var _ RefRenderSceneBuffersExtension = &RefRenderSceneBuffersExtensionImpl{}
var _ Ref = &RefRenderSceneBuffersExtensionImpl{}

type RefRenderSceneBuffersExtension interface {
	Ref
	TypedPtr() RenderSceneBuffersExtension
}

type RefRenderSceneBuffersExtensionImpl TypedRef[RenderSceneBuffersExtension]

func (r *RefRenderSceneBuffersExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[RenderSceneBuffersExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRenderSceneBuffersExtensionImpl) TypedPtr() RenderSceneBuffersExtension {
	rg := (*TypedRef[RenderSceneBuffersExtension])(r)
	return rg.TypedPtr()
}

func (r *RefRenderSceneBuffersExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[RenderSceneBuffersExtension])(r)
	rg.Ref(from)
}

func (r *RefRenderSceneBuffersExtensionImpl) TypedRef(from *RefRenderSceneBuffersExtensionImpl) {
	rg := (*TypedRef[RenderSceneBuffersExtension])(r)
	t := (*TypedRef[RenderSceneBuffersExtension])(from)
	rg.TypedRef((*TypedRef[RenderSceneBuffersExtension])(t))
}

func (r *RefRenderSceneBuffersExtensionImpl) Unref() {
	rg := (*TypedRef[RenderSceneBuffersExtension])(r)
	rg.Unref()
}

func (r *RefRenderSceneBuffersExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRenderSceneBuffersExtension(reference RenderSceneBuffersExtension) RefRenderSceneBuffersExtension {
	return (RefRenderSceneBuffersExtension)(NewTypedRef[RenderSceneBuffersExtension](reference))
}

func newRefRenderSceneBuffersExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RenderSceneBuffersExtension](reference.(RenderSceneBuffersExtension)))
}

func newRefRenderSceneBuffersExtensionGDExtensionIternalConstructor(reference RenderSceneBuffersExtension) RefRenderSceneBuffersExtension {
	return newTypedRefGDExtensionIternalConstructor[RenderSceneBuffersExtension](reference)
}

var _ RefRenderSceneBuffersRD = &RefRenderSceneBuffersRDImpl{}
var _ Ref = &RefRenderSceneBuffersRDImpl{}

type RefRenderSceneBuffersRD interface {
	Ref
	TypedPtr() RenderSceneBuffersRD
}

type RefRenderSceneBuffersRDImpl TypedRef[RenderSceneBuffersRD]

func (r *RefRenderSceneBuffersRDImpl) Ptr() RefCounted {
	rg := (*TypedRef[RenderSceneBuffersRD])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRenderSceneBuffersRDImpl) TypedPtr() RenderSceneBuffersRD {
	rg := (*TypedRef[RenderSceneBuffersRD])(r)
	return rg.TypedPtr()
}

func (r *RefRenderSceneBuffersRDImpl) Ref(from Ref) {
	rg := (*TypedRef[RenderSceneBuffersRD])(r)
	rg.Ref(from)
}

func (r *RefRenderSceneBuffersRDImpl) TypedRef(from *RefRenderSceneBuffersRDImpl) {
	rg := (*TypedRef[RenderSceneBuffersRD])(r)
	t := (*TypedRef[RenderSceneBuffersRD])(from)
	rg.TypedRef((*TypedRef[RenderSceneBuffersRD])(t))
}

func (r *RefRenderSceneBuffersRDImpl) Unref() {
	rg := (*TypedRef[RenderSceneBuffersRD])(r)
	rg.Unref()
}

func (r *RefRenderSceneBuffersRDImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRenderSceneBuffersRD(reference RenderSceneBuffersRD) RefRenderSceneBuffersRD {
	return (RefRenderSceneBuffersRD)(NewTypedRef[RenderSceneBuffersRD](reference))
}

func newRefRenderSceneBuffersRDAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RenderSceneBuffersRD](reference.(RenderSceneBuffersRD)))
}

func newRefRenderSceneBuffersRDGDExtensionIternalConstructor(reference RenderSceneBuffersRD) RefRenderSceneBuffersRD {
	return newTypedRefGDExtensionIternalConstructor[RenderSceneBuffersRD](reference)
}

var _ RefResource = &RefResourceImpl{}
var _ Ref = &RefResourceImpl{}

type RefResource interface {
	Ref
	TypedPtr() Resource
}

type RefResourceImpl TypedRef[Resource]

func (r *RefResourceImpl) Ptr() RefCounted {
	rg := (*TypedRef[Resource])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImpl) TypedPtr() Resource {
	rg := (*TypedRef[Resource])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImpl) Ref(from Ref) {
	rg := (*TypedRef[Resource])(r)
	rg.Ref(from)
}

func (r *RefResourceImpl) TypedRef(from *RefResourceImpl) {
	rg := (*TypedRef[Resource])(r)
	t := (*TypedRef[Resource])(from)
	rg.TypedRef((*TypedRef[Resource])(t))
}

func (r *RefResourceImpl) Unref() {
	rg := (*TypedRef[Resource])(r)
	rg.Unref()
}

func (r *RefResourceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResource(reference Resource) RefResource {
	return (RefResource)(NewTypedRef[Resource](reference))
}

func newRefResourceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Resource](reference.(Resource)))
}

func newRefResourceGDExtensionIternalConstructor(reference Resource) RefResource {
	return newTypedRefGDExtensionIternalConstructor[Resource](reference)
}

var _ RefResourceFormatLoader = &RefResourceFormatLoaderImpl{}
var _ Ref = &RefResourceFormatLoaderImpl{}

type RefResourceFormatLoader interface {
	Ref
	TypedPtr() ResourceFormatLoader
}

type RefResourceFormatLoaderImpl TypedRef[ResourceFormatLoader]

func (r *RefResourceFormatLoaderImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceFormatLoader])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceFormatLoaderImpl) TypedPtr() ResourceFormatLoader {
	rg := (*TypedRef[ResourceFormatLoader])(r)
	return rg.TypedPtr()
}

func (r *RefResourceFormatLoaderImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceFormatLoader])(r)
	rg.Ref(from)
}

func (r *RefResourceFormatLoaderImpl) TypedRef(from *RefResourceFormatLoaderImpl) {
	rg := (*TypedRef[ResourceFormatLoader])(r)
	t := (*TypedRef[ResourceFormatLoader])(from)
	rg.TypedRef((*TypedRef[ResourceFormatLoader])(t))
}

func (r *RefResourceFormatLoaderImpl) Unref() {
	rg := (*TypedRef[ResourceFormatLoader])(r)
	rg.Unref()
}

func (r *RefResourceFormatLoaderImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceFormatLoader(reference ResourceFormatLoader) RefResourceFormatLoader {
	return (RefResourceFormatLoader)(NewTypedRef[ResourceFormatLoader](reference))
}

func newRefResourceFormatLoaderAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceFormatLoader](reference.(ResourceFormatLoader)))
}

func newRefResourceFormatLoaderGDExtensionIternalConstructor(reference ResourceFormatLoader) RefResourceFormatLoader {
	return newTypedRefGDExtensionIternalConstructor[ResourceFormatLoader](reference)
}

var _ RefResourceFormatSaver = &RefResourceFormatSaverImpl{}
var _ Ref = &RefResourceFormatSaverImpl{}

type RefResourceFormatSaver interface {
	Ref
	TypedPtr() ResourceFormatSaver
}

type RefResourceFormatSaverImpl TypedRef[ResourceFormatSaver]

func (r *RefResourceFormatSaverImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceFormatSaver])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceFormatSaverImpl) TypedPtr() ResourceFormatSaver {
	rg := (*TypedRef[ResourceFormatSaver])(r)
	return rg.TypedPtr()
}

func (r *RefResourceFormatSaverImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceFormatSaver])(r)
	rg.Ref(from)
}

func (r *RefResourceFormatSaverImpl) TypedRef(from *RefResourceFormatSaverImpl) {
	rg := (*TypedRef[ResourceFormatSaver])(r)
	t := (*TypedRef[ResourceFormatSaver])(from)
	rg.TypedRef((*TypedRef[ResourceFormatSaver])(t))
}

func (r *RefResourceFormatSaverImpl) Unref() {
	rg := (*TypedRef[ResourceFormatSaver])(r)
	rg.Unref()
}

func (r *RefResourceFormatSaverImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceFormatSaver(reference ResourceFormatSaver) RefResourceFormatSaver {
	return (RefResourceFormatSaver)(NewTypedRef[ResourceFormatSaver](reference))
}

func newRefResourceFormatSaverAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceFormatSaver](reference.(ResourceFormatSaver)))
}

func newRefResourceFormatSaverGDExtensionIternalConstructor(reference ResourceFormatSaver) RefResourceFormatSaver {
	return newTypedRefGDExtensionIternalConstructor[ResourceFormatSaver](reference)
}

var _ RefResourceImporter = &RefResourceImporterImpl{}
var _ Ref = &RefResourceImporterImpl{}

type RefResourceImporter interface {
	Ref
	TypedPtr() ResourceImporter
}

type RefResourceImporterImpl TypedRef[ResourceImporter]

func (r *RefResourceImporterImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterImpl) TypedPtr() ResourceImporter {
	rg := (*TypedRef[ResourceImporter])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporter])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterImpl) TypedRef(from *RefResourceImporterImpl) {
	rg := (*TypedRef[ResourceImporter])(r)
	t := (*TypedRef[ResourceImporter])(from)
	rg.TypedRef((*TypedRef[ResourceImporter])(t))
}

func (r *RefResourceImporterImpl) Unref() {
	rg := (*TypedRef[ResourceImporter])(r)
	rg.Unref()
}

func (r *RefResourceImporterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporter(reference ResourceImporter) RefResourceImporter {
	return (RefResourceImporter)(NewTypedRef[ResourceImporter](reference))
}

func newRefResourceImporterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporter](reference.(ResourceImporter)))
}

func newRefResourceImporterGDExtensionIternalConstructor(reference ResourceImporter) RefResourceImporter {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporter](reference)
}

var _ RefResourceImporterBMFont = &RefResourceImporterBMFontImpl{}
var _ Ref = &RefResourceImporterBMFontImpl{}

type RefResourceImporterBMFont interface {
	Ref
	TypedPtr() ResourceImporterBMFont
}

type RefResourceImporterBMFontImpl TypedRef[ResourceImporterBMFont]

func (r *RefResourceImporterBMFontImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterBMFont])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterBMFontImpl) TypedPtr() ResourceImporterBMFont {
	rg := (*TypedRef[ResourceImporterBMFont])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterBMFontImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterBMFont])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterBMFontImpl) TypedRef(from *RefResourceImporterBMFontImpl) {
	rg := (*TypedRef[ResourceImporterBMFont])(r)
	t := (*TypedRef[ResourceImporterBMFont])(from)
	rg.TypedRef((*TypedRef[ResourceImporterBMFont])(t))
}

func (r *RefResourceImporterBMFontImpl) Unref() {
	rg := (*TypedRef[ResourceImporterBMFont])(r)
	rg.Unref()
}

func (r *RefResourceImporterBMFontImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterBMFont(reference ResourceImporterBMFont) RefResourceImporterBMFont {
	return (RefResourceImporterBMFont)(NewTypedRef[ResourceImporterBMFont](reference))
}

func newRefResourceImporterBMFontAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterBMFont](reference.(ResourceImporterBMFont)))
}

func newRefResourceImporterBMFontGDExtensionIternalConstructor(reference ResourceImporterBMFont) RefResourceImporterBMFont {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterBMFont](reference)
}

var _ RefResourceImporterBitMap = &RefResourceImporterBitMapImpl{}
var _ Ref = &RefResourceImporterBitMapImpl{}

type RefResourceImporterBitMap interface {
	Ref
	TypedPtr() ResourceImporterBitMap
}

type RefResourceImporterBitMapImpl TypedRef[ResourceImporterBitMap]

func (r *RefResourceImporterBitMapImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterBitMap])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterBitMapImpl) TypedPtr() ResourceImporterBitMap {
	rg := (*TypedRef[ResourceImporterBitMap])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterBitMapImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterBitMap])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterBitMapImpl) TypedRef(from *RefResourceImporterBitMapImpl) {
	rg := (*TypedRef[ResourceImporterBitMap])(r)
	t := (*TypedRef[ResourceImporterBitMap])(from)
	rg.TypedRef((*TypedRef[ResourceImporterBitMap])(t))
}

func (r *RefResourceImporterBitMapImpl) Unref() {
	rg := (*TypedRef[ResourceImporterBitMap])(r)
	rg.Unref()
}

func (r *RefResourceImporterBitMapImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterBitMap(reference ResourceImporterBitMap) RefResourceImporterBitMap {
	return (RefResourceImporterBitMap)(NewTypedRef[ResourceImporterBitMap](reference))
}

func newRefResourceImporterBitMapAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterBitMap](reference.(ResourceImporterBitMap)))
}

func newRefResourceImporterBitMapGDExtensionIternalConstructor(reference ResourceImporterBitMap) RefResourceImporterBitMap {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterBitMap](reference)
}

var _ RefResourceImporterCSVTranslation = &RefResourceImporterCSVTranslationImpl{}
var _ Ref = &RefResourceImporterCSVTranslationImpl{}

type RefResourceImporterCSVTranslation interface {
	Ref
	TypedPtr() ResourceImporterCSVTranslation
}

type RefResourceImporterCSVTranslationImpl TypedRef[ResourceImporterCSVTranslation]

func (r *RefResourceImporterCSVTranslationImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterCSVTranslation])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterCSVTranslationImpl) TypedPtr() ResourceImporterCSVTranslation {
	rg := (*TypedRef[ResourceImporterCSVTranslation])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterCSVTranslationImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterCSVTranslation])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterCSVTranslationImpl) TypedRef(from *RefResourceImporterCSVTranslationImpl) {
	rg := (*TypedRef[ResourceImporterCSVTranslation])(r)
	t := (*TypedRef[ResourceImporterCSVTranslation])(from)
	rg.TypedRef((*TypedRef[ResourceImporterCSVTranslation])(t))
}

func (r *RefResourceImporterCSVTranslationImpl) Unref() {
	rg := (*TypedRef[ResourceImporterCSVTranslation])(r)
	rg.Unref()
}

func (r *RefResourceImporterCSVTranslationImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterCSVTranslation(reference ResourceImporterCSVTranslation) RefResourceImporterCSVTranslation {
	return (RefResourceImporterCSVTranslation)(NewTypedRef[ResourceImporterCSVTranslation](reference))
}

func newRefResourceImporterCSVTranslationAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterCSVTranslation](reference.(ResourceImporterCSVTranslation)))
}

func newRefResourceImporterCSVTranslationGDExtensionIternalConstructor(reference ResourceImporterCSVTranslation) RefResourceImporterCSVTranslation {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterCSVTranslation](reference)
}

var _ RefResourceImporterDynamicFont = &RefResourceImporterDynamicFontImpl{}
var _ Ref = &RefResourceImporterDynamicFontImpl{}

type RefResourceImporterDynamicFont interface {
	Ref
	TypedPtr() ResourceImporterDynamicFont
}

type RefResourceImporterDynamicFontImpl TypedRef[ResourceImporterDynamicFont]

func (r *RefResourceImporterDynamicFontImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterDynamicFont])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterDynamicFontImpl) TypedPtr() ResourceImporterDynamicFont {
	rg := (*TypedRef[ResourceImporterDynamicFont])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterDynamicFontImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterDynamicFont])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterDynamicFontImpl) TypedRef(from *RefResourceImporterDynamicFontImpl) {
	rg := (*TypedRef[ResourceImporterDynamicFont])(r)
	t := (*TypedRef[ResourceImporterDynamicFont])(from)
	rg.TypedRef((*TypedRef[ResourceImporterDynamicFont])(t))
}

func (r *RefResourceImporterDynamicFontImpl) Unref() {
	rg := (*TypedRef[ResourceImporterDynamicFont])(r)
	rg.Unref()
}

func (r *RefResourceImporterDynamicFontImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterDynamicFont(reference ResourceImporterDynamicFont) RefResourceImporterDynamicFont {
	return (RefResourceImporterDynamicFont)(NewTypedRef[ResourceImporterDynamicFont](reference))
}

func newRefResourceImporterDynamicFontAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterDynamicFont](reference.(ResourceImporterDynamicFont)))
}

func newRefResourceImporterDynamicFontGDExtensionIternalConstructor(reference ResourceImporterDynamicFont) RefResourceImporterDynamicFont {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterDynamicFont](reference)
}

var _ RefResourceImporterImage = &RefResourceImporterImageImpl{}
var _ Ref = &RefResourceImporterImageImpl{}

type RefResourceImporterImage interface {
	Ref
	TypedPtr() ResourceImporterImage
}

type RefResourceImporterImageImpl TypedRef[ResourceImporterImage]

func (r *RefResourceImporterImageImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterImage])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterImageImpl) TypedPtr() ResourceImporterImage {
	rg := (*TypedRef[ResourceImporterImage])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterImageImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterImage])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterImageImpl) TypedRef(from *RefResourceImporterImageImpl) {
	rg := (*TypedRef[ResourceImporterImage])(r)
	t := (*TypedRef[ResourceImporterImage])(from)
	rg.TypedRef((*TypedRef[ResourceImporterImage])(t))
}

func (r *RefResourceImporterImageImpl) Unref() {
	rg := (*TypedRef[ResourceImporterImage])(r)
	rg.Unref()
}

func (r *RefResourceImporterImageImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterImage(reference ResourceImporterImage) RefResourceImporterImage {
	return (RefResourceImporterImage)(NewTypedRef[ResourceImporterImage](reference))
}

func newRefResourceImporterImageAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterImage](reference.(ResourceImporterImage)))
}

func newRefResourceImporterImageGDExtensionIternalConstructor(reference ResourceImporterImage) RefResourceImporterImage {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterImage](reference)
}

var _ RefResourceImporterImageFont = &RefResourceImporterImageFontImpl{}
var _ Ref = &RefResourceImporterImageFontImpl{}

type RefResourceImporterImageFont interface {
	Ref
	TypedPtr() ResourceImporterImageFont
}

type RefResourceImporterImageFontImpl TypedRef[ResourceImporterImageFont]

func (r *RefResourceImporterImageFontImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterImageFont])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterImageFontImpl) TypedPtr() ResourceImporterImageFont {
	rg := (*TypedRef[ResourceImporterImageFont])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterImageFontImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterImageFont])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterImageFontImpl) TypedRef(from *RefResourceImporterImageFontImpl) {
	rg := (*TypedRef[ResourceImporterImageFont])(r)
	t := (*TypedRef[ResourceImporterImageFont])(from)
	rg.TypedRef((*TypedRef[ResourceImporterImageFont])(t))
}

func (r *RefResourceImporterImageFontImpl) Unref() {
	rg := (*TypedRef[ResourceImporterImageFont])(r)
	rg.Unref()
}

func (r *RefResourceImporterImageFontImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterImageFont(reference ResourceImporterImageFont) RefResourceImporterImageFont {
	return (RefResourceImporterImageFont)(NewTypedRef[ResourceImporterImageFont](reference))
}

func newRefResourceImporterImageFontAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterImageFont](reference.(ResourceImporterImageFont)))
}

func newRefResourceImporterImageFontGDExtensionIternalConstructor(reference ResourceImporterImageFont) RefResourceImporterImageFont {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterImageFont](reference)
}

var _ RefResourceImporterLayeredTexture = &RefResourceImporterLayeredTextureImpl{}
var _ Ref = &RefResourceImporterLayeredTextureImpl{}

type RefResourceImporterLayeredTexture interface {
	Ref
	TypedPtr() ResourceImporterLayeredTexture
}

type RefResourceImporterLayeredTextureImpl TypedRef[ResourceImporterLayeredTexture]

func (r *RefResourceImporterLayeredTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterLayeredTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterLayeredTextureImpl) TypedPtr() ResourceImporterLayeredTexture {
	rg := (*TypedRef[ResourceImporterLayeredTexture])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterLayeredTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterLayeredTexture])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterLayeredTextureImpl) TypedRef(from *RefResourceImporterLayeredTextureImpl) {
	rg := (*TypedRef[ResourceImporterLayeredTexture])(r)
	t := (*TypedRef[ResourceImporterLayeredTexture])(from)
	rg.TypedRef((*TypedRef[ResourceImporterLayeredTexture])(t))
}

func (r *RefResourceImporterLayeredTextureImpl) Unref() {
	rg := (*TypedRef[ResourceImporterLayeredTexture])(r)
	rg.Unref()
}

func (r *RefResourceImporterLayeredTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterLayeredTexture(reference ResourceImporterLayeredTexture) RefResourceImporterLayeredTexture {
	return (RefResourceImporterLayeredTexture)(NewTypedRef[ResourceImporterLayeredTexture](reference))
}

func newRefResourceImporterLayeredTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterLayeredTexture](reference.(ResourceImporterLayeredTexture)))
}

func newRefResourceImporterLayeredTextureGDExtensionIternalConstructor(reference ResourceImporterLayeredTexture) RefResourceImporterLayeredTexture {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterLayeredTexture](reference)
}

var _ RefResourceImporterMP3 = &RefResourceImporterMP3Impl{}
var _ Ref = &RefResourceImporterMP3Impl{}

type RefResourceImporterMP3 interface {
	Ref
	TypedPtr() ResourceImporterMP3
}

type RefResourceImporterMP3Impl TypedRef[ResourceImporterMP3]

func (r *RefResourceImporterMP3Impl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterMP3])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterMP3Impl) TypedPtr() ResourceImporterMP3 {
	rg := (*TypedRef[ResourceImporterMP3])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterMP3Impl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterMP3])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterMP3Impl) TypedRef(from *RefResourceImporterMP3Impl) {
	rg := (*TypedRef[ResourceImporterMP3])(r)
	t := (*TypedRef[ResourceImporterMP3])(from)
	rg.TypedRef((*TypedRef[ResourceImporterMP3])(t))
}

func (r *RefResourceImporterMP3Impl) Unref() {
	rg := (*TypedRef[ResourceImporterMP3])(r)
	rg.Unref()
}

func (r *RefResourceImporterMP3Impl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterMP3(reference ResourceImporterMP3) RefResourceImporterMP3 {
	return (RefResourceImporterMP3)(NewTypedRef[ResourceImporterMP3](reference))
}

func newRefResourceImporterMP3AsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterMP3](reference.(ResourceImporterMP3)))
}

func newRefResourceImporterMP3GDExtensionIternalConstructor(reference ResourceImporterMP3) RefResourceImporterMP3 {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterMP3](reference)
}

var _ RefResourceImporterOBJ = &RefResourceImporterOBJImpl{}
var _ Ref = &RefResourceImporterOBJImpl{}

type RefResourceImporterOBJ interface {
	Ref
	TypedPtr() ResourceImporterOBJ
}

type RefResourceImporterOBJImpl TypedRef[ResourceImporterOBJ]

func (r *RefResourceImporterOBJImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterOBJ])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterOBJImpl) TypedPtr() ResourceImporterOBJ {
	rg := (*TypedRef[ResourceImporterOBJ])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterOBJImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterOBJ])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterOBJImpl) TypedRef(from *RefResourceImporterOBJImpl) {
	rg := (*TypedRef[ResourceImporterOBJ])(r)
	t := (*TypedRef[ResourceImporterOBJ])(from)
	rg.TypedRef((*TypedRef[ResourceImporterOBJ])(t))
}

func (r *RefResourceImporterOBJImpl) Unref() {
	rg := (*TypedRef[ResourceImporterOBJ])(r)
	rg.Unref()
}

func (r *RefResourceImporterOBJImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterOBJ(reference ResourceImporterOBJ) RefResourceImporterOBJ {
	return (RefResourceImporterOBJ)(NewTypedRef[ResourceImporterOBJ](reference))
}

func newRefResourceImporterOBJAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterOBJ](reference.(ResourceImporterOBJ)))
}

func newRefResourceImporterOBJGDExtensionIternalConstructor(reference ResourceImporterOBJ) RefResourceImporterOBJ {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterOBJ](reference)
}

var _ RefResourceImporterOggVorbis = &RefResourceImporterOggVorbisImpl{}
var _ Ref = &RefResourceImporterOggVorbisImpl{}

type RefResourceImporterOggVorbis interface {
	Ref
	TypedPtr() ResourceImporterOggVorbis
}

type RefResourceImporterOggVorbisImpl TypedRef[ResourceImporterOggVorbis]

func (r *RefResourceImporterOggVorbisImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterOggVorbis])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterOggVorbisImpl) TypedPtr() ResourceImporterOggVorbis {
	rg := (*TypedRef[ResourceImporterOggVorbis])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterOggVorbisImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterOggVorbis])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterOggVorbisImpl) TypedRef(from *RefResourceImporterOggVorbisImpl) {
	rg := (*TypedRef[ResourceImporterOggVorbis])(r)
	t := (*TypedRef[ResourceImporterOggVorbis])(from)
	rg.TypedRef((*TypedRef[ResourceImporterOggVorbis])(t))
}

func (r *RefResourceImporterOggVorbisImpl) Unref() {
	rg := (*TypedRef[ResourceImporterOggVorbis])(r)
	rg.Unref()
}

func (r *RefResourceImporterOggVorbisImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterOggVorbis(reference ResourceImporterOggVorbis) RefResourceImporterOggVorbis {
	return (RefResourceImporterOggVorbis)(NewTypedRef[ResourceImporterOggVorbis](reference))
}

func newRefResourceImporterOggVorbisAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterOggVorbis](reference.(ResourceImporterOggVorbis)))
}

func newRefResourceImporterOggVorbisGDExtensionIternalConstructor(reference ResourceImporterOggVorbis) RefResourceImporterOggVorbis {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterOggVorbis](reference)
}

var _ RefResourceImporterScene = &RefResourceImporterSceneImpl{}
var _ Ref = &RefResourceImporterSceneImpl{}

type RefResourceImporterScene interface {
	Ref
	TypedPtr() ResourceImporterScene
}

type RefResourceImporterSceneImpl TypedRef[ResourceImporterScene]

func (r *RefResourceImporterSceneImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterScene])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterSceneImpl) TypedPtr() ResourceImporterScene {
	rg := (*TypedRef[ResourceImporterScene])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterSceneImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterScene])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterSceneImpl) TypedRef(from *RefResourceImporterSceneImpl) {
	rg := (*TypedRef[ResourceImporterScene])(r)
	t := (*TypedRef[ResourceImporterScene])(from)
	rg.TypedRef((*TypedRef[ResourceImporterScene])(t))
}

func (r *RefResourceImporterSceneImpl) Unref() {
	rg := (*TypedRef[ResourceImporterScene])(r)
	rg.Unref()
}

func (r *RefResourceImporterSceneImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterScene(reference ResourceImporterScene) RefResourceImporterScene {
	return (RefResourceImporterScene)(NewTypedRef[ResourceImporterScene](reference))
}

func newRefResourceImporterSceneAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterScene](reference.(ResourceImporterScene)))
}

func newRefResourceImporterSceneGDExtensionIternalConstructor(reference ResourceImporterScene) RefResourceImporterScene {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterScene](reference)
}

var _ RefResourceImporterShaderFile = &RefResourceImporterShaderFileImpl{}
var _ Ref = &RefResourceImporterShaderFileImpl{}

type RefResourceImporterShaderFile interface {
	Ref
	TypedPtr() ResourceImporterShaderFile
}

type RefResourceImporterShaderFileImpl TypedRef[ResourceImporterShaderFile]

func (r *RefResourceImporterShaderFileImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterShaderFile])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterShaderFileImpl) TypedPtr() ResourceImporterShaderFile {
	rg := (*TypedRef[ResourceImporterShaderFile])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterShaderFileImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterShaderFile])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterShaderFileImpl) TypedRef(from *RefResourceImporterShaderFileImpl) {
	rg := (*TypedRef[ResourceImporterShaderFile])(r)
	t := (*TypedRef[ResourceImporterShaderFile])(from)
	rg.TypedRef((*TypedRef[ResourceImporterShaderFile])(t))
}

func (r *RefResourceImporterShaderFileImpl) Unref() {
	rg := (*TypedRef[ResourceImporterShaderFile])(r)
	rg.Unref()
}

func (r *RefResourceImporterShaderFileImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterShaderFile(reference ResourceImporterShaderFile) RefResourceImporterShaderFile {
	return (RefResourceImporterShaderFile)(NewTypedRef[ResourceImporterShaderFile](reference))
}

func newRefResourceImporterShaderFileAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterShaderFile](reference.(ResourceImporterShaderFile)))
}

func newRefResourceImporterShaderFileGDExtensionIternalConstructor(reference ResourceImporterShaderFile) RefResourceImporterShaderFile {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterShaderFile](reference)
}

var _ RefResourceImporterTexture = &RefResourceImporterTextureImpl{}
var _ Ref = &RefResourceImporterTextureImpl{}

type RefResourceImporterTexture interface {
	Ref
	TypedPtr() ResourceImporterTexture
}

type RefResourceImporterTextureImpl TypedRef[ResourceImporterTexture]

func (r *RefResourceImporterTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterTextureImpl) TypedPtr() ResourceImporterTexture {
	rg := (*TypedRef[ResourceImporterTexture])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterTexture])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterTextureImpl) TypedRef(from *RefResourceImporterTextureImpl) {
	rg := (*TypedRef[ResourceImporterTexture])(r)
	t := (*TypedRef[ResourceImporterTexture])(from)
	rg.TypedRef((*TypedRef[ResourceImporterTexture])(t))
}

func (r *RefResourceImporterTextureImpl) Unref() {
	rg := (*TypedRef[ResourceImporterTexture])(r)
	rg.Unref()
}

func (r *RefResourceImporterTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterTexture(reference ResourceImporterTexture) RefResourceImporterTexture {
	return (RefResourceImporterTexture)(NewTypedRef[ResourceImporterTexture](reference))
}

func newRefResourceImporterTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterTexture](reference.(ResourceImporterTexture)))
}

func newRefResourceImporterTextureGDExtensionIternalConstructor(reference ResourceImporterTexture) RefResourceImporterTexture {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterTexture](reference)
}

var _ RefResourceImporterTextureAtlas = &RefResourceImporterTextureAtlasImpl{}
var _ Ref = &RefResourceImporterTextureAtlasImpl{}

type RefResourceImporterTextureAtlas interface {
	Ref
	TypedPtr() ResourceImporterTextureAtlas
}

type RefResourceImporterTextureAtlasImpl TypedRef[ResourceImporterTextureAtlas]

func (r *RefResourceImporterTextureAtlasImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterTextureAtlas])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterTextureAtlasImpl) TypedPtr() ResourceImporterTextureAtlas {
	rg := (*TypedRef[ResourceImporterTextureAtlas])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterTextureAtlasImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterTextureAtlas])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterTextureAtlasImpl) TypedRef(from *RefResourceImporterTextureAtlasImpl) {
	rg := (*TypedRef[ResourceImporterTextureAtlas])(r)
	t := (*TypedRef[ResourceImporterTextureAtlas])(from)
	rg.TypedRef((*TypedRef[ResourceImporterTextureAtlas])(t))
}

func (r *RefResourceImporterTextureAtlasImpl) Unref() {
	rg := (*TypedRef[ResourceImporterTextureAtlas])(r)
	rg.Unref()
}

func (r *RefResourceImporterTextureAtlasImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterTextureAtlas(reference ResourceImporterTextureAtlas) RefResourceImporterTextureAtlas {
	return (RefResourceImporterTextureAtlas)(NewTypedRef[ResourceImporterTextureAtlas](reference))
}

func newRefResourceImporterTextureAtlasAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterTextureAtlas](reference.(ResourceImporterTextureAtlas)))
}

func newRefResourceImporterTextureAtlasGDExtensionIternalConstructor(reference ResourceImporterTextureAtlas) RefResourceImporterTextureAtlas {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterTextureAtlas](reference)
}

var _ RefResourceImporterWAV = &RefResourceImporterWAVImpl{}
var _ Ref = &RefResourceImporterWAVImpl{}

type RefResourceImporterWAV interface {
	Ref
	TypedPtr() ResourceImporterWAV
}

type RefResourceImporterWAVImpl TypedRef[ResourceImporterWAV]

func (r *RefResourceImporterWAVImpl) Ptr() RefCounted {
	rg := (*TypedRef[ResourceImporterWAV])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefResourceImporterWAVImpl) TypedPtr() ResourceImporterWAV {
	rg := (*TypedRef[ResourceImporterWAV])(r)
	return rg.TypedPtr()
}

func (r *RefResourceImporterWAVImpl) Ref(from Ref) {
	rg := (*TypedRef[ResourceImporterWAV])(r)
	rg.Ref(from)
}

func (r *RefResourceImporterWAVImpl) TypedRef(from *RefResourceImporterWAVImpl) {
	rg := (*TypedRef[ResourceImporterWAV])(r)
	t := (*TypedRef[ResourceImporterWAV])(from)
	rg.TypedRef((*TypedRef[ResourceImporterWAV])(t))
}

func (r *RefResourceImporterWAVImpl) Unref() {
	rg := (*TypedRef[ResourceImporterWAV])(r)
	rg.Unref()
}

func (r *RefResourceImporterWAVImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefResourceImporterWAV(reference ResourceImporterWAV) RefResourceImporterWAV {
	return (RefResourceImporterWAV)(NewTypedRef[ResourceImporterWAV](reference))
}

func newRefResourceImporterWAVAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ResourceImporterWAV](reference.(ResourceImporterWAV)))
}

func newRefResourceImporterWAVGDExtensionIternalConstructor(reference ResourceImporterWAV) RefResourceImporterWAV {
	return newTypedRefGDExtensionIternalConstructor[ResourceImporterWAV](reference)
}

var _ RefRibbonTrailMesh = &RefRibbonTrailMeshImpl{}
var _ Ref = &RefRibbonTrailMeshImpl{}

type RefRibbonTrailMesh interface {
	Ref
	TypedPtr() RibbonTrailMesh
}

type RefRibbonTrailMeshImpl TypedRef[RibbonTrailMesh]

func (r *RefRibbonTrailMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[RibbonTrailMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRibbonTrailMeshImpl) TypedPtr() RibbonTrailMesh {
	rg := (*TypedRef[RibbonTrailMesh])(r)
	return rg.TypedPtr()
}

func (r *RefRibbonTrailMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[RibbonTrailMesh])(r)
	rg.Ref(from)
}

func (r *RefRibbonTrailMeshImpl) TypedRef(from *RefRibbonTrailMeshImpl) {
	rg := (*TypedRef[RibbonTrailMesh])(r)
	t := (*TypedRef[RibbonTrailMesh])(from)
	rg.TypedRef((*TypedRef[RibbonTrailMesh])(t))
}

func (r *RefRibbonTrailMeshImpl) Unref() {
	rg := (*TypedRef[RibbonTrailMesh])(r)
	rg.Unref()
}

func (r *RefRibbonTrailMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRibbonTrailMesh(reference RibbonTrailMesh) RefRibbonTrailMesh {
	return (RefRibbonTrailMesh)(NewTypedRef[RibbonTrailMesh](reference))
}

func newRefRibbonTrailMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RibbonTrailMesh](reference.(RibbonTrailMesh)))
}

func newRefRibbonTrailMeshGDExtensionIternalConstructor(reference RibbonTrailMesh) RefRibbonTrailMesh {
	return newTypedRefGDExtensionIternalConstructor[RibbonTrailMesh](reference)
}

var _ RefRichTextEffect = &RefRichTextEffectImpl{}
var _ Ref = &RefRichTextEffectImpl{}

type RefRichTextEffect interface {
	Ref
	TypedPtr() RichTextEffect
}

type RefRichTextEffectImpl TypedRef[RichTextEffect]

func (r *RefRichTextEffectImpl) Ptr() RefCounted {
	rg := (*TypedRef[RichTextEffect])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefRichTextEffectImpl) TypedPtr() RichTextEffect {
	rg := (*TypedRef[RichTextEffect])(r)
	return rg.TypedPtr()
}

func (r *RefRichTextEffectImpl) Ref(from Ref) {
	rg := (*TypedRef[RichTextEffect])(r)
	rg.Ref(from)
}

func (r *RefRichTextEffectImpl) TypedRef(from *RefRichTextEffectImpl) {
	rg := (*TypedRef[RichTextEffect])(r)
	t := (*TypedRef[RichTextEffect])(from)
	rg.TypedRef((*TypedRef[RichTextEffect])(t))
}

func (r *RefRichTextEffectImpl) Unref() {
	rg := (*TypedRef[RichTextEffect])(r)
	rg.Unref()
}

func (r *RefRichTextEffectImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefRichTextEffect(reference RichTextEffect) RefRichTextEffect {
	return (RefRichTextEffect)(NewTypedRef[RichTextEffect](reference))
}

func newRefRichTextEffectAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[RichTextEffect](reference.(RichTextEffect)))
}

func newRefRichTextEffectGDExtensionIternalConstructor(reference RichTextEffect) RefRichTextEffect {
	return newTypedRefGDExtensionIternalConstructor[RichTextEffect](reference)
}

var _ RefSceneMultiplayer = &RefSceneMultiplayerImpl{}
var _ Ref = &RefSceneMultiplayerImpl{}

type RefSceneMultiplayer interface {
	Ref
	TypedPtr() SceneMultiplayer
}

type RefSceneMultiplayerImpl TypedRef[SceneMultiplayer]

func (r *RefSceneMultiplayerImpl) Ptr() RefCounted {
	rg := (*TypedRef[SceneMultiplayer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSceneMultiplayerImpl) TypedPtr() SceneMultiplayer {
	rg := (*TypedRef[SceneMultiplayer])(r)
	return rg.TypedPtr()
}

func (r *RefSceneMultiplayerImpl) Ref(from Ref) {
	rg := (*TypedRef[SceneMultiplayer])(r)
	rg.Ref(from)
}

func (r *RefSceneMultiplayerImpl) TypedRef(from *RefSceneMultiplayerImpl) {
	rg := (*TypedRef[SceneMultiplayer])(r)
	t := (*TypedRef[SceneMultiplayer])(from)
	rg.TypedRef((*TypedRef[SceneMultiplayer])(t))
}

func (r *RefSceneMultiplayerImpl) Unref() {
	rg := (*TypedRef[SceneMultiplayer])(r)
	rg.Unref()
}

func (r *RefSceneMultiplayerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSceneMultiplayer(reference SceneMultiplayer) RefSceneMultiplayer {
	return (RefSceneMultiplayer)(NewTypedRef[SceneMultiplayer](reference))
}

func newRefSceneMultiplayerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SceneMultiplayer](reference.(SceneMultiplayer)))
}

func newRefSceneMultiplayerGDExtensionIternalConstructor(reference SceneMultiplayer) RefSceneMultiplayer {
	return newTypedRefGDExtensionIternalConstructor[SceneMultiplayer](reference)
}

var _ RefSceneReplicationConfig = &RefSceneReplicationConfigImpl{}
var _ Ref = &RefSceneReplicationConfigImpl{}

type RefSceneReplicationConfig interface {
	Ref
	TypedPtr() SceneReplicationConfig
}

type RefSceneReplicationConfigImpl TypedRef[SceneReplicationConfig]

func (r *RefSceneReplicationConfigImpl) Ptr() RefCounted {
	rg := (*TypedRef[SceneReplicationConfig])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSceneReplicationConfigImpl) TypedPtr() SceneReplicationConfig {
	rg := (*TypedRef[SceneReplicationConfig])(r)
	return rg.TypedPtr()
}

func (r *RefSceneReplicationConfigImpl) Ref(from Ref) {
	rg := (*TypedRef[SceneReplicationConfig])(r)
	rg.Ref(from)
}

func (r *RefSceneReplicationConfigImpl) TypedRef(from *RefSceneReplicationConfigImpl) {
	rg := (*TypedRef[SceneReplicationConfig])(r)
	t := (*TypedRef[SceneReplicationConfig])(from)
	rg.TypedRef((*TypedRef[SceneReplicationConfig])(t))
}

func (r *RefSceneReplicationConfigImpl) Unref() {
	rg := (*TypedRef[SceneReplicationConfig])(r)
	rg.Unref()
}

func (r *RefSceneReplicationConfigImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSceneReplicationConfig(reference SceneReplicationConfig) RefSceneReplicationConfig {
	return (RefSceneReplicationConfig)(NewTypedRef[SceneReplicationConfig](reference))
}

func newRefSceneReplicationConfigAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SceneReplicationConfig](reference.(SceneReplicationConfig)))
}

func newRefSceneReplicationConfigGDExtensionIternalConstructor(reference SceneReplicationConfig) RefSceneReplicationConfig {
	return newTypedRefGDExtensionIternalConstructor[SceneReplicationConfig](reference)
}

var _ RefSceneState = &RefSceneStateImpl{}
var _ Ref = &RefSceneStateImpl{}

type RefSceneState interface {
	Ref
	TypedPtr() SceneState
}

type RefSceneStateImpl TypedRef[SceneState]

func (r *RefSceneStateImpl) Ptr() RefCounted {
	rg := (*TypedRef[SceneState])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSceneStateImpl) TypedPtr() SceneState {
	rg := (*TypedRef[SceneState])(r)
	return rg.TypedPtr()
}

func (r *RefSceneStateImpl) Ref(from Ref) {
	rg := (*TypedRef[SceneState])(r)
	rg.Ref(from)
}

func (r *RefSceneStateImpl) TypedRef(from *RefSceneStateImpl) {
	rg := (*TypedRef[SceneState])(r)
	t := (*TypedRef[SceneState])(from)
	rg.TypedRef((*TypedRef[SceneState])(t))
}

func (r *RefSceneStateImpl) Unref() {
	rg := (*TypedRef[SceneState])(r)
	rg.Unref()
}

func (r *RefSceneStateImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSceneState(reference SceneState) RefSceneState {
	return (RefSceneState)(NewTypedRef[SceneState](reference))
}

func newRefSceneStateAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SceneState](reference.(SceneState)))
}

func newRefSceneStateGDExtensionIternalConstructor(reference SceneState) RefSceneState {
	return newTypedRefGDExtensionIternalConstructor[SceneState](reference)
}

var _ RefSceneTreeTimer = &RefSceneTreeTimerImpl{}
var _ Ref = &RefSceneTreeTimerImpl{}

type RefSceneTreeTimer interface {
	Ref
	TypedPtr() SceneTreeTimer
}

type RefSceneTreeTimerImpl TypedRef[SceneTreeTimer]

func (r *RefSceneTreeTimerImpl) Ptr() RefCounted {
	rg := (*TypedRef[SceneTreeTimer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSceneTreeTimerImpl) TypedPtr() SceneTreeTimer {
	rg := (*TypedRef[SceneTreeTimer])(r)
	return rg.TypedPtr()
}

func (r *RefSceneTreeTimerImpl) Ref(from Ref) {
	rg := (*TypedRef[SceneTreeTimer])(r)
	rg.Ref(from)
}

func (r *RefSceneTreeTimerImpl) TypedRef(from *RefSceneTreeTimerImpl) {
	rg := (*TypedRef[SceneTreeTimer])(r)
	t := (*TypedRef[SceneTreeTimer])(from)
	rg.TypedRef((*TypedRef[SceneTreeTimer])(t))
}

func (r *RefSceneTreeTimerImpl) Unref() {
	rg := (*TypedRef[SceneTreeTimer])(r)
	rg.Unref()
}

func (r *RefSceneTreeTimerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSceneTreeTimer(reference SceneTreeTimer) RefSceneTreeTimer {
	return (RefSceneTreeTimer)(NewTypedRef[SceneTreeTimer](reference))
}

func newRefSceneTreeTimerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SceneTreeTimer](reference.(SceneTreeTimer)))
}

func newRefSceneTreeTimerGDExtensionIternalConstructor(reference SceneTreeTimer) RefSceneTreeTimer {
	return newTypedRefGDExtensionIternalConstructor[SceneTreeTimer](reference)
}

var _ RefScript = &RefScriptImpl{}
var _ Ref = &RefScriptImpl{}

type RefScript interface {
	Ref
	TypedPtr() Script
}

type RefScriptImpl TypedRef[Script]

func (r *RefScriptImpl) Ptr() RefCounted {
	rg := (*TypedRef[Script])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefScriptImpl) TypedPtr() Script {
	rg := (*TypedRef[Script])(r)
	return rg.TypedPtr()
}

func (r *RefScriptImpl) Ref(from Ref) {
	rg := (*TypedRef[Script])(r)
	rg.Ref(from)
}

func (r *RefScriptImpl) TypedRef(from *RefScriptImpl) {
	rg := (*TypedRef[Script])(r)
	t := (*TypedRef[Script])(from)
	rg.TypedRef((*TypedRef[Script])(t))
}

func (r *RefScriptImpl) Unref() {
	rg := (*TypedRef[Script])(r)
	rg.Unref()
}

func (r *RefScriptImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefScript(reference Script) RefScript {
	return (RefScript)(NewTypedRef[Script](reference))
}

func newRefScriptAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Script](reference.(Script)))
}

func newRefScriptGDExtensionIternalConstructor(reference Script) RefScript {
	return newTypedRefGDExtensionIternalConstructor[Script](reference)
}

var _ RefScriptExtension = &RefScriptExtensionImpl{}
var _ Ref = &RefScriptExtensionImpl{}

type RefScriptExtension interface {
	Ref
	TypedPtr() ScriptExtension
}

type RefScriptExtensionImpl TypedRef[ScriptExtension]

func (r *RefScriptExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[ScriptExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefScriptExtensionImpl) TypedPtr() ScriptExtension {
	rg := (*TypedRef[ScriptExtension])(r)
	return rg.TypedPtr()
}

func (r *RefScriptExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[ScriptExtension])(r)
	rg.Ref(from)
}

func (r *RefScriptExtensionImpl) TypedRef(from *RefScriptExtensionImpl) {
	rg := (*TypedRef[ScriptExtension])(r)
	t := (*TypedRef[ScriptExtension])(from)
	rg.TypedRef((*TypedRef[ScriptExtension])(t))
}

func (r *RefScriptExtensionImpl) Unref() {
	rg := (*TypedRef[ScriptExtension])(r)
	rg.Unref()
}

func (r *RefScriptExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefScriptExtension(reference ScriptExtension) RefScriptExtension {
	return (RefScriptExtension)(NewTypedRef[ScriptExtension](reference))
}

func newRefScriptExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ScriptExtension](reference.(ScriptExtension)))
}

func newRefScriptExtensionGDExtensionIternalConstructor(reference ScriptExtension) RefScriptExtension {
	return newTypedRefGDExtensionIternalConstructor[ScriptExtension](reference)
}

var _ RefSegmentShape2D = &RefSegmentShape2DImpl{}
var _ Ref = &RefSegmentShape2DImpl{}

type RefSegmentShape2D interface {
	Ref
	TypedPtr() SegmentShape2D
}

type RefSegmentShape2DImpl TypedRef[SegmentShape2D]

func (r *RefSegmentShape2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[SegmentShape2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSegmentShape2DImpl) TypedPtr() SegmentShape2D {
	rg := (*TypedRef[SegmentShape2D])(r)
	return rg.TypedPtr()
}

func (r *RefSegmentShape2DImpl) Ref(from Ref) {
	rg := (*TypedRef[SegmentShape2D])(r)
	rg.Ref(from)
}

func (r *RefSegmentShape2DImpl) TypedRef(from *RefSegmentShape2DImpl) {
	rg := (*TypedRef[SegmentShape2D])(r)
	t := (*TypedRef[SegmentShape2D])(from)
	rg.TypedRef((*TypedRef[SegmentShape2D])(t))
}

func (r *RefSegmentShape2DImpl) Unref() {
	rg := (*TypedRef[SegmentShape2D])(r)
	rg.Unref()
}

func (r *RefSegmentShape2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSegmentShape2D(reference SegmentShape2D) RefSegmentShape2D {
	return (RefSegmentShape2D)(NewTypedRef[SegmentShape2D](reference))
}

func newRefSegmentShape2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SegmentShape2D](reference.(SegmentShape2D)))
}

func newRefSegmentShape2DGDExtensionIternalConstructor(reference SegmentShape2D) RefSegmentShape2D {
	return newTypedRefGDExtensionIternalConstructor[SegmentShape2D](reference)
}

var _ RefSemaphore = &RefSemaphoreImpl{}
var _ Ref = &RefSemaphoreImpl{}

type RefSemaphore interface {
	Ref
	TypedPtr() Semaphore
}

type RefSemaphoreImpl TypedRef[Semaphore]

func (r *RefSemaphoreImpl) Ptr() RefCounted {
	rg := (*TypedRef[Semaphore])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSemaphoreImpl) TypedPtr() Semaphore {
	rg := (*TypedRef[Semaphore])(r)
	return rg.TypedPtr()
}

func (r *RefSemaphoreImpl) Ref(from Ref) {
	rg := (*TypedRef[Semaphore])(r)
	rg.Ref(from)
}

func (r *RefSemaphoreImpl) TypedRef(from *RefSemaphoreImpl) {
	rg := (*TypedRef[Semaphore])(r)
	t := (*TypedRef[Semaphore])(from)
	rg.TypedRef((*TypedRef[Semaphore])(t))
}

func (r *RefSemaphoreImpl) Unref() {
	rg := (*TypedRef[Semaphore])(r)
	rg.Unref()
}

func (r *RefSemaphoreImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSemaphore(reference Semaphore) RefSemaphore {
	return (RefSemaphore)(NewTypedRef[Semaphore](reference))
}

func newRefSemaphoreAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Semaphore](reference.(Semaphore)))
}

func newRefSemaphoreGDExtensionIternalConstructor(reference Semaphore) RefSemaphore {
	return newTypedRefGDExtensionIternalConstructor[Semaphore](reference)
}

var _ RefSeparationRayShape2D = &RefSeparationRayShape2DImpl{}
var _ Ref = &RefSeparationRayShape2DImpl{}

type RefSeparationRayShape2D interface {
	Ref
	TypedPtr() SeparationRayShape2D
}

type RefSeparationRayShape2DImpl TypedRef[SeparationRayShape2D]

func (r *RefSeparationRayShape2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[SeparationRayShape2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSeparationRayShape2DImpl) TypedPtr() SeparationRayShape2D {
	rg := (*TypedRef[SeparationRayShape2D])(r)
	return rg.TypedPtr()
}

func (r *RefSeparationRayShape2DImpl) Ref(from Ref) {
	rg := (*TypedRef[SeparationRayShape2D])(r)
	rg.Ref(from)
}

func (r *RefSeparationRayShape2DImpl) TypedRef(from *RefSeparationRayShape2DImpl) {
	rg := (*TypedRef[SeparationRayShape2D])(r)
	t := (*TypedRef[SeparationRayShape2D])(from)
	rg.TypedRef((*TypedRef[SeparationRayShape2D])(t))
}

func (r *RefSeparationRayShape2DImpl) Unref() {
	rg := (*TypedRef[SeparationRayShape2D])(r)
	rg.Unref()
}

func (r *RefSeparationRayShape2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSeparationRayShape2D(reference SeparationRayShape2D) RefSeparationRayShape2D {
	return (RefSeparationRayShape2D)(NewTypedRef[SeparationRayShape2D](reference))
}

func newRefSeparationRayShape2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SeparationRayShape2D](reference.(SeparationRayShape2D)))
}

func newRefSeparationRayShape2DGDExtensionIternalConstructor(reference SeparationRayShape2D) RefSeparationRayShape2D {
	return newTypedRefGDExtensionIternalConstructor[SeparationRayShape2D](reference)
}

var _ RefSeparationRayShape3D = &RefSeparationRayShape3DImpl{}
var _ Ref = &RefSeparationRayShape3DImpl{}

type RefSeparationRayShape3D interface {
	Ref
	TypedPtr() SeparationRayShape3D
}

type RefSeparationRayShape3DImpl TypedRef[SeparationRayShape3D]

func (r *RefSeparationRayShape3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[SeparationRayShape3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSeparationRayShape3DImpl) TypedPtr() SeparationRayShape3D {
	rg := (*TypedRef[SeparationRayShape3D])(r)
	return rg.TypedPtr()
}

func (r *RefSeparationRayShape3DImpl) Ref(from Ref) {
	rg := (*TypedRef[SeparationRayShape3D])(r)
	rg.Ref(from)
}

func (r *RefSeparationRayShape3DImpl) TypedRef(from *RefSeparationRayShape3DImpl) {
	rg := (*TypedRef[SeparationRayShape3D])(r)
	t := (*TypedRef[SeparationRayShape3D])(from)
	rg.TypedRef((*TypedRef[SeparationRayShape3D])(t))
}

func (r *RefSeparationRayShape3DImpl) Unref() {
	rg := (*TypedRef[SeparationRayShape3D])(r)
	rg.Unref()
}

func (r *RefSeparationRayShape3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSeparationRayShape3D(reference SeparationRayShape3D) RefSeparationRayShape3D {
	return (RefSeparationRayShape3D)(NewTypedRef[SeparationRayShape3D](reference))
}

func newRefSeparationRayShape3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SeparationRayShape3D](reference.(SeparationRayShape3D)))
}

func newRefSeparationRayShape3DGDExtensionIternalConstructor(reference SeparationRayShape3D) RefSeparationRayShape3D {
	return newTypedRefGDExtensionIternalConstructor[SeparationRayShape3D](reference)
}

var _ RefShader = &RefShaderImpl{}
var _ Ref = &RefShaderImpl{}

type RefShader interface {
	Ref
	TypedPtr() Shader
}

type RefShaderImpl TypedRef[Shader]

func (r *RefShaderImpl) Ptr() RefCounted {
	rg := (*TypedRef[Shader])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefShaderImpl) TypedPtr() Shader {
	rg := (*TypedRef[Shader])(r)
	return rg.TypedPtr()
}

func (r *RefShaderImpl) Ref(from Ref) {
	rg := (*TypedRef[Shader])(r)
	rg.Ref(from)
}

func (r *RefShaderImpl) TypedRef(from *RefShaderImpl) {
	rg := (*TypedRef[Shader])(r)
	t := (*TypedRef[Shader])(from)
	rg.TypedRef((*TypedRef[Shader])(t))
}

func (r *RefShaderImpl) Unref() {
	rg := (*TypedRef[Shader])(r)
	rg.Unref()
}

func (r *RefShaderImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefShader(reference Shader) RefShader {
	return (RefShader)(NewTypedRef[Shader](reference))
}

func newRefShaderAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Shader](reference.(Shader)))
}

func newRefShaderGDExtensionIternalConstructor(reference Shader) RefShader {
	return newTypedRefGDExtensionIternalConstructor[Shader](reference)
}

var _ RefShaderInclude = &RefShaderIncludeImpl{}
var _ Ref = &RefShaderIncludeImpl{}

type RefShaderInclude interface {
	Ref
	TypedPtr() ShaderInclude
}

type RefShaderIncludeImpl TypedRef[ShaderInclude]

func (r *RefShaderIncludeImpl) Ptr() RefCounted {
	rg := (*TypedRef[ShaderInclude])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefShaderIncludeImpl) TypedPtr() ShaderInclude {
	rg := (*TypedRef[ShaderInclude])(r)
	return rg.TypedPtr()
}

func (r *RefShaderIncludeImpl) Ref(from Ref) {
	rg := (*TypedRef[ShaderInclude])(r)
	rg.Ref(from)
}

func (r *RefShaderIncludeImpl) TypedRef(from *RefShaderIncludeImpl) {
	rg := (*TypedRef[ShaderInclude])(r)
	t := (*TypedRef[ShaderInclude])(from)
	rg.TypedRef((*TypedRef[ShaderInclude])(t))
}

func (r *RefShaderIncludeImpl) Unref() {
	rg := (*TypedRef[ShaderInclude])(r)
	rg.Unref()
}

func (r *RefShaderIncludeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefShaderInclude(reference ShaderInclude) RefShaderInclude {
	return (RefShaderInclude)(NewTypedRef[ShaderInclude](reference))
}

func newRefShaderIncludeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ShaderInclude](reference.(ShaderInclude)))
}

func newRefShaderIncludeGDExtensionIternalConstructor(reference ShaderInclude) RefShaderInclude {
	return newTypedRefGDExtensionIternalConstructor[ShaderInclude](reference)
}

var _ RefShaderMaterial = &RefShaderMaterialImpl{}
var _ Ref = &RefShaderMaterialImpl{}

type RefShaderMaterial interface {
	Ref
	TypedPtr() ShaderMaterial
}

type RefShaderMaterialImpl TypedRef[ShaderMaterial]

func (r *RefShaderMaterialImpl) Ptr() RefCounted {
	rg := (*TypedRef[ShaderMaterial])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefShaderMaterialImpl) TypedPtr() ShaderMaterial {
	rg := (*TypedRef[ShaderMaterial])(r)
	return rg.TypedPtr()
}

func (r *RefShaderMaterialImpl) Ref(from Ref) {
	rg := (*TypedRef[ShaderMaterial])(r)
	rg.Ref(from)
}

func (r *RefShaderMaterialImpl) TypedRef(from *RefShaderMaterialImpl) {
	rg := (*TypedRef[ShaderMaterial])(r)
	t := (*TypedRef[ShaderMaterial])(from)
	rg.TypedRef((*TypedRef[ShaderMaterial])(t))
}

func (r *RefShaderMaterialImpl) Unref() {
	rg := (*TypedRef[ShaderMaterial])(r)
	rg.Unref()
}

func (r *RefShaderMaterialImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefShaderMaterial(reference ShaderMaterial) RefShaderMaterial {
	return (RefShaderMaterial)(NewTypedRef[ShaderMaterial](reference))
}

func newRefShaderMaterialAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ShaderMaterial](reference.(ShaderMaterial)))
}

func newRefShaderMaterialGDExtensionIternalConstructor(reference ShaderMaterial) RefShaderMaterial {
	return newTypedRefGDExtensionIternalConstructor[ShaderMaterial](reference)
}

var _ RefShape2D = &RefShape2DImpl{}
var _ Ref = &RefShape2DImpl{}

type RefShape2D interface {
	Ref
	TypedPtr() Shape2D
}

type RefShape2DImpl TypedRef[Shape2D]

func (r *RefShape2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[Shape2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefShape2DImpl) TypedPtr() Shape2D {
	rg := (*TypedRef[Shape2D])(r)
	return rg.TypedPtr()
}

func (r *RefShape2DImpl) Ref(from Ref) {
	rg := (*TypedRef[Shape2D])(r)
	rg.Ref(from)
}

func (r *RefShape2DImpl) TypedRef(from *RefShape2DImpl) {
	rg := (*TypedRef[Shape2D])(r)
	t := (*TypedRef[Shape2D])(from)
	rg.TypedRef((*TypedRef[Shape2D])(t))
}

func (r *RefShape2DImpl) Unref() {
	rg := (*TypedRef[Shape2D])(r)
	rg.Unref()
}

func (r *RefShape2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefShape2D(reference Shape2D) RefShape2D {
	return (RefShape2D)(NewTypedRef[Shape2D](reference))
}

func newRefShape2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Shape2D](reference.(Shape2D)))
}

func newRefShape2DGDExtensionIternalConstructor(reference Shape2D) RefShape2D {
	return newTypedRefGDExtensionIternalConstructor[Shape2D](reference)
}

var _ RefShape3D = &RefShape3DImpl{}
var _ Ref = &RefShape3DImpl{}

type RefShape3D interface {
	Ref
	TypedPtr() Shape3D
}

type RefShape3DImpl TypedRef[Shape3D]

func (r *RefShape3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[Shape3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefShape3DImpl) TypedPtr() Shape3D {
	rg := (*TypedRef[Shape3D])(r)
	return rg.TypedPtr()
}

func (r *RefShape3DImpl) Ref(from Ref) {
	rg := (*TypedRef[Shape3D])(r)
	rg.Ref(from)
}

func (r *RefShape3DImpl) TypedRef(from *RefShape3DImpl) {
	rg := (*TypedRef[Shape3D])(r)
	t := (*TypedRef[Shape3D])(from)
	rg.TypedRef((*TypedRef[Shape3D])(t))
}

func (r *RefShape3DImpl) Unref() {
	rg := (*TypedRef[Shape3D])(r)
	rg.Unref()
}

func (r *RefShape3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefShape3D(reference Shape3D) RefShape3D {
	return (RefShape3D)(NewTypedRef[Shape3D](reference))
}

func newRefShape3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Shape3D](reference.(Shape3D)))
}

func newRefShape3DGDExtensionIternalConstructor(reference Shape3D) RefShape3D {
	return newTypedRefGDExtensionIternalConstructor[Shape3D](reference)
}

var _ RefShortcut = &RefShortcutImpl{}
var _ Ref = &RefShortcutImpl{}

type RefShortcut interface {
	Ref
	TypedPtr() Shortcut
}

type RefShortcutImpl TypedRef[Shortcut]

func (r *RefShortcutImpl) Ptr() RefCounted {
	rg := (*TypedRef[Shortcut])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefShortcutImpl) TypedPtr() Shortcut {
	rg := (*TypedRef[Shortcut])(r)
	return rg.TypedPtr()
}

func (r *RefShortcutImpl) Ref(from Ref) {
	rg := (*TypedRef[Shortcut])(r)
	rg.Ref(from)
}

func (r *RefShortcutImpl) TypedRef(from *RefShortcutImpl) {
	rg := (*TypedRef[Shortcut])(r)
	t := (*TypedRef[Shortcut])(from)
	rg.TypedRef((*TypedRef[Shortcut])(t))
}

func (r *RefShortcutImpl) Unref() {
	rg := (*TypedRef[Shortcut])(r)
	rg.Unref()
}

func (r *RefShortcutImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefShortcut(reference Shortcut) RefShortcut {
	return (RefShortcut)(NewTypedRef[Shortcut](reference))
}

func newRefShortcutAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Shortcut](reference.(Shortcut)))
}

func newRefShortcutGDExtensionIternalConstructor(reference Shortcut) RefShortcut {
	return newTypedRefGDExtensionIternalConstructor[Shortcut](reference)
}

var _ RefSkeletonModification2D = &RefSkeletonModification2DImpl{}
var _ Ref = &RefSkeletonModification2DImpl{}

type RefSkeletonModification2D interface {
	Ref
	TypedPtr() SkeletonModification2D
}

type RefSkeletonModification2DImpl TypedRef[SkeletonModification2D]

func (r *RefSkeletonModification2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkeletonModification2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkeletonModification2DImpl) TypedPtr() SkeletonModification2D {
	rg := (*TypedRef[SkeletonModification2D])(r)
	return rg.TypedPtr()
}

func (r *RefSkeletonModification2DImpl) Ref(from Ref) {
	rg := (*TypedRef[SkeletonModification2D])(r)
	rg.Ref(from)
}

func (r *RefSkeletonModification2DImpl) TypedRef(from *RefSkeletonModification2DImpl) {
	rg := (*TypedRef[SkeletonModification2D])(r)
	t := (*TypedRef[SkeletonModification2D])(from)
	rg.TypedRef((*TypedRef[SkeletonModification2D])(t))
}

func (r *RefSkeletonModification2DImpl) Unref() {
	rg := (*TypedRef[SkeletonModification2D])(r)
	rg.Unref()
}

func (r *RefSkeletonModification2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkeletonModification2D(reference SkeletonModification2D) RefSkeletonModification2D {
	return (RefSkeletonModification2D)(NewTypedRef[SkeletonModification2D](reference))
}

func newRefSkeletonModification2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkeletonModification2D](reference.(SkeletonModification2D)))
}

func newRefSkeletonModification2DGDExtensionIternalConstructor(reference SkeletonModification2D) RefSkeletonModification2D {
	return newTypedRefGDExtensionIternalConstructor[SkeletonModification2D](reference)
}

var _ RefSkeletonModification2DCCDIK = &RefSkeletonModification2DCCDIKImpl{}
var _ Ref = &RefSkeletonModification2DCCDIKImpl{}

type RefSkeletonModification2DCCDIK interface {
	Ref
	TypedPtr() SkeletonModification2DCCDIK
}

type RefSkeletonModification2DCCDIKImpl TypedRef[SkeletonModification2DCCDIK]

func (r *RefSkeletonModification2DCCDIKImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkeletonModification2DCCDIK])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkeletonModification2DCCDIKImpl) TypedPtr() SkeletonModification2DCCDIK {
	rg := (*TypedRef[SkeletonModification2DCCDIK])(r)
	return rg.TypedPtr()
}

func (r *RefSkeletonModification2DCCDIKImpl) Ref(from Ref) {
	rg := (*TypedRef[SkeletonModification2DCCDIK])(r)
	rg.Ref(from)
}

func (r *RefSkeletonModification2DCCDIKImpl) TypedRef(from *RefSkeletonModification2DCCDIKImpl) {
	rg := (*TypedRef[SkeletonModification2DCCDIK])(r)
	t := (*TypedRef[SkeletonModification2DCCDIK])(from)
	rg.TypedRef((*TypedRef[SkeletonModification2DCCDIK])(t))
}

func (r *RefSkeletonModification2DCCDIKImpl) Unref() {
	rg := (*TypedRef[SkeletonModification2DCCDIK])(r)
	rg.Unref()
}

func (r *RefSkeletonModification2DCCDIKImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkeletonModification2DCCDIK(reference SkeletonModification2DCCDIK) RefSkeletonModification2DCCDIK {
	return (RefSkeletonModification2DCCDIK)(NewTypedRef[SkeletonModification2DCCDIK](reference))
}

func newRefSkeletonModification2DCCDIKAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkeletonModification2DCCDIK](reference.(SkeletonModification2DCCDIK)))
}

func newRefSkeletonModification2DCCDIKGDExtensionIternalConstructor(reference SkeletonModification2DCCDIK) RefSkeletonModification2DCCDIK {
	return newTypedRefGDExtensionIternalConstructor[SkeletonModification2DCCDIK](reference)
}

var _ RefSkeletonModification2DFABRIK = &RefSkeletonModification2DFABRIKImpl{}
var _ Ref = &RefSkeletonModification2DFABRIKImpl{}

type RefSkeletonModification2DFABRIK interface {
	Ref
	TypedPtr() SkeletonModification2DFABRIK
}

type RefSkeletonModification2DFABRIKImpl TypedRef[SkeletonModification2DFABRIK]

func (r *RefSkeletonModification2DFABRIKImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkeletonModification2DFABRIK])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkeletonModification2DFABRIKImpl) TypedPtr() SkeletonModification2DFABRIK {
	rg := (*TypedRef[SkeletonModification2DFABRIK])(r)
	return rg.TypedPtr()
}

func (r *RefSkeletonModification2DFABRIKImpl) Ref(from Ref) {
	rg := (*TypedRef[SkeletonModification2DFABRIK])(r)
	rg.Ref(from)
}

func (r *RefSkeletonModification2DFABRIKImpl) TypedRef(from *RefSkeletonModification2DFABRIKImpl) {
	rg := (*TypedRef[SkeletonModification2DFABRIK])(r)
	t := (*TypedRef[SkeletonModification2DFABRIK])(from)
	rg.TypedRef((*TypedRef[SkeletonModification2DFABRIK])(t))
}

func (r *RefSkeletonModification2DFABRIKImpl) Unref() {
	rg := (*TypedRef[SkeletonModification2DFABRIK])(r)
	rg.Unref()
}

func (r *RefSkeletonModification2DFABRIKImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkeletonModification2DFABRIK(reference SkeletonModification2DFABRIK) RefSkeletonModification2DFABRIK {
	return (RefSkeletonModification2DFABRIK)(NewTypedRef[SkeletonModification2DFABRIK](reference))
}

func newRefSkeletonModification2DFABRIKAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkeletonModification2DFABRIK](reference.(SkeletonModification2DFABRIK)))
}

func newRefSkeletonModification2DFABRIKGDExtensionIternalConstructor(reference SkeletonModification2DFABRIK) RefSkeletonModification2DFABRIK {
	return newTypedRefGDExtensionIternalConstructor[SkeletonModification2DFABRIK](reference)
}

var _ RefSkeletonModification2DJiggle = &RefSkeletonModification2DJiggleImpl{}
var _ Ref = &RefSkeletonModification2DJiggleImpl{}

type RefSkeletonModification2DJiggle interface {
	Ref
	TypedPtr() SkeletonModification2DJiggle
}

type RefSkeletonModification2DJiggleImpl TypedRef[SkeletonModification2DJiggle]

func (r *RefSkeletonModification2DJiggleImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkeletonModification2DJiggle])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkeletonModification2DJiggleImpl) TypedPtr() SkeletonModification2DJiggle {
	rg := (*TypedRef[SkeletonModification2DJiggle])(r)
	return rg.TypedPtr()
}

func (r *RefSkeletonModification2DJiggleImpl) Ref(from Ref) {
	rg := (*TypedRef[SkeletonModification2DJiggle])(r)
	rg.Ref(from)
}

func (r *RefSkeletonModification2DJiggleImpl) TypedRef(from *RefSkeletonModification2DJiggleImpl) {
	rg := (*TypedRef[SkeletonModification2DJiggle])(r)
	t := (*TypedRef[SkeletonModification2DJiggle])(from)
	rg.TypedRef((*TypedRef[SkeletonModification2DJiggle])(t))
}

func (r *RefSkeletonModification2DJiggleImpl) Unref() {
	rg := (*TypedRef[SkeletonModification2DJiggle])(r)
	rg.Unref()
}

func (r *RefSkeletonModification2DJiggleImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkeletonModification2DJiggle(reference SkeletonModification2DJiggle) RefSkeletonModification2DJiggle {
	return (RefSkeletonModification2DJiggle)(NewTypedRef[SkeletonModification2DJiggle](reference))
}

func newRefSkeletonModification2DJiggleAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkeletonModification2DJiggle](reference.(SkeletonModification2DJiggle)))
}

func newRefSkeletonModification2DJiggleGDExtensionIternalConstructor(reference SkeletonModification2DJiggle) RefSkeletonModification2DJiggle {
	return newTypedRefGDExtensionIternalConstructor[SkeletonModification2DJiggle](reference)
}

var _ RefSkeletonModification2DLookAt = &RefSkeletonModification2DLookAtImpl{}
var _ Ref = &RefSkeletonModification2DLookAtImpl{}

type RefSkeletonModification2DLookAt interface {
	Ref
	TypedPtr() SkeletonModification2DLookAt
}

type RefSkeletonModification2DLookAtImpl TypedRef[SkeletonModification2DLookAt]

func (r *RefSkeletonModification2DLookAtImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkeletonModification2DLookAt])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkeletonModification2DLookAtImpl) TypedPtr() SkeletonModification2DLookAt {
	rg := (*TypedRef[SkeletonModification2DLookAt])(r)
	return rg.TypedPtr()
}

func (r *RefSkeletonModification2DLookAtImpl) Ref(from Ref) {
	rg := (*TypedRef[SkeletonModification2DLookAt])(r)
	rg.Ref(from)
}

func (r *RefSkeletonModification2DLookAtImpl) TypedRef(from *RefSkeletonModification2DLookAtImpl) {
	rg := (*TypedRef[SkeletonModification2DLookAt])(r)
	t := (*TypedRef[SkeletonModification2DLookAt])(from)
	rg.TypedRef((*TypedRef[SkeletonModification2DLookAt])(t))
}

func (r *RefSkeletonModification2DLookAtImpl) Unref() {
	rg := (*TypedRef[SkeletonModification2DLookAt])(r)
	rg.Unref()
}

func (r *RefSkeletonModification2DLookAtImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkeletonModification2DLookAt(reference SkeletonModification2DLookAt) RefSkeletonModification2DLookAt {
	return (RefSkeletonModification2DLookAt)(NewTypedRef[SkeletonModification2DLookAt](reference))
}

func newRefSkeletonModification2DLookAtAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkeletonModification2DLookAt](reference.(SkeletonModification2DLookAt)))
}

func newRefSkeletonModification2DLookAtGDExtensionIternalConstructor(reference SkeletonModification2DLookAt) RefSkeletonModification2DLookAt {
	return newTypedRefGDExtensionIternalConstructor[SkeletonModification2DLookAt](reference)
}

var _ RefSkeletonModification2DPhysicalBones = &RefSkeletonModification2DPhysicalBonesImpl{}
var _ Ref = &RefSkeletonModification2DPhysicalBonesImpl{}

type RefSkeletonModification2DPhysicalBones interface {
	Ref
	TypedPtr() SkeletonModification2DPhysicalBones
}

type RefSkeletonModification2DPhysicalBonesImpl TypedRef[SkeletonModification2DPhysicalBones]

func (r *RefSkeletonModification2DPhysicalBonesImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkeletonModification2DPhysicalBones])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkeletonModification2DPhysicalBonesImpl) TypedPtr() SkeletonModification2DPhysicalBones {
	rg := (*TypedRef[SkeletonModification2DPhysicalBones])(r)
	return rg.TypedPtr()
}

func (r *RefSkeletonModification2DPhysicalBonesImpl) Ref(from Ref) {
	rg := (*TypedRef[SkeletonModification2DPhysicalBones])(r)
	rg.Ref(from)
}

func (r *RefSkeletonModification2DPhysicalBonesImpl) TypedRef(from *RefSkeletonModification2DPhysicalBonesImpl) {
	rg := (*TypedRef[SkeletonModification2DPhysicalBones])(r)
	t := (*TypedRef[SkeletonModification2DPhysicalBones])(from)
	rg.TypedRef((*TypedRef[SkeletonModification2DPhysicalBones])(t))
}

func (r *RefSkeletonModification2DPhysicalBonesImpl) Unref() {
	rg := (*TypedRef[SkeletonModification2DPhysicalBones])(r)
	rg.Unref()
}

func (r *RefSkeletonModification2DPhysicalBonesImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkeletonModification2DPhysicalBones(reference SkeletonModification2DPhysicalBones) RefSkeletonModification2DPhysicalBones {
	return (RefSkeletonModification2DPhysicalBones)(NewTypedRef[SkeletonModification2DPhysicalBones](reference))
}

func newRefSkeletonModification2DPhysicalBonesAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkeletonModification2DPhysicalBones](reference.(SkeletonModification2DPhysicalBones)))
}

func newRefSkeletonModification2DPhysicalBonesGDExtensionIternalConstructor(reference SkeletonModification2DPhysicalBones) RefSkeletonModification2DPhysicalBones {
	return newTypedRefGDExtensionIternalConstructor[SkeletonModification2DPhysicalBones](reference)
}

var _ RefSkeletonModification2DStackHolder = &RefSkeletonModification2DStackHolderImpl{}
var _ Ref = &RefSkeletonModification2DStackHolderImpl{}

type RefSkeletonModification2DStackHolder interface {
	Ref
	TypedPtr() SkeletonModification2DStackHolder
}

type RefSkeletonModification2DStackHolderImpl TypedRef[SkeletonModification2DStackHolder]

func (r *RefSkeletonModification2DStackHolderImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkeletonModification2DStackHolder])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkeletonModification2DStackHolderImpl) TypedPtr() SkeletonModification2DStackHolder {
	rg := (*TypedRef[SkeletonModification2DStackHolder])(r)
	return rg.TypedPtr()
}

func (r *RefSkeletonModification2DStackHolderImpl) Ref(from Ref) {
	rg := (*TypedRef[SkeletonModification2DStackHolder])(r)
	rg.Ref(from)
}

func (r *RefSkeletonModification2DStackHolderImpl) TypedRef(from *RefSkeletonModification2DStackHolderImpl) {
	rg := (*TypedRef[SkeletonModification2DStackHolder])(r)
	t := (*TypedRef[SkeletonModification2DStackHolder])(from)
	rg.TypedRef((*TypedRef[SkeletonModification2DStackHolder])(t))
}

func (r *RefSkeletonModification2DStackHolderImpl) Unref() {
	rg := (*TypedRef[SkeletonModification2DStackHolder])(r)
	rg.Unref()
}

func (r *RefSkeletonModification2DStackHolderImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkeletonModification2DStackHolder(reference SkeletonModification2DStackHolder) RefSkeletonModification2DStackHolder {
	return (RefSkeletonModification2DStackHolder)(NewTypedRef[SkeletonModification2DStackHolder](reference))
}

func newRefSkeletonModification2DStackHolderAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkeletonModification2DStackHolder](reference.(SkeletonModification2DStackHolder)))
}

func newRefSkeletonModification2DStackHolderGDExtensionIternalConstructor(reference SkeletonModification2DStackHolder) RefSkeletonModification2DStackHolder {
	return newTypedRefGDExtensionIternalConstructor[SkeletonModification2DStackHolder](reference)
}

var _ RefSkeletonModification2DTwoBoneIK = &RefSkeletonModification2DTwoBoneIKImpl{}
var _ Ref = &RefSkeletonModification2DTwoBoneIKImpl{}

type RefSkeletonModification2DTwoBoneIK interface {
	Ref
	TypedPtr() SkeletonModification2DTwoBoneIK
}

type RefSkeletonModification2DTwoBoneIKImpl TypedRef[SkeletonModification2DTwoBoneIK]

func (r *RefSkeletonModification2DTwoBoneIKImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkeletonModification2DTwoBoneIK])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkeletonModification2DTwoBoneIKImpl) TypedPtr() SkeletonModification2DTwoBoneIK {
	rg := (*TypedRef[SkeletonModification2DTwoBoneIK])(r)
	return rg.TypedPtr()
}

func (r *RefSkeletonModification2DTwoBoneIKImpl) Ref(from Ref) {
	rg := (*TypedRef[SkeletonModification2DTwoBoneIK])(r)
	rg.Ref(from)
}

func (r *RefSkeletonModification2DTwoBoneIKImpl) TypedRef(from *RefSkeletonModification2DTwoBoneIKImpl) {
	rg := (*TypedRef[SkeletonModification2DTwoBoneIK])(r)
	t := (*TypedRef[SkeletonModification2DTwoBoneIK])(from)
	rg.TypedRef((*TypedRef[SkeletonModification2DTwoBoneIK])(t))
}

func (r *RefSkeletonModification2DTwoBoneIKImpl) Unref() {
	rg := (*TypedRef[SkeletonModification2DTwoBoneIK])(r)
	rg.Unref()
}

func (r *RefSkeletonModification2DTwoBoneIKImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkeletonModification2DTwoBoneIK(reference SkeletonModification2DTwoBoneIK) RefSkeletonModification2DTwoBoneIK {
	return (RefSkeletonModification2DTwoBoneIK)(NewTypedRef[SkeletonModification2DTwoBoneIK](reference))
}

func newRefSkeletonModification2DTwoBoneIKAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkeletonModification2DTwoBoneIK](reference.(SkeletonModification2DTwoBoneIK)))
}

func newRefSkeletonModification2DTwoBoneIKGDExtensionIternalConstructor(reference SkeletonModification2DTwoBoneIK) RefSkeletonModification2DTwoBoneIK {
	return newTypedRefGDExtensionIternalConstructor[SkeletonModification2DTwoBoneIK](reference)
}

var _ RefSkeletonModificationStack2D = &RefSkeletonModificationStack2DImpl{}
var _ Ref = &RefSkeletonModificationStack2DImpl{}

type RefSkeletonModificationStack2D interface {
	Ref
	TypedPtr() SkeletonModificationStack2D
}

type RefSkeletonModificationStack2DImpl TypedRef[SkeletonModificationStack2D]

func (r *RefSkeletonModificationStack2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkeletonModificationStack2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkeletonModificationStack2DImpl) TypedPtr() SkeletonModificationStack2D {
	rg := (*TypedRef[SkeletonModificationStack2D])(r)
	return rg.TypedPtr()
}

func (r *RefSkeletonModificationStack2DImpl) Ref(from Ref) {
	rg := (*TypedRef[SkeletonModificationStack2D])(r)
	rg.Ref(from)
}

func (r *RefSkeletonModificationStack2DImpl) TypedRef(from *RefSkeletonModificationStack2DImpl) {
	rg := (*TypedRef[SkeletonModificationStack2D])(r)
	t := (*TypedRef[SkeletonModificationStack2D])(from)
	rg.TypedRef((*TypedRef[SkeletonModificationStack2D])(t))
}

func (r *RefSkeletonModificationStack2DImpl) Unref() {
	rg := (*TypedRef[SkeletonModificationStack2D])(r)
	rg.Unref()
}

func (r *RefSkeletonModificationStack2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkeletonModificationStack2D(reference SkeletonModificationStack2D) RefSkeletonModificationStack2D {
	return (RefSkeletonModificationStack2D)(NewTypedRef[SkeletonModificationStack2D](reference))
}

func newRefSkeletonModificationStack2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkeletonModificationStack2D](reference.(SkeletonModificationStack2D)))
}

func newRefSkeletonModificationStack2DGDExtensionIternalConstructor(reference SkeletonModificationStack2D) RefSkeletonModificationStack2D {
	return newTypedRefGDExtensionIternalConstructor[SkeletonModificationStack2D](reference)
}

var _ RefSkeletonProfile = &RefSkeletonProfileImpl{}
var _ Ref = &RefSkeletonProfileImpl{}

type RefSkeletonProfile interface {
	Ref
	TypedPtr() SkeletonProfile
}

type RefSkeletonProfileImpl TypedRef[SkeletonProfile]

func (r *RefSkeletonProfileImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkeletonProfile])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkeletonProfileImpl) TypedPtr() SkeletonProfile {
	rg := (*TypedRef[SkeletonProfile])(r)
	return rg.TypedPtr()
}

func (r *RefSkeletonProfileImpl) Ref(from Ref) {
	rg := (*TypedRef[SkeletonProfile])(r)
	rg.Ref(from)
}

func (r *RefSkeletonProfileImpl) TypedRef(from *RefSkeletonProfileImpl) {
	rg := (*TypedRef[SkeletonProfile])(r)
	t := (*TypedRef[SkeletonProfile])(from)
	rg.TypedRef((*TypedRef[SkeletonProfile])(t))
}

func (r *RefSkeletonProfileImpl) Unref() {
	rg := (*TypedRef[SkeletonProfile])(r)
	rg.Unref()
}

func (r *RefSkeletonProfileImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkeletonProfile(reference SkeletonProfile) RefSkeletonProfile {
	return (RefSkeletonProfile)(NewTypedRef[SkeletonProfile](reference))
}

func newRefSkeletonProfileAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkeletonProfile](reference.(SkeletonProfile)))
}

func newRefSkeletonProfileGDExtensionIternalConstructor(reference SkeletonProfile) RefSkeletonProfile {
	return newTypedRefGDExtensionIternalConstructor[SkeletonProfile](reference)
}

var _ RefSkeletonProfileHumanoid = &RefSkeletonProfileHumanoidImpl{}
var _ Ref = &RefSkeletonProfileHumanoidImpl{}

type RefSkeletonProfileHumanoid interface {
	Ref
	TypedPtr() SkeletonProfileHumanoid
}

type RefSkeletonProfileHumanoidImpl TypedRef[SkeletonProfileHumanoid]

func (r *RefSkeletonProfileHumanoidImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkeletonProfileHumanoid])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkeletonProfileHumanoidImpl) TypedPtr() SkeletonProfileHumanoid {
	rg := (*TypedRef[SkeletonProfileHumanoid])(r)
	return rg.TypedPtr()
}

func (r *RefSkeletonProfileHumanoidImpl) Ref(from Ref) {
	rg := (*TypedRef[SkeletonProfileHumanoid])(r)
	rg.Ref(from)
}

func (r *RefSkeletonProfileHumanoidImpl) TypedRef(from *RefSkeletonProfileHumanoidImpl) {
	rg := (*TypedRef[SkeletonProfileHumanoid])(r)
	t := (*TypedRef[SkeletonProfileHumanoid])(from)
	rg.TypedRef((*TypedRef[SkeletonProfileHumanoid])(t))
}

func (r *RefSkeletonProfileHumanoidImpl) Unref() {
	rg := (*TypedRef[SkeletonProfileHumanoid])(r)
	rg.Unref()
}

func (r *RefSkeletonProfileHumanoidImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkeletonProfileHumanoid(reference SkeletonProfileHumanoid) RefSkeletonProfileHumanoid {
	return (RefSkeletonProfileHumanoid)(NewTypedRef[SkeletonProfileHumanoid](reference))
}

func newRefSkeletonProfileHumanoidAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkeletonProfileHumanoid](reference.(SkeletonProfileHumanoid)))
}

func newRefSkeletonProfileHumanoidGDExtensionIternalConstructor(reference SkeletonProfileHumanoid) RefSkeletonProfileHumanoid {
	return newTypedRefGDExtensionIternalConstructor[SkeletonProfileHumanoid](reference)
}

var _ RefSkin = &RefSkinImpl{}
var _ Ref = &RefSkinImpl{}

type RefSkin interface {
	Ref
	TypedPtr() Skin
}

type RefSkinImpl TypedRef[Skin]

func (r *RefSkinImpl) Ptr() RefCounted {
	rg := (*TypedRef[Skin])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkinImpl) TypedPtr() Skin {
	rg := (*TypedRef[Skin])(r)
	return rg.TypedPtr()
}

func (r *RefSkinImpl) Ref(from Ref) {
	rg := (*TypedRef[Skin])(r)
	rg.Ref(from)
}

func (r *RefSkinImpl) TypedRef(from *RefSkinImpl) {
	rg := (*TypedRef[Skin])(r)
	t := (*TypedRef[Skin])(from)
	rg.TypedRef((*TypedRef[Skin])(t))
}

func (r *RefSkinImpl) Unref() {
	rg := (*TypedRef[Skin])(r)
	rg.Unref()
}

func (r *RefSkinImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkin(reference Skin) RefSkin {
	return (RefSkin)(NewTypedRef[Skin](reference))
}

func newRefSkinAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Skin](reference.(Skin)))
}

func newRefSkinGDExtensionIternalConstructor(reference Skin) RefSkin {
	return newTypedRefGDExtensionIternalConstructor[Skin](reference)
}

var _ RefSkinReference = &RefSkinReferenceImpl{}
var _ Ref = &RefSkinReferenceImpl{}

type RefSkinReference interface {
	Ref
	TypedPtr() SkinReference
}

type RefSkinReferenceImpl TypedRef[SkinReference]

func (r *RefSkinReferenceImpl) Ptr() RefCounted {
	rg := (*TypedRef[SkinReference])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkinReferenceImpl) TypedPtr() SkinReference {
	rg := (*TypedRef[SkinReference])(r)
	return rg.TypedPtr()
}

func (r *RefSkinReferenceImpl) Ref(from Ref) {
	rg := (*TypedRef[SkinReference])(r)
	rg.Ref(from)
}

func (r *RefSkinReferenceImpl) TypedRef(from *RefSkinReferenceImpl) {
	rg := (*TypedRef[SkinReference])(r)
	t := (*TypedRef[SkinReference])(from)
	rg.TypedRef((*TypedRef[SkinReference])(t))
}

func (r *RefSkinReferenceImpl) Unref() {
	rg := (*TypedRef[SkinReference])(r)
	rg.Unref()
}

func (r *RefSkinReferenceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSkinReference(reference SkinReference) RefSkinReference {
	return (RefSkinReference)(NewTypedRef[SkinReference](reference))
}

func newRefSkinReferenceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SkinReference](reference.(SkinReference)))
}

func newRefSkinReferenceGDExtensionIternalConstructor(reference SkinReference) RefSkinReference {
	return newTypedRefGDExtensionIternalConstructor[SkinReference](reference)
}

var _ RefSky = &RefSkyImpl{}
var _ Ref = &RefSkyImpl{}

type RefSky interface {
	Ref
	TypedPtr() Sky
}

type RefSkyImpl TypedRef[Sky]

func (r *RefSkyImpl) Ptr() RefCounted {
	rg := (*TypedRef[Sky])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSkyImpl) TypedPtr() Sky {
	rg := (*TypedRef[Sky])(r)
	return rg.TypedPtr()
}

func (r *RefSkyImpl) Ref(from Ref) {
	rg := (*TypedRef[Sky])(r)
	rg.Ref(from)
}

func (r *RefSkyImpl) TypedRef(from *RefSkyImpl) {
	rg := (*TypedRef[Sky])(r)
	t := (*TypedRef[Sky])(from)
	rg.TypedRef((*TypedRef[Sky])(t))
}

func (r *RefSkyImpl) Unref() {
	rg := (*TypedRef[Sky])(r)
	rg.Unref()
}

func (r *RefSkyImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSky(reference Sky) RefSky {
	return (RefSky)(NewTypedRef[Sky](reference))
}

func newRefSkyAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Sky](reference.(Sky)))
}

func newRefSkyGDExtensionIternalConstructor(reference Sky) RefSky {
	return newTypedRefGDExtensionIternalConstructor[Sky](reference)
}

var _ RefSphereMesh = &RefSphereMeshImpl{}
var _ Ref = &RefSphereMeshImpl{}

type RefSphereMesh interface {
	Ref
	TypedPtr() SphereMesh
}

type RefSphereMeshImpl TypedRef[SphereMesh]

func (r *RefSphereMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[SphereMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSphereMeshImpl) TypedPtr() SphereMesh {
	rg := (*TypedRef[SphereMesh])(r)
	return rg.TypedPtr()
}

func (r *RefSphereMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[SphereMesh])(r)
	rg.Ref(from)
}

func (r *RefSphereMeshImpl) TypedRef(from *RefSphereMeshImpl) {
	rg := (*TypedRef[SphereMesh])(r)
	t := (*TypedRef[SphereMesh])(from)
	rg.TypedRef((*TypedRef[SphereMesh])(t))
}

func (r *RefSphereMeshImpl) Unref() {
	rg := (*TypedRef[SphereMesh])(r)
	rg.Unref()
}

func (r *RefSphereMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSphereMesh(reference SphereMesh) RefSphereMesh {
	return (RefSphereMesh)(NewTypedRef[SphereMesh](reference))
}

func newRefSphereMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SphereMesh](reference.(SphereMesh)))
}

func newRefSphereMeshGDExtensionIternalConstructor(reference SphereMesh) RefSphereMesh {
	return newTypedRefGDExtensionIternalConstructor[SphereMesh](reference)
}

var _ RefSphereOccluder3D = &RefSphereOccluder3DImpl{}
var _ Ref = &RefSphereOccluder3DImpl{}

type RefSphereOccluder3D interface {
	Ref
	TypedPtr() SphereOccluder3D
}

type RefSphereOccluder3DImpl TypedRef[SphereOccluder3D]

func (r *RefSphereOccluder3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[SphereOccluder3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSphereOccluder3DImpl) TypedPtr() SphereOccluder3D {
	rg := (*TypedRef[SphereOccluder3D])(r)
	return rg.TypedPtr()
}

func (r *RefSphereOccluder3DImpl) Ref(from Ref) {
	rg := (*TypedRef[SphereOccluder3D])(r)
	rg.Ref(from)
}

func (r *RefSphereOccluder3DImpl) TypedRef(from *RefSphereOccluder3DImpl) {
	rg := (*TypedRef[SphereOccluder3D])(r)
	t := (*TypedRef[SphereOccluder3D])(from)
	rg.TypedRef((*TypedRef[SphereOccluder3D])(t))
}

func (r *RefSphereOccluder3DImpl) Unref() {
	rg := (*TypedRef[SphereOccluder3D])(r)
	rg.Unref()
}

func (r *RefSphereOccluder3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSphereOccluder3D(reference SphereOccluder3D) RefSphereOccluder3D {
	return (RefSphereOccluder3D)(NewTypedRef[SphereOccluder3D](reference))
}

func newRefSphereOccluder3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SphereOccluder3D](reference.(SphereOccluder3D)))
}

func newRefSphereOccluder3DGDExtensionIternalConstructor(reference SphereOccluder3D) RefSphereOccluder3D {
	return newTypedRefGDExtensionIternalConstructor[SphereOccluder3D](reference)
}

var _ RefSphereShape3D = &RefSphereShape3DImpl{}
var _ Ref = &RefSphereShape3DImpl{}

type RefSphereShape3D interface {
	Ref
	TypedPtr() SphereShape3D
}

type RefSphereShape3DImpl TypedRef[SphereShape3D]

func (r *RefSphereShape3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[SphereShape3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSphereShape3DImpl) TypedPtr() SphereShape3D {
	rg := (*TypedRef[SphereShape3D])(r)
	return rg.TypedPtr()
}

func (r *RefSphereShape3DImpl) Ref(from Ref) {
	rg := (*TypedRef[SphereShape3D])(r)
	rg.Ref(from)
}

func (r *RefSphereShape3DImpl) TypedRef(from *RefSphereShape3DImpl) {
	rg := (*TypedRef[SphereShape3D])(r)
	t := (*TypedRef[SphereShape3D])(from)
	rg.TypedRef((*TypedRef[SphereShape3D])(t))
}

func (r *RefSphereShape3DImpl) Unref() {
	rg := (*TypedRef[SphereShape3D])(r)
	rg.Unref()
}

func (r *RefSphereShape3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSphereShape3D(reference SphereShape3D) RefSphereShape3D {
	return (RefSphereShape3D)(NewTypedRef[SphereShape3D](reference))
}

func newRefSphereShape3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SphereShape3D](reference.(SphereShape3D)))
}

func newRefSphereShape3DGDExtensionIternalConstructor(reference SphereShape3D) RefSphereShape3D {
	return newTypedRefGDExtensionIternalConstructor[SphereShape3D](reference)
}

var _ RefSpriteFrames = &RefSpriteFramesImpl{}
var _ Ref = &RefSpriteFramesImpl{}

type RefSpriteFrames interface {
	Ref
	TypedPtr() SpriteFrames
}

type RefSpriteFramesImpl TypedRef[SpriteFrames]

func (r *RefSpriteFramesImpl) Ptr() RefCounted {
	rg := (*TypedRef[SpriteFrames])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSpriteFramesImpl) TypedPtr() SpriteFrames {
	rg := (*TypedRef[SpriteFrames])(r)
	return rg.TypedPtr()
}

func (r *RefSpriteFramesImpl) Ref(from Ref) {
	rg := (*TypedRef[SpriteFrames])(r)
	rg.Ref(from)
}

func (r *RefSpriteFramesImpl) TypedRef(from *RefSpriteFramesImpl) {
	rg := (*TypedRef[SpriteFrames])(r)
	t := (*TypedRef[SpriteFrames])(from)
	rg.TypedRef((*TypedRef[SpriteFrames])(t))
}

func (r *RefSpriteFramesImpl) Unref() {
	rg := (*TypedRef[SpriteFrames])(r)
	rg.Unref()
}

func (r *RefSpriteFramesImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSpriteFrames(reference SpriteFrames) RefSpriteFrames {
	return (RefSpriteFrames)(NewTypedRef[SpriteFrames](reference))
}

func newRefSpriteFramesAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SpriteFrames](reference.(SpriteFrames)))
}

func newRefSpriteFramesGDExtensionIternalConstructor(reference SpriteFrames) RefSpriteFrames {
	return newTypedRefGDExtensionIternalConstructor[SpriteFrames](reference)
}

var _ RefStandardMaterial3D = &RefStandardMaterial3DImpl{}
var _ Ref = &RefStandardMaterial3DImpl{}

type RefStandardMaterial3D interface {
	Ref
	TypedPtr() StandardMaterial3D
}

type RefStandardMaterial3DImpl TypedRef[StandardMaterial3D]

func (r *RefStandardMaterial3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[StandardMaterial3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStandardMaterial3DImpl) TypedPtr() StandardMaterial3D {
	rg := (*TypedRef[StandardMaterial3D])(r)
	return rg.TypedPtr()
}

func (r *RefStandardMaterial3DImpl) Ref(from Ref) {
	rg := (*TypedRef[StandardMaterial3D])(r)
	rg.Ref(from)
}

func (r *RefStandardMaterial3DImpl) TypedRef(from *RefStandardMaterial3DImpl) {
	rg := (*TypedRef[StandardMaterial3D])(r)
	t := (*TypedRef[StandardMaterial3D])(from)
	rg.TypedRef((*TypedRef[StandardMaterial3D])(t))
}

func (r *RefStandardMaterial3DImpl) Unref() {
	rg := (*TypedRef[StandardMaterial3D])(r)
	rg.Unref()
}

func (r *RefStandardMaterial3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStandardMaterial3D(reference StandardMaterial3D) RefStandardMaterial3D {
	return (RefStandardMaterial3D)(NewTypedRef[StandardMaterial3D](reference))
}

func newRefStandardMaterial3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StandardMaterial3D](reference.(StandardMaterial3D)))
}

func newRefStandardMaterial3DGDExtensionIternalConstructor(reference StandardMaterial3D) RefStandardMaterial3D {
	return newTypedRefGDExtensionIternalConstructor[StandardMaterial3D](reference)
}

var _ RefStreamPeer = &RefStreamPeerImpl{}
var _ Ref = &RefStreamPeerImpl{}

type RefStreamPeer interface {
	Ref
	TypedPtr() StreamPeer
}

type RefStreamPeerImpl TypedRef[StreamPeer]

func (r *RefStreamPeerImpl) Ptr() RefCounted {
	rg := (*TypedRef[StreamPeer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStreamPeerImpl) TypedPtr() StreamPeer {
	rg := (*TypedRef[StreamPeer])(r)
	return rg.TypedPtr()
}

func (r *RefStreamPeerImpl) Ref(from Ref) {
	rg := (*TypedRef[StreamPeer])(r)
	rg.Ref(from)
}

func (r *RefStreamPeerImpl) TypedRef(from *RefStreamPeerImpl) {
	rg := (*TypedRef[StreamPeer])(r)
	t := (*TypedRef[StreamPeer])(from)
	rg.TypedRef((*TypedRef[StreamPeer])(t))
}

func (r *RefStreamPeerImpl) Unref() {
	rg := (*TypedRef[StreamPeer])(r)
	rg.Unref()
}

func (r *RefStreamPeerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStreamPeer(reference StreamPeer) RefStreamPeer {
	return (RefStreamPeer)(NewTypedRef[StreamPeer](reference))
}

func newRefStreamPeerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StreamPeer](reference.(StreamPeer)))
}

func newRefStreamPeerGDExtensionIternalConstructor(reference StreamPeer) RefStreamPeer {
	return newTypedRefGDExtensionIternalConstructor[StreamPeer](reference)
}

var _ RefStreamPeerBuffer = &RefStreamPeerBufferImpl{}
var _ Ref = &RefStreamPeerBufferImpl{}

type RefStreamPeerBuffer interface {
	Ref
	TypedPtr() StreamPeerBuffer
}

type RefStreamPeerBufferImpl TypedRef[StreamPeerBuffer]

func (r *RefStreamPeerBufferImpl) Ptr() RefCounted {
	rg := (*TypedRef[StreamPeerBuffer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStreamPeerBufferImpl) TypedPtr() StreamPeerBuffer {
	rg := (*TypedRef[StreamPeerBuffer])(r)
	return rg.TypedPtr()
}

func (r *RefStreamPeerBufferImpl) Ref(from Ref) {
	rg := (*TypedRef[StreamPeerBuffer])(r)
	rg.Ref(from)
}

func (r *RefStreamPeerBufferImpl) TypedRef(from *RefStreamPeerBufferImpl) {
	rg := (*TypedRef[StreamPeerBuffer])(r)
	t := (*TypedRef[StreamPeerBuffer])(from)
	rg.TypedRef((*TypedRef[StreamPeerBuffer])(t))
}

func (r *RefStreamPeerBufferImpl) Unref() {
	rg := (*TypedRef[StreamPeerBuffer])(r)
	rg.Unref()
}

func (r *RefStreamPeerBufferImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStreamPeerBuffer(reference StreamPeerBuffer) RefStreamPeerBuffer {
	return (RefStreamPeerBuffer)(NewTypedRef[StreamPeerBuffer](reference))
}

func newRefStreamPeerBufferAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StreamPeerBuffer](reference.(StreamPeerBuffer)))
}

func newRefStreamPeerBufferGDExtensionIternalConstructor(reference StreamPeerBuffer) RefStreamPeerBuffer {
	return newTypedRefGDExtensionIternalConstructor[StreamPeerBuffer](reference)
}

var _ RefStreamPeerExtension = &RefStreamPeerExtensionImpl{}
var _ Ref = &RefStreamPeerExtensionImpl{}

type RefStreamPeerExtension interface {
	Ref
	TypedPtr() StreamPeerExtension
}

type RefStreamPeerExtensionImpl TypedRef[StreamPeerExtension]

func (r *RefStreamPeerExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[StreamPeerExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStreamPeerExtensionImpl) TypedPtr() StreamPeerExtension {
	rg := (*TypedRef[StreamPeerExtension])(r)
	return rg.TypedPtr()
}

func (r *RefStreamPeerExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[StreamPeerExtension])(r)
	rg.Ref(from)
}

func (r *RefStreamPeerExtensionImpl) TypedRef(from *RefStreamPeerExtensionImpl) {
	rg := (*TypedRef[StreamPeerExtension])(r)
	t := (*TypedRef[StreamPeerExtension])(from)
	rg.TypedRef((*TypedRef[StreamPeerExtension])(t))
}

func (r *RefStreamPeerExtensionImpl) Unref() {
	rg := (*TypedRef[StreamPeerExtension])(r)
	rg.Unref()
}

func (r *RefStreamPeerExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStreamPeerExtension(reference StreamPeerExtension) RefStreamPeerExtension {
	return (RefStreamPeerExtension)(NewTypedRef[StreamPeerExtension](reference))
}

func newRefStreamPeerExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StreamPeerExtension](reference.(StreamPeerExtension)))
}

func newRefStreamPeerExtensionGDExtensionIternalConstructor(reference StreamPeerExtension) RefStreamPeerExtension {
	return newTypedRefGDExtensionIternalConstructor[StreamPeerExtension](reference)
}

var _ RefStreamPeerGZIP = &RefStreamPeerGZIPImpl{}
var _ Ref = &RefStreamPeerGZIPImpl{}

type RefStreamPeerGZIP interface {
	Ref
	TypedPtr() StreamPeerGZIP
}

type RefStreamPeerGZIPImpl TypedRef[StreamPeerGZIP]

func (r *RefStreamPeerGZIPImpl) Ptr() RefCounted {
	rg := (*TypedRef[StreamPeerGZIP])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStreamPeerGZIPImpl) TypedPtr() StreamPeerGZIP {
	rg := (*TypedRef[StreamPeerGZIP])(r)
	return rg.TypedPtr()
}

func (r *RefStreamPeerGZIPImpl) Ref(from Ref) {
	rg := (*TypedRef[StreamPeerGZIP])(r)
	rg.Ref(from)
}

func (r *RefStreamPeerGZIPImpl) TypedRef(from *RefStreamPeerGZIPImpl) {
	rg := (*TypedRef[StreamPeerGZIP])(r)
	t := (*TypedRef[StreamPeerGZIP])(from)
	rg.TypedRef((*TypedRef[StreamPeerGZIP])(t))
}

func (r *RefStreamPeerGZIPImpl) Unref() {
	rg := (*TypedRef[StreamPeerGZIP])(r)
	rg.Unref()
}

func (r *RefStreamPeerGZIPImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStreamPeerGZIP(reference StreamPeerGZIP) RefStreamPeerGZIP {
	return (RefStreamPeerGZIP)(NewTypedRef[StreamPeerGZIP](reference))
}

func newRefStreamPeerGZIPAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StreamPeerGZIP](reference.(StreamPeerGZIP)))
}

func newRefStreamPeerGZIPGDExtensionIternalConstructor(reference StreamPeerGZIP) RefStreamPeerGZIP {
	return newTypedRefGDExtensionIternalConstructor[StreamPeerGZIP](reference)
}

var _ RefStreamPeerTCP = &RefStreamPeerTCPImpl{}
var _ Ref = &RefStreamPeerTCPImpl{}

type RefStreamPeerTCP interface {
	Ref
	TypedPtr() StreamPeerTCP
}

type RefStreamPeerTCPImpl TypedRef[StreamPeerTCP]

func (r *RefStreamPeerTCPImpl) Ptr() RefCounted {
	rg := (*TypedRef[StreamPeerTCP])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStreamPeerTCPImpl) TypedPtr() StreamPeerTCP {
	rg := (*TypedRef[StreamPeerTCP])(r)
	return rg.TypedPtr()
}

func (r *RefStreamPeerTCPImpl) Ref(from Ref) {
	rg := (*TypedRef[StreamPeerTCP])(r)
	rg.Ref(from)
}

func (r *RefStreamPeerTCPImpl) TypedRef(from *RefStreamPeerTCPImpl) {
	rg := (*TypedRef[StreamPeerTCP])(r)
	t := (*TypedRef[StreamPeerTCP])(from)
	rg.TypedRef((*TypedRef[StreamPeerTCP])(t))
}

func (r *RefStreamPeerTCPImpl) Unref() {
	rg := (*TypedRef[StreamPeerTCP])(r)
	rg.Unref()
}

func (r *RefStreamPeerTCPImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStreamPeerTCP(reference StreamPeerTCP) RefStreamPeerTCP {
	return (RefStreamPeerTCP)(NewTypedRef[StreamPeerTCP](reference))
}

func newRefStreamPeerTCPAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StreamPeerTCP](reference.(StreamPeerTCP)))
}

func newRefStreamPeerTCPGDExtensionIternalConstructor(reference StreamPeerTCP) RefStreamPeerTCP {
	return newTypedRefGDExtensionIternalConstructor[StreamPeerTCP](reference)
}

var _ RefStreamPeerTLS = &RefStreamPeerTLSImpl{}
var _ Ref = &RefStreamPeerTLSImpl{}

type RefStreamPeerTLS interface {
	Ref
	TypedPtr() StreamPeerTLS
}

type RefStreamPeerTLSImpl TypedRef[StreamPeerTLS]

func (r *RefStreamPeerTLSImpl) Ptr() RefCounted {
	rg := (*TypedRef[StreamPeerTLS])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStreamPeerTLSImpl) TypedPtr() StreamPeerTLS {
	rg := (*TypedRef[StreamPeerTLS])(r)
	return rg.TypedPtr()
}

func (r *RefStreamPeerTLSImpl) Ref(from Ref) {
	rg := (*TypedRef[StreamPeerTLS])(r)
	rg.Ref(from)
}

func (r *RefStreamPeerTLSImpl) TypedRef(from *RefStreamPeerTLSImpl) {
	rg := (*TypedRef[StreamPeerTLS])(r)
	t := (*TypedRef[StreamPeerTLS])(from)
	rg.TypedRef((*TypedRef[StreamPeerTLS])(t))
}

func (r *RefStreamPeerTLSImpl) Unref() {
	rg := (*TypedRef[StreamPeerTLS])(r)
	rg.Unref()
}

func (r *RefStreamPeerTLSImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStreamPeerTLS(reference StreamPeerTLS) RefStreamPeerTLS {
	return (RefStreamPeerTLS)(NewTypedRef[StreamPeerTLS](reference))
}

func newRefStreamPeerTLSAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StreamPeerTLS](reference.(StreamPeerTLS)))
}

func newRefStreamPeerTLSGDExtensionIternalConstructor(reference StreamPeerTLS) RefStreamPeerTLS {
	return newTypedRefGDExtensionIternalConstructor[StreamPeerTLS](reference)
}

var _ RefStyleBox = &RefStyleBoxImpl{}
var _ Ref = &RefStyleBoxImpl{}

type RefStyleBox interface {
	Ref
	TypedPtr() StyleBox
}

type RefStyleBoxImpl TypedRef[StyleBox]

func (r *RefStyleBoxImpl) Ptr() RefCounted {
	rg := (*TypedRef[StyleBox])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStyleBoxImpl) TypedPtr() StyleBox {
	rg := (*TypedRef[StyleBox])(r)
	return rg.TypedPtr()
}

func (r *RefStyleBoxImpl) Ref(from Ref) {
	rg := (*TypedRef[StyleBox])(r)
	rg.Ref(from)
}

func (r *RefStyleBoxImpl) TypedRef(from *RefStyleBoxImpl) {
	rg := (*TypedRef[StyleBox])(r)
	t := (*TypedRef[StyleBox])(from)
	rg.TypedRef((*TypedRef[StyleBox])(t))
}

func (r *RefStyleBoxImpl) Unref() {
	rg := (*TypedRef[StyleBox])(r)
	rg.Unref()
}

func (r *RefStyleBoxImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStyleBox(reference StyleBox) RefStyleBox {
	return (RefStyleBox)(NewTypedRef[StyleBox](reference))
}

func newRefStyleBoxAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StyleBox](reference.(StyleBox)))
}

func newRefStyleBoxGDExtensionIternalConstructor(reference StyleBox) RefStyleBox {
	return newTypedRefGDExtensionIternalConstructor[StyleBox](reference)
}

var _ RefStyleBoxEmpty = &RefStyleBoxEmptyImpl{}
var _ Ref = &RefStyleBoxEmptyImpl{}

type RefStyleBoxEmpty interface {
	Ref
	TypedPtr() StyleBoxEmpty
}

type RefStyleBoxEmptyImpl TypedRef[StyleBoxEmpty]

func (r *RefStyleBoxEmptyImpl) Ptr() RefCounted {
	rg := (*TypedRef[StyleBoxEmpty])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStyleBoxEmptyImpl) TypedPtr() StyleBoxEmpty {
	rg := (*TypedRef[StyleBoxEmpty])(r)
	return rg.TypedPtr()
}

func (r *RefStyleBoxEmptyImpl) Ref(from Ref) {
	rg := (*TypedRef[StyleBoxEmpty])(r)
	rg.Ref(from)
}

func (r *RefStyleBoxEmptyImpl) TypedRef(from *RefStyleBoxEmptyImpl) {
	rg := (*TypedRef[StyleBoxEmpty])(r)
	t := (*TypedRef[StyleBoxEmpty])(from)
	rg.TypedRef((*TypedRef[StyleBoxEmpty])(t))
}

func (r *RefStyleBoxEmptyImpl) Unref() {
	rg := (*TypedRef[StyleBoxEmpty])(r)
	rg.Unref()
}

func (r *RefStyleBoxEmptyImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStyleBoxEmpty(reference StyleBoxEmpty) RefStyleBoxEmpty {
	return (RefStyleBoxEmpty)(NewTypedRef[StyleBoxEmpty](reference))
}

func newRefStyleBoxEmptyAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StyleBoxEmpty](reference.(StyleBoxEmpty)))
}

func newRefStyleBoxEmptyGDExtensionIternalConstructor(reference StyleBoxEmpty) RefStyleBoxEmpty {
	return newTypedRefGDExtensionIternalConstructor[StyleBoxEmpty](reference)
}

var _ RefStyleBoxFlat = &RefStyleBoxFlatImpl{}
var _ Ref = &RefStyleBoxFlatImpl{}

type RefStyleBoxFlat interface {
	Ref
	TypedPtr() StyleBoxFlat
}

type RefStyleBoxFlatImpl TypedRef[StyleBoxFlat]

func (r *RefStyleBoxFlatImpl) Ptr() RefCounted {
	rg := (*TypedRef[StyleBoxFlat])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStyleBoxFlatImpl) TypedPtr() StyleBoxFlat {
	rg := (*TypedRef[StyleBoxFlat])(r)
	return rg.TypedPtr()
}

func (r *RefStyleBoxFlatImpl) Ref(from Ref) {
	rg := (*TypedRef[StyleBoxFlat])(r)
	rg.Ref(from)
}

func (r *RefStyleBoxFlatImpl) TypedRef(from *RefStyleBoxFlatImpl) {
	rg := (*TypedRef[StyleBoxFlat])(r)
	t := (*TypedRef[StyleBoxFlat])(from)
	rg.TypedRef((*TypedRef[StyleBoxFlat])(t))
}

func (r *RefStyleBoxFlatImpl) Unref() {
	rg := (*TypedRef[StyleBoxFlat])(r)
	rg.Unref()
}

func (r *RefStyleBoxFlatImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStyleBoxFlat(reference StyleBoxFlat) RefStyleBoxFlat {
	return (RefStyleBoxFlat)(NewTypedRef[StyleBoxFlat](reference))
}

func newRefStyleBoxFlatAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StyleBoxFlat](reference.(StyleBoxFlat)))
}

func newRefStyleBoxFlatGDExtensionIternalConstructor(reference StyleBoxFlat) RefStyleBoxFlat {
	return newTypedRefGDExtensionIternalConstructor[StyleBoxFlat](reference)
}

var _ RefStyleBoxLine = &RefStyleBoxLineImpl{}
var _ Ref = &RefStyleBoxLineImpl{}

type RefStyleBoxLine interface {
	Ref
	TypedPtr() StyleBoxLine
}

type RefStyleBoxLineImpl TypedRef[StyleBoxLine]

func (r *RefStyleBoxLineImpl) Ptr() RefCounted {
	rg := (*TypedRef[StyleBoxLine])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStyleBoxLineImpl) TypedPtr() StyleBoxLine {
	rg := (*TypedRef[StyleBoxLine])(r)
	return rg.TypedPtr()
}

func (r *RefStyleBoxLineImpl) Ref(from Ref) {
	rg := (*TypedRef[StyleBoxLine])(r)
	rg.Ref(from)
}

func (r *RefStyleBoxLineImpl) TypedRef(from *RefStyleBoxLineImpl) {
	rg := (*TypedRef[StyleBoxLine])(r)
	t := (*TypedRef[StyleBoxLine])(from)
	rg.TypedRef((*TypedRef[StyleBoxLine])(t))
}

func (r *RefStyleBoxLineImpl) Unref() {
	rg := (*TypedRef[StyleBoxLine])(r)
	rg.Unref()
}

func (r *RefStyleBoxLineImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStyleBoxLine(reference StyleBoxLine) RefStyleBoxLine {
	return (RefStyleBoxLine)(NewTypedRef[StyleBoxLine](reference))
}

func newRefStyleBoxLineAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StyleBoxLine](reference.(StyleBoxLine)))
}

func newRefStyleBoxLineGDExtensionIternalConstructor(reference StyleBoxLine) RefStyleBoxLine {
	return newTypedRefGDExtensionIternalConstructor[StyleBoxLine](reference)
}

var _ RefStyleBoxTexture = &RefStyleBoxTextureImpl{}
var _ Ref = &RefStyleBoxTextureImpl{}

type RefStyleBoxTexture interface {
	Ref
	TypedPtr() StyleBoxTexture
}

type RefStyleBoxTextureImpl TypedRef[StyleBoxTexture]

func (r *RefStyleBoxTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[StyleBoxTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefStyleBoxTextureImpl) TypedPtr() StyleBoxTexture {
	rg := (*TypedRef[StyleBoxTexture])(r)
	return rg.TypedPtr()
}

func (r *RefStyleBoxTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[StyleBoxTexture])(r)
	rg.Ref(from)
}

func (r *RefStyleBoxTextureImpl) TypedRef(from *RefStyleBoxTextureImpl) {
	rg := (*TypedRef[StyleBoxTexture])(r)
	t := (*TypedRef[StyleBoxTexture])(from)
	rg.TypedRef((*TypedRef[StyleBoxTexture])(t))
}

func (r *RefStyleBoxTextureImpl) Unref() {
	rg := (*TypedRef[StyleBoxTexture])(r)
	rg.Unref()
}

func (r *RefStyleBoxTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefStyleBoxTexture(reference StyleBoxTexture) RefStyleBoxTexture {
	return (RefStyleBoxTexture)(NewTypedRef[StyleBoxTexture](reference))
}

func newRefStyleBoxTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[StyleBoxTexture](reference.(StyleBoxTexture)))
}

func newRefStyleBoxTextureGDExtensionIternalConstructor(reference StyleBoxTexture) RefStyleBoxTexture {
	return newTypedRefGDExtensionIternalConstructor[StyleBoxTexture](reference)
}

var _ RefSurfaceTool = &RefSurfaceToolImpl{}
var _ Ref = &RefSurfaceToolImpl{}

type RefSurfaceTool interface {
	Ref
	TypedPtr() SurfaceTool
}

type RefSurfaceToolImpl TypedRef[SurfaceTool]

func (r *RefSurfaceToolImpl) Ptr() RefCounted {
	rg := (*TypedRef[SurfaceTool])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSurfaceToolImpl) TypedPtr() SurfaceTool {
	rg := (*TypedRef[SurfaceTool])(r)
	return rg.TypedPtr()
}

func (r *RefSurfaceToolImpl) Ref(from Ref) {
	rg := (*TypedRef[SurfaceTool])(r)
	rg.Ref(from)
}

func (r *RefSurfaceToolImpl) TypedRef(from *RefSurfaceToolImpl) {
	rg := (*TypedRef[SurfaceTool])(r)
	t := (*TypedRef[SurfaceTool])(from)
	rg.TypedRef((*TypedRef[SurfaceTool])(t))
}

func (r *RefSurfaceToolImpl) Unref() {
	rg := (*TypedRef[SurfaceTool])(r)
	rg.Unref()
}

func (r *RefSurfaceToolImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSurfaceTool(reference SurfaceTool) RefSurfaceTool {
	return (RefSurfaceTool)(NewTypedRef[SurfaceTool](reference))
}

func newRefSurfaceToolAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SurfaceTool](reference.(SurfaceTool)))
}

func newRefSurfaceToolGDExtensionIternalConstructor(reference SurfaceTool) RefSurfaceTool {
	return newTypedRefGDExtensionIternalConstructor[SurfaceTool](reference)
}

var _ RefSyntaxHighlighter = &RefSyntaxHighlighterImpl{}
var _ Ref = &RefSyntaxHighlighterImpl{}

type RefSyntaxHighlighter interface {
	Ref
	TypedPtr() SyntaxHighlighter
}

type RefSyntaxHighlighterImpl TypedRef[SyntaxHighlighter]

func (r *RefSyntaxHighlighterImpl) Ptr() RefCounted {
	rg := (*TypedRef[SyntaxHighlighter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSyntaxHighlighterImpl) TypedPtr() SyntaxHighlighter {
	rg := (*TypedRef[SyntaxHighlighter])(r)
	return rg.TypedPtr()
}

func (r *RefSyntaxHighlighterImpl) Ref(from Ref) {
	rg := (*TypedRef[SyntaxHighlighter])(r)
	rg.Ref(from)
}

func (r *RefSyntaxHighlighterImpl) TypedRef(from *RefSyntaxHighlighterImpl) {
	rg := (*TypedRef[SyntaxHighlighter])(r)
	t := (*TypedRef[SyntaxHighlighter])(from)
	rg.TypedRef((*TypedRef[SyntaxHighlighter])(t))
}

func (r *RefSyntaxHighlighterImpl) Unref() {
	rg := (*TypedRef[SyntaxHighlighter])(r)
	rg.Unref()
}

func (r *RefSyntaxHighlighterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSyntaxHighlighter(reference SyntaxHighlighter) RefSyntaxHighlighter {
	return (RefSyntaxHighlighter)(NewTypedRef[SyntaxHighlighter](reference))
}

func newRefSyntaxHighlighterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SyntaxHighlighter](reference.(SyntaxHighlighter)))
}

func newRefSyntaxHighlighterGDExtensionIternalConstructor(reference SyntaxHighlighter) RefSyntaxHighlighter {
	return newTypedRefGDExtensionIternalConstructor[SyntaxHighlighter](reference)
}

var _ RefSystemFont = &RefSystemFontImpl{}
var _ Ref = &RefSystemFontImpl{}

type RefSystemFont interface {
	Ref
	TypedPtr() SystemFont
}

type RefSystemFontImpl TypedRef[SystemFont]

func (r *RefSystemFontImpl) Ptr() RefCounted {
	rg := (*TypedRef[SystemFont])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefSystemFontImpl) TypedPtr() SystemFont {
	rg := (*TypedRef[SystemFont])(r)
	return rg.TypedPtr()
}

func (r *RefSystemFontImpl) Ref(from Ref) {
	rg := (*TypedRef[SystemFont])(r)
	rg.Ref(from)
}

func (r *RefSystemFontImpl) TypedRef(from *RefSystemFontImpl) {
	rg := (*TypedRef[SystemFont])(r)
	t := (*TypedRef[SystemFont])(from)
	rg.TypedRef((*TypedRef[SystemFont])(t))
}

func (r *RefSystemFontImpl) Unref() {
	rg := (*TypedRef[SystemFont])(r)
	rg.Unref()
}

func (r *RefSystemFontImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefSystemFont(reference SystemFont) RefSystemFont {
	return (RefSystemFont)(NewTypedRef[SystemFont](reference))
}

func newRefSystemFontAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[SystemFont](reference.(SystemFont)))
}

func newRefSystemFontGDExtensionIternalConstructor(reference SystemFont) RefSystemFont {
	return newTypedRefGDExtensionIternalConstructor[SystemFont](reference)
}

var _ RefTCPServer = &RefTCPServerImpl{}
var _ Ref = &RefTCPServerImpl{}

type RefTCPServer interface {
	Ref
	TypedPtr() TCPServer
}

type RefTCPServerImpl TypedRef[TCPServer]

func (r *RefTCPServerImpl) Ptr() RefCounted {
	rg := (*TypedRef[TCPServer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTCPServerImpl) TypedPtr() TCPServer {
	rg := (*TypedRef[TCPServer])(r)
	return rg.TypedPtr()
}

func (r *RefTCPServerImpl) Ref(from Ref) {
	rg := (*TypedRef[TCPServer])(r)
	rg.Ref(from)
}

func (r *RefTCPServerImpl) TypedRef(from *RefTCPServerImpl) {
	rg := (*TypedRef[TCPServer])(r)
	t := (*TypedRef[TCPServer])(from)
	rg.TypedRef((*TypedRef[TCPServer])(t))
}

func (r *RefTCPServerImpl) Unref() {
	rg := (*TypedRef[TCPServer])(r)
	rg.Unref()
}

func (r *RefTCPServerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTCPServer(reference TCPServer) RefTCPServer {
	return (RefTCPServer)(NewTypedRef[TCPServer](reference))
}

func newRefTCPServerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TCPServer](reference.(TCPServer)))
}

func newRefTCPServerGDExtensionIternalConstructor(reference TCPServer) RefTCPServer {
	return newTypedRefGDExtensionIternalConstructor[TCPServer](reference)
}

var _ RefTLSOptions = &RefTLSOptionsImpl{}
var _ Ref = &RefTLSOptionsImpl{}

type RefTLSOptions interface {
	Ref
	TypedPtr() TLSOptions
}

type RefTLSOptionsImpl TypedRef[TLSOptions]

func (r *RefTLSOptionsImpl) Ptr() RefCounted {
	rg := (*TypedRef[TLSOptions])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTLSOptionsImpl) TypedPtr() TLSOptions {
	rg := (*TypedRef[TLSOptions])(r)
	return rg.TypedPtr()
}

func (r *RefTLSOptionsImpl) Ref(from Ref) {
	rg := (*TypedRef[TLSOptions])(r)
	rg.Ref(from)
}

func (r *RefTLSOptionsImpl) TypedRef(from *RefTLSOptionsImpl) {
	rg := (*TypedRef[TLSOptions])(r)
	t := (*TypedRef[TLSOptions])(from)
	rg.TypedRef((*TypedRef[TLSOptions])(t))
}

func (r *RefTLSOptionsImpl) Unref() {
	rg := (*TypedRef[TLSOptions])(r)
	rg.Unref()
}

func (r *RefTLSOptionsImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTLSOptions(reference TLSOptions) RefTLSOptions {
	return (RefTLSOptions)(NewTypedRef[TLSOptions](reference))
}

func newRefTLSOptionsAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TLSOptions](reference.(TLSOptions)))
}

func newRefTLSOptionsGDExtensionIternalConstructor(reference TLSOptions) RefTLSOptions {
	return newTypedRefGDExtensionIternalConstructor[TLSOptions](reference)
}

var _ RefTextLine = &RefTextLineImpl{}
var _ Ref = &RefTextLineImpl{}

type RefTextLine interface {
	Ref
	TypedPtr() TextLine
}

type RefTextLineImpl TypedRef[TextLine]

func (r *RefTextLineImpl) Ptr() RefCounted {
	rg := (*TypedRef[TextLine])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextLineImpl) TypedPtr() TextLine {
	rg := (*TypedRef[TextLine])(r)
	return rg.TypedPtr()
}

func (r *RefTextLineImpl) Ref(from Ref) {
	rg := (*TypedRef[TextLine])(r)
	rg.Ref(from)
}

func (r *RefTextLineImpl) TypedRef(from *RefTextLineImpl) {
	rg := (*TypedRef[TextLine])(r)
	t := (*TypedRef[TextLine])(from)
	rg.TypedRef((*TypedRef[TextLine])(t))
}

func (r *RefTextLineImpl) Unref() {
	rg := (*TypedRef[TextLine])(r)
	rg.Unref()
}

func (r *RefTextLineImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTextLine(reference TextLine) RefTextLine {
	return (RefTextLine)(NewTypedRef[TextLine](reference))
}

func newRefTextLineAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TextLine](reference.(TextLine)))
}

func newRefTextLineGDExtensionIternalConstructor(reference TextLine) RefTextLine {
	return newTypedRefGDExtensionIternalConstructor[TextLine](reference)
}

var _ RefTextMesh = &RefTextMeshImpl{}
var _ Ref = &RefTextMeshImpl{}

type RefTextMesh interface {
	Ref
	TypedPtr() TextMesh
}

type RefTextMeshImpl TypedRef[TextMesh]

func (r *RefTextMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[TextMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextMeshImpl) TypedPtr() TextMesh {
	rg := (*TypedRef[TextMesh])(r)
	return rg.TypedPtr()
}

func (r *RefTextMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[TextMesh])(r)
	rg.Ref(from)
}

func (r *RefTextMeshImpl) TypedRef(from *RefTextMeshImpl) {
	rg := (*TypedRef[TextMesh])(r)
	t := (*TypedRef[TextMesh])(from)
	rg.TypedRef((*TypedRef[TextMesh])(t))
}

func (r *RefTextMeshImpl) Unref() {
	rg := (*TypedRef[TextMesh])(r)
	rg.Unref()
}

func (r *RefTextMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTextMesh(reference TextMesh) RefTextMesh {
	return (RefTextMesh)(NewTypedRef[TextMesh](reference))
}

func newRefTextMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TextMesh](reference.(TextMesh)))
}

func newRefTextMeshGDExtensionIternalConstructor(reference TextMesh) RefTextMesh {
	return newTypedRefGDExtensionIternalConstructor[TextMesh](reference)
}

var _ RefTextParagraph = &RefTextParagraphImpl{}
var _ Ref = &RefTextParagraphImpl{}

type RefTextParagraph interface {
	Ref
	TypedPtr() TextParagraph
}

type RefTextParagraphImpl TypedRef[TextParagraph]

func (r *RefTextParagraphImpl) Ptr() RefCounted {
	rg := (*TypedRef[TextParagraph])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextParagraphImpl) TypedPtr() TextParagraph {
	rg := (*TypedRef[TextParagraph])(r)
	return rg.TypedPtr()
}

func (r *RefTextParagraphImpl) Ref(from Ref) {
	rg := (*TypedRef[TextParagraph])(r)
	rg.Ref(from)
}

func (r *RefTextParagraphImpl) TypedRef(from *RefTextParagraphImpl) {
	rg := (*TypedRef[TextParagraph])(r)
	t := (*TypedRef[TextParagraph])(from)
	rg.TypedRef((*TypedRef[TextParagraph])(t))
}

func (r *RefTextParagraphImpl) Unref() {
	rg := (*TypedRef[TextParagraph])(r)
	rg.Unref()
}

func (r *RefTextParagraphImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTextParagraph(reference TextParagraph) RefTextParagraph {
	return (RefTextParagraph)(NewTypedRef[TextParagraph](reference))
}

func newRefTextParagraphAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TextParagraph](reference.(TextParagraph)))
}

func newRefTextParagraphGDExtensionIternalConstructor(reference TextParagraph) RefTextParagraph {
	return newTypedRefGDExtensionIternalConstructor[TextParagraph](reference)
}

var _ RefTextServer = &RefTextServerImpl{}
var _ Ref = &RefTextServerImpl{}

type RefTextServer interface {
	Ref
	TypedPtr() TextServer
}

type RefTextServerImpl TypedRef[TextServer]

func (r *RefTextServerImpl) Ptr() RefCounted {
	rg := (*TypedRef[TextServer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextServerImpl) TypedPtr() TextServer {
	rg := (*TypedRef[TextServer])(r)
	return rg.TypedPtr()
}

func (r *RefTextServerImpl) Ref(from Ref) {
	rg := (*TypedRef[TextServer])(r)
	rg.Ref(from)
}

func (r *RefTextServerImpl) TypedRef(from *RefTextServerImpl) {
	rg := (*TypedRef[TextServer])(r)
	t := (*TypedRef[TextServer])(from)
	rg.TypedRef((*TypedRef[TextServer])(t))
}

func (r *RefTextServerImpl) Unref() {
	rg := (*TypedRef[TextServer])(r)
	rg.Unref()
}

func (r *RefTextServerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTextServer(reference TextServer) RefTextServer {
	return (RefTextServer)(NewTypedRef[TextServer](reference))
}

func newRefTextServerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TextServer](reference.(TextServer)))
}

func newRefTextServerGDExtensionIternalConstructor(reference TextServer) RefTextServer {
	return newTypedRefGDExtensionIternalConstructor[TextServer](reference)
}

var _ RefTextServerAdvanced = &RefTextServerAdvancedImpl{}
var _ Ref = &RefTextServerAdvancedImpl{}

type RefTextServerAdvanced interface {
	Ref
	TypedPtr() TextServerAdvanced
}

type RefTextServerAdvancedImpl TypedRef[TextServerAdvanced]

func (r *RefTextServerAdvancedImpl) Ptr() RefCounted {
	rg := (*TypedRef[TextServerAdvanced])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextServerAdvancedImpl) TypedPtr() TextServerAdvanced {
	rg := (*TypedRef[TextServerAdvanced])(r)
	return rg.TypedPtr()
}

func (r *RefTextServerAdvancedImpl) Ref(from Ref) {
	rg := (*TypedRef[TextServerAdvanced])(r)
	rg.Ref(from)
}

func (r *RefTextServerAdvancedImpl) TypedRef(from *RefTextServerAdvancedImpl) {
	rg := (*TypedRef[TextServerAdvanced])(r)
	t := (*TypedRef[TextServerAdvanced])(from)
	rg.TypedRef((*TypedRef[TextServerAdvanced])(t))
}

func (r *RefTextServerAdvancedImpl) Unref() {
	rg := (*TypedRef[TextServerAdvanced])(r)
	rg.Unref()
}

func (r *RefTextServerAdvancedImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTextServerAdvanced(reference TextServerAdvanced) RefTextServerAdvanced {
	return (RefTextServerAdvanced)(NewTypedRef[TextServerAdvanced](reference))
}

func newRefTextServerAdvancedAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TextServerAdvanced](reference.(TextServerAdvanced)))
}

func newRefTextServerAdvancedGDExtensionIternalConstructor(reference TextServerAdvanced) RefTextServerAdvanced {
	return newTypedRefGDExtensionIternalConstructor[TextServerAdvanced](reference)
}

var _ RefTextServerDummy = &RefTextServerDummyImpl{}
var _ Ref = &RefTextServerDummyImpl{}

type RefTextServerDummy interface {
	Ref
	TypedPtr() TextServerDummy
}

type RefTextServerDummyImpl TypedRef[TextServerDummy]

func (r *RefTextServerDummyImpl) Ptr() RefCounted {
	rg := (*TypedRef[TextServerDummy])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextServerDummyImpl) TypedPtr() TextServerDummy {
	rg := (*TypedRef[TextServerDummy])(r)
	return rg.TypedPtr()
}

func (r *RefTextServerDummyImpl) Ref(from Ref) {
	rg := (*TypedRef[TextServerDummy])(r)
	rg.Ref(from)
}

func (r *RefTextServerDummyImpl) TypedRef(from *RefTextServerDummyImpl) {
	rg := (*TypedRef[TextServerDummy])(r)
	t := (*TypedRef[TextServerDummy])(from)
	rg.TypedRef((*TypedRef[TextServerDummy])(t))
}

func (r *RefTextServerDummyImpl) Unref() {
	rg := (*TypedRef[TextServerDummy])(r)
	rg.Unref()
}

func (r *RefTextServerDummyImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTextServerDummy(reference TextServerDummy) RefTextServerDummy {
	return (RefTextServerDummy)(NewTypedRef[TextServerDummy](reference))
}

func newRefTextServerDummyAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TextServerDummy](reference.(TextServerDummy)))
}

func newRefTextServerDummyGDExtensionIternalConstructor(reference TextServerDummy) RefTextServerDummy {
	return newTypedRefGDExtensionIternalConstructor[TextServerDummy](reference)
}

var _ RefTextServerExtension = &RefTextServerExtensionImpl{}
var _ Ref = &RefTextServerExtensionImpl{}

type RefTextServerExtension interface {
	Ref
	TypedPtr() TextServerExtension
}

type RefTextServerExtensionImpl TypedRef[TextServerExtension]

func (r *RefTextServerExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[TextServerExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextServerExtensionImpl) TypedPtr() TextServerExtension {
	rg := (*TypedRef[TextServerExtension])(r)
	return rg.TypedPtr()
}

func (r *RefTextServerExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[TextServerExtension])(r)
	rg.Ref(from)
}

func (r *RefTextServerExtensionImpl) TypedRef(from *RefTextServerExtensionImpl) {
	rg := (*TypedRef[TextServerExtension])(r)
	t := (*TypedRef[TextServerExtension])(from)
	rg.TypedRef((*TypedRef[TextServerExtension])(t))
}

func (r *RefTextServerExtensionImpl) Unref() {
	rg := (*TypedRef[TextServerExtension])(r)
	rg.Unref()
}

func (r *RefTextServerExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTextServerExtension(reference TextServerExtension) RefTextServerExtension {
	return (RefTextServerExtension)(NewTypedRef[TextServerExtension](reference))
}

func newRefTextServerExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TextServerExtension](reference.(TextServerExtension)))
}

func newRefTextServerExtensionGDExtensionIternalConstructor(reference TextServerExtension) RefTextServerExtension {
	return newTypedRefGDExtensionIternalConstructor[TextServerExtension](reference)
}

var _ RefTexture = &RefTextureImpl{}
var _ Ref = &RefTextureImpl{}

type RefTexture interface {
	Ref
	TypedPtr() Texture
}

type RefTextureImpl TypedRef[Texture]

func (r *RefTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[Texture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextureImpl) TypedPtr() Texture {
	rg := (*TypedRef[Texture])(r)
	return rg.TypedPtr()
}

func (r *RefTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[Texture])(r)
	rg.Ref(from)
}

func (r *RefTextureImpl) TypedRef(from *RefTextureImpl) {
	rg := (*TypedRef[Texture])(r)
	t := (*TypedRef[Texture])(from)
	rg.TypedRef((*TypedRef[Texture])(t))
}

func (r *RefTextureImpl) Unref() {
	rg := (*TypedRef[Texture])(r)
	rg.Unref()
}

func (r *RefTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTexture(reference Texture) RefTexture {
	return (RefTexture)(NewTypedRef[Texture](reference))
}

func newRefTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Texture](reference.(Texture)))
}

func newRefTextureGDExtensionIternalConstructor(reference Texture) RefTexture {
	return newTypedRefGDExtensionIternalConstructor[Texture](reference)
}

var _ RefTexture2D = &RefTexture2DImpl{}
var _ Ref = &RefTexture2DImpl{}

type RefTexture2D interface {
	Ref
	TypedPtr() Texture2D
}

type RefTexture2DImpl TypedRef[Texture2D]

func (r *RefTexture2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[Texture2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTexture2DImpl) TypedPtr() Texture2D {
	rg := (*TypedRef[Texture2D])(r)
	return rg.TypedPtr()
}

func (r *RefTexture2DImpl) Ref(from Ref) {
	rg := (*TypedRef[Texture2D])(r)
	rg.Ref(from)
}

func (r *RefTexture2DImpl) TypedRef(from *RefTexture2DImpl) {
	rg := (*TypedRef[Texture2D])(r)
	t := (*TypedRef[Texture2D])(from)
	rg.TypedRef((*TypedRef[Texture2D])(t))
}

func (r *RefTexture2DImpl) Unref() {
	rg := (*TypedRef[Texture2D])(r)
	rg.Unref()
}

func (r *RefTexture2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTexture2D(reference Texture2D) RefTexture2D {
	return (RefTexture2D)(NewTypedRef[Texture2D](reference))
}

func newRefTexture2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Texture2D](reference.(Texture2D)))
}

func newRefTexture2DGDExtensionIternalConstructor(reference Texture2D) RefTexture2D {
	return newTypedRefGDExtensionIternalConstructor[Texture2D](reference)
}

var _ RefTexture2DArray = &RefTexture2DArrayImpl{}
var _ Ref = &RefTexture2DArrayImpl{}

type RefTexture2DArray interface {
	Ref
	TypedPtr() Texture2DArray
}

type RefTexture2DArrayImpl TypedRef[Texture2DArray]

func (r *RefTexture2DArrayImpl) Ptr() RefCounted {
	rg := (*TypedRef[Texture2DArray])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTexture2DArrayImpl) TypedPtr() Texture2DArray {
	rg := (*TypedRef[Texture2DArray])(r)
	return rg.TypedPtr()
}

func (r *RefTexture2DArrayImpl) Ref(from Ref) {
	rg := (*TypedRef[Texture2DArray])(r)
	rg.Ref(from)
}

func (r *RefTexture2DArrayImpl) TypedRef(from *RefTexture2DArrayImpl) {
	rg := (*TypedRef[Texture2DArray])(r)
	t := (*TypedRef[Texture2DArray])(from)
	rg.TypedRef((*TypedRef[Texture2DArray])(t))
}

func (r *RefTexture2DArrayImpl) Unref() {
	rg := (*TypedRef[Texture2DArray])(r)
	rg.Unref()
}

func (r *RefTexture2DArrayImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTexture2DArray(reference Texture2DArray) RefTexture2DArray {
	return (RefTexture2DArray)(NewTypedRef[Texture2DArray](reference))
}

func newRefTexture2DArrayAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Texture2DArray](reference.(Texture2DArray)))
}

func newRefTexture2DArrayGDExtensionIternalConstructor(reference Texture2DArray) RefTexture2DArray {
	return newTypedRefGDExtensionIternalConstructor[Texture2DArray](reference)
}

var _ RefTexture2DArrayRD = &RefTexture2DArrayRDImpl{}
var _ Ref = &RefTexture2DArrayRDImpl{}

type RefTexture2DArrayRD interface {
	Ref
	TypedPtr() Texture2DArrayRD
}

type RefTexture2DArrayRDImpl TypedRef[Texture2DArrayRD]

func (r *RefTexture2DArrayRDImpl) Ptr() RefCounted {
	rg := (*TypedRef[Texture2DArrayRD])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTexture2DArrayRDImpl) TypedPtr() Texture2DArrayRD {
	rg := (*TypedRef[Texture2DArrayRD])(r)
	return rg.TypedPtr()
}

func (r *RefTexture2DArrayRDImpl) Ref(from Ref) {
	rg := (*TypedRef[Texture2DArrayRD])(r)
	rg.Ref(from)
}

func (r *RefTexture2DArrayRDImpl) TypedRef(from *RefTexture2DArrayRDImpl) {
	rg := (*TypedRef[Texture2DArrayRD])(r)
	t := (*TypedRef[Texture2DArrayRD])(from)
	rg.TypedRef((*TypedRef[Texture2DArrayRD])(t))
}

func (r *RefTexture2DArrayRDImpl) Unref() {
	rg := (*TypedRef[Texture2DArrayRD])(r)
	rg.Unref()
}

func (r *RefTexture2DArrayRDImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTexture2DArrayRD(reference Texture2DArrayRD) RefTexture2DArrayRD {
	return (RefTexture2DArrayRD)(NewTypedRef[Texture2DArrayRD](reference))
}

func newRefTexture2DArrayRDAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Texture2DArrayRD](reference.(Texture2DArrayRD)))
}

func newRefTexture2DArrayRDGDExtensionIternalConstructor(reference Texture2DArrayRD) RefTexture2DArrayRD {
	return newTypedRefGDExtensionIternalConstructor[Texture2DArrayRD](reference)
}

var _ RefTexture2DRD = &RefTexture2DRDImpl{}
var _ Ref = &RefTexture2DRDImpl{}

type RefTexture2DRD interface {
	Ref
	TypedPtr() Texture2DRD
}

type RefTexture2DRDImpl TypedRef[Texture2DRD]

func (r *RefTexture2DRDImpl) Ptr() RefCounted {
	rg := (*TypedRef[Texture2DRD])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTexture2DRDImpl) TypedPtr() Texture2DRD {
	rg := (*TypedRef[Texture2DRD])(r)
	return rg.TypedPtr()
}

func (r *RefTexture2DRDImpl) Ref(from Ref) {
	rg := (*TypedRef[Texture2DRD])(r)
	rg.Ref(from)
}

func (r *RefTexture2DRDImpl) TypedRef(from *RefTexture2DRDImpl) {
	rg := (*TypedRef[Texture2DRD])(r)
	t := (*TypedRef[Texture2DRD])(from)
	rg.TypedRef((*TypedRef[Texture2DRD])(t))
}

func (r *RefTexture2DRDImpl) Unref() {
	rg := (*TypedRef[Texture2DRD])(r)
	rg.Unref()
}

func (r *RefTexture2DRDImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTexture2DRD(reference Texture2DRD) RefTexture2DRD {
	return (RefTexture2DRD)(NewTypedRef[Texture2DRD](reference))
}

func newRefTexture2DRDAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Texture2DRD](reference.(Texture2DRD)))
}

func newRefTexture2DRDGDExtensionIternalConstructor(reference Texture2DRD) RefTexture2DRD {
	return newTypedRefGDExtensionIternalConstructor[Texture2DRD](reference)
}

var _ RefTexture3D = &RefTexture3DImpl{}
var _ Ref = &RefTexture3DImpl{}

type RefTexture3D interface {
	Ref
	TypedPtr() Texture3D
}

type RefTexture3DImpl TypedRef[Texture3D]

func (r *RefTexture3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[Texture3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTexture3DImpl) TypedPtr() Texture3D {
	rg := (*TypedRef[Texture3D])(r)
	return rg.TypedPtr()
}

func (r *RefTexture3DImpl) Ref(from Ref) {
	rg := (*TypedRef[Texture3D])(r)
	rg.Ref(from)
}

func (r *RefTexture3DImpl) TypedRef(from *RefTexture3DImpl) {
	rg := (*TypedRef[Texture3D])(r)
	t := (*TypedRef[Texture3D])(from)
	rg.TypedRef((*TypedRef[Texture3D])(t))
}

func (r *RefTexture3DImpl) Unref() {
	rg := (*TypedRef[Texture3D])(r)
	rg.Unref()
}

func (r *RefTexture3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTexture3D(reference Texture3D) RefTexture3D {
	return (RefTexture3D)(NewTypedRef[Texture3D](reference))
}

func newRefTexture3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Texture3D](reference.(Texture3D)))
}

func newRefTexture3DGDExtensionIternalConstructor(reference Texture3D) RefTexture3D {
	return newTypedRefGDExtensionIternalConstructor[Texture3D](reference)
}

var _ RefTexture3DRD = &RefTexture3DRDImpl{}
var _ Ref = &RefTexture3DRDImpl{}

type RefTexture3DRD interface {
	Ref
	TypedPtr() Texture3DRD
}

type RefTexture3DRDImpl TypedRef[Texture3DRD]

func (r *RefTexture3DRDImpl) Ptr() RefCounted {
	rg := (*TypedRef[Texture3DRD])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTexture3DRDImpl) TypedPtr() Texture3DRD {
	rg := (*TypedRef[Texture3DRD])(r)
	return rg.TypedPtr()
}

func (r *RefTexture3DRDImpl) Ref(from Ref) {
	rg := (*TypedRef[Texture3DRD])(r)
	rg.Ref(from)
}

func (r *RefTexture3DRDImpl) TypedRef(from *RefTexture3DRDImpl) {
	rg := (*TypedRef[Texture3DRD])(r)
	t := (*TypedRef[Texture3DRD])(from)
	rg.TypedRef((*TypedRef[Texture3DRD])(t))
}

func (r *RefTexture3DRDImpl) Unref() {
	rg := (*TypedRef[Texture3DRD])(r)
	rg.Unref()
}

func (r *RefTexture3DRDImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTexture3DRD(reference Texture3DRD) RefTexture3DRD {
	return (RefTexture3DRD)(NewTypedRef[Texture3DRD](reference))
}

func newRefTexture3DRDAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Texture3DRD](reference.(Texture3DRD)))
}

func newRefTexture3DRDGDExtensionIternalConstructor(reference Texture3DRD) RefTexture3DRD {
	return newTypedRefGDExtensionIternalConstructor[Texture3DRD](reference)
}

var _ RefTextureCubemapArrayRD = &RefTextureCubemapArrayRDImpl{}
var _ Ref = &RefTextureCubemapArrayRDImpl{}

type RefTextureCubemapArrayRD interface {
	Ref
	TypedPtr() TextureCubemapArrayRD
}

type RefTextureCubemapArrayRDImpl TypedRef[TextureCubemapArrayRD]

func (r *RefTextureCubemapArrayRDImpl) Ptr() RefCounted {
	rg := (*TypedRef[TextureCubemapArrayRD])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextureCubemapArrayRDImpl) TypedPtr() TextureCubemapArrayRD {
	rg := (*TypedRef[TextureCubemapArrayRD])(r)
	return rg.TypedPtr()
}

func (r *RefTextureCubemapArrayRDImpl) Ref(from Ref) {
	rg := (*TypedRef[TextureCubemapArrayRD])(r)
	rg.Ref(from)
}

func (r *RefTextureCubemapArrayRDImpl) TypedRef(from *RefTextureCubemapArrayRDImpl) {
	rg := (*TypedRef[TextureCubemapArrayRD])(r)
	t := (*TypedRef[TextureCubemapArrayRD])(from)
	rg.TypedRef((*TypedRef[TextureCubemapArrayRD])(t))
}

func (r *RefTextureCubemapArrayRDImpl) Unref() {
	rg := (*TypedRef[TextureCubemapArrayRD])(r)
	rg.Unref()
}

func (r *RefTextureCubemapArrayRDImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTextureCubemapArrayRD(reference TextureCubemapArrayRD) RefTextureCubemapArrayRD {
	return (RefTextureCubemapArrayRD)(NewTypedRef[TextureCubemapArrayRD](reference))
}

func newRefTextureCubemapArrayRDAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TextureCubemapArrayRD](reference.(TextureCubemapArrayRD)))
}

func newRefTextureCubemapArrayRDGDExtensionIternalConstructor(reference TextureCubemapArrayRD) RefTextureCubemapArrayRD {
	return newTypedRefGDExtensionIternalConstructor[TextureCubemapArrayRD](reference)
}

var _ RefTextureCubemapRD = &RefTextureCubemapRDImpl{}
var _ Ref = &RefTextureCubemapRDImpl{}

type RefTextureCubemapRD interface {
	Ref
	TypedPtr() TextureCubemapRD
}

type RefTextureCubemapRDImpl TypedRef[TextureCubemapRD]

func (r *RefTextureCubemapRDImpl) Ptr() RefCounted {
	rg := (*TypedRef[TextureCubemapRD])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextureCubemapRDImpl) TypedPtr() TextureCubemapRD {
	rg := (*TypedRef[TextureCubemapRD])(r)
	return rg.TypedPtr()
}

func (r *RefTextureCubemapRDImpl) Ref(from Ref) {
	rg := (*TypedRef[TextureCubemapRD])(r)
	rg.Ref(from)
}

func (r *RefTextureCubemapRDImpl) TypedRef(from *RefTextureCubemapRDImpl) {
	rg := (*TypedRef[TextureCubemapRD])(r)
	t := (*TypedRef[TextureCubemapRD])(from)
	rg.TypedRef((*TypedRef[TextureCubemapRD])(t))
}

func (r *RefTextureCubemapRDImpl) Unref() {
	rg := (*TypedRef[TextureCubemapRD])(r)
	rg.Unref()
}

func (r *RefTextureCubemapRDImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTextureCubemapRD(reference TextureCubemapRD) RefTextureCubemapRD {
	return (RefTextureCubemapRD)(NewTypedRef[TextureCubemapRD](reference))
}

func newRefTextureCubemapRDAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TextureCubemapRD](reference.(TextureCubemapRD)))
}

func newRefTextureCubemapRDGDExtensionIternalConstructor(reference TextureCubemapRD) RefTextureCubemapRD {
	return newTypedRefGDExtensionIternalConstructor[TextureCubemapRD](reference)
}

var _ RefTextureLayered = &RefTextureLayeredImpl{}
var _ Ref = &RefTextureLayeredImpl{}

type RefTextureLayered interface {
	Ref
	TypedPtr() TextureLayered
}

type RefTextureLayeredImpl TypedRef[TextureLayered]

func (r *RefTextureLayeredImpl) Ptr() RefCounted {
	rg := (*TypedRef[TextureLayered])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextureLayeredImpl) TypedPtr() TextureLayered {
	rg := (*TypedRef[TextureLayered])(r)
	return rg.TypedPtr()
}

func (r *RefTextureLayeredImpl) Ref(from Ref) {
	rg := (*TypedRef[TextureLayered])(r)
	rg.Ref(from)
}

func (r *RefTextureLayeredImpl) TypedRef(from *RefTextureLayeredImpl) {
	rg := (*TypedRef[TextureLayered])(r)
	t := (*TypedRef[TextureLayered])(from)
	rg.TypedRef((*TypedRef[TextureLayered])(t))
}

func (r *RefTextureLayeredImpl) Unref() {
	rg := (*TypedRef[TextureLayered])(r)
	rg.Unref()
}

func (r *RefTextureLayeredImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTextureLayered(reference TextureLayered) RefTextureLayered {
	return (RefTextureLayered)(NewTypedRef[TextureLayered](reference))
}

func newRefTextureLayeredAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TextureLayered](reference.(TextureLayered)))
}

func newRefTextureLayeredGDExtensionIternalConstructor(reference TextureLayered) RefTextureLayered {
	return newTypedRefGDExtensionIternalConstructor[TextureLayered](reference)
}

var _ RefTextureLayeredRD = &RefTextureLayeredRDImpl{}
var _ Ref = &RefTextureLayeredRDImpl{}

type RefTextureLayeredRD interface {
	Ref
	TypedPtr() TextureLayeredRD
}

type RefTextureLayeredRDImpl TypedRef[TextureLayeredRD]

func (r *RefTextureLayeredRDImpl) Ptr() RefCounted {
	rg := (*TypedRef[TextureLayeredRD])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTextureLayeredRDImpl) TypedPtr() TextureLayeredRD {
	rg := (*TypedRef[TextureLayeredRD])(r)
	return rg.TypedPtr()
}

func (r *RefTextureLayeredRDImpl) Ref(from Ref) {
	rg := (*TypedRef[TextureLayeredRD])(r)
	rg.Ref(from)
}

func (r *RefTextureLayeredRDImpl) TypedRef(from *RefTextureLayeredRDImpl) {
	rg := (*TypedRef[TextureLayeredRD])(r)
	t := (*TypedRef[TextureLayeredRD])(from)
	rg.TypedRef((*TypedRef[TextureLayeredRD])(t))
}

func (r *RefTextureLayeredRDImpl) Unref() {
	rg := (*TypedRef[TextureLayeredRD])(r)
	rg.Unref()
}

func (r *RefTextureLayeredRDImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTextureLayeredRD(reference TextureLayeredRD) RefTextureLayeredRD {
	return (RefTextureLayeredRD)(NewTypedRef[TextureLayeredRD](reference))
}

func newRefTextureLayeredRDAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TextureLayeredRD](reference.(TextureLayeredRD)))
}

func newRefTextureLayeredRDGDExtensionIternalConstructor(reference TextureLayeredRD) RefTextureLayeredRD {
	return newTypedRefGDExtensionIternalConstructor[TextureLayeredRD](reference)
}

var _ RefTheme = &RefThemeImpl{}
var _ Ref = &RefThemeImpl{}

type RefTheme interface {
	Ref
	TypedPtr() Theme
}

type RefThemeImpl TypedRef[Theme]

func (r *RefThemeImpl) Ptr() RefCounted {
	rg := (*TypedRef[Theme])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefThemeImpl) TypedPtr() Theme {
	rg := (*TypedRef[Theme])(r)
	return rg.TypedPtr()
}

func (r *RefThemeImpl) Ref(from Ref) {
	rg := (*TypedRef[Theme])(r)
	rg.Ref(from)
}

func (r *RefThemeImpl) TypedRef(from *RefThemeImpl) {
	rg := (*TypedRef[Theme])(r)
	t := (*TypedRef[Theme])(from)
	rg.TypedRef((*TypedRef[Theme])(t))
}

func (r *RefThemeImpl) Unref() {
	rg := (*TypedRef[Theme])(r)
	rg.Unref()
}

func (r *RefThemeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTheme(reference Theme) RefTheme {
	return (RefTheme)(NewTypedRef[Theme](reference))
}

func newRefThemeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Theme](reference.(Theme)))
}

func newRefThemeGDExtensionIternalConstructor(reference Theme) RefTheme {
	return newTypedRefGDExtensionIternalConstructor[Theme](reference)
}

var _ RefThread = &RefThreadImpl{}
var _ Ref = &RefThreadImpl{}

type RefThread interface {
	Ref
	TypedPtr() Thread
}

type RefThreadImpl TypedRef[Thread]

func (r *RefThreadImpl) Ptr() RefCounted {
	rg := (*TypedRef[Thread])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefThreadImpl) TypedPtr() Thread {
	rg := (*TypedRef[Thread])(r)
	return rg.TypedPtr()
}

func (r *RefThreadImpl) Ref(from Ref) {
	rg := (*TypedRef[Thread])(r)
	rg.Ref(from)
}

func (r *RefThreadImpl) TypedRef(from *RefThreadImpl) {
	rg := (*TypedRef[Thread])(r)
	t := (*TypedRef[Thread])(from)
	rg.TypedRef((*TypedRef[Thread])(t))
}

func (r *RefThreadImpl) Unref() {
	rg := (*TypedRef[Thread])(r)
	rg.Unref()
}

func (r *RefThreadImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefThread(reference Thread) RefThread {
	return (RefThread)(NewTypedRef[Thread](reference))
}

func newRefThreadAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Thread](reference.(Thread)))
}

func newRefThreadGDExtensionIternalConstructor(reference Thread) RefThread {
	return newTypedRefGDExtensionIternalConstructor[Thread](reference)
}

var _ RefTileMapPattern = &RefTileMapPatternImpl{}
var _ Ref = &RefTileMapPatternImpl{}

type RefTileMapPattern interface {
	Ref
	TypedPtr() TileMapPattern
}

type RefTileMapPatternImpl TypedRef[TileMapPattern]

func (r *RefTileMapPatternImpl) Ptr() RefCounted {
	rg := (*TypedRef[TileMapPattern])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTileMapPatternImpl) TypedPtr() TileMapPattern {
	rg := (*TypedRef[TileMapPattern])(r)
	return rg.TypedPtr()
}

func (r *RefTileMapPatternImpl) Ref(from Ref) {
	rg := (*TypedRef[TileMapPattern])(r)
	rg.Ref(from)
}

func (r *RefTileMapPatternImpl) TypedRef(from *RefTileMapPatternImpl) {
	rg := (*TypedRef[TileMapPattern])(r)
	t := (*TypedRef[TileMapPattern])(from)
	rg.TypedRef((*TypedRef[TileMapPattern])(t))
}

func (r *RefTileMapPatternImpl) Unref() {
	rg := (*TypedRef[TileMapPattern])(r)
	rg.Unref()
}

func (r *RefTileMapPatternImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTileMapPattern(reference TileMapPattern) RefTileMapPattern {
	return (RefTileMapPattern)(NewTypedRef[TileMapPattern](reference))
}

func newRefTileMapPatternAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TileMapPattern](reference.(TileMapPattern)))
}

func newRefTileMapPatternGDExtensionIternalConstructor(reference TileMapPattern) RefTileMapPattern {
	return newTypedRefGDExtensionIternalConstructor[TileMapPattern](reference)
}

var _ RefTileSet = &RefTileSetImpl{}
var _ Ref = &RefTileSetImpl{}

type RefTileSet interface {
	Ref
	TypedPtr() TileSet
}

type RefTileSetImpl TypedRef[TileSet]

func (r *RefTileSetImpl) Ptr() RefCounted {
	rg := (*TypedRef[TileSet])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTileSetImpl) TypedPtr() TileSet {
	rg := (*TypedRef[TileSet])(r)
	return rg.TypedPtr()
}

func (r *RefTileSetImpl) Ref(from Ref) {
	rg := (*TypedRef[TileSet])(r)
	rg.Ref(from)
}

func (r *RefTileSetImpl) TypedRef(from *RefTileSetImpl) {
	rg := (*TypedRef[TileSet])(r)
	t := (*TypedRef[TileSet])(from)
	rg.TypedRef((*TypedRef[TileSet])(t))
}

func (r *RefTileSetImpl) Unref() {
	rg := (*TypedRef[TileSet])(r)
	rg.Unref()
}

func (r *RefTileSetImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTileSet(reference TileSet) RefTileSet {
	return (RefTileSet)(NewTypedRef[TileSet](reference))
}

func newRefTileSetAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TileSet](reference.(TileSet)))
}

func newRefTileSetGDExtensionIternalConstructor(reference TileSet) RefTileSet {
	return newTypedRefGDExtensionIternalConstructor[TileSet](reference)
}

var _ RefTileSetAtlasSource = &RefTileSetAtlasSourceImpl{}
var _ Ref = &RefTileSetAtlasSourceImpl{}

type RefTileSetAtlasSource interface {
	Ref
	TypedPtr() TileSetAtlasSource
}

type RefTileSetAtlasSourceImpl TypedRef[TileSetAtlasSource]

func (r *RefTileSetAtlasSourceImpl) Ptr() RefCounted {
	rg := (*TypedRef[TileSetAtlasSource])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTileSetAtlasSourceImpl) TypedPtr() TileSetAtlasSource {
	rg := (*TypedRef[TileSetAtlasSource])(r)
	return rg.TypedPtr()
}

func (r *RefTileSetAtlasSourceImpl) Ref(from Ref) {
	rg := (*TypedRef[TileSetAtlasSource])(r)
	rg.Ref(from)
}

func (r *RefTileSetAtlasSourceImpl) TypedRef(from *RefTileSetAtlasSourceImpl) {
	rg := (*TypedRef[TileSetAtlasSource])(r)
	t := (*TypedRef[TileSetAtlasSource])(from)
	rg.TypedRef((*TypedRef[TileSetAtlasSource])(t))
}

func (r *RefTileSetAtlasSourceImpl) Unref() {
	rg := (*TypedRef[TileSetAtlasSource])(r)
	rg.Unref()
}

func (r *RefTileSetAtlasSourceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTileSetAtlasSource(reference TileSetAtlasSource) RefTileSetAtlasSource {
	return (RefTileSetAtlasSource)(NewTypedRef[TileSetAtlasSource](reference))
}

func newRefTileSetAtlasSourceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TileSetAtlasSource](reference.(TileSetAtlasSource)))
}

func newRefTileSetAtlasSourceGDExtensionIternalConstructor(reference TileSetAtlasSource) RefTileSetAtlasSource {
	return newTypedRefGDExtensionIternalConstructor[TileSetAtlasSource](reference)
}

var _ RefTileSetScenesCollectionSource = &RefTileSetScenesCollectionSourceImpl{}
var _ Ref = &RefTileSetScenesCollectionSourceImpl{}

type RefTileSetScenesCollectionSource interface {
	Ref
	TypedPtr() TileSetScenesCollectionSource
}

type RefTileSetScenesCollectionSourceImpl TypedRef[TileSetScenesCollectionSource]

func (r *RefTileSetScenesCollectionSourceImpl) Ptr() RefCounted {
	rg := (*TypedRef[TileSetScenesCollectionSource])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTileSetScenesCollectionSourceImpl) TypedPtr() TileSetScenesCollectionSource {
	rg := (*TypedRef[TileSetScenesCollectionSource])(r)
	return rg.TypedPtr()
}

func (r *RefTileSetScenesCollectionSourceImpl) Ref(from Ref) {
	rg := (*TypedRef[TileSetScenesCollectionSource])(r)
	rg.Ref(from)
}

func (r *RefTileSetScenesCollectionSourceImpl) TypedRef(from *RefTileSetScenesCollectionSourceImpl) {
	rg := (*TypedRef[TileSetScenesCollectionSource])(r)
	t := (*TypedRef[TileSetScenesCollectionSource])(from)
	rg.TypedRef((*TypedRef[TileSetScenesCollectionSource])(t))
}

func (r *RefTileSetScenesCollectionSourceImpl) Unref() {
	rg := (*TypedRef[TileSetScenesCollectionSource])(r)
	rg.Unref()
}

func (r *RefTileSetScenesCollectionSourceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTileSetScenesCollectionSource(reference TileSetScenesCollectionSource) RefTileSetScenesCollectionSource {
	return (RefTileSetScenesCollectionSource)(NewTypedRef[TileSetScenesCollectionSource](reference))
}

func newRefTileSetScenesCollectionSourceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TileSetScenesCollectionSource](reference.(TileSetScenesCollectionSource)))
}

func newRefTileSetScenesCollectionSourceGDExtensionIternalConstructor(reference TileSetScenesCollectionSource) RefTileSetScenesCollectionSource {
	return newTypedRefGDExtensionIternalConstructor[TileSetScenesCollectionSource](reference)
}

var _ RefTileSetSource = &RefTileSetSourceImpl{}
var _ Ref = &RefTileSetSourceImpl{}

type RefTileSetSource interface {
	Ref
	TypedPtr() TileSetSource
}

type RefTileSetSourceImpl TypedRef[TileSetSource]

func (r *RefTileSetSourceImpl) Ptr() RefCounted {
	rg := (*TypedRef[TileSetSource])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTileSetSourceImpl) TypedPtr() TileSetSource {
	rg := (*TypedRef[TileSetSource])(r)
	return rg.TypedPtr()
}

func (r *RefTileSetSourceImpl) Ref(from Ref) {
	rg := (*TypedRef[TileSetSource])(r)
	rg.Ref(from)
}

func (r *RefTileSetSourceImpl) TypedRef(from *RefTileSetSourceImpl) {
	rg := (*TypedRef[TileSetSource])(r)
	t := (*TypedRef[TileSetSource])(from)
	rg.TypedRef((*TypedRef[TileSetSource])(t))
}

func (r *RefTileSetSourceImpl) Unref() {
	rg := (*TypedRef[TileSetSource])(r)
	rg.Unref()
}

func (r *RefTileSetSourceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTileSetSource(reference TileSetSource) RefTileSetSource {
	return (RefTileSetSource)(NewTypedRef[TileSetSource](reference))
}

func newRefTileSetSourceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TileSetSource](reference.(TileSetSource)))
}

func newRefTileSetSourceGDExtensionIternalConstructor(reference TileSetSource) RefTileSetSource {
	return newTypedRefGDExtensionIternalConstructor[TileSetSource](reference)
}

var _ RefTorusMesh = &RefTorusMeshImpl{}
var _ Ref = &RefTorusMeshImpl{}

type RefTorusMesh interface {
	Ref
	TypedPtr() TorusMesh
}

type RefTorusMeshImpl TypedRef[TorusMesh]

func (r *RefTorusMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[TorusMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTorusMeshImpl) TypedPtr() TorusMesh {
	rg := (*TypedRef[TorusMesh])(r)
	return rg.TypedPtr()
}

func (r *RefTorusMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[TorusMesh])(r)
	rg.Ref(from)
}

func (r *RefTorusMeshImpl) TypedRef(from *RefTorusMeshImpl) {
	rg := (*TypedRef[TorusMesh])(r)
	t := (*TypedRef[TorusMesh])(from)
	rg.TypedRef((*TypedRef[TorusMesh])(t))
}

func (r *RefTorusMeshImpl) Unref() {
	rg := (*TypedRef[TorusMesh])(r)
	rg.Unref()
}

func (r *RefTorusMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTorusMesh(reference TorusMesh) RefTorusMesh {
	return (RefTorusMesh)(NewTypedRef[TorusMesh](reference))
}

func newRefTorusMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TorusMesh](reference.(TorusMesh)))
}

func newRefTorusMeshGDExtensionIternalConstructor(reference TorusMesh) RefTorusMesh {
	return newTypedRefGDExtensionIternalConstructor[TorusMesh](reference)
}

var _ RefTranslation = &RefTranslationImpl{}
var _ Ref = &RefTranslationImpl{}

type RefTranslation interface {
	Ref
	TypedPtr() Translation
}

type RefTranslationImpl TypedRef[Translation]

func (r *RefTranslationImpl) Ptr() RefCounted {
	rg := (*TypedRef[Translation])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTranslationImpl) TypedPtr() Translation {
	rg := (*TypedRef[Translation])(r)
	return rg.TypedPtr()
}

func (r *RefTranslationImpl) Ref(from Ref) {
	rg := (*TypedRef[Translation])(r)
	rg.Ref(from)
}

func (r *RefTranslationImpl) TypedRef(from *RefTranslationImpl) {
	rg := (*TypedRef[Translation])(r)
	t := (*TypedRef[Translation])(from)
	rg.TypedRef((*TypedRef[Translation])(t))
}

func (r *RefTranslationImpl) Unref() {
	rg := (*TypedRef[Translation])(r)
	rg.Unref()
}

func (r *RefTranslationImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTranslation(reference Translation) RefTranslation {
	return (RefTranslation)(NewTypedRef[Translation](reference))
}

func newRefTranslationAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Translation](reference.(Translation)))
}

func newRefTranslationGDExtensionIternalConstructor(reference Translation) RefTranslation {
	return newTypedRefGDExtensionIternalConstructor[Translation](reference)
}

var _ RefTriangleMesh = &RefTriangleMeshImpl{}
var _ Ref = &RefTriangleMeshImpl{}

type RefTriangleMesh interface {
	Ref
	TypedPtr() TriangleMesh
}

type RefTriangleMeshImpl TypedRef[TriangleMesh]

func (r *RefTriangleMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[TriangleMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTriangleMeshImpl) TypedPtr() TriangleMesh {
	rg := (*TypedRef[TriangleMesh])(r)
	return rg.TypedPtr()
}

func (r *RefTriangleMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[TriangleMesh])(r)
	rg.Ref(from)
}

func (r *RefTriangleMeshImpl) TypedRef(from *RefTriangleMeshImpl) {
	rg := (*TypedRef[TriangleMesh])(r)
	t := (*TypedRef[TriangleMesh])(from)
	rg.TypedRef((*TypedRef[TriangleMesh])(t))
}

func (r *RefTriangleMeshImpl) Unref() {
	rg := (*TypedRef[TriangleMesh])(r)
	rg.Unref()
}

func (r *RefTriangleMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTriangleMesh(reference TriangleMesh) RefTriangleMesh {
	return (RefTriangleMesh)(NewTypedRef[TriangleMesh](reference))
}

func newRefTriangleMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TriangleMesh](reference.(TriangleMesh)))
}

func newRefTriangleMeshGDExtensionIternalConstructor(reference TriangleMesh) RefTriangleMesh {
	return newTypedRefGDExtensionIternalConstructor[TriangleMesh](reference)
}

var _ RefTubeTrailMesh = &RefTubeTrailMeshImpl{}
var _ Ref = &RefTubeTrailMeshImpl{}

type RefTubeTrailMesh interface {
	Ref
	TypedPtr() TubeTrailMesh
}

type RefTubeTrailMeshImpl TypedRef[TubeTrailMesh]

func (r *RefTubeTrailMeshImpl) Ptr() RefCounted {
	rg := (*TypedRef[TubeTrailMesh])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTubeTrailMeshImpl) TypedPtr() TubeTrailMesh {
	rg := (*TypedRef[TubeTrailMesh])(r)
	return rg.TypedPtr()
}

func (r *RefTubeTrailMeshImpl) Ref(from Ref) {
	rg := (*TypedRef[TubeTrailMesh])(r)
	rg.Ref(from)
}

func (r *RefTubeTrailMeshImpl) TypedRef(from *RefTubeTrailMeshImpl) {
	rg := (*TypedRef[TubeTrailMesh])(r)
	t := (*TypedRef[TubeTrailMesh])(from)
	rg.TypedRef((*TypedRef[TubeTrailMesh])(t))
}

func (r *RefTubeTrailMeshImpl) Unref() {
	rg := (*TypedRef[TubeTrailMesh])(r)
	rg.Unref()
}

func (r *RefTubeTrailMeshImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTubeTrailMesh(reference TubeTrailMesh) RefTubeTrailMesh {
	return (RefTubeTrailMesh)(NewTypedRef[TubeTrailMesh](reference))
}

func newRefTubeTrailMeshAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[TubeTrailMesh](reference.(TubeTrailMesh)))
}

func newRefTubeTrailMeshGDExtensionIternalConstructor(reference TubeTrailMesh) RefTubeTrailMesh {
	return newTypedRefGDExtensionIternalConstructor[TubeTrailMesh](reference)
}

var _ RefTween = &RefTweenImpl{}
var _ Ref = &RefTweenImpl{}

type RefTween interface {
	Ref
	TypedPtr() Tween
}

type RefTweenImpl TypedRef[Tween]

func (r *RefTweenImpl) Ptr() RefCounted {
	rg := (*TypedRef[Tween])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTweenImpl) TypedPtr() Tween {
	rg := (*TypedRef[Tween])(r)
	return rg.TypedPtr()
}

func (r *RefTweenImpl) Ref(from Ref) {
	rg := (*TypedRef[Tween])(r)
	rg.Ref(from)
}

func (r *RefTweenImpl) TypedRef(from *RefTweenImpl) {
	rg := (*TypedRef[Tween])(r)
	t := (*TypedRef[Tween])(from)
	rg.TypedRef((*TypedRef[Tween])(t))
}

func (r *RefTweenImpl) Unref() {
	rg := (*TypedRef[Tween])(r)
	rg.Unref()
}

func (r *RefTweenImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTween(reference Tween) RefTween {
	return (RefTween)(NewTypedRef[Tween](reference))
}

func newRefTweenAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Tween](reference.(Tween)))
}

func newRefTweenGDExtensionIternalConstructor(reference Tween) RefTween {
	return newTypedRefGDExtensionIternalConstructor[Tween](reference)
}

var _ RefTweener = &RefTweenerImpl{}
var _ Ref = &RefTweenerImpl{}

type RefTweener interface {
	Ref
	TypedPtr() Tweener
}

type RefTweenerImpl TypedRef[Tweener]

func (r *RefTweenerImpl) Ptr() RefCounted {
	rg := (*TypedRef[Tweener])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefTweenerImpl) TypedPtr() Tweener {
	rg := (*TypedRef[Tweener])(r)
	return rg.TypedPtr()
}

func (r *RefTweenerImpl) Ref(from Ref) {
	rg := (*TypedRef[Tweener])(r)
	rg.Ref(from)
}

func (r *RefTweenerImpl) TypedRef(from *RefTweenerImpl) {
	rg := (*TypedRef[Tweener])(r)
	t := (*TypedRef[Tweener])(from)
	rg.TypedRef((*TypedRef[Tweener])(t))
}

func (r *RefTweenerImpl) Unref() {
	rg := (*TypedRef[Tweener])(r)
	rg.Unref()
}

func (r *RefTweenerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefTweener(reference Tweener) RefTweener {
	return (RefTweener)(NewTypedRef[Tweener](reference))
}

func newRefTweenerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[Tweener](reference.(Tweener)))
}

func newRefTweenerGDExtensionIternalConstructor(reference Tweener) RefTweener {
	return newTypedRefGDExtensionIternalConstructor[Tweener](reference)
}

var _ RefUDPServer = &RefUDPServerImpl{}
var _ Ref = &RefUDPServerImpl{}

type RefUDPServer interface {
	Ref
	TypedPtr() UDPServer
}

type RefUDPServerImpl TypedRef[UDPServer]

func (r *RefUDPServerImpl) Ptr() RefCounted {
	rg := (*TypedRef[UDPServer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefUDPServerImpl) TypedPtr() UDPServer {
	rg := (*TypedRef[UDPServer])(r)
	return rg.TypedPtr()
}

func (r *RefUDPServerImpl) Ref(from Ref) {
	rg := (*TypedRef[UDPServer])(r)
	rg.Ref(from)
}

func (r *RefUDPServerImpl) TypedRef(from *RefUDPServerImpl) {
	rg := (*TypedRef[UDPServer])(r)
	t := (*TypedRef[UDPServer])(from)
	rg.TypedRef((*TypedRef[UDPServer])(t))
}

func (r *RefUDPServerImpl) Unref() {
	rg := (*TypedRef[UDPServer])(r)
	rg.Unref()
}

func (r *RefUDPServerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefUDPServer(reference UDPServer) RefUDPServer {
	return (RefUDPServer)(NewTypedRef[UDPServer](reference))
}

func newRefUDPServerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[UDPServer](reference.(UDPServer)))
}

func newRefUDPServerGDExtensionIternalConstructor(reference UDPServer) RefUDPServer {
	return newTypedRefGDExtensionIternalConstructor[UDPServer](reference)
}

var _ RefUPNP = &RefUPNPImpl{}
var _ Ref = &RefUPNPImpl{}

type RefUPNP interface {
	Ref
	TypedPtr() UPNP
}

type RefUPNPImpl TypedRef[UPNP]

func (r *RefUPNPImpl) Ptr() RefCounted {
	rg := (*TypedRef[UPNP])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefUPNPImpl) TypedPtr() UPNP {
	rg := (*TypedRef[UPNP])(r)
	return rg.TypedPtr()
}

func (r *RefUPNPImpl) Ref(from Ref) {
	rg := (*TypedRef[UPNP])(r)
	rg.Ref(from)
}

func (r *RefUPNPImpl) TypedRef(from *RefUPNPImpl) {
	rg := (*TypedRef[UPNP])(r)
	t := (*TypedRef[UPNP])(from)
	rg.TypedRef((*TypedRef[UPNP])(t))
}

func (r *RefUPNPImpl) Unref() {
	rg := (*TypedRef[UPNP])(r)
	rg.Unref()
}

func (r *RefUPNPImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefUPNP(reference UPNP) RefUPNP {
	return (RefUPNP)(NewTypedRef[UPNP](reference))
}

func newRefUPNPAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[UPNP](reference.(UPNP)))
}

func newRefUPNPGDExtensionIternalConstructor(reference UPNP) RefUPNP {
	return newTypedRefGDExtensionIternalConstructor[UPNP](reference)
}

var _ RefUPNPDevice = &RefUPNPDeviceImpl{}
var _ Ref = &RefUPNPDeviceImpl{}

type RefUPNPDevice interface {
	Ref
	TypedPtr() UPNPDevice
}

type RefUPNPDeviceImpl TypedRef[UPNPDevice]

func (r *RefUPNPDeviceImpl) Ptr() RefCounted {
	rg := (*TypedRef[UPNPDevice])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefUPNPDeviceImpl) TypedPtr() UPNPDevice {
	rg := (*TypedRef[UPNPDevice])(r)
	return rg.TypedPtr()
}

func (r *RefUPNPDeviceImpl) Ref(from Ref) {
	rg := (*TypedRef[UPNPDevice])(r)
	rg.Ref(from)
}

func (r *RefUPNPDeviceImpl) TypedRef(from *RefUPNPDeviceImpl) {
	rg := (*TypedRef[UPNPDevice])(r)
	t := (*TypedRef[UPNPDevice])(from)
	rg.TypedRef((*TypedRef[UPNPDevice])(t))
}

func (r *RefUPNPDeviceImpl) Unref() {
	rg := (*TypedRef[UPNPDevice])(r)
	rg.Unref()
}

func (r *RefUPNPDeviceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefUPNPDevice(reference UPNPDevice) RefUPNPDevice {
	return (RefUPNPDevice)(NewTypedRef[UPNPDevice](reference))
}

func newRefUPNPDeviceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[UPNPDevice](reference.(UPNPDevice)))
}

func newRefUPNPDeviceGDExtensionIternalConstructor(reference UPNPDevice) RefUPNPDevice {
	return newTypedRefGDExtensionIternalConstructor[UPNPDevice](reference)
}

var _ RefVideoStream = &RefVideoStreamImpl{}
var _ Ref = &RefVideoStreamImpl{}

type RefVideoStream interface {
	Ref
	TypedPtr() VideoStream
}

type RefVideoStreamImpl TypedRef[VideoStream]

func (r *RefVideoStreamImpl) Ptr() RefCounted {
	rg := (*TypedRef[VideoStream])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVideoStreamImpl) TypedPtr() VideoStream {
	rg := (*TypedRef[VideoStream])(r)
	return rg.TypedPtr()
}

func (r *RefVideoStreamImpl) Ref(from Ref) {
	rg := (*TypedRef[VideoStream])(r)
	rg.Ref(from)
}

func (r *RefVideoStreamImpl) TypedRef(from *RefVideoStreamImpl) {
	rg := (*TypedRef[VideoStream])(r)
	t := (*TypedRef[VideoStream])(from)
	rg.TypedRef((*TypedRef[VideoStream])(t))
}

func (r *RefVideoStreamImpl) Unref() {
	rg := (*TypedRef[VideoStream])(r)
	rg.Unref()
}

func (r *RefVideoStreamImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVideoStream(reference VideoStream) RefVideoStream {
	return (RefVideoStream)(NewTypedRef[VideoStream](reference))
}

func newRefVideoStreamAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VideoStream](reference.(VideoStream)))
}

func newRefVideoStreamGDExtensionIternalConstructor(reference VideoStream) RefVideoStream {
	return newTypedRefGDExtensionIternalConstructor[VideoStream](reference)
}

var _ RefVideoStreamPlayback = &RefVideoStreamPlaybackImpl{}
var _ Ref = &RefVideoStreamPlaybackImpl{}

type RefVideoStreamPlayback interface {
	Ref
	TypedPtr() VideoStreamPlayback
}

type RefVideoStreamPlaybackImpl TypedRef[VideoStreamPlayback]

func (r *RefVideoStreamPlaybackImpl) Ptr() RefCounted {
	rg := (*TypedRef[VideoStreamPlayback])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVideoStreamPlaybackImpl) TypedPtr() VideoStreamPlayback {
	rg := (*TypedRef[VideoStreamPlayback])(r)
	return rg.TypedPtr()
}

func (r *RefVideoStreamPlaybackImpl) Ref(from Ref) {
	rg := (*TypedRef[VideoStreamPlayback])(r)
	rg.Ref(from)
}

func (r *RefVideoStreamPlaybackImpl) TypedRef(from *RefVideoStreamPlaybackImpl) {
	rg := (*TypedRef[VideoStreamPlayback])(r)
	t := (*TypedRef[VideoStreamPlayback])(from)
	rg.TypedRef((*TypedRef[VideoStreamPlayback])(t))
}

func (r *RefVideoStreamPlaybackImpl) Unref() {
	rg := (*TypedRef[VideoStreamPlayback])(r)
	rg.Unref()
}

func (r *RefVideoStreamPlaybackImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVideoStreamPlayback(reference VideoStreamPlayback) RefVideoStreamPlayback {
	return (RefVideoStreamPlayback)(NewTypedRef[VideoStreamPlayback](reference))
}

func newRefVideoStreamPlaybackAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VideoStreamPlayback](reference.(VideoStreamPlayback)))
}

func newRefVideoStreamPlaybackGDExtensionIternalConstructor(reference VideoStreamPlayback) RefVideoStreamPlayback {
	return newTypedRefGDExtensionIternalConstructor[VideoStreamPlayback](reference)
}

var _ RefVideoStreamTheora = &RefVideoStreamTheoraImpl{}
var _ Ref = &RefVideoStreamTheoraImpl{}

type RefVideoStreamTheora interface {
	Ref
	TypedPtr() VideoStreamTheora
}

type RefVideoStreamTheoraImpl TypedRef[VideoStreamTheora]

func (r *RefVideoStreamTheoraImpl) Ptr() RefCounted {
	rg := (*TypedRef[VideoStreamTheora])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVideoStreamTheoraImpl) TypedPtr() VideoStreamTheora {
	rg := (*TypedRef[VideoStreamTheora])(r)
	return rg.TypedPtr()
}

func (r *RefVideoStreamTheoraImpl) Ref(from Ref) {
	rg := (*TypedRef[VideoStreamTheora])(r)
	rg.Ref(from)
}

func (r *RefVideoStreamTheoraImpl) TypedRef(from *RefVideoStreamTheoraImpl) {
	rg := (*TypedRef[VideoStreamTheora])(r)
	t := (*TypedRef[VideoStreamTheora])(from)
	rg.TypedRef((*TypedRef[VideoStreamTheora])(t))
}

func (r *RefVideoStreamTheoraImpl) Unref() {
	rg := (*TypedRef[VideoStreamTheora])(r)
	rg.Unref()
}

func (r *RefVideoStreamTheoraImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVideoStreamTheora(reference VideoStreamTheora) RefVideoStreamTheora {
	return (RefVideoStreamTheora)(NewTypedRef[VideoStreamTheora](reference))
}

func newRefVideoStreamTheoraAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VideoStreamTheora](reference.(VideoStreamTheora)))
}

func newRefVideoStreamTheoraGDExtensionIternalConstructor(reference VideoStreamTheora) RefVideoStreamTheora {
	return newTypedRefGDExtensionIternalConstructor[VideoStreamTheora](reference)
}

var _ RefViewportTexture = &RefViewportTextureImpl{}
var _ Ref = &RefViewportTextureImpl{}

type RefViewportTexture interface {
	Ref
	TypedPtr() ViewportTexture
}

type RefViewportTextureImpl TypedRef[ViewportTexture]

func (r *RefViewportTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[ViewportTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefViewportTextureImpl) TypedPtr() ViewportTexture {
	rg := (*TypedRef[ViewportTexture])(r)
	return rg.TypedPtr()
}

func (r *RefViewportTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[ViewportTexture])(r)
	rg.Ref(from)
}

func (r *RefViewportTextureImpl) TypedRef(from *RefViewportTextureImpl) {
	rg := (*TypedRef[ViewportTexture])(r)
	t := (*TypedRef[ViewportTexture])(from)
	rg.TypedRef((*TypedRef[ViewportTexture])(t))
}

func (r *RefViewportTextureImpl) Unref() {
	rg := (*TypedRef[ViewportTexture])(r)
	rg.Unref()
}

func (r *RefViewportTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefViewportTexture(reference ViewportTexture) RefViewportTexture {
	return (RefViewportTexture)(NewTypedRef[ViewportTexture](reference))
}

func newRefViewportTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ViewportTexture](reference.(ViewportTexture)))
}

func newRefViewportTextureGDExtensionIternalConstructor(reference ViewportTexture) RefViewportTexture {
	return newTypedRefGDExtensionIternalConstructor[ViewportTexture](reference)
}

var _ RefVisualShader = &RefVisualShaderImpl{}
var _ Ref = &RefVisualShaderImpl{}

type RefVisualShader interface {
	Ref
	TypedPtr() VisualShader
}

type RefVisualShaderImpl TypedRef[VisualShader]

func (r *RefVisualShaderImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShader])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderImpl) TypedPtr() VisualShader {
	rg := (*TypedRef[VisualShader])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShader])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderImpl) TypedRef(from *RefVisualShaderImpl) {
	rg := (*TypedRef[VisualShader])(r)
	t := (*TypedRef[VisualShader])(from)
	rg.TypedRef((*TypedRef[VisualShader])(t))
}

func (r *RefVisualShaderImpl) Unref() {
	rg := (*TypedRef[VisualShader])(r)
	rg.Unref()
}

func (r *RefVisualShaderImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShader(reference VisualShader) RefVisualShader {
	return (RefVisualShader)(NewTypedRef[VisualShader](reference))
}

func newRefVisualShaderAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShader](reference.(VisualShader)))
}

func newRefVisualShaderGDExtensionIternalConstructor(reference VisualShader) RefVisualShader {
	return newTypedRefGDExtensionIternalConstructor[VisualShader](reference)
}

var _ RefVisualShaderNode = &RefVisualShaderNodeImpl{}
var _ Ref = &RefVisualShaderNodeImpl{}

type RefVisualShaderNode interface {
	Ref
	TypedPtr() VisualShaderNode
}

type RefVisualShaderNodeImpl TypedRef[VisualShaderNode]

func (r *RefVisualShaderNodeImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNode])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeImpl) TypedPtr() VisualShaderNode {
	rg := (*TypedRef[VisualShaderNode])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNode])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeImpl) TypedRef(from *RefVisualShaderNodeImpl) {
	rg := (*TypedRef[VisualShaderNode])(r)
	t := (*TypedRef[VisualShaderNode])(from)
	rg.TypedRef((*TypedRef[VisualShaderNode])(t))
}

func (r *RefVisualShaderNodeImpl) Unref() {
	rg := (*TypedRef[VisualShaderNode])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNode(reference VisualShaderNode) RefVisualShaderNode {
	return (RefVisualShaderNode)(NewTypedRef[VisualShaderNode](reference))
}

func newRefVisualShaderNodeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNode](reference.(VisualShaderNode)))
}

func newRefVisualShaderNodeGDExtensionIternalConstructor(reference VisualShaderNode) RefVisualShaderNode {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNode](reference)
}

var _ RefVisualShaderNodeBillboard = &RefVisualShaderNodeBillboardImpl{}
var _ Ref = &RefVisualShaderNodeBillboardImpl{}

type RefVisualShaderNodeBillboard interface {
	Ref
	TypedPtr() VisualShaderNodeBillboard
}

type RefVisualShaderNodeBillboardImpl TypedRef[VisualShaderNodeBillboard]

func (r *RefVisualShaderNodeBillboardImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeBillboard])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeBillboardImpl) TypedPtr() VisualShaderNodeBillboard {
	rg := (*TypedRef[VisualShaderNodeBillboard])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeBillboardImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeBillboard])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeBillboardImpl) TypedRef(from *RefVisualShaderNodeBillboardImpl) {
	rg := (*TypedRef[VisualShaderNodeBillboard])(r)
	t := (*TypedRef[VisualShaderNodeBillboard])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeBillboard])(t))
}

func (r *RefVisualShaderNodeBillboardImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeBillboard])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeBillboardImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeBillboard(reference VisualShaderNodeBillboard) RefVisualShaderNodeBillboard {
	return (RefVisualShaderNodeBillboard)(NewTypedRef[VisualShaderNodeBillboard](reference))
}

func newRefVisualShaderNodeBillboardAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeBillboard](reference.(VisualShaderNodeBillboard)))
}

func newRefVisualShaderNodeBillboardGDExtensionIternalConstructor(reference VisualShaderNodeBillboard) RefVisualShaderNodeBillboard {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeBillboard](reference)
}

var _ RefVisualShaderNodeBooleanConstant = &RefVisualShaderNodeBooleanConstantImpl{}
var _ Ref = &RefVisualShaderNodeBooleanConstantImpl{}

type RefVisualShaderNodeBooleanConstant interface {
	Ref
	TypedPtr() VisualShaderNodeBooleanConstant
}

type RefVisualShaderNodeBooleanConstantImpl TypedRef[VisualShaderNodeBooleanConstant]

func (r *RefVisualShaderNodeBooleanConstantImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeBooleanConstant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeBooleanConstantImpl) TypedPtr() VisualShaderNodeBooleanConstant {
	rg := (*TypedRef[VisualShaderNodeBooleanConstant])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeBooleanConstantImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeBooleanConstant])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeBooleanConstantImpl) TypedRef(from *RefVisualShaderNodeBooleanConstantImpl) {
	rg := (*TypedRef[VisualShaderNodeBooleanConstant])(r)
	t := (*TypedRef[VisualShaderNodeBooleanConstant])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeBooleanConstant])(t))
}

func (r *RefVisualShaderNodeBooleanConstantImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeBooleanConstant])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeBooleanConstantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeBooleanConstant(reference VisualShaderNodeBooleanConstant) RefVisualShaderNodeBooleanConstant {
	return (RefVisualShaderNodeBooleanConstant)(NewTypedRef[VisualShaderNodeBooleanConstant](reference))
}

func newRefVisualShaderNodeBooleanConstantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeBooleanConstant](reference.(VisualShaderNodeBooleanConstant)))
}

func newRefVisualShaderNodeBooleanConstantGDExtensionIternalConstructor(reference VisualShaderNodeBooleanConstant) RefVisualShaderNodeBooleanConstant {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeBooleanConstant](reference)
}

var _ RefVisualShaderNodeBooleanParameter = &RefVisualShaderNodeBooleanParameterImpl{}
var _ Ref = &RefVisualShaderNodeBooleanParameterImpl{}

type RefVisualShaderNodeBooleanParameter interface {
	Ref
	TypedPtr() VisualShaderNodeBooleanParameter
}

type RefVisualShaderNodeBooleanParameterImpl TypedRef[VisualShaderNodeBooleanParameter]

func (r *RefVisualShaderNodeBooleanParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeBooleanParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeBooleanParameterImpl) TypedPtr() VisualShaderNodeBooleanParameter {
	rg := (*TypedRef[VisualShaderNodeBooleanParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeBooleanParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeBooleanParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeBooleanParameterImpl) TypedRef(from *RefVisualShaderNodeBooleanParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeBooleanParameter])(r)
	t := (*TypedRef[VisualShaderNodeBooleanParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeBooleanParameter])(t))
}

func (r *RefVisualShaderNodeBooleanParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeBooleanParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeBooleanParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeBooleanParameter(reference VisualShaderNodeBooleanParameter) RefVisualShaderNodeBooleanParameter {
	return (RefVisualShaderNodeBooleanParameter)(NewTypedRef[VisualShaderNodeBooleanParameter](reference))
}

func newRefVisualShaderNodeBooleanParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeBooleanParameter](reference.(VisualShaderNodeBooleanParameter)))
}

func newRefVisualShaderNodeBooleanParameterGDExtensionIternalConstructor(reference VisualShaderNodeBooleanParameter) RefVisualShaderNodeBooleanParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeBooleanParameter](reference)
}

var _ RefVisualShaderNodeClamp = &RefVisualShaderNodeClampImpl{}
var _ Ref = &RefVisualShaderNodeClampImpl{}

type RefVisualShaderNodeClamp interface {
	Ref
	TypedPtr() VisualShaderNodeClamp
}

type RefVisualShaderNodeClampImpl TypedRef[VisualShaderNodeClamp]

func (r *RefVisualShaderNodeClampImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeClamp])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeClampImpl) TypedPtr() VisualShaderNodeClamp {
	rg := (*TypedRef[VisualShaderNodeClamp])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeClampImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeClamp])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeClampImpl) TypedRef(from *RefVisualShaderNodeClampImpl) {
	rg := (*TypedRef[VisualShaderNodeClamp])(r)
	t := (*TypedRef[VisualShaderNodeClamp])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeClamp])(t))
}

func (r *RefVisualShaderNodeClampImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeClamp])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeClampImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeClamp(reference VisualShaderNodeClamp) RefVisualShaderNodeClamp {
	return (RefVisualShaderNodeClamp)(NewTypedRef[VisualShaderNodeClamp](reference))
}

func newRefVisualShaderNodeClampAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeClamp](reference.(VisualShaderNodeClamp)))
}

func newRefVisualShaderNodeClampGDExtensionIternalConstructor(reference VisualShaderNodeClamp) RefVisualShaderNodeClamp {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeClamp](reference)
}

var _ RefVisualShaderNodeColorConstant = &RefVisualShaderNodeColorConstantImpl{}
var _ Ref = &RefVisualShaderNodeColorConstantImpl{}

type RefVisualShaderNodeColorConstant interface {
	Ref
	TypedPtr() VisualShaderNodeColorConstant
}

type RefVisualShaderNodeColorConstantImpl TypedRef[VisualShaderNodeColorConstant]

func (r *RefVisualShaderNodeColorConstantImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeColorConstant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeColorConstantImpl) TypedPtr() VisualShaderNodeColorConstant {
	rg := (*TypedRef[VisualShaderNodeColorConstant])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeColorConstantImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeColorConstant])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeColorConstantImpl) TypedRef(from *RefVisualShaderNodeColorConstantImpl) {
	rg := (*TypedRef[VisualShaderNodeColorConstant])(r)
	t := (*TypedRef[VisualShaderNodeColorConstant])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeColorConstant])(t))
}

func (r *RefVisualShaderNodeColorConstantImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeColorConstant])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeColorConstantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeColorConstant(reference VisualShaderNodeColorConstant) RefVisualShaderNodeColorConstant {
	return (RefVisualShaderNodeColorConstant)(NewTypedRef[VisualShaderNodeColorConstant](reference))
}

func newRefVisualShaderNodeColorConstantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeColorConstant](reference.(VisualShaderNodeColorConstant)))
}

func newRefVisualShaderNodeColorConstantGDExtensionIternalConstructor(reference VisualShaderNodeColorConstant) RefVisualShaderNodeColorConstant {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeColorConstant](reference)
}

var _ RefVisualShaderNodeColorFunc = &RefVisualShaderNodeColorFuncImpl{}
var _ Ref = &RefVisualShaderNodeColorFuncImpl{}

type RefVisualShaderNodeColorFunc interface {
	Ref
	TypedPtr() VisualShaderNodeColorFunc
}

type RefVisualShaderNodeColorFuncImpl TypedRef[VisualShaderNodeColorFunc]

func (r *RefVisualShaderNodeColorFuncImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeColorFunc])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeColorFuncImpl) TypedPtr() VisualShaderNodeColorFunc {
	rg := (*TypedRef[VisualShaderNodeColorFunc])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeColorFuncImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeColorFunc])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeColorFuncImpl) TypedRef(from *RefVisualShaderNodeColorFuncImpl) {
	rg := (*TypedRef[VisualShaderNodeColorFunc])(r)
	t := (*TypedRef[VisualShaderNodeColorFunc])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeColorFunc])(t))
}

func (r *RefVisualShaderNodeColorFuncImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeColorFunc])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeColorFuncImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeColorFunc(reference VisualShaderNodeColorFunc) RefVisualShaderNodeColorFunc {
	return (RefVisualShaderNodeColorFunc)(NewTypedRef[VisualShaderNodeColorFunc](reference))
}

func newRefVisualShaderNodeColorFuncAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeColorFunc](reference.(VisualShaderNodeColorFunc)))
}

func newRefVisualShaderNodeColorFuncGDExtensionIternalConstructor(reference VisualShaderNodeColorFunc) RefVisualShaderNodeColorFunc {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeColorFunc](reference)
}

var _ RefVisualShaderNodeColorOp = &RefVisualShaderNodeColorOpImpl{}
var _ Ref = &RefVisualShaderNodeColorOpImpl{}

type RefVisualShaderNodeColorOp interface {
	Ref
	TypedPtr() VisualShaderNodeColorOp
}

type RefVisualShaderNodeColorOpImpl TypedRef[VisualShaderNodeColorOp]

func (r *RefVisualShaderNodeColorOpImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeColorOp])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeColorOpImpl) TypedPtr() VisualShaderNodeColorOp {
	rg := (*TypedRef[VisualShaderNodeColorOp])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeColorOpImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeColorOp])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeColorOpImpl) TypedRef(from *RefVisualShaderNodeColorOpImpl) {
	rg := (*TypedRef[VisualShaderNodeColorOp])(r)
	t := (*TypedRef[VisualShaderNodeColorOp])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeColorOp])(t))
}

func (r *RefVisualShaderNodeColorOpImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeColorOp])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeColorOpImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeColorOp(reference VisualShaderNodeColorOp) RefVisualShaderNodeColorOp {
	return (RefVisualShaderNodeColorOp)(NewTypedRef[VisualShaderNodeColorOp](reference))
}

func newRefVisualShaderNodeColorOpAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeColorOp](reference.(VisualShaderNodeColorOp)))
}

func newRefVisualShaderNodeColorOpGDExtensionIternalConstructor(reference VisualShaderNodeColorOp) RefVisualShaderNodeColorOp {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeColorOp](reference)
}

var _ RefVisualShaderNodeColorParameter = &RefVisualShaderNodeColorParameterImpl{}
var _ Ref = &RefVisualShaderNodeColorParameterImpl{}

type RefVisualShaderNodeColorParameter interface {
	Ref
	TypedPtr() VisualShaderNodeColorParameter
}

type RefVisualShaderNodeColorParameterImpl TypedRef[VisualShaderNodeColorParameter]

func (r *RefVisualShaderNodeColorParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeColorParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeColorParameterImpl) TypedPtr() VisualShaderNodeColorParameter {
	rg := (*TypedRef[VisualShaderNodeColorParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeColorParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeColorParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeColorParameterImpl) TypedRef(from *RefVisualShaderNodeColorParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeColorParameter])(r)
	t := (*TypedRef[VisualShaderNodeColorParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeColorParameter])(t))
}

func (r *RefVisualShaderNodeColorParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeColorParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeColorParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeColorParameter(reference VisualShaderNodeColorParameter) RefVisualShaderNodeColorParameter {
	return (RefVisualShaderNodeColorParameter)(NewTypedRef[VisualShaderNodeColorParameter](reference))
}

func newRefVisualShaderNodeColorParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeColorParameter](reference.(VisualShaderNodeColorParameter)))
}

func newRefVisualShaderNodeColorParameterGDExtensionIternalConstructor(reference VisualShaderNodeColorParameter) RefVisualShaderNodeColorParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeColorParameter](reference)
}

var _ RefVisualShaderNodeComment = &RefVisualShaderNodeCommentImpl{}
var _ Ref = &RefVisualShaderNodeCommentImpl{}

type RefVisualShaderNodeComment interface {
	Ref
	TypedPtr() VisualShaderNodeComment
}

type RefVisualShaderNodeCommentImpl TypedRef[VisualShaderNodeComment]

func (r *RefVisualShaderNodeCommentImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeComment])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeCommentImpl) TypedPtr() VisualShaderNodeComment {
	rg := (*TypedRef[VisualShaderNodeComment])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeCommentImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeComment])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeCommentImpl) TypedRef(from *RefVisualShaderNodeCommentImpl) {
	rg := (*TypedRef[VisualShaderNodeComment])(r)
	t := (*TypedRef[VisualShaderNodeComment])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeComment])(t))
}

func (r *RefVisualShaderNodeCommentImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeComment])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeCommentImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeComment(reference VisualShaderNodeComment) RefVisualShaderNodeComment {
	return (RefVisualShaderNodeComment)(NewTypedRef[VisualShaderNodeComment](reference))
}

func newRefVisualShaderNodeCommentAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeComment](reference.(VisualShaderNodeComment)))
}

func newRefVisualShaderNodeCommentGDExtensionIternalConstructor(reference VisualShaderNodeComment) RefVisualShaderNodeComment {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeComment](reference)
}

var _ RefVisualShaderNodeCompare = &RefVisualShaderNodeCompareImpl{}
var _ Ref = &RefVisualShaderNodeCompareImpl{}

type RefVisualShaderNodeCompare interface {
	Ref
	TypedPtr() VisualShaderNodeCompare
}

type RefVisualShaderNodeCompareImpl TypedRef[VisualShaderNodeCompare]

func (r *RefVisualShaderNodeCompareImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeCompare])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeCompareImpl) TypedPtr() VisualShaderNodeCompare {
	rg := (*TypedRef[VisualShaderNodeCompare])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeCompareImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeCompare])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeCompareImpl) TypedRef(from *RefVisualShaderNodeCompareImpl) {
	rg := (*TypedRef[VisualShaderNodeCompare])(r)
	t := (*TypedRef[VisualShaderNodeCompare])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeCompare])(t))
}

func (r *RefVisualShaderNodeCompareImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeCompare])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeCompareImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeCompare(reference VisualShaderNodeCompare) RefVisualShaderNodeCompare {
	return (RefVisualShaderNodeCompare)(NewTypedRef[VisualShaderNodeCompare](reference))
}

func newRefVisualShaderNodeCompareAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCompare](reference.(VisualShaderNodeCompare)))
}

func newRefVisualShaderNodeCompareGDExtensionIternalConstructor(reference VisualShaderNodeCompare) RefVisualShaderNodeCompare {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCompare](reference)
}

var _ RefVisualShaderNodeConstant = &RefVisualShaderNodeConstantImpl{}
var _ Ref = &RefVisualShaderNodeConstantImpl{}

type RefVisualShaderNodeConstant interface {
	Ref
	TypedPtr() VisualShaderNodeConstant
}

type RefVisualShaderNodeConstantImpl TypedRef[VisualShaderNodeConstant]

func (r *RefVisualShaderNodeConstantImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeConstant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeConstantImpl) TypedPtr() VisualShaderNodeConstant {
	rg := (*TypedRef[VisualShaderNodeConstant])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeConstantImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeConstant])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeConstantImpl) TypedRef(from *RefVisualShaderNodeConstantImpl) {
	rg := (*TypedRef[VisualShaderNodeConstant])(r)
	t := (*TypedRef[VisualShaderNodeConstant])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeConstant])(t))
}

func (r *RefVisualShaderNodeConstantImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeConstant])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeConstantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeConstant(reference VisualShaderNodeConstant) RefVisualShaderNodeConstant {
	return (RefVisualShaderNodeConstant)(NewTypedRef[VisualShaderNodeConstant](reference))
}

func newRefVisualShaderNodeConstantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeConstant](reference.(VisualShaderNodeConstant)))
}

func newRefVisualShaderNodeConstantGDExtensionIternalConstructor(reference VisualShaderNodeConstant) RefVisualShaderNodeConstant {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeConstant](reference)
}

var _ RefVisualShaderNodeCubemap = &RefVisualShaderNodeCubemapImpl{}
var _ Ref = &RefVisualShaderNodeCubemapImpl{}

type RefVisualShaderNodeCubemap interface {
	Ref
	TypedPtr() VisualShaderNodeCubemap
}

type RefVisualShaderNodeCubemapImpl TypedRef[VisualShaderNodeCubemap]

func (r *RefVisualShaderNodeCubemapImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeCubemap])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeCubemapImpl) TypedPtr() VisualShaderNodeCubemap {
	rg := (*TypedRef[VisualShaderNodeCubemap])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeCubemapImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeCubemap])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeCubemapImpl) TypedRef(from *RefVisualShaderNodeCubemapImpl) {
	rg := (*TypedRef[VisualShaderNodeCubemap])(r)
	t := (*TypedRef[VisualShaderNodeCubemap])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeCubemap])(t))
}

func (r *RefVisualShaderNodeCubemapImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeCubemap])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeCubemapImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeCubemap(reference VisualShaderNodeCubemap) RefVisualShaderNodeCubemap {
	return (RefVisualShaderNodeCubemap)(NewTypedRef[VisualShaderNodeCubemap](reference))
}

func newRefVisualShaderNodeCubemapAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCubemap](reference.(VisualShaderNodeCubemap)))
}

func newRefVisualShaderNodeCubemapGDExtensionIternalConstructor(reference VisualShaderNodeCubemap) RefVisualShaderNodeCubemap {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCubemap](reference)
}

var _ RefVisualShaderNodeCubemapParameter = &RefVisualShaderNodeCubemapParameterImpl{}
var _ Ref = &RefVisualShaderNodeCubemapParameterImpl{}

type RefVisualShaderNodeCubemapParameter interface {
	Ref
	TypedPtr() VisualShaderNodeCubemapParameter
}

type RefVisualShaderNodeCubemapParameterImpl TypedRef[VisualShaderNodeCubemapParameter]

func (r *RefVisualShaderNodeCubemapParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeCubemapParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeCubemapParameterImpl) TypedPtr() VisualShaderNodeCubemapParameter {
	rg := (*TypedRef[VisualShaderNodeCubemapParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeCubemapParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeCubemapParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeCubemapParameterImpl) TypedRef(from *RefVisualShaderNodeCubemapParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeCubemapParameter])(r)
	t := (*TypedRef[VisualShaderNodeCubemapParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeCubemapParameter])(t))
}

func (r *RefVisualShaderNodeCubemapParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeCubemapParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeCubemapParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeCubemapParameter(reference VisualShaderNodeCubemapParameter) RefVisualShaderNodeCubemapParameter {
	return (RefVisualShaderNodeCubemapParameter)(NewTypedRef[VisualShaderNodeCubemapParameter](reference))
}

func newRefVisualShaderNodeCubemapParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCubemapParameter](reference.(VisualShaderNodeCubemapParameter)))
}

func newRefVisualShaderNodeCubemapParameterGDExtensionIternalConstructor(reference VisualShaderNodeCubemapParameter) RefVisualShaderNodeCubemapParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCubemapParameter](reference)
}

var _ RefVisualShaderNodeCurveTexture = &RefVisualShaderNodeCurveTextureImpl{}
var _ Ref = &RefVisualShaderNodeCurveTextureImpl{}

type RefVisualShaderNodeCurveTexture interface {
	Ref
	TypedPtr() VisualShaderNodeCurveTexture
}

type RefVisualShaderNodeCurveTextureImpl TypedRef[VisualShaderNodeCurveTexture]

func (r *RefVisualShaderNodeCurveTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeCurveTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeCurveTextureImpl) TypedPtr() VisualShaderNodeCurveTexture {
	rg := (*TypedRef[VisualShaderNodeCurveTexture])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeCurveTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeCurveTexture])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeCurveTextureImpl) TypedRef(from *RefVisualShaderNodeCurveTextureImpl) {
	rg := (*TypedRef[VisualShaderNodeCurveTexture])(r)
	t := (*TypedRef[VisualShaderNodeCurveTexture])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeCurveTexture])(t))
}

func (r *RefVisualShaderNodeCurveTextureImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeCurveTexture])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeCurveTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeCurveTexture(reference VisualShaderNodeCurveTexture) RefVisualShaderNodeCurveTexture {
	return (RefVisualShaderNodeCurveTexture)(NewTypedRef[VisualShaderNodeCurveTexture](reference))
}

func newRefVisualShaderNodeCurveTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCurveTexture](reference.(VisualShaderNodeCurveTexture)))
}

func newRefVisualShaderNodeCurveTextureGDExtensionIternalConstructor(reference VisualShaderNodeCurveTexture) RefVisualShaderNodeCurveTexture {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCurveTexture](reference)
}

var _ RefVisualShaderNodeCurveXYZTexture = &RefVisualShaderNodeCurveXYZTextureImpl{}
var _ Ref = &RefVisualShaderNodeCurveXYZTextureImpl{}

type RefVisualShaderNodeCurveXYZTexture interface {
	Ref
	TypedPtr() VisualShaderNodeCurveXYZTexture
}

type RefVisualShaderNodeCurveXYZTextureImpl TypedRef[VisualShaderNodeCurveXYZTexture]

func (r *RefVisualShaderNodeCurveXYZTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeCurveXYZTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeCurveXYZTextureImpl) TypedPtr() VisualShaderNodeCurveXYZTexture {
	rg := (*TypedRef[VisualShaderNodeCurveXYZTexture])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeCurveXYZTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeCurveXYZTexture])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeCurveXYZTextureImpl) TypedRef(from *RefVisualShaderNodeCurveXYZTextureImpl) {
	rg := (*TypedRef[VisualShaderNodeCurveXYZTexture])(r)
	t := (*TypedRef[VisualShaderNodeCurveXYZTexture])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeCurveXYZTexture])(t))
}

func (r *RefVisualShaderNodeCurveXYZTextureImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeCurveXYZTexture])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeCurveXYZTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeCurveXYZTexture(reference VisualShaderNodeCurveXYZTexture) RefVisualShaderNodeCurveXYZTexture {
	return (RefVisualShaderNodeCurveXYZTexture)(NewTypedRef[VisualShaderNodeCurveXYZTexture](reference))
}

func newRefVisualShaderNodeCurveXYZTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCurveXYZTexture](reference.(VisualShaderNodeCurveXYZTexture)))
}

func newRefVisualShaderNodeCurveXYZTextureGDExtensionIternalConstructor(reference VisualShaderNodeCurveXYZTexture) RefVisualShaderNodeCurveXYZTexture {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCurveXYZTexture](reference)
}

var _ RefVisualShaderNodeCustom = &RefVisualShaderNodeCustomImpl{}
var _ Ref = &RefVisualShaderNodeCustomImpl{}

type RefVisualShaderNodeCustom interface {
	Ref
	TypedPtr() VisualShaderNodeCustom
}

type RefVisualShaderNodeCustomImpl TypedRef[VisualShaderNodeCustom]

func (r *RefVisualShaderNodeCustomImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeCustom])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeCustomImpl) TypedPtr() VisualShaderNodeCustom {
	rg := (*TypedRef[VisualShaderNodeCustom])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeCustomImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeCustom])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeCustomImpl) TypedRef(from *RefVisualShaderNodeCustomImpl) {
	rg := (*TypedRef[VisualShaderNodeCustom])(r)
	t := (*TypedRef[VisualShaderNodeCustom])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeCustom])(t))
}

func (r *RefVisualShaderNodeCustomImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeCustom])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeCustomImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeCustom(reference VisualShaderNodeCustom) RefVisualShaderNodeCustom {
	return (RefVisualShaderNodeCustom)(NewTypedRef[VisualShaderNodeCustom](reference))
}

func newRefVisualShaderNodeCustomAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCustom](reference.(VisualShaderNodeCustom)))
}

func newRefVisualShaderNodeCustomGDExtensionIternalConstructor(reference VisualShaderNodeCustom) RefVisualShaderNodeCustom {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeCustom](reference)
}

var _ RefVisualShaderNodeDerivativeFunc = &RefVisualShaderNodeDerivativeFuncImpl{}
var _ Ref = &RefVisualShaderNodeDerivativeFuncImpl{}

type RefVisualShaderNodeDerivativeFunc interface {
	Ref
	TypedPtr() VisualShaderNodeDerivativeFunc
}

type RefVisualShaderNodeDerivativeFuncImpl TypedRef[VisualShaderNodeDerivativeFunc]

func (r *RefVisualShaderNodeDerivativeFuncImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeDerivativeFunc])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeDerivativeFuncImpl) TypedPtr() VisualShaderNodeDerivativeFunc {
	rg := (*TypedRef[VisualShaderNodeDerivativeFunc])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeDerivativeFuncImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeDerivativeFunc])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeDerivativeFuncImpl) TypedRef(from *RefVisualShaderNodeDerivativeFuncImpl) {
	rg := (*TypedRef[VisualShaderNodeDerivativeFunc])(r)
	t := (*TypedRef[VisualShaderNodeDerivativeFunc])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeDerivativeFunc])(t))
}

func (r *RefVisualShaderNodeDerivativeFuncImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeDerivativeFunc])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeDerivativeFuncImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeDerivativeFunc(reference VisualShaderNodeDerivativeFunc) RefVisualShaderNodeDerivativeFunc {
	return (RefVisualShaderNodeDerivativeFunc)(NewTypedRef[VisualShaderNodeDerivativeFunc](reference))
}

func newRefVisualShaderNodeDerivativeFuncAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeDerivativeFunc](reference.(VisualShaderNodeDerivativeFunc)))
}

func newRefVisualShaderNodeDerivativeFuncGDExtensionIternalConstructor(reference VisualShaderNodeDerivativeFunc) RefVisualShaderNodeDerivativeFunc {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeDerivativeFunc](reference)
}

var _ RefVisualShaderNodeDeterminant = &RefVisualShaderNodeDeterminantImpl{}
var _ Ref = &RefVisualShaderNodeDeterminantImpl{}

type RefVisualShaderNodeDeterminant interface {
	Ref
	TypedPtr() VisualShaderNodeDeterminant
}

type RefVisualShaderNodeDeterminantImpl TypedRef[VisualShaderNodeDeterminant]

func (r *RefVisualShaderNodeDeterminantImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeDeterminant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeDeterminantImpl) TypedPtr() VisualShaderNodeDeterminant {
	rg := (*TypedRef[VisualShaderNodeDeterminant])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeDeterminantImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeDeterminant])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeDeterminantImpl) TypedRef(from *RefVisualShaderNodeDeterminantImpl) {
	rg := (*TypedRef[VisualShaderNodeDeterminant])(r)
	t := (*TypedRef[VisualShaderNodeDeterminant])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeDeterminant])(t))
}

func (r *RefVisualShaderNodeDeterminantImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeDeterminant])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeDeterminantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeDeterminant(reference VisualShaderNodeDeterminant) RefVisualShaderNodeDeterminant {
	return (RefVisualShaderNodeDeterminant)(NewTypedRef[VisualShaderNodeDeterminant](reference))
}

func newRefVisualShaderNodeDeterminantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeDeterminant](reference.(VisualShaderNodeDeterminant)))
}

func newRefVisualShaderNodeDeterminantGDExtensionIternalConstructor(reference VisualShaderNodeDeterminant) RefVisualShaderNodeDeterminant {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeDeterminant](reference)
}

var _ RefVisualShaderNodeDistanceFade = &RefVisualShaderNodeDistanceFadeImpl{}
var _ Ref = &RefVisualShaderNodeDistanceFadeImpl{}

type RefVisualShaderNodeDistanceFade interface {
	Ref
	TypedPtr() VisualShaderNodeDistanceFade
}

type RefVisualShaderNodeDistanceFadeImpl TypedRef[VisualShaderNodeDistanceFade]

func (r *RefVisualShaderNodeDistanceFadeImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeDistanceFade])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeDistanceFadeImpl) TypedPtr() VisualShaderNodeDistanceFade {
	rg := (*TypedRef[VisualShaderNodeDistanceFade])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeDistanceFadeImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeDistanceFade])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeDistanceFadeImpl) TypedRef(from *RefVisualShaderNodeDistanceFadeImpl) {
	rg := (*TypedRef[VisualShaderNodeDistanceFade])(r)
	t := (*TypedRef[VisualShaderNodeDistanceFade])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeDistanceFade])(t))
}

func (r *RefVisualShaderNodeDistanceFadeImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeDistanceFade])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeDistanceFadeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeDistanceFade(reference VisualShaderNodeDistanceFade) RefVisualShaderNodeDistanceFade {
	return (RefVisualShaderNodeDistanceFade)(NewTypedRef[VisualShaderNodeDistanceFade](reference))
}

func newRefVisualShaderNodeDistanceFadeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeDistanceFade](reference.(VisualShaderNodeDistanceFade)))
}

func newRefVisualShaderNodeDistanceFadeGDExtensionIternalConstructor(reference VisualShaderNodeDistanceFade) RefVisualShaderNodeDistanceFade {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeDistanceFade](reference)
}

var _ RefVisualShaderNodeDotProduct = &RefVisualShaderNodeDotProductImpl{}
var _ Ref = &RefVisualShaderNodeDotProductImpl{}

type RefVisualShaderNodeDotProduct interface {
	Ref
	TypedPtr() VisualShaderNodeDotProduct
}

type RefVisualShaderNodeDotProductImpl TypedRef[VisualShaderNodeDotProduct]

func (r *RefVisualShaderNodeDotProductImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeDotProduct])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeDotProductImpl) TypedPtr() VisualShaderNodeDotProduct {
	rg := (*TypedRef[VisualShaderNodeDotProduct])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeDotProductImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeDotProduct])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeDotProductImpl) TypedRef(from *RefVisualShaderNodeDotProductImpl) {
	rg := (*TypedRef[VisualShaderNodeDotProduct])(r)
	t := (*TypedRef[VisualShaderNodeDotProduct])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeDotProduct])(t))
}

func (r *RefVisualShaderNodeDotProductImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeDotProduct])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeDotProductImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeDotProduct(reference VisualShaderNodeDotProduct) RefVisualShaderNodeDotProduct {
	return (RefVisualShaderNodeDotProduct)(NewTypedRef[VisualShaderNodeDotProduct](reference))
}

func newRefVisualShaderNodeDotProductAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeDotProduct](reference.(VisualShaderNodeDotProduct)))
}

func newRefVisualShaderNodeDotProductGDExtensionIternalConstructor(reference VisualShaderNodeDotProduct) RefVisualShaderNodeDotProduct {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeDotProduct](reference)
}

var _ RefVisualShaderNodeExpression = &RefVisualShaderNodeExpressionImpl{}
var _ Ref = &RefVisualShaderNodeExpressionImpl{}

type RefVisualShaderNodeExpression interface {
	Ref
	TypedPtr() VisualShaderNodeExpression
}

type RefVisualShaderNodeExpressionImpl TypedRef[VisualShaderNodeExpression]

func (r *RefVisualShaderNodeExpressionImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeExpression])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeExpressionImpl) TypedPtr() VisualShaderNodeExpression {
	rg := (*TypedRef[VisualShaderNodeExpression])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeExpressionImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeExpression])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeExpressionImpl) TypedRef(from *RefVisualShaderNodeExpressionImpl) {
	rg := (*TypedRef[VisualShaderNodeExpression])(r)
	t := (*TypedRef[VisualShaderNodeExpression])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeExpression])(t))
}

func (r *RefVisualShaderNodeExpressionImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeExpression])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeExpressionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeExpression(reference VisualShaderNodeExpression) RefVisualShaderNodeExpression {
	return (RefVisualShaderNodeExpression)(NewTypedRef[VisualShaderNodeExpression](reference))
}

func newRefVisualShaderNodeExpressionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeExpression](reference.(VisualShaderNodeExpression)))
}

func newRefVisualShaderNodeExpressionGDExtensionIternalConstructor(reference VisualShaderNodeExpression) RefVisualShaderNodeExpression {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeExpression](reference)
}

var _ RefVisualShaderNodeFaceForward = &RefVisualShaderNodeFaceForwardImpl{}
var _ Ref = &RefVisualShaderNodeFaceForwardImpl{}

type RefVisualShaderNodeFaceForward interface {
	Ref
	TypedPtr() VisualShaderNodeFaceForward
}

type RefVisualShaderNodeFaceForwardImpl TypedRef[VisualShaderNodeFaceForward]

func (r *RefVisualShaderNodeFaceForwardImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeFaceForward])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeFaceForwardImpl) TypedPtr() VisualShaderNodeFaceForward {
	rg := (*TypedRef[VisualShaderNodeFaceForward])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeFaceForwardImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeFaceForward])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeFaceForwardImpl) TypedRef(from *RefVisualShaderNodeFaceForwardImpl) {
	rg := (*TypedRef[VisualShaderNodeFaceForward])(r)
	t := (*TypedRef[VisualShaderNodeFaceForward])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeFaceForward])(t))
}

func (r *RefVisualShaderNodeFaceForwardImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeFaceForward])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeFaceForwardImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeFaceForward(reference VisualShaderNodeFaceForward) RefVisualShaderNodeFaceForward {
	return (RefVisualShaderNodeFaceForward)(NewTypedRef[VisualShaderNodeFaceForward](reference))
}

func newRefVisualShaderNodeFaceForwardAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFaceForward](reference.(VisualShaderNodeFaceForward)))
}

func newRefVisualShaderNodeFaceForwardGDExtensionIternalConstructor(reference VisualShaderNodeFaceForward) RefVisualShaderNodeFaceForward {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFaceForward](reference)
}

var _ RefVisualShaderNodeFloatConstant = &RefVisualShaderNodeFloatConstantImpl{}
var _ Ref = &RefVisualShaderNodeFloatConstantImpl{}

type RefVisualShaderNodeFloatConstant interface {
	Ref
	TypedPtr() VisualShaderNodeFloatConstant
}

type RefVisualShaderNodeFloatConstantImpl TypedRef[VisualShaderNodeFloatConstant]

func (r *RefVisualShaderNodeFloatConstantImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeFloatConstant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeFloatConstantImpl) TypedPtr() VisualShaderNodeFloatConstant {
	rg := (*TypedRef[VisualShaderNodeFloatConstant])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeFloatConstantImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeFloatConstant])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeFloatConstantImpl) TypedRef(from *RefVisualShaderNodeFloatConstantImpl) {
	rg := (*TypedRef[VisualShaderNodeFloatConstant])(r)
	t := (*TypedRef[VisualShaderNodeFloatConstant])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeFloatConstant])(t))
}

func (r *RefVisualShaderNodeFloatConstantImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeFloatConstant])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeFloatConstantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeFloatConstant(reference VisualShaderNodeFloatConstant) RefVisualShaderNodeFloatConstant {
	return (RefVisualShaderNodeFloatConstant)(NewTypedRef[VisualShaderNodeFloatConstant](reference))
}

func newRefVisualShaderNodeFloatConstantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFloatConstant](reference.(VisualShaderNodeFloatConstant)))
}

func newRefVisualShaderNodeFloatConstantGDExtensionIternalConstructor(reference VisualShaderNodeFloatConstant) RefVisualShaderNodeFloatConstant {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFloatConstant](reference)
}

var _ RefVisualShaderNodeFloatFunc = &RefVisualShaderNodeFloatFuncImpl{}
var _ Ref = &RefVisualShaderNodeFloatFuncImpl{}

type RefVisualShaderNodeFloatFunc interface {
	Ref
	TypedPtr() VisualShaderNodeFloatFunc
}

type RefVisualShaderNodeFloatFuncImpl TypedRef[VisualShaderNodeFloatFunc]

func (r *RefVisualShaderNodeFloatFuncImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeFloatFunc])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeFloatFuncImpl) TypedPtr() VisualShaderNodeFloatFunc {
	rg := (*TypedRef[VisualShaderNodeFloatFunc])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeFloatFuncImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeFloatFunc])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeFloatFuncImpl) TypedRef(from *RefVisualShaderNodeFloatFuncImpl) {
	rg := (*TypedRef[VisualShaderNodeFloatFunc])(r)
	t := (*TypedRef[VisualShaderNodeFloatFunc])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeFloatFunc])(t))
}

func (r *RefVisualShaderNodeFloatFuncImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeFloatFunc])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeFloatFuncImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeFloatFunc(reference VisualShaderNodeFloatFunc) RefVisualShaderNodeFloatFunc {
	return (RefVisualShaderNodeFloatFunc)(NewTypedRef[VisualShaderNodeFloatFunc](reference))
}

func newRefVisualShaderNodeFloatFuncAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFloatFunc](reference.(VisualShaderNodeFloatFunc)))
}

func newRefVisualShaderNodeFloatFuncGDExtensionIternalConstructor(reference VisualShaderNodeFloatFunc) RefVisualShaderNodeFloatFunc {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFloatFunc](reference)
}

var _ RefVisualShaderNodeFloatOp = &RefVisualShaderNodeFloatOpImpl{}
var _ Ref = &RefVisualShaderNodeFloatOpImpl{}

type RefVisualShaderNodeFloatOp interface {
	Ref
	TypedPtr() VisualShaderNodeFloatOp
}

type RefVisualShaderNodeFloatOpImpl TypedRef[VisualShaderNodeFloatOp]

func (r *RefVisualShaderNodeFloatOpImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeFloatOp])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeFloatOpImpl) TypedPtr() VisualShaderNodeFloatOp {
	rg := (*TypedRef[VisualShaderNodeFloatOp])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeFloatOpImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeFloatOp])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeFloatOpImpl) TypedRef(from *RefVisualShaderNodeFloatOpImpl) {
	rg := (*TypedRef[VisualShaderNodeFloatOp])(r)
	t := (*TypedRef[VisualShaderNodeFloatOp])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeFloatOp])(t))
}

func (r *RefVisualShaderNodeFloatOpImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeFloatOp])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeFloatOpImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeFloatOp(reference VisualShaderNodeFloatOp) RefVisualShaderNodeFloatOp {
	return (RefVisualShaderNodeFloatOp)(NewTypedRef[VisualShaderNodeFloatOp](reference))
}

func newRefVisualShaderNodeFloatOpAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFloatOp](reference.(VisualShaderNodeFloatOp)))
}

func newRefVisualShaderNodeFloatOpGDExtensionIternalConstructor(reference VisualShaderNodeFloatOp) RefVisualShaderNodeFloatOp {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFloatOp](reference)
}

var _ RefVisualShaderNodeFloatParameter = &RefVisualShaderNodeFloatParameterImpl{}
var _ Ref = &RefVisualShaderNodeFloatParameterImpl{}

type RefVisualShaderNodeFloatParameter interface {
	Ref
	TypedPtr() VisualShaderNodeFloatParameter
}

type RefVisualShaderNodeFloatParameterImpl TypedRef[VisualShaderNodeFloatParameter]

func (r *RefVisualShaderNodeFloatParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeFloatParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeFloatParameterImpl) TypedPtr() VisualShaderNodeFloatParameter {
	rg := (*TypedRef[VisualShaderNodeFloatParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeFloatParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeFloatParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeFloatParameterImpl) TypedRef(from *RefVisualShaderNodeFloatParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeFloatParameter])(r)
	t := (*TypedRef[VisualShaderNodeFloatParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeFloatParameter])(t))
}

func (r *RefVisualShaderNodeFloatParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeFloatParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeFloatParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeFloatParameter(reference VisualShaderNodeFloatParameter) RefVisualShaderNodeFloatParameter {
	return (RefVisualShaderNodeFloatParameter)(NewTypedRef[VisualShaderNodeFloatParameter](reference))
}

func newRefVisualShaderNodeFloatParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFloatParameter](reference.(VisualShaderNodeFloatParameter)))
}

func newRefVisualShaderNodeFloatParameterGDExtensionIternalConstructor(reference VisualShaderNodeFloatParameter) RefVisualShaderNodeFloatParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFloatParameter](reference)
}

var _ RefVisualShaderNodeFresnel = &RefVisualShaderNodeFresnelImpl{}
var _ Ref = &RefVisualShaderNodeFresnelImpl{}

type RefVisualShaderNodeFresnel interface {
	Ref
	TypedPtr() VisualShaderNodeFresnel
}

type RefVisualShaderNodeFresnelImpl TypedRef[VisualShaderNodeFresnel]

func (r *RefVisualShaderNodeFresnelImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeFresnel])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeFresnelImpl) TypedPtr() VisualShaderNodeFresnel {
	rg := (*TypedRef[VisualShaderNodeFresnel])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeFresnelImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeFresnel])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeFresnelImpl) TypedRef(from *RefVisualShaderNodeFresnelImpl) {
	rg := (*TypedRef[VisualShaderNodeFresnel])(r)
	t := (*TypedRef[VisualShaderNodeFresnel])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeFresnel])(t))
}

func (r *RefVisualShaderNodeFresnelImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeFresnel])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeFresnelImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeFresnel(reference VisualShaderNodeFresnel) RefVisualShaderNodeFresnel {
	return (RefVisualShaderNodeFresnel)(NewTypedRef[VisualShaderNodeFresnel](reference))
}

func newRefVisualShaderNodeFresnelAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFresnel](reference.(VisualShaderNodeFresnel)))
}

func newRefVisualShaderNodeFresnelGDExtensionIternalConstructor(reference VisualShaderNodeFresnel) RefVisualShaderNodeFresnel {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeFresnel](reference)
}

var _ RefVisualShaderNodeGlobalExpression = &RefVisualShaderNodeGlobalExpressionImpl{}
var _ Ref = &RefVisualShaderNodeGlobalExpressionImpl{}

type RefVisualShaderNodeGlobalExpression interface {
	Ref
	TypedPtr() VisualShaderNodeGlobalExpression
}

type RefVisualShaderNodeGlobalExpressionImpl TypedRef[VisualShaderNodeGlobalExpression]

func (r *RefVisualShaderNodeGlobalExpressionImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeGlobalExpression])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeGlobalExpressionImpl) TypedPtr() VisualShaderNodeGlobalExpression {
	rg := (*TypedRef[VisualShaderNodeGlobalExpression])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeGlobalExpressionImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeGlobalExpression])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeGlobalExpressionImpl) TypedRef(from *RefVisualShaderNodeGlobalExpressionImpl) {
	rg := (*TypedRef[VisualShaderNodeGlobalExpression])(r)
	t := (*TypedRef[VisualShaderNodeGlobalExpression])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeGlobalExpression])(t))
}

func (r *RefVisualShaderNodeGlobalExpressionImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeGlobalExpression])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeGlobalExpressionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeGlobalExpression(reference VisualShaderNodeGlobalExpression) RefVisualShaderNodeGlobalExpression {
	return (RefVisualShaderNodeGlobalExpression)(NewTypedRef[VisualShaderNodeGlobalExpression](reference))
}

func newRefVisualShaderNodeGlobalExpressionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeGlobalExpression](reference.(VisualShaderNodeGlobalExpression)))
}

func newRefVisualShaderNodeGlobalExpressionGDExtensionIternalConstructor(reference VisualShaderNodeGlobalExpression) RefVisualShaderNodeGlobalExpression {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeGlobalExpression](reference)
}

var _ RefVisualShaderNodeGroupBase = &RefVisualShaderNodeGroupBaseImpl{}
var _ Ref = &RefVisualShaderNodeGroupBaseImpl{}

type RefVisualShaderNodeGroupBase interface {
	Ref
	TypedPtr() VisualShaderNodeGroupBase
}

type RefVisualShaderNodeGroupBaseImpl TypedRef[VisualShaderNodeGroupBase]

func (r *RefVisualShaderNodeGroupBaseImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeGroupBase])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeGroupBaseImpl) TypedPtr() VisualShaderNodeGroupBase {
	rg := (*TypedRef[VisualShaderNodeGroupBase])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeGroupBaseImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeGroupBase])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeGroupBaseImpl) TypedRef(from *RefVisualShaderNodeGroupBaseImpl) {
	rg := (*TypedRef[VisualShaderNodeGroupBase])(r)
	t := (*TypedRef[VisualShaderNodeGroupBase])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeGroupBase])(t))
}

func (r *RefVisualShaderNodeGroupBaseImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeGroupBase])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeGroupBaseImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeGroupBase(reference VisualShaderNodeGroupBase) RefVisualShaderNodeGroupBase {
	return (RefVisualShaderNodeGroupBase)(NewTypedRef[VisualShaderNodeGroupBase](reference))
}

func newRefVisualShaderNodeGroupBaseAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeGroupBase](reference.(VisualShaderNodeGroupBase)))
}

func newRefVisualShaderNodeGroupBaseGDExtensionIternalConstructor(reference VisualShaderNodeGroupBase) RefVisualShaderNodeGroupBase {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeGroupBase](reference)
}

var _ RefVisualShaderNodeIf = &RefVisualShaderNodeIfImpl{}
var _ Ref = &RefVisualShaderNodeIfImpl{}

type RefVisualShaderNodeIf interface {
	Ref
	TypedPtr() VisualShaderNodeIf
}

type RefVisualShaderNodeIfImpl TypedRef[VisualShaderNodeIf]

func (r *RefVisualShaderNodeIfImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeIf])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeIfImpl) TypedPtr() VisualShaderNodeIf {
	rg := (*TypedRef[VisualShaderNodeIf])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeIfImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeIf])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeIfImpl) TypedRef(from *RefVisualShaderNodeIfImpl) {
	rg := (*TypedRef[VisualShaderNodeIf])(r)
	t := (*TypedRef[VisualShaderNodeIf])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeIf])(t))
}

func (r *RefVisualShaderNodeIfImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeIf])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeIfImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeIf(reference VisualShaderNodeIf) RefVisualShaderNodeIf {
	return (RefVisualShaderNodeIf)(NewTypedRef[VisualShaderNodeIf](reference))
}

func newRefVisualShaderNodeIfAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIf](reference.(VisualShaderNodeIf)))
}

func newRefVisualShaderNodeIfGDExtensionIternalConstructor(reference VisualShaderNodeIf) RefVisualShaderNodeIf {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIf](reference)
}

var _ RefVisualShaderNodeInput = &RefVisualShaderNodeInputImpl{}
var _ Ref = &RefVisualShaderNodeInputImpl{}

type RefVisualShaderNodeInput interface {
	Ref
	TypedPtr() VisualShaderNodeInput
}

type RefVisualShaderNodeInputImpl TypedRef[VisualShaderNodeInput]

func (r *RefVisualShaderNodeInputImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeInput])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeInputImpl) TypedPtr() VisualShaderNodeInput {
	rg := (*TypedRef[VisualShaderNodeInput])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeInputImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeInput])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeInputImpl) TypedRef(from *RefVisualShaderNodeInputImpl) {
	rg := (*TypedRef[VisualShaderNodeInput])(r)
	t := (*TypedRef[VisualShaderNodeInput])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeInput])(t))
}

func (r *RefVisualShaderNodeInputImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeInput])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeInputImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeInput(reference VisualShaderNodeInput) RefVisualShaderNodeInput {
	return (RefVisualShaderNodeInput)(NewTypedRef[VisualShaderNodeInput](reference))
}

func newRefVisualShaderNodeInputAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeInput](reference.(VisualShaderNodeInput)))
}

func newRefVisualShaderNodeInputGDExtensionIternalConstructor(reference VisualShaderNodeInput) RefVisualShaderNodeInput {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeInput](reference)
}

var _ RefVisualShaderNodeIntConstant = &RefVisualShaderNodeIntConstantImpl{}
var _ Ref = &RefVisualShaderNodeIntConstantImpl{}

type RefVisualShaderNodeIntConstant interface {
	Ref
	TypedPtr() VisualShaderNodeIntConstant
}

type RefVisualShaderNodeIntConstantImpl TypedRef[VisualShaderNodeIntConstant]

func (r *RefVisualShaderNodeIntConstantImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeIntConstant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeIntConstantImpl) TypedPtr() VisualShaderNodeIntConstant {
	rg := (*TypedRef[VisualShaderNodeIntConstant])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeIntConstantImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeIntConstant])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeIntConstantImpl) TypedRef(from *RefVisualShaderNodeIntConstantImpl) {
	rg := (*TypedRef[VisualShaderNodeIntConstant])(r)
	t := (*TypedRef[VisualShaderNodeIntConstant])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeIntConstant])(t))
}

func (r *RefVisualShaderNodeIntConstantImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeIntConstant])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeIntConstantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeIntConstant(reference VisualShaderNodeIntConstant) RefVisualShaderNodeIntConstant {
	return (RefVisualShaderNodeIntConstant)(NewTypedRef[VisualShaderNodeIntConstant](reference))
}

func newRefVisualShaderNodeIntConstantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIntConstant](reference.(VisualShaderNodeIntConstant)))
}

func newRefVisualShaderNodeIntConstantGDExtensionIternalConstructor(reference VisualShaderNodeIntConstant) RefVisualShaderNodeIntConstant {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIntConstant](reference)
}

var _ RefVisualShaderNodeIntFunc = &RefVisualShaderNodeIntFuncImpl{}
var _ Ref = &RefVisualShaderNodeIntFuncImpl{}

type RefVisualShaderNodeIntFunc interface {
	Ref
	TypedPtr() VisualShaderNodeIntFunc
}

type RefVisualShaderNodeIntFuncImpl TypedRef[VisualShaderNodeIntFunc]

func (r *RefVisualShaderNodeIntFuncImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeIntFunc])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeIntFuncImpl) TypedPtr() VisualShaderNodeIntFunc {
	rg := (*TypedRef[VisualShaderNodeIntFunc])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeIntFuncImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeIntFunc])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeIntFuncImpl) TypedRef(from *RefVisualShaderNodeIntFuncImpl) {
	rg := (*TypedRef[VisualShaderNodeIntFunc])(r)
	t := (*TypedRef[VisualShaderNodeIntFunc])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeIntFunc])(t))
}

func (r *RefVisualShaderNodeIntFuncImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeIntFunc])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeIntFuncImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeIntFunc(reference VisualShaderNodeIntFunc) RefVisualShaderNodeIntFunc {
	return (RefVisualShaderNodeIntFunc)(NewTypedRef[VisualShaderNodeIntFunc](reference))
}

func newRefVisualShaderNodeIntFuncAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIntFunc](reference.(VisualShaderNodeIntFunc)))
}

func newRefVisualShaderNodeIntFuncGDExtensionIternalConstructor(reference VisualShaderNodeIntFunc) RefVisualShaderNodeIntFunc {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIntFunc](reference)
}

var _ RefVisualShaderNodeIntOp = &RefVisualShaderNodeIntOpImpl{}
var _ Ref = &RefVisualShaderNodeIntOpImpl{}

type RefVisualShaderNodeIntOp interface {
	Ref
	TypedPtr() VisualShaderNodeIntOp
}

type RefVisualShaderNodeIntOpImpl TypedRef[VisualShaderNodeIntOp]

func (r *RefVisualShaderNodeIntOpImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeIntOp])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeIntOpImpl) TypedPtr() VisualShaderNodeIntOp {
	rg := (*TypedRef[VisualShaderNodeIntOp])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeIntOpImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeIntOp])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeIntOpImpl) TypedRef(from *RefVisualShaderNodeIntOpImpl) {
	rg := (*TypedRef[VisualShaderNodeIntOp])(r)
	t := (*TypedRef[VisualShaderNodeIntOp])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeIntOp])(t))
}

func (r *RefVisualShaderNodeIntOpImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeIntOp])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeIntOpImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeIntOp(reference VisualShaderNodeIntOp) RefVisualShaderNodeIntOp {
	return (RefVisualShaderNodeIntOp)(NewTypedRef[VisualShaderNodeIntOp](reference))
}

func newRefVisualShaderNodeIntOpAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIntOp](reference.(VisualShaderNodeIntOp)))
}

func newRefVisualShaderNodeIntOpGDExtensionIternalConstructor(reference VisualShaderNodeIntOp) RefVisualShaderNodeIntOp {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIntOp](reference)
}

var _ RefVisualShaderNodeIntParameter = &RefVisualShaderNodeIntParameterImpl{}
var _ Ref = &RefVisualShaderNodeIntParameterImpl{}

type RefVisualShaderNodeIntParameter interface {
	Ref
	TypedPtr() VisualShaderNodeIntParameter
}

type RefVisualShaderNodeIntParameterImpl TypedRef[VisualShaderNodeIntParameter]

func (r *RefVisualShaderNodeIntParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeIntParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeIntParameterImpl) TypedPtr() VisualShaderNodeIntParameter {
	rg := (*TypedRef[VisualShaderNodeIntParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeIntParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeIntParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeIntParameterImpl) TypedRef(from *RefVisualShaderNodeIntParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeIntParameter])(r)
	t := (*TypedRef[VisualShaderNodeIntParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeIntParameter])(t))
}

func (r *RefVisualShaderNodeIntParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeIntParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeIntParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeIntParameter(reference VisualShaderNodeIntParameter) RefVisualShaderNodeIntParameter {
	return (RefVisualShaderNodeIntParameter)(NewTypedRef[VisualShaderNodeIntParameter](reference))
}

func newRefVisualShaderNodeIntParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIntParameter](reference.(VisualShaderNodeIntParameter)))
}

func newRefVisualShaderNodeIntParameterGDExtensionIternalConstructor(reference VisualShaderNodeIntParameter) RefVisualShaderNodeIntParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIntParameter](reference)
}

var _ RefVisualShaderNodeIs = &RefVisualShaderNodeIsImpl{}
var _ Ref = &RefVisualShaderNodeIsImpl{}

type RefVisualShaderNodeIs interface {
	Ref
	TypedPtr() VisualShaderNodeIs
}

type RefVisualShaderNodeIsImpl TypedRef[VisualShaderNodeIs]

func (r *RefVisualShaderNodeIsImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeIs])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeIsImpl) TypedPtr() VisualShaderNodeIs {
	rg := (*TypedRef[VisualShaderNodeIs])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeIsImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeIs])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeIsImpl) TypedRef(from *RefVisualShaderNodeIsImpl) {
	rg := (*TypedRef[VisualShaderNodeIs])(r)
	t := (*TypedRef[VisualShaderNodeIs])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeIs])(t))
}

func (r *RefVisualShaderNodeIsImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeIs])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeIsImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeIs(reference VisualShaderNodeIs) RefVisualShaderNodeIs {
	return (RefVisualShaderNodeIs)(NewTypedRef[VisualShaderNodeIs](reference))
}

func newRefVisualShaderNodeIsAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIs](reference.(VisualShaderNodeIs)))
}

func newRefVisualShaderNodeIsGDExtensionIternalConstructor(reference VisualShaderNodeIs) RefVisualShaderNodeIs {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeIs](reference)
}

var _ RefVisualShaderNodeLinearSceneDepth = &RefVisualShaderNodeLinearSceneDepthImpl{}
var _ Ref = &RefVisualShaderNodeLinearSceneDepthImpl{}

type RefVisualShaderNodeLinearSceneDepth interface {
	Ref
	TypedPtr() VisualShaderNodeLinearSceneDepth
}

type RefVisualShaderNodeLinearSceneDepthImpl TypedRef[VisualShaderNodeLinearSceneDepth]

func (r *RefVisualShaderNodeLinearSceneDepthImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeLinearSceneDepth])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeLinearSceneDepthImpl) TypedPtr() VisualShaderNodeLinearSceneDepth {
	rg := (*TypedRef[VisualShaderNodeLinearSceneDepth])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeLinearSceneDepthImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeLinearSceneDepth])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeLinearSceneDepthImpl) TypedRef(from *RefVisualShaderNodeLinearSceneDepthImpl) {
	rg := (*TypedRef[VisualShaderNodeLinearSceneDepth])(r)
	t := (*TypedRef[VisualShaderNodeLinearSceneDepth])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeLinearSceneDepth])(t))
}

func (r *RefVisualShaderNodeLinearSceneDepthImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeLinearSceneDepth])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeLinearSceneDepthImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeLinearSceneDepth(reference VisualShaderNodeLinearSceneDepth) RefVisualShaderNodeLinearSceneDepth {
	return (RefVisualShaderNodeLinearSceneDepth)(NewTypedRef[VisualShaderNodeLinearSceneDepth](reference))
}

func newRefVisualShaderNodeLinearSceneDepthAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeLinearSceneDepth](reference.(VisualShaderNodeLinearSceneDepth)))
}

func newRefVisualShaderNodeLinearSceneDepthGDExtensionIternalConstructor(reference VisualShaderNodeLinearSceneDepth) RefVisualShaderNodeLinearSceneDepth {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeLinearSceneDepth](reference)
}

var _ RefVisualShaderNodeMix = &RefVisualShaderNodeMixImpl{}
var _ Ref = &RefVisualShaderNodeMixImpl{}

type RefVisualShaderNodeMix interface {
	Ref
	TypedPtr() VisualShaderNodeMix
}

type RefVisualShaderNodeMixImpl TypedRef[VisualShaderNodeMix]

func (r *RefVisualShaderNodeMixImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeMix])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeMixImpl) TypedPtr() VisualShaderNodeMix {
	rg := (*TypedRef[VisualShaderNodeMix])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeMixImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeMix])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeMixImpl) TypedRef(from *RefVisualShaderNodeMixImpl) {
	rg := (*TypedRef[VisualShaderNodeMix])(r)
	t := (*TypedRef[VisualShaderNodeMix])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeMix])(t))
}

func (r *RefVisualShaderNodeMixImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeMix])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeMixImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeMix(reference VisualShaderNodeMix) RefVisualShaderNodeMix {
	return (RefVisualShaderNodeMix)(NewTypedRef[VisualShaderNodeMix](reference))
}

func newRefVisualShaderNodeMixAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeMix](reference.(VisualShaderNodeMix)))
}

func newRefVisualShaderNodeMixGDExtensionIternalConstructor(reference VisualShaderNodeMix) RefVisualShaderNodeMix {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeMix](reference)
}

var _ RefVisualShaderNodeMultiplyAdd = &RefVisualShaderNodeMultiplyAddImpl{}
var _ Ref = &RefVisualShaderNodeMultiplyAddImpl{}

type RefVisualShaderNodeMultiplyAdd interface {
	Ref
	TypedPtr() VisualShaderNodeMultiplyAdd
}

type RefVisualShaderNodeMultiplyAddImpl TypedRef[VisualShaderNodeMultiplyAdd]

func (r *RefVisualShaderNodeMultiplyAddImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeMultiplyAdd])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeMultiplyAddImpl) TypedPtr() VisualShaderNodeMultiplyAdd {
	rg := (*TypedRef[VisualShaderNodeMultiplyAdd])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeMultiplyAddImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeMultiplyAdd])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeMultiplyAddImpl) TypedRef(from *RefVisualShaderNodeMultiplyAddImpl) {
	rg := (*TypedRef[VisualShaderNodeMultiplyAdd])(r)
	t := (*TypedRef[VisualShaderNodeMultiplyAdd])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeMultiplyAdd])(t))
}

func (r *RefVisualShaderNodeMultiplyAddImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeMultiplyAdd])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeMultiplyAddImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeMultiplyAdd(reference VisualShaderNodeMultiplyAdd) RefVisualShaderNodeMultiplyAdd {
	return (RefVisualShaderNodeMultiplyAdd)(NewTypedRef[VisualShaderNodeMultiplyAdd](reference))
}

func newRefVisualShaderNodeMultiplyAddAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeMultiplyAdd](reference.(VisualShaderNodeMultiplyAdd)))
}

func newRefVisualShaderNodeMultiplyAddGDExtensionIternalConstructor(reference VisualShaderNodeMultiplyAdd) RefVisualShaderNodeMultiplyAdd {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeMultiplyAdd](reference)
}

var _ RefVisualShaderNodeOuterProduct = &RefVisualShaderNodeOuterProductImpl{}
var _ Ref = &RefVisualShaderNodeOuterProductImpl{}

type RefVisualShaderNodeOuterProduct interface {
	Ref
	TypedPtr() VisualShaderNodeOuterProduct
}

type RefVisualShaderNodeOuterProductImpl TypedRef[VisualShaderNodeOuterProduct]

func (r *RefVisualShaderNodeOuterProductImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeOuterProduct])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeOuterProductImpl) TypedPtr() VisualShaderNodeOuterProduct {
	rg := (*TypedRef[VisualShaderNodeOuterProduct])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeOuterProductImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeOuterProduct])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeOuterProductImpl) TypedRef(from *RefVisualShaderNodeOuterProductImpl) {
	rg := (*TypedRef[VisualShaderNodeOuterProduct])(r)
	t := (*TypedRef[VisualShaderNodeOuterProduct])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeOuterProduct])(t))
}

func (r *RefVisualShaderNodeOuterProductImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeOuterProduct])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeOuterProductImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeOuterProduct(reference VisualShaderNodeOuterProduct) RefVisualShaderNodeOuterProduct {
	return (RefVisualShaderNodeOuterProduct)(NewTypedRef[VisualShaderNodeOuterProduct](reference))
}

func newRefVisualShaderNodeOuterProductAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeOuterProduct](reference.(VisualShaderNodeOuterProduct)))
}

func newRefVisualShaderNodeOuterProductGDExtensionIternalConstructor(reference VisualShaderNodeOuterProduct) RefVisualShaderNodeOuterProduct {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeOuterProduct](reference)
}

var _ RefVisualShaderNodeOutput = &RefVisualShaderNodeOutputImpl{}
var _ Ref = &RefVisualShaderNodeOutputImpl{}

type RefVisualShaderNodeOutput interface {
	Ref
	TypedPtr() VisualShaderNodeOutput
}

type RefVisualShaderNodeOutputImpl TypedRef[VisualShaderNodeOutput]

func (r *RefVisualShaderNodeOutputImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeOutput])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeOutputImpl) TypedPtr() VisualShaderNodeOutput {
	rg := (*TypedRef[VisualShaderNodeOutput])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeOutputImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeOutput])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeOutputImpl) TypedRef(from *RefVisualShaderNodeOutputImpl) {
	rg := (*TypedRef[VisualShaderNodeOutput])(r)
	t := (*TypedRef[VisualShaderNodeOutput])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeOutput])(t))
}

func (r *RefVisualShaderNodeOutputImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeOutput])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeOutputImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeOutput(reference VisualShaderNodeOutput) RefVisualShaderNodeOutput {
	return (RefVisualShaderNodeOutput)(NewTypedRef[VisualShaderNodeOutput](reference))
}

func newRefVisualShaderNodeOutputAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeOutput](reference.(VisualShaderNodeOutput)))
}

func newRefVisualShaderNodeOutputGDExtensionIternalConstructor(reference VisualShaderNodeOutput) RefVisualShaderNodeOutput {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeOutput](reference)
}

var _ RefVisualShaderNodeParameter = &RefVisualShaderNodeParameterImpl{}
var _ Ref = &RefVisualShaderNodeParameterImpl{}

type RefVisualShaderNodeParameter interface {
	Ref
	TypedPtr() VisualShaderNodeParameter
}

type RefVisualShaderNodeParameterImpl TypedRef[VisualShaderNodeParameter]

func (r *RefVisualShaderNodeParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParameterImpl) TypedPtr() VisualShaderNodeParameter {
	rg := (*TypedRef[VisualShaderNodeParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParameterImpl) TypedRef(from *RefVisualShaderNodeParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeParameter])(r)
	t := (*TypedRef[VisualShaderNodeParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParameter])(t))
}

func (r *RefVisualShaderNodeParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParameter(reference VisualShaderNodeParameter) RefVisualShaderNodeParameter {
	return (RefVisualShaderNodeParameter)(NewTypedRef[VisualShaderNodeParameter](reference))
}

func newRefVisualShaderNodeParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParameter](reference.(VisualShaderNodeParameter)))
}

func newRefVisualShaderNodeParameterGDExtensionIternalConstructor(reference VisualShaderNodeParameter) RefVisualShaderNodeParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParameter](reference)
}

var _ RefVisualShaderNodeParameterRef = &RefVisualShaderNodeParameterRefImpl{}
var _ Ref = &RefVisualShaderNodeParameterRefImpl{}

type RefVisualShaderNodeParameterRef interface {
	Ref
	TypedPtr() VisualShaderNodeParameterRef
}

type RefVisualShaderNodeParameterRefImpl TypedRef[VisualShaderNodeParameterRef]

func (r *RefVisualShaderNodeParameterRefImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParameterRef])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParameterRefImpl) TypedPtr() VisualShaderNodeParameterRef {
	rg := (*TypedRef[VisualShaderNodeParameterRef])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParameterRefImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParameterRef])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParameterRefImpl) TypedRef(from *RefVisualShaderNodeParameterRefImpl) {
	rg := (*TypedRef[VisualShaderNodeParameterRef])(r)
	t := (*TypedRef[VisualShaderNodeParameterRef])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParameterRef])(t))
}

func (r *RefVisualShaderNodeParameterRefImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParameterRef])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParameterRefImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParameterRef(reference VisualShaderNodeParameterRef) RefVisualShaderNodeParameterRef {
	return (RefVisualShaderNodeParameterRef)(NewTypedRef[VisualShaderNodeParameterRef](reference))
}

func newRefVisualShaderNodeParameterRefAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParameterRef](reference.(VisualShaderNodeParameterRef)))
}

func newRefVisualShaderNodeParameterRefGDExtensionIternalConstructor(reference VisualShaderNodeParameterRef) RefVisualShaderNodeParameterRef {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParameterRef](reference)
}

var _ RefVisualShaderNodeParticleAccelerator = &RefVisualShaderNodeParticleAcceleratorImpl{}
var _ Ref = &RefVisualShaderNodeParticleAcceleratorImpl{}

type RefVisualShaderNodeParticleAccelerator interface {
	Ref
	TypedPtr() VisualShaderNodeParticleAccelerator
}

type RefVisualShaderNodeParticleAcceleratorImpl TypedRef[VisualShaderNodeParticleAccelerator]

func (r *RefVisualShaderNodeParticleAcceleratorImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParticleAccelerator])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParticleAcceleratorImpl) TypedPtr() VisualShaderNodeParticleAccelerator {
	rg := (*TypedRef[VisualShaderNodeParticleAccelerator])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParticleAcceleratorImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParticleAccelerator])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParticleAcceleratorImpl) TypedRef(from *RefVisualShaderNodeParticleAcceleratorImpl) {
	rg := (*TypedRef[VisualShaderNodeParticleAccelerator])(r)
	t := (*TypedRef[VisualShaderNodeParticleAccelerator])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParticleAccelerator])(t))
}

func (r *RefVisualShaderNodeParticleAcceleratorImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParticleAccelerator])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParticleAcceleratorImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParticleAccelerator(reference VisualShaderNodeParticleAccelerator) RefVisualShaderNodeParticleAccelerator {
	return (RefVisualShaderNodeParticleAccelerator)(NewTypedRef[VisualShaderNodeParticleAccelerator](reference))
}

func newRefVisualShaderNodeParticleAcceleratorAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleAccelerator](reference.(VisualShaderNodeParticleAccelerator)))
}

func newRefVisualShaderNodeParticleAcceleratorGDExtensionIternalConstructor(reference VisualShaderNodeParticleAccelerator) RefVisualShaderNodeParticleAccelerator {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleAccelerator](reference)
}

var _ RefVisualShaderNodeParticleBoxEmitter = &RefVisualShaderNodeParticleBoxEmitterImpl{}
var _ Ref = &RefVisualShaderNodeParticleBoxEmitterImpl{}

type RefVisualShaderNodeParticleBoxEmitter interface {
	Ref
	TypedPtr() VisualShaderNodeParticleBoxEmitter
}

type RefVisualShaderNodeParticleBoxEmitterImpl TypedRef[VisualShaderNodeParticleBoxEmitter]

func (r *RefVisualShaderNodeParticleBoxEmitterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParticleBoxEmitter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParticleBoxEmitterImpl) TypedPtr() VisualShaderNodeParticleBoxEmitter {
	rg := (*TypedRef[VisualShaderNodeParticleBoxEmitter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParticleBoxEmitterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParticleBoxEmitter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParticleBoxEmitterImpl) TypedRef(from *RefVisualShaderNodeParticleBoxEmitterImpl) {
	rg := (*TypedRef[VisualShaderNodeParticleBoxEmitter])(r)
	t := (*TypedRef[VisualShaderNodeParticleBoxEmitter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParticleBoxEmitter])(t))
}

func (r *RefVisualShaderNodeParticleBoxEmitterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParticleBoxEmitter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParticleBoxEmitterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParticleBoxEmitter(reference VisualShaderNodeParticleBoxEmitter) RefVisualShaderNodeParticleBoxEmitter {
	return (RefVisualShaderNodeParticleBoxEmitter)(NewTypedRef[VisualShaderNodeParticleBoxEmitter](reference))
}

func newRefVisualShaderNodeParticleBoxEmitterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleBoxEmitter](reference.(VisualShaderNodeParticleBoxEmitter)))
}

func newRefVisualShaderNodeParticleBoxEmitterGDExtensionIternalConstructor(reference VisualShaderNodeParticleBoxEmitter) RefVisualShaderNodeParticleBoxEmitter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleBoxEmitter](reference)
}

var _ RefVisualShaderNodeParticleConeVelocity = &RefVisualShaderNodeParticleConeVelocityImpl{}
var _ Ref = &RefVisualShaderNodeParticleConeVelocityImpl{}

type RefVisualShaderNodeParticleConeVelocity interface {
	Ref
	TypedPtr() VisualShaderNodeParticleConeVelocity
}

type RefVisualShaderNodeParticleConeVelocityImpl TypedRef[VisualShaderNodeParticleConeVelocity]

func (r *RefVisualShaderNodeParticleConeVelocityImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParticleConeVelocity])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParticleConeVelocityImpl) TypedPtr() VisualShaderNodeParticleConeVelocity {
	rg := (*TypedRef[VisualShaderNodeParticleConeVelocity])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParticleConeVelocityImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParticleConeVelocity])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParticleConeVelocityImpl) TypedRef(from *RefVisualShaderNodeParticleConeVelocityImpl) {
	rg := (*TypedRef[VisualShaderNodeParticleConeVelocity])(r)
	t := (*TypedRef[VisualShaderNodeParticleConeVelocity])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParticleConeVelocity])(t))
}

func (r *RefVisualShaderNodeParticleConeVelocityImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParticleConeVelocity])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParticleConeVelocityImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParticleConeVelocity(reference VisualShaderNodeParticleConeVelocity) RefVisualShaderNodeParticleConeVelocity {
	return (RefVisualShaderNodeParticleConeVelocity)(NewTypedRef[VisualShaderNodeParticleConeVelocity](reference))
}

func newRefVisualShaderNodeParticleConeVelocityAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleConeVelocity](reference.(VisualShaderNodeParticleConeVelocity)))
}

func newRefVisualShaderNodeParticleConeVelocityGDExtensionIternalConstructor(reference VisualShaderNodeParticleConeVelocity) RefVisualShaderNodeParticleConeVelocity {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleConeVelocity](reference)
}

var _ RefVisualShaderNodeParticleEmit = &RefVisualShaderNodeParticleEmitImpl{}
var _ Ref = &RefVisualShaderNodeParticleEmitImpl{}

type RefVisualShaderNodeParticleEmit interface {
	Ref
	TypedPtr() VisualShaderNodeParticleEmit
}

type RefVisualShaderNodeParticleEmitImpl TypedRef[VisualShaderNodeParticleEmit]

func (r *RefVisualShaderNodeParticleEmitImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParticleEmit])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParticleEmitImpl) TypedPtr() VisualShaderNodeParticleEmit {
	rg := (*TypedRef[VisualShaderNodeParticleEmit])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParticleEmitImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParticleEmit])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParticleEmitImpl) TypedRef(from *RefVisualShaderNodeParticleEmitImpl) {
	rg := (*TypedRef[VisualShaderNodeParticleEmit])(r)
	t := (*TypedRef[VisualShaderNodeParticleEmit])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParticleEmit])(t))
}

func (r *RefVisualShaderNodeParticleEmitImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParticleEmit])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParticleEmitImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParticleEmit(reference VisualShaderNodeParticleEmit) RefVisualShaderNodeParticleEmit {
	return (RefVisualShaderNodeParticleEmit)(NewTypedRef[VisualShaderNodeParticleEmit](reference))
}

func newRefVisualShaderNodeParticleEmitAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleEmit](reference.(VisualShaderNodeParticleEmit)))
}

func newRefVisualShaderNodeParticleEmitGDExtensionIternalConstructor(reference VisualShaderNodeParticleEmit) RefVisualShaderNodeParticleEmit {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleEmit](reference)
}

var _ RefVisualShaderNodeParticleEmitter = &RefVisualShaderNodeParticleEmitterImpl{}
var _ Ref = &RefVisualShaderNodeParticleEmitterImpl{}

type RefVisualShaderNodeParticleEmitter interface {
	Ref
	TypedPtr() VisualShaderNodeParticleEmitter
}

type RefVisualShaderNodeParticleEmitterImpl TypedRef[VisualShaderNodeParticleEmitter]

func (r *RefVisualShaderNodeParticleEmitterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParticleEmitter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParticleEmitterImpl) TypedPtr() VisualShaderNodeParticleEmitter {
	rg := (*TypedRef[VisualShaderNodeParticleEmitter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParticleEmitterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParticleEmitter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParticleEmitterImpl) TypedRef(from *RefVisualShaderNodeParticleEmitterImpl) {
	rg := (*TypedRef[VisualShaderNodeParticleEmitter])(r)
	t := (*TypedRef[VisualShaderNodeParticleEmitter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParticleEmitter])(t))
}

func (r *RefVisualShaderNodeParticleEmitterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParticleEmitter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParticleEmitterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParticleEmitter(reference VisualShaderNodeParticleEmitter) RefVisualShaderNodeParticleEmitter {
	return (RefVisualShaderNodeParticleEmitter)(NewTypedRef[VisualShaderNodeParticleEmitter](reference))
}

func newRefVisualShaderNodeParticleEmitterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleEmitter](reference.(VisualShaderNodeParticleEmitter)))
}

func newRefVisualShaderNodeParticleEmitterGDExtensionIternalConstructor(reference VisualShaderNodeParticleEmitter) RefVisualShaderNodeParticleEmitter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleEmitter](reference)
}

var _ RefVisualShaderNodeParticleMeshEmitter = &RefVisualShaderNodeParticleMeshEmitterImpl{}
var _ Ref = &RefVisualShaderNodeParticleMeshEmitterImpl{}

type RefVisualShaderNodeParticleMeshEmitter interface {
	Ref
	TypedPtr() VisualShaderNodeParticleMeshEmitter
}

type RefVisualShaderNodeParticleMeshEmitterImpl TypedRef[VisualShaderNodeParticleMeshEmitter]

func (r *RefVisualShaderNodeParticleMeshEmitterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParticleMeshEmitter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParticleMeshEmitterImpl) TypedPtr() VisualShaderNodeParticleMeshEmitter {
	rg := (*TypedRef[VisualShaderNodeParticleMeshEmitter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParticleMeshEmitterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParticleMeshEmitter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParticleMeshEmitterImpl) TypedRef(from *RefVisualShaderNodeParticleMeshEmitterImpl) {
	rg := (*TypedRef[VisualShaderNodeParticleMeshEmitter])(r)
	t := (*TypedRef[VisualShaderNodeParticleMeshEmitter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParticleMeshEmitter])(t))
}

func (r *RefVisualShaderNodeParticleMeshEmitterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParticleMeshEmitter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParticleMeshEmitterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParticleMeshEmitter(reference VisualShaderNodeParticleMeshEmitter) RefVisualShaderNodeParticleMeshEmitter {
	return (RefVisualShaderNodeParticleMeshEmitter)(NewTypedRef[VisualShaderNodeParticleMeshEmitter](reference))
}

func newRefVisualShaderNodeParticleMeshEmitterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleMeshEmitter](reference.(VisualShaderNodeParticleMeshEmitter)))
}

func newRefVisualShaderNodeParticleMeshEmitterGDExtensionIternalConstructor(reference VisualShaderNodeParticleMeshEmitter) RefVisualShaderNodeParticleMeshEmitter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleMeshEmitter](reference)
}

var _ RefVisualShaderNodeParticleMultiplyByAxisAngle = &RefVisualShaderNodeParticleMultiplyByAxisAngleImpl{}
var _ Ref = &RefVisualShaderNodeParticleMultiplyByAxisAngleImpl{}

type RefVisualShaderNodeParticleMultiplyByAxisAngle interface {
	Ref
	TypedPtr() VisualShaderNodeParticleMultiplyByAxisAngle
}

type RefVisualShaderNodeParticleMultiplyByAxisAngleImpl TypedRef[VisualShaderNodeParticleMultiplyByAxisAngle]

func (r *RefVisualShaderNodeParticleMultiplyByAxisAngleImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParticleMultiplyByAxisAngle])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParticleMultiplyByAxisAngleImpl) TypedPtr() VisualShaderNodeParticleMultiplyByAxisAngle {
	rg := (*TypedRef[VisualShaderNodeParticleMultiplyByAxisAngle])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParticleMultiplyByAxisAngleImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParticleMultiplyByAxisAngle])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParticleMultiplyByAxisAngleImpl) TypedRef(from *RefVisualShaderNodeParticleMultiplyByAxisAngleImpl) {
	rg := (*TypedRef[VisualShaderNodeParticleMultiplyByAxisAngle])(r)
	t := (*TypedRef[VisualShaderNodeParticleMultiplyByAxisAngle])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParticleMultiplyByAxisAngle])(t))
}

func (r *RefVisualShaderNodeParticleMultiplyByAxisAngleImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParticleMultiplyByAxisAngle])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParticleMultiplyByAxisAngleImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParticleMultiplyByAxisAngle(reference VisualShaderNodeParticleMultiplyByAxisAngle) RefVisualShaderNodeParticleMultiplyByAxisAngle {
	return (RefVisualShaderNodeParticleMultiplyByAxisAngle)(NewTypedRef[VisualShaderNodeParticleMultiplyByAxisAngle](reference))
}

func newRefVisualShaderNodeParticleMultiplyByAxisAngleAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleMultiplyByAxisAngle](reference.(VisualShaderNodeParticleMultiplyByAxisAngle)))
}

func newRefVisualShaderNodeParticleMultiplyByAxisAngleGDExtensionIternalConstructor(reference VisualShaderNodeParticleMultiplyByAxisAngle) RefVisualShaderNodeParticleMultiplyByAxisAngle {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleMultiplyByAxisAngle](reference)
}

var _ RefVisualShaderNodeParticleOutput = &RefVisualShaderNodeParticleOutputImpl{}
var _ Ref = &RefVisualShaderNodeParticleOutputImpl{}

type RefVisualShaderNodeParticleOutput interface {
	Ref
	TypedPtr() VisualShaderNodeParticleOutput
}

type RefVisualShaderNodeParticleOutputImpl TypedRef[VisualShaderNodeParticleOutput]

func (r *RefVisualShaderNodeParticleOutputImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParticleOutput])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParticleOutputImpl) TypedPtr() VisualShaderNodeParticleOutput {
	rg := (*TypedRef[VisualShaderNodeParticleOutput])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParticleOutputImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParticleOutput])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParticleOutputImpl) TypedRef(from *RefVisualShaderNodeParticleOutputImpl) {
	rg := (*TypedRef[VisualShaderNodeParticleOutput])(r)
	t := (*TypedRef[VisualShaderNodeParticleOutput])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParticleOutput])(t))
}

func (r *RefVisualShaderNodeParticleOutputImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParticleOutput])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParticleOutputImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParticleOutput(reference VisualShaderNodeParticleOutput) RefVisualShaderNodeParticleOutput {
	return (RefVisualShaderNodeParticleOutput)(NewTypedRef[VisualShaderNodeParticleOutput](reference))
}

func newRefVisualShaderNodeParticleOutputAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleOutput](reference.(VisualShaderNodeParticleOutput)))
}

func newRefVisualShaderNodeParticleOutputGDExtensionIternalConstructor(reference VisualShaderNodeParticleOutput) RefVisualShaderNodeParticleOutput {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleOutput](reference)
}

var _ RefVisualShaderNodeParticleRandomness = &RefVisualShaderNodeParticleRandomnessImpl{}
var _ Ref = &RefVisualShaderNodeParticleRandomnessImpl{}

type RefVisualShaderNodeParticleRandomness interface {
	Ref
	TypedPtr() VisualShaderNodeParticleRandomness
}

type RefVisualShaderNodeParticleRandomnessImpl TypedRef[VisualShaderNodeParticleRandomness]

func (r *RefVisualShaderNodeParticleRandomnessImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParticleRandomness])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParticleRandomnessImpl) TypedPtr() VisualShaderNodeParticleRandomness {
	rg := (*TypedRef[VisualShaderNodeParticleRandomness])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParticleRandomnessImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParticleRandomness])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParticleRandomnessImpl) TypedRef(from *RefVisualShaderNodeParticleRandomnessImpl) {
	rg := (*TypedRef[VisualShaderNodeParticleRandomness])(r)
	t := (*TypedRef[VisualShaderNodeParticleRandomness])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParticleRandomness])(t))
}

func (r *RefVisualShaderNodeParticleRandomnessImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParticleRandomness])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParticleRandomnessImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParticleRandomness(reference VisualShaderNodeParticleRandomness) RefVisualShaderNodeParticleRandomness {
	return (RefVisualShaderNodeParticleRandomness)(NewTypedRef[VisualShaderNodeParticleRandomness](reference))
}

func newRefVisualShaderNodeParticleRandomnessAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleRandomness](reference.(VisualShaderNodeParticleRandomness)))
}

func newRefVisualShaderNodeParticleRandomnessGDExtensionIternalConstructor(reference VisualShaderNodeParticleRandomness) RefVisualShaderNodeParticleRandomness {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleRandomness](reference)
}

var _ RefVisualShaderNodeParticleRingEmitter = &RefVisualShaderNodeParticleRingEmitterImpl{}
var _ Ref = &RefVisualShaderNodeParticleRingEmitterImpl{}

type RefVisualShaderNodeParticleRingEmitter interface {
	Ref
	TypedPtr() VisualShaderNodeParticleRingEmitter
}

type RefVisualShaderNodeParticleRingEmitterImpl TypedRef[VisualShaderNodeParticleRingEmitter]

func (r *RefVisualShaderNodeParticleRingEmitterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParticleRingEmitter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParticleRingEmitterImpl) TypedPtr() VisualShaderNodeParticleRingEmitter {
	rg := (*TypedRef[VisualShaderNodeParticleRingEmitter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParticleRingEmitterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParticleRingEmitter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParticleRingEmitterImpl) TypedRef(from *RefVisualShaderNodeParticleRingEmitterImpl) {
	rg := (*TypedRef[VisualShaderNodeParticleRingEmitter])(r)
	t := (*TypedRef[VisualShaderNodeParticleRingEmitter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParticleRingEmitter])(t))
}

func (r *RefVisualShaderNodeParticleRingEmitterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParticleRingEmitter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParticleRingEmitterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParticleRingEmitter(reference VisualShaderNodeParticleRingEmitter) RefVisualShaderNodeParticleRingEmitter {
	return (RefVisualShaderNodeParticleRingEmitter)(NewTypedRef[VisualShaderNodeParticleRingEmitter](reference))
}

func newRefVisualShaderNodeParticleRingEmitterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleRingEmitter](reference.(VisualShaderNodeParticleRingEmitter)))
}

func newRefVisualShaderNodeParticleRingEmitterGDExtensionIternalConstructor(reference VisualShaderNodeParticleRingEmitter) RefVisualShaderNodeParticleRingEmitter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleRingEmitter](reference)
}

var _ RefVisualShaderNodeParticleSphereEmitter = &RefVisualShaderNodeParticleSphereEmitterImpl{}
var _ Ref = &RefVisualShaderNodeParticleSphereEmitterImpl{}

type RefVisualShaderNodeParticleSphereEmitter interface {
	Ref
	TypedPtr() VisualShaderNodeParticleSphereEmitter
}

type RefVisualShaderNodeParticleSphereEmitterImpl TypedRef[VisualShaderNodeParticleSphereEmitter]

func (r *RefVisualShaderNodeParticleSphereEmitterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeParticleSphereEmitter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeParticleSphereEmitterImpl) TypedPtr() VisualShaderNodeParticleSphereEmitter {
	rg := (*TypedRef[VisualShaderNodeParticleSphereEmitter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeParticleSphereEmitterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeParticleSphereEmitter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeParticleSphereEmitterImpl) TypedRef(from *RefVisualShaderNodeParticleSphereEmitterImpl) {
	rg := (*TypedRef[VisualShaderNodeParticleSphereEmitter])(r)
	t := (*TypedRef[VisualShaderNodeParticleSphereEmitter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeParticleSphereEmitter])(t))
}

func (r *RefVisualShaderNodeParticleSphereEmitterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeParticleSphereEmitter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeParticleSphereEmitterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeParticleSphereEmitter(reference VisualShaderNodeParticleSphereEmitter) RefVisualShaderNodeParticleSphereEmitter {
	return (RefVisualShaderNodeParticleSphereEmitter)(NewTypedRef[VisualShaderNodeParticleSphereEmitter](reference))
}

func newRefVisualShaderNodeParticleSphereEmitterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleSphereEmitter](reference.(VisualShaderNodeParticleSphereEmitter)))
}

func newRefVisualShaderNodeParticleSphereEmitterGDExtensionIternalConstructor(reference VisualShaderNodeParticleSphereEmitter) RefVisualShaderNodeParticleSphereEmitter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeParticleSphereEmitter](reference)
}

var _ RefVisualShaderNodeProximityFade = &RefVisualShaderNodeProximityFadeImpl{}
var _ Ref = &RefVisualShaderNodeProximityFadeImpl{}

type RefVisualShaderNodeProximityFade interface {
	Ref
	TypedPtr() VisualShaderNodeProximityFade
}

type RefVisualShaderNodeProximityFadeImpl TypedRef[VisualShaderNodeProximityFade]

func (r *RefVisualShaderNodeProximityFadeImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeProximityFade])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeProximityFadeImpl) TypedPtr() VisualShaderNodeProximityFade {
	rg := (*TypedRef[VisualShaderNodeProximityFade])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeProximityFadeImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeProximityFade])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeProximityFadeImpl) TypedRef(from *RefVisualShaderNodeProximityFadeImpl) {
	rg := (*TypedRef[VisualShaderNodeProximityFade])(r)
	t := (*TypedRef[VisualShaderNodeProximityFade])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeProximityFade])(t))
}

func (r *RefVisualShaderNodeProximityFadeImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeProximityFade])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeProximityFadeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeProximityFade(reference VisualShaderNodeProximityFade) RefVisualShaderNodeProximityFade {
	return (RefVisualShaderNodeProximityFade)(NewTypedRef[VisualShaderNodeProximityFade](reference))
}

func newRefVisualShaderNodeProximityFadeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeProximityFade](reference.(VisualShaderNodeProximityFade)))
}

func newRefVisualShaderNodeProximityFadeGDExtensionIternalConstructor(reference VisualShaderNodeProximityFade) RefVisualShaderNodeProximityFade {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeProximityFade](reference)
}

var _ RefVisualShaderNodeRandomRange = &RefVisualShaderNodeRandomRangeImpl{}
var _ Ref = &RefVisualShaderNodeRandomRangeImpl{}

type RefVisualShaderNodeRandomRange interface {
	Ref
	TypedPtr() VisualShaderNodeRandomRange
}

type RefVisualShaderNodeRandomRangeImpl TypedRef[VisualShaderNodeRandomRange]

func (r *RefVisualShaderNodeRandomRangeImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeRandomRange])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeRandomRangeImpl) TypedPtr() VisualShaderNodeRandomRange {
	rg := (*TypedRef[VisualShaderNodeRandomRange])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeRandomRangeImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeRandomRange])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeRandomRangeImpl) TypedRef(from *RefVisualShaderNodeRandomRangeImpl) {
	rg := (*TypedRef[VisualShaderNodeRandomRange])(r)
	t := (*TypedRef[VisualShaderNodeRandomRange])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeRandomRange])(t))
}

func (r *RefVisualShaderNodeRandomRangeImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeRandomRange])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeRandomRangeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeRandomRange(reference VisualShaderNodeRandomRange) RefVisualShaderNodeRandomRange {
	return (RefVisualShaderNodeRandomRange)(NewTypedRef[VisualShaderNodeRandomRange](reference))
}

func newRefVisualShaderNodeRandomRangeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeRandomRange](reference.(VisualShaderNodeRandomRange)))
}

func newRefVisualShaderNodeRandomRangeGDExtensionIternalConstructor(reference VisualShaderNodeRandomRange) RefVisualShaderNodeRandomRange {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeRandomRange](reference)
}

var _ RefVisualShaderNodeRemap = &RefVisualShaderNodeRemapImpl{}
var _ Ref = &RefVisualShaderNodeRemapImpl{}

type RefVisualShaderNodeRemap interface {
	Ref
	TypedPtr() VisualShaderNodeRemap
}

type RefVisualShaderNodeRemapImpl TypedRef[VisualShaderNodeRemap]

func (r *RefVisualShaderNodeRemapImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeRemap])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeRemapImpl) TypedPtr() VisualShaderNodeRemap {
	rg := (*TypedRef[VisualShaderNodeRemap])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeRemapImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeRemap])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeRemapImpl) TypedRef(from *RefVisualShaderNodeRemapImpl) {
	rg := (*TypedRef[VisualShaderNodeRemap])(r)
	t := (*TypedRef[VisualShaderNodeRemap])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeRemap])(t))
}

func (r *RefVisualShaderNodeRemapImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeRemap])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeRemapImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeRemap(reference VisualShaderNodeRemap) RefVisualShaderNodeRemap {
	return (RefVisualShaderNodeRemap)(NewTypedRef[VisualShaderNodeRemap](reference))
}

func newRefVisualShaderNodeRemapAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeRemap](reference.(VisualShaderNodeRemap)))
}

func newRefVisualShaderNodeRemapGDExtensionIternalConstructor(reference VisualShaderNodeRemap) RefVisualShaderNodeRemap {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeRemap](reference)
}

var _ RefVisualShaderNodeResizableBase = &RefVisualShaderNodeResizableBaseImpl{}
var _ Ref = &RefVisualShaderNodeResizableBaseImpl{}

type RefVisualShaderNodeResizableBase interface {
	Ref
	TypedPtr() VisualShaderNodeResizableBase
}

type RefVisualShaderNodeResizableBaseImpl TypedRef[VisualShaderNodeResizableBase]

func (r *RefVisualShaderNodeResizableBaseImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeResizableBase])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeResizableBaseImpl) TypedPtr() VisualShaderNodeResizableBase {
	rg := (*TypedRef[VisualShaderNodeResizableBase])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeResizableBaseImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeResizableBase])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeResizableBaseImpl) TypedRef(from *RefVisualShaderNodeResizableBaseImpl) {
	rg := (*TypedRef[VisualShaderNodeResizableBase])(r)
	t := (*TypedRef[VisualShaderNodeResizableBase])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeResizableBase])(t))
}

func (r *RefVisualShaderNodeResizableBaseImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeResizableBase])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeResizableBaseImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeResizableBase(reference VisualShaderNodeResizableBase) RefVisualShaderNodeResizableBase {
	return (RefVisualShaderNodeResizableBase)(NewTypedRef[VisualShaderNodeResizableBase](reference))
}

func newRefVisualShaderNodeResizableBaseAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeResizableBase](reference.(VisualShaderNodeResizableBase)))
}

func newRefVisualShaderNodeResizableBaseGDExtensionIternalConstructor(reference VisualShaderNodeResizableBase) RefVisualShaderNodeResizableBase {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeResizableBase](reference)
}

var _ RefVisualShaderNodeRotationByAxis = &RefVisualShaderNodeRotationByAxisImpl{}
var _ Ref = &RefVisualShaderNodeRotationByAxisImpl{}

type RefVisualShaderNodeRotationByAxis interface {
	Ref
	TypedPtr() VisualShaderNodeRotationByAxis
}

type RefVisualShaderNodeRotationByAxisImpl TypedRef[VisualShaderNodeRotationByAxis]

func (r *RefVisualShaderNodeRotationByAxisImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeRotationByAxis])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeRotationByAxisImpl) TypedPtr() VisualShaderNodeRotationByAxis {
	rg := (*TypedRef[VisualShaderNodeRotationByAxis])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeRotationByAxisImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeRotationByAxis])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeRotationByAxisImpl) TypedRef(from *RefVisualShaderNodeRotationByAxisImpl) {
	rg := (*TypedRef[VisualShaderNodeRotationByAxis])(r)
	t := (*TypedRef[VisualShaderNodeRotationByAxis])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeRotationByAxis])(t))
}

func (r *RefVisualShaderNodeRotationByAxisImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeRotationByAxis])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeRotationByAxisImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeRotationByAxis(reference VisualShaderNodeRotationByAxis) RefVisualShaderNodeRotationByAxis {
	return (RefVisualShaderNodeRotationByAxis)(NewTypedRef[VisualShaderNodeRotationByAxis](reference))
}

func newRefVisualShaderNodeRotationByAxisAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeRotationByAxis](reference.(VisualShaderNodeRotationByAxis)))
}

func newRefVisualShaderNodeRotationByAxisGDExtensionIternalConstructor(reference VisualShaderNodeRotationByAxis) RefVisualShaderNodeRotationByAxis {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeRotationByAxis](reference)
}

var _ RefVisualShaderNodeSDFRaymarch = &RefVisualShaderNodeSDFRaymarchImpl{}
var _ Ref = &RefVisualShaderNodeSDFRaymarchImpl{}

type RefVisualShaderNodeSDFRaymarch interface {
	Ref
	TypedPtr() VisualShaderNodeSDFRaymarch
}

type RefVisualShaderNodeSDFRaymarchImpl TypedRef[VisualShaderNodeSDFRaymarch]

func (r *RefVisualShaderNodeSDFRaymarchImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeSDFRaymarch])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeSDFRaymarchImpl) TypedPtr() VisualShaderNodeSDFRaymarch {
	rg := (*TypedRef[VisualShaderNodeSDFRaymarch])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeSDFRaymarchImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeSDFRaymarch])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeSDFRaymarchImpl) TypedRef(from *RefVisualShaderNodeSDFRaymarchImpl) {
	rg := (*TypedRef[VisualShaderNodeSDFRaymarch])(r)
	t := (*TypedRef[VisualShaderNodeSDFRaymarch])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeSDFRaymarch])(t))
}

func (r *RefVisualShaderNodeSDFRaymarchImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeSDFRaymarch])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeSDFRaymarchImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeSDFRaymarch(reference VisualShaderNodeSDFRaymarch) RefVisualShaderNodeSDFRaymarch {
	return (RefVisualShaderNodeSDFRaymarch)(NewTypedRef[VisualShaderNodeSDFRaymarch](reference))
}

func newRefVisualShaderNodeSDFRaymarchAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeSDFRaymarch](reference.(VisualShaderNodeSDFRaymarch)))
}

func newRefVisualShaderNodeSDFRaymarchGDExtensionIternalConstructor(reference VisualShaderNodeSDFRaymarch) RefVisualShaderNodeSDFRaymarch {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeSDFRaymarch](reference)
}

var _ RefVisualShaderNodeSDFToScreenUV = &RefVisualShaderNodeSDFToScreenUVImpl{}
var _ Ref = &RefVisualShaderNodeSDFToScreenUVImpl{}

type RefVisualShaderNodeSDFToScreenUV interface {
	Ref
	TypedPtr() VisualShaderNodeSDFToScreenUV
}

type RefVisualShaderNodeSDFToScreenUVImpl TypedRef[VisualShaderNodeSDFToScreenUV]

func (r *RefVisualShaderNodeSDFToScreenUVImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeSDFToScreenUV])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeSDFToScreenUVImpl) TypedPtr() VisualShaderNodeSDFToScreenUV {
	rg := (*TypedRef[VisualShaderNodeSDFToScreenUV])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeSDFToScreenUVImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeSDFToScreenUV])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeSDFToScreenUVImpl) TypedRef(from *RefVisualShaderNodeSDFToScreenUVImpl) {
	rg := (*TypedRef[VisualShaderNodeSDFToScreenUV])(r)
	t := (*TypedRef[VisualShaderNodeSDFToScreenUV])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeSDFToScreenUV])(t))
}

func (r *RefVisualShaderNodeSDFToScreenUVImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeSDFToScreenUV])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeSDFToScreenUVImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeSDFToScreenUV(reference VisualShaderNodeSDFToScreenUV) RefVisualShaderNodeSDFToScreenUV {
	return (RefVisualShaderNodeSDFToScreenUV)(NewTypedRef[VisualShaderNodeSDFToScreenUV](reference))
}

func newRefVisualShaderNodeSDFToScreenUVAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeSDFToScreenUV](reference.(VisualShaderNodeSDFToScreenUV)))
}

func newRefVisualShaderNodeSDFToScreenUVGDExtensionIternalConstructor(reference VisualShaderNodeSDFToScreenUV) RefVisualShaderNodeSDFToScreenUV {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeSDFToScreenUV](reference)
}

var _ RefVisualShaderNodeSample3D = &RefVisualShaderNodeSample3DImpl{}
var _ Ref = &RefVisualShaderNodeSample3DImpl{}

type RefVisualShaderNodeSample3D interface {
	Ref
	TypedPtr() VisualShaderNodeSample3D
}

type RefVisualShaderNodeSample3DImpl TypedRef[VisualShaderNodeSample3D]

func (r *RefVisualShaderNodeSample3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeSample3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeSample3DImpl) TypedPtr() VisualShaderNodeSample3D {
	rg := (*TypedRef[VisualShaderNodeSample3D])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeSample3DImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeSample3D])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeSample3DImpl) TypedRef(from *RefVisualShaderNodeSample3DImpl) {
	rg := (*TypedRef[VisualShaderNodeSample3D])(r)
	t := (*TypedRef[VisualShaderNodeSample3D])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeSample3D])(t))
}

func (r *RefVisualShaderNodeSample3DImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeSample3D])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeSample3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeSample3D(reference VisualShaderNodeSample3D) RefVisualShaderNodeSample3D {
	return (RefVisualShaderNodeSample3D)(NewTypedRef[VisualShaderNodeSample3D](reference))
}

func newRefVisualShaderNodeSample3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeSample3D](reference.(VisualShaderNodeSample3D)))
}

func newRefVisualShaderNodeSample3DGDExtensionIternalConstructor(reference VisualShaderNodeSample3D) RefVisualShaderNodeSample3D {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeSample3D](reference)
}

var _ RefVisualShaderNodeScreenNormalWorldSpace = &RefVisualShaderNodeScreenNormalWorldSpaceImpl{}
var _ Ref = &RefVisualShaderNodeScreenNormalWorldSpaceImpl{}

type RefVisualShaderNodeScreenNormalWorldSpace interface {
	Ref
	TypedPtr() VisualShaderNodeScreenNormalWorldSpace
}

type RefVisualShaderNodeScreenNormalWorldSpaceImpl TypedRef[VisualShaderNodeScreenNormalWorldSpace]

func (r *RefVisualShaderNodeScreenNormalWorldSpaceImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeScreenNormalWorldSpace])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeScreenNormalWorldSpaceImpl) TypedPtr() VisualShaderNodeScreenNormalWorldSpace {
	rg := (*TypedRef[VisualShaderNodeScreenNormalWorldSpace])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeScreenNormalWorldSpaceImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeScreenNormalWorldSpace])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeScreenNormalWorldSpaceImpl) TypedRef(from *RefVisualShaderNodeScreenNormalWorldSpaceImpl) {
	rg := (*TypedRef[VisualShaderNodeScreenNormalWorldSpace])(r)
	t := (*TypedRef[VisualShaderNodeScreenNormalWorldSpace])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeScreenNormalWorldSpace])(t))
}

func (r *RefVisualShaderNodeScreenNormalWorldSpaceImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeScreenNormalWorldSpace])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeScreenNormalWorldSpaceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeScreenNormalWorldSpace(reference VisualShaderNodeScreenNormalWorldSpace) RefVisualShaderNodeScreenNormalWorldSpace {
	return (RefVisualShaderNodeScreenNormalWorldSpace)(NewTypedRef[VisualShaderNodeScreenNormalWorldSpace](reference))
}

func newRefVisualShaderNodeScreenNormalWorldSpaceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeScreenNormalWorldSpace](reference.(VisualShaderNodeScreenNormalWorldSpace)))
}

func newRefVisualShaderNodeScreenNormalWorldSpaceGDExtensionIternalConstructor(reference VisualShaderNodeScreenNormalWorldSpace) RefVisualShaderNodeScreenNormalWorldSpace {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeScreenNormalWorldSpace](reference)
}

var _ RefVisualShaderNodeScreenUVToSDF = &RefVisualShaderNodeScreenUVToSDFImpl{}
var _ Ref = &RefVisualShaderNodeScreenUVToSDFImpl{}

type RefVisualShaderNodeScreenUVToSDF interface {
	Ref
	TypedPtr() VisualShaderNodeScreenUVToSDF
}

type RefVisualShaderNodeScreenUVToSDFImpl TypedRef[VisualShaderNodeScreenUVToSDF]

func (r *RefVisualShaderNodeScreenUVToSDFImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeScreenUVToSDF])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeScreenUVToSDFImpl) TypedPtr() VisualShaderNodeScreenUVToSDF {
	rg := (*TypedRef[VisualShaderNodeScreenUVToSDF])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeScreenUVToSDFImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeScreenUVToSDF])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeScreenUVToSDFImpl) TypedRef(from *RefVisualShaderNodeScreenUVToSDFImpl) {
	rg := (*TypedRef[VisualShaderNodeScreenUVToSDF])(r)
	t := (*TypedRef[VisualShaderNodeScreenUVToSDF])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeScreenUVToSDF])(t))
}

func (r *RefVisualShaderNodeScreenUVToSDFImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeScreenUVToSDF])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeScreenUVToSDFImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeScreenUVToSDF(reference VisualShaderNodeScreenUVToSDF) RefVisualShaderNodeScreenUVToSDF {
	return (RefVisualShaderNodeScreenUVToSDF)(NewTypedRef[VisualShaderNodeScreenUVToSDF](reference))
}

func newRefVisualShaderNodeScreenUVToSDFAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeScreenUVToSDF](reference.(VisualShaderNodeScreenUVToSDF)))
}

func newRefVisualShaderNodeScreenUVToSDFGDExtensionIternalConstructor(reference VisualShaderNodeScreenUVToSDF) RefVisualShaderNodeScreenUVToSDF {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeScreenUVToSDF](reference)
}

var _ RefVisualShaderNodeSmoothStep = &RefVisualShaderNodeSmoothStepImpl{}
var _ Ref = &RefVisualShaderNodeSmoothStepImpl{}

type RefVisualShaderNodeSmoothStep interface {
	Ref
	TypedPtr() VisualShaderNodeSmoothStep
}

type RefVisualShaderNodeSmoothStepImpl TypedRef[VisualShaderNodeSmoothStep]

func (r *RefVisualShaderNodeSmoothStepImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeSmoothStep])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeSmoothStepImpl) TypedPtr() VisualShaderNodeSmoothStep {
	rg := (*TypedRef[VisualShaderNodeSmoothStep])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeSmoothStepImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeSmoothStep])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeSmoothStepImpl) TypedRef(from *RefVisualShaderNodeSmoothStepImpl) {
	rg := (*TypedRef[VisualShaderNodeSmoothStep])(r)
	t := (*TypedRef[VisualShaderNodeSmoothStep])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeSmoothStep])(t))
}

func (r *RefVisualShaderNodeSmoothStepImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeSmoothStep])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeSmoothStepImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeSmoothStep(reference VisualShaderNodeSmoothStep) RefVisualShaderNodeSmoothStep {
	return (RefVisualShaderNodeSmoothStep)(NewTypedRef[VisualShaderNodeSmoothStep](reference))
}

func newRefVisualShaderNodeSmoothStepAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeSmoothStep](reference.(VisualShaderNodeSmoothStep)))
}

func newRefVisualShaderNodeSmoothStepGDExtensionIternalConstructor(reference VisualShaderNodeSmoothStep) RefVisualShaderNodeSmoothStep {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeSmoothStep](reference)
}

var _ RefVisualShaderNodeStep = &RefVisualShaderNodeStepImpl{}
var _ Ref = &RefVisualShaderNodeStepImpl{}

type RefVisualShaderNodeStep interface {
	Ref
	TypedPtr() VisualShaderNodeStep
}

type RefVisualShaderNodeStepImpl TypedRef[VisualShaderNodeStep]

func (r *RefVisualShaderNodeStepImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeStep])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeStepImpl) TypedPtr() VisualShaderNodeStep {
	rg := (*TypedRef[VisualShaderNodeStep])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeStepImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeStep])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeStepImpl) TypedRef(from *RefVisualShaderNodeStepImpl) {
	rg := (*TypedRef[VisualShaderNodeStep])(r)
	t := (*TypedRef[VisualShaderNodeStep])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeStep])(t))
}

func (r *RefVisualShaderNodeStepImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeStep])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeStepImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeStep(reference VisualShaderNodeStep) RefVisualShaderNodeStep {
	return (RefVisualShaderNodeStep)(NewTypedRef[VisualShaderNodeStep](reference))
}

func newRefVisualShaderNodeStepAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeStep](reference.(VisualShaderNodeStep)))
}

func newRefVisualShaderNodeStepGDExtensionIternalConstructor(reference VisualShaderNodeStep) RefVisualShaderNodeStep {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeStep](reference)
}

var _ RefVisualShaderNodeSwitch = &RefVisualShaderNodeSwitchImpl{}
var _ Ref = &RefVisualShaderNodeSwitchImpl{}

type RefVisualShaderNodeSwitch interface {
	Ref
	TypedPtr() VisualShaderNodeSwitch
}

type RefVisualShaderNodeSwitchImpl TypedRef[VisualShaderNodeSwitch]

func (r *RefVisualShaderNodeSwitchImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeSwitch])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeSwitchImpl) TypedPtr() VisualShaderNodeSwitch {
	rg := (*TypedRef[VisualShaderNodeSwitch])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeSwitchImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeSwitch])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeSwitchImpl) TypedRef(from *RefVisualShaderNodeSwitchImpl) {
	rg := (*TypedRef[VisualShaderNodeSwitch])(r)
	t := (*TypedRef[VisualShaderNodeSwitch])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeSwitch])(t))
}

func (r *RefVisualShaderNodeSwitchImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeSwitch])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeSwitchImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeSwitch(reference VisualShaderNodeSwitch) RefVisualShaderNodeSwitch {
	return (RefVisualShaderNodeSwitch)(NewTypedRef[VisualShaderNodeSwitch](reference))
}

func newRefVisualShaderNodeSwitchAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeSwitch](reference.(VisualShaderNodeSwitch)))
}

func newRefVisualShaderNodeSwitchGDExtensionIternalConstructor(reference VisualShaderNodeSwitch) RefVisualShaderNodeSwitch {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeSwitch](reference)
}

var _ RefVisualShaderNodeTexture = &RefVisualShaderNodeTextureImpl{}
var _ Ref = &RefVisualShaderNodeTextureImpl{}

type RefVisualShaderNodeTexture interface {
	Ref
	TypedPtr() VisualShaderNodeTexture
}

type RefVisualShaderNodeTextureImpl TypedRef[VisualShaderNodeTexture]

func (r *RefVisualShaderNodeTextureImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTexture])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTextureImpl) TypedPtr() VisualShaderNodeTexture {
	rg := (*TypedRef[VisualShaderNodeTexture])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTextureImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTexture])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTextureImpl) TypedRef(from *RefVisualShaderNodeTextureImpl) {
	rg := (*TypedRef[VisualShaderNodeTexture])(r)
	t := (*TypedRef[VisualShaderNodeTexture])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTexture])(t))
}

func (r *RefVisualShaderNodeTextureImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTexture])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTextureImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTexture(reference VisualShaderNodeTexture) RefVisualShaderNodeTexture {
	return (RefVisualShaderNodeTexture)(NewTypedRef[VisualShaderNodeTexture](reference))
}

func newRefVisualShaderNodeTextureAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture](reference.(VisualShaderNodeTexture)))
}

func newRefVisualShaderNodeTextureGDExtensionIternalConstructor(reference VisualShaderNodeTexture) RefVisualShaderNodeTexture {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture](reference)
}

var _ RefVisualShaderNodeTexture2DArray = &RefVisualShaderNodeTexture2DArrayImpl{}
var _ Ref = &RefVisualShaderNodeTexture2DArrayImpl{}

type RefVisualShaderNodeTexture2DArray interface {
	Ref
	TypedPtr() VisualShaderNodeTexture2DArray
}

type RefVisualShaderNodeTexture2DArrayImpl TypedRef[VisualShaderNodeTexture2DArray]

func (r *RefVisualShaderNodeTexture2DArrayImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTexture2DArray])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTexture2DArrayImpl) TypedPtr() VisualShaderNodeTexture2DArray {
	rg := (*TypedRef[VisualShaderNodeTexture2DArray])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTexture2DArrayImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTexture2DArray])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTexture2DArrayImpl) TypedRef(from *RefVisualShaderNodeTexture2DArrayImpl) {
	rg := (*TypedRef[VisualShaderNodeTexture2DArray])(r)
	t := (*TypedRef[VisualShaderNodeTexture2DArray])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTexture2DArray])(t))
}

func (r *RefVisualShaderNodeTexture2DArrayImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTexture2DArray])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTexture2DArrayImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTexture2DArray(reference VisualShaderNodeTexture2DArray) RefVisualShaderNodeTexture2DArray {
	return (RefVisualShaderNodeTexture2DArray)(NewTypedRef[VisualShaderNodeTexture2DArray](reference))
}

func newRefVisualShaderNodeTexture2DArrayAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture2DArray](reference.(VisualShaderNodeTexture2DArray)))
}

func newRefVisualShaderNodeTexture2DArrayGDExtensionIternalConstructor(reference VisualShaderNodeTexture2DArray) RefVisualShaderNodeTexture2DArray {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture2DArray](reference)
}

var _ RefVisualShaderNodeTexture2DArrayParameter = &RefVisualShaderNodeTexture2DArrayParameterImpl{}
var _ Ref = &RefVisualShaderNodeTexture2DArrayParameterImpl{}

type RefVisualShaderNodeTexture2DArrayParameter interface {
	Ref
	TypedPtr() VisualShaderNodeTexture2DArrayParameter
}

type RefVisualShaderNodeTexture2DArrayParameterImpl TypedRef[VisualShaderNodeTexture2DArrayParameter]

func (r *RefVisualShaderNodeTexture2DArrayParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTexture2DArrayParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTexture2DArrayParameterImpl) TypedPtr() VisualShaderNodeTexture2DArrayParameter {
	rg := (*TypedRef[VisualShaderNodeTexture2DArrayParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTexture2DArrayParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTexture2DArrayParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTexture2DArrayParameterImpl) TypedRef(from *RefVisualShaderNodeTexture2DArrayParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeTexture2DArrayParameter])(r)
	t := (*TypedRef[VisualShaderNodeTexture2DArrayParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTexture2DArrayParameter])(t))
}

func (r *RefVisualShaderNodeTexture2DArrayParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTexture2DArrayParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTexture2DArrayParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTexture2DArrayParameter(reference VisualShaderNodeTexture2DArrayParameter) RefVisualShaderNodeTexture2DArrayParameter {
	return (RefVisualShaderNodeTexture2DArrayParameter)(NewTypedRef[VisualShaderNodeTexture2DArrayParameter](reference))
}

func newRefVisualShaderNodeTexture2DArrayParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture2DArrayParameter](reference.(VisualShaderNodeTexture2DArrayParameter)))
}

func newRefVisualShaderNodeTexture2DArrayParameterGDExtensionIternalConstructor(reference VisualShaderNodeTexture2DArrayParameter) RefVisualShaderNodeTexture2DArrayParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture2DArrayParameter](reference)
}

var _ RefVisualShaderNodeTexture2DParameter = &RefVisualShaderNodeTexture2DParameterImpl{}
var _ Ref = &RefVisualShaderNodeTexture2DParameterImpl{}

type RefVisualShaderNodeTexture2DParameter interface {
	Ref
	TypedPtr() VisualShaderNodeTexture2DParameter
}

type RefVisualShaderNodeTexture2DParameterImpl TypedRef[VisualShaderNodeTexture2DParameter]

func (r *RefVisualShaderNodeTexture2DParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTexture2DParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTexture2DParameterImpl) TypedPtr() VisualShaderNodeTexture2DParameter {
	rg := (*TypedRef[VisualShaderNodeTexture2DParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTexture2DParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTexture2DParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTexture2DParameterImpl) TypedRef(from *RefVisualShaderNodeTexture2DParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeTexture2DParameter])(r)
	t := (*TypedRef[VisualShaderNodeTexture2DParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTexture2DParameter])(t))
}

func (r *RefVisualShaderNodeTexture2DParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTexture2DParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTexture2DParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTexture2DParameter(reference VisualShaderNodeTexture2DParameter) RefVisualShaderNodeTexture2DParameter {
	return (RefVisualShaderNodeTexture2DParameter)(NewTypedRef[VisualShaderNodeTexture2DParameter](reference))
}

func newRefVisualShaderNodeTexture2DParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture2DParameter](reference.(VisualShaderNodeTexture2DParameter)))
}

func newRefVisualShaderNodeTexture2DParameterGDExtensionIternalConstructor(reference VisualShaderNodeTexture2DParameter) RefVisualShaderNodeTexture2DParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture2DParameter](reference)
}

var _ RefVisualShaderNodeTexture3D = &RefVisualShaderNodeTexture3DImpl{}
var _ Ref = &RefVisualShaderNodeTexture3DImpl{}

type RefVisualShaderNodeTexture3D interface {
	Ref
	TypedPtr() VisualShaderNodeTexture3D
}

type RefVisualShaderNodeTexture3DImpl TypedRef[VisualShaderNodeTexture3D]

func (r *RefVisualShaderNodeTexture3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTexture3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTexture3DImpl) TypedPtr() VisualShaderNodeTexture3D {
	rg := (*TypedRef[VisualShaderNodeTexture3D])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTexture3DImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTexture3D])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTexture3DImpl) TypedRef(from *RefVisualShaderNodeTexture3DImpl) {
	rg := (*TypedRef[VisualShaderNodeTexture3D])(r)
	t := (*TypedRef[VisualShaderNodeTexture3D])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTexture3D])(t))
}

func (r *RefVisualShaderNodeTexture3DImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTexture3D])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTexture3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTexture3D(reference VisualShaderNodeTexture3D) RefVisualShaderNodeTexture3D {
	return (RefVisualShaderNodeTexture3D)(NewTypedRef[VisualShaderNodeTexture3D](reference))
}

func newRefVisualShaderNodeTexture3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture3D](reference.(VisualShaderNodeTexture3D)))
}

func newRefVisualShaderNodeTexture3DGDExtensionIternalConstructor(reference VisualShaderNodeTexture3D) RefVisualShaderNodeTexture3D {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture3D](reference)
}

var _ RefVisualShaderNodeTexture3DParameter = &RefVisualShaderNodeTexture3DParameterImpl{}
var _ Ref = &RefVisualShaderNodeTexture3DParameterImpl{}

type RefVisualShaderNodeTexture3DParameter interface {
	Ref
	TypedPtr() VisualShaderNodeTexture3DParameter
}

type RefVisualShaderNodeTexture3DParameterImpl TypedRef[VisualShaderNodeTexture3DParameter]

func (r *RefVisualShaderNodeTexture3DParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTexture3DParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTexture3DParameterImpl) TypedPtr() VisualShaderNodeTexture3DParameter {
	rg := (*TypedRef[VisualShaderNodeTexture3DParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTexture3DParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTexture3DParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTexture3DParameterImpl) TypedRef(from *RefVisualShaderNodeTexture3DParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeTexture3DParameter])(r)
	t := (*TypedRef[VisualShaderNodeTexture3DParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTexture3DParameter])(t))
}

func (r *RefVisualShaderNodeTexture3DParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTexture3DParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTexture3DParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTexture3DParameter(reference VisualShaderNodeTexture3DParameter) RefVisualShaderNodeTexture3DParameter {
	return (RefVisualShaderNodeTexture3DParameter)(NewTypedRef[VisualShaderNodeTexture3DParameter](reference))
}

func newRefVisualShaderNodeTexture3DParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture3DParameter](reference.(VisualShaderNodeTexture3DParameter)))
}

func newRefVisualShaderNodeTexture3DParameterGDExtensionIternalConstructor(reference VisualShaderNodeTexture3DParameter) RefVisualShaderNodeTexture3DParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTexture3DParameter](reference)
}

var _ RefVisualShaderNodeTextureParameter = &RefVisualShaderNodeTextureParameterImpl{}
var _ Ref = &RefVisualShaderNodeTextureParameterImpl{}

type RefVisualShaderNodeTextureParameter interface {
	Ref
	TypedPtr() VisualShaderNodeTextureParameter
}

type RefVisualShaderNodeTextureParameterImpl TypedRef[VisualShaderNodeTextureParameter]

func (r *RefVisualShaderNodeTextureParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTextureParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTextureParameterImpl) TypedPtr() VisualShaderNodeTextureParameter {
	rg := (*TypedRef[VisualShaderNodeTextureParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTextureParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTextureParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTextureParameterImpl) TypedRef(from *RefVisualShaderNodeTextureParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeTextureParameter])(r)
	t := (*TypedRef[VisualShaderNodeTextureParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTextureParameter])(t))
}

func (r *RefVisualShaderNodeTextureParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTextureParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTextureParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTextureParameter(reference VisualShaderNodeTextureParameter) RefVisualShaderNodeTextureParameter {
	return (RefVisualShaderNodeTextureParameter)(NewTypedRef[VisualShaderNodeTextureParameter](reference))
}

func newRefVisualShaderNodeTextureParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTextureParameter](reference.(VisualShaderNodeTextureParameter)))
}

func newRefVisualShaderNodeTextureParameterGDExtensionIternalConstructor(reference VisualShaderNodeTextureParameter) RefVisualShaderNodeTextureParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTextureParameter](reference)
}

var _ RefVisualShaderNodeTextureParameterTriplanar = &RefVisualShaderNodeTextureParameterTriplanarImpl{}
var _ Ref = &RefVisualShaderNodeTextureParameterTriplanarImpl{}

type RefVisualShaderNodeTextureParameterTriplanar interface {
	Ref
	TypedPtr() VisualShaderNodeTextureParameterTriplanar
}

type RefVisualShaderNodeTextureParameterTriplanarImpl TypedRef[VisualShaderNodeTextureParameterTriplanar]

func (r *RefVisualShaderNodeTextureParameterTriplanarImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTextureParameterTriplanar])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTextureParameterTriplanarImpl) TypedPtr() VisualShaderNodeTextureParameterTriplanar {
	rg := (*TypedRef[VisualShaderNodeTextureParameterTriplanar])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTextureParameterTriplanarImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTextureParameterTriplanar])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTextureParameterTriplanarImpl) TypedRef(from *RefVisualShaderNodeTextureParameterTriplanarImpl) {
	rg := (*TypedRef[VisualShaderNodeTextureParameterTriplanar])(r)
	t := (*TypedRef[VisualShaderNodeTextureParameterTriplanar])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTextureParameterTriplanar])(t))
}

func (r *RefVisualShaderNodeTextureParameterTriplanarImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTextureParameterTriplanar])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTextureParameterTriplanarImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTextureParameterTriplanar(reference VisualShaderNodeTextureParameterTriplanar) RefVisualShaderNodeTextureParameterTriplanar {
	return (RefVisualShaderNodeTextureParameterTriplanar)(NewTypedRef[VisualShaderNodeTextureParameterTriplanar](reference))
}

func newRefVisualShaderNodeTextureParameterTriplanarAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTextureParameterTriplanar](reference.(VisualShaderNodeTextureParameterTriplanar)))
}

func newRefVisualShaderNodeTextureParameterTriplanarGDExtensionIternalConstructor(reference VisualShaderNodeTextureParameterTriplanar) RefVisualShaderNodeTextureParameterTriplanar {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTextureParameterTriplanar](reference)
}

var _ RefVisualShaderNodeTextureSDF = &RefVisualShaderNodeTextureSDFImpl{}
var _ Ref = &RefVisualShaderNodeTextureSDFImpl{}

type RefVisualShaderNodeTextureSDF interface {
	Ref
	TypedPtr() VisualShaderNodeTextureSDF
}

type RefVisualShaderNodeTextureSDFImpl TypedRef[VisualShaderNodeTextureSDF]

func (r *RefVisualShaderNodeTextureSDFImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTextureSDF])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTextureSDFImpl) TypedPtr() VisualShaderNodeTextureSDF {
	rg := (*TypedRef[VisualShaderNodeTextureSDF])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTextureSDFImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTextureSDF])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTextureSDFImpl) TypedRef(from *RefVisualShaderNodeTextureSDFImpl) {
	rg := (*TypedRef[VisualShaderNodeTextureSDF])(r)
	t := (*TypedRef[VisualShaderNodeTextureSDF])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTextureSDF])(t))
}

func (r *RefVisualShaderNodeTextureSDFImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTextureSDF])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTextureSDFImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTextureSDF(reference VisualShaderNodeTextureSDF) RefVisualShaderNodeTextureSDF {
	return (RefVisualShaderNodeTextureSDF)(NewTypedRef[VisualShaderNodeTextureSDF](reference))
}

func newRefVisualShaderNodeTextureSDFAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTextureSDF](reference.(VisualShaderNodeTextureSDF)))
}

func newRefVisualShaderNodeTextureSDFGDExtensionIternalConstructor(reference VisualShaderNodeTextureSDF) RefVisualShaderNodeTextureSDF {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTextureSDF](reference)
}

var _ RefVisualShaderNodeTextureSDFNormal = &RefVisualShaderNodeTextureSDFNormalImpl{}
var _ Ref = &RefVisualShaderNodeTextureSDFNormalImpl{}

type RefVisualShaderNodeTextureSDFNormal interface {
	Ref
	TypedPtr() VisualShaderNodeTextureSDFNormal
}

type RefVisualShaderNodeTextureSDFNormalImpl TypedRef[VisualShaderNodeTextureSDFNormal]

func (r *RefVisualShaderNodeTextureSDFNormalImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTextureSDFNormal])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTextureSDFNormalImpl) TypedPtr() VisualShaderNodeTextureSDFNormal {
	rg := (*TypedRef[VisualShaderNodeTextureSDFNormal])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTextureSDFNormalImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTextureSDFNormal])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTextureSDFNormalImpl) TypedRef(from *RefVisualShaderNodeTextureSDFNormalImpl) {
	rg := (*TypedRef[VisualShaderNodeTextureSDFNormal])(r)
	t := (*TypedRef[VisualShaderNodeTextureSDFNormal])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTextureSDFNormal])(t))
}

func (r *RefVisualShaderNodeTextureSDFNormalImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTextureSDFNormal])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTextureSDFNormalImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTextureSDFNormal(reference VisualShaderNodeTextureSDFNormal) RefVisualShaderNodeTextureSDFNormal {
	return (RefVisualShaderNodeTextureSDFNormal)(NewTypedRef[VisualShaderNodeTextureSDFNormal](reference))
}

func newRefVisualShaderNodeTextureSDFNormalAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTextureSDFNormal](reference.(VisualShaderNodeTextureSDFNormal)))
}

func newRefVisualShaderNodeTextureSDFNormalGDExtensionIternalConstructor(reference VisualShaderNodeTextureSDFNormal) RefVisualShaderNodeTextureSDFNormal {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTextureSDFNormal](reference)
}

var _ RefVisualShaderNodeTransformCompose = &RefVisualShaderNodeTransformComposeImpl{}
var _ Ref = &RefVisualShaderNodeTransformComposeImpl{}

type RefVisualShaderNodeTransformCompose interface {
	Ref
	TypedPtr() VisualShaderNodeTransformCompose
}

type RefVisualShaderNodeTransformComposeImpl TypedRef[VisualShaderNodeTransformCompose]

func (r *RefVisualShaderNodeTransformComposeImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTransformCompose])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTransformComposeImpl) TypedPtr() VisualShaderNodeTransformCompose {
	rg := (*TypedRef[VisualShaderNodeTransformCompose])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTransformComposeImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTransformCompose])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTransformComposeImpl) TypedRef(from *RefVisualShaderNodeTransformComposeImpl) {
	rg := (*TypedRef[VisualShaderNodeTransformCompose])(r)
	t := (*TypedRef[VisualShaderNodeTransformCompose])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTransformCompose])(t))
}

func (r *RefVisualShaderNodeTransformComposeImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTransformCompose])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTransformComposeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTransformCompose(reference VisualShaderNodeTransformCompose) RefVisualShaderNodeTransformCompose {
	return (RefVisualShaderNodeTransformCompose)(NewTypedRef[VisualShaderNodeTransformCompose](reference))
}

func newRefVisualShaderNodeTransformComposeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformCompose](reference.(VisualShaderNodeTransformCompose)))
}

func newRefVisualShaderNodeTransformComposeGDExtensionIternalConstructor(reference VisualShaderNodeTransformCompose) RefVisualShaderNodeTransformCompose {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformCompose](reference)
}

var _ RefVisualShaderNodeTransformConstant = &RefVisualShaderNodeTransformConstantImpl{}
var _ Ref = &RefVisualShaderNodeTransformConstantImpl{}

type RefVisualShaderNodeTransformConstant interface {
	Ref
	TypedPtr() VisualShaderNodeTransformConstant
}

type RefVisualShaderNodeTransformConstantImpl TypedRef[VisualShaderNodeTransformConstant]

func (r *RefVisualShaderNodeTransformConstantImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTransformConstant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTransformConstantImpl) TypedPtr() VisualShaderNodeTransformConstant {
	rg := (*TypedRef[VisualShaderNodeTransformConstant])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTransformConstantImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTransformConstant])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTransformConstantImpl) TypedRef(from *RefVisualShaderNodeTransformConstantImpl) {
	rg := (*TypedRef[VisualShaderNodeTransformConstant])(r)
	t := (*TypedRef[VisualShaderNodeTransformConstant])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTransformConstant])(t))
}

func (r *RefVisualShaderNodeTransformConstantImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTransformConstant])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTransformConstantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTransformConstant(reference VisualShaderNodeTransformConstant) RefVisualShaderNodeTransformConstant {
	return (RefVisualShaderNodeTransformConstant)(NewTypedRef[VisualShaderNodeTransformConstant](reference))
}

func newRefVisualShaderNodeTransformConstantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformConstant](reference.(VisualShaderNodeTransformConstant)))
}

func newRefVisualShaderNodeTransformConstantGDExtensionIternalConstructor(reference VisualShaderNodeTransformConstant) RefVisualShaderNodeTransformConstant {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformConstant](reference)
}

var _ RefVisualShaderNodeTransformDecompose = &RefVisualShaderNodeTransformDecomposeImpl{}
var _ Ref = &RefVisualShaderNodeTransformDecomposeImpl{}

type RefVisualShaderNodeTransformDecompose interface {
	Ref
	TypedPtr() VisualShaderNodeTransformDecompose
}

type RefVisualShaderNodeTransformDecomposeImpl TypedRef[VisualShaderNodeTransformDecompose]

func (r *RefVisualShaderNodeTransformDecomposeImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTransformDecompose])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTransformDecomposeImpl) TypedPtr() VisualShaderNodeTransformDecompose {
	rg := (*TypedRef[VisualShaderNodeTransformDecompose])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTransformDecomposeImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTransformDecompose])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTransformDecomposeImpl) TypedRef(from *RefVisualShaderNodeTransformDecomposeImpl) {
	rg := (*TypedRef[VisualShaderNodeTransformDecompose])(r)
	t := (*TypedRef[VisualShaderNodeTransformDecompose])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTransformDecompose])(t))
}

func (r *RefVisualShaderNodeTransformDecomposeImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTransformDecompose])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTransformDecomposeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTransformDecompose(reference VisualShaderNodeTransformDecompose) RefVisualShaderNodeTransformDecompose {
	return (RefVisualShaderNodeTransformDecompose)(NewTypedRef[VisualShaderNodeTransformDecompose](reference))
}

func newRefVisualShaderNodeTransformDecomposeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformDecompose](reference.(VisualShaderNodeTransformDecompose)))
}

func newRefVisualShaderNodeTransformDecomposeGDExtensionIternalConstructor(reference VisualShaderNodeTransformDecompose) RefVisualShaderNodeTransformDecompose {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformDecompose](reference)
}

var _ RefVisualShaderNodeTransformFunc = &RefVisualShaderNodeTransformFuncImpl{}
var _ Ref = &RefVisualShaderNodeTransformFuncImpl{}

type RefVisualShaderNodeTransformFunc interface {
	Ref
	TypedPtr() VisualShaderNodeTransformFunc
}

type RefVisualShaderNodeTransformFuncImpl TypedRef[VisualShaderNodeTransformFunc]

func (r *RefVisualShaderNodeTransformFuncImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTransformFunc])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTransformFuncImpl) TypedPtr() VisualShaderNodeTransformFunc {
	rg := (*TypedRef[VisualShaderNodeTransformFunc])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTransformFuncImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTransformFunc])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTransformFuncImpl) TypedRef(from *RefVisualShaderNodeTransformFuncImpl) {
	rg := (*TypedRef[VisualShaderNodeTransformFunc])(r)
	t := (*TypedRef[VisualShaderNodeTransformFunc])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTransformFunc])(t))
}

func (r *RefVisualShaderNodeTransformFuncImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTransformFunc])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTransformFuncImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTransformFunc(reference VisualShaderNodeTransformFunc) RefVisualShaderNodeTransformFunc {
	return (RefVisualShaderNodeTransformFunc)(NewTypedRef[VisualShaderNodeTransformFunc](reference))
}

func newRefVisualShaderNodeTransformFuncAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformFunc](reference.(VisualShaderNodeTransformFunc)))
}

func newRefVisualShaderNodeTransformFuncGDExtensionIternalConstructor(reference VisualShaderNodeTransformFunc) RefVisualShaderNodeTransformFunc {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformFunc](reference)
}

var _ RefVisualShaderNodeTransformOp = &RefVisualShaderNodeTransformOpImpl{}
var _ Ref = &RefVisualShaderNodeTransformOpImpl{}

type RefVisualShaderNodeTransformOp interface {
	Ref
	TypedPtr() VisualShaderNodeTransformOp
}

type RefVisualShaderNodeTransformOpImpl TypedRef[VisualShaderNodeTransformOp]

func (r *RefVisualShaderNodeTransformOpImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTransformOp])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTransformOpImpl) TypedPtr() VisualShaderNodeTransformOp {
	rg := (*TypedRef[VisualShaderNodeTransformOp])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTransformOpImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTransformOp])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTransformOpImpl) TypedRef(from *RefVisualShaderNodeTransformOpImpl) {
	rg := (*TypedRef[VisualShaderNodeTransformOp])(r)
	t := (*TypedRef[VisualShaderNodeTransformOp])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTransformOp])(t))
}

func (r *RefVisualShaderNodeTransformOpImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTransformOp])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTransformOpImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTransformOp(reference VisualShaderNodeTransformOp) RefVisualShaderNodeTransformOp {
	return (RefVisualShaderNodeTransformOp)(NewTypedRef[VisualShaderNodeTransformOp](reference))
}

func newRefVisualShaderNodeTransformOpAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformOp](reference.(VisualShaderNodeTransformOp)))
}

func newRefVisualShaderNodeTransformOpGDExtensionIternalConstructor(reference VisualShaderNodeTransformOp) RefVisualShaderNodeTransformOp {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformOp](reference)
}

var _ RefVisualShaderNodeTransformParameter = &RefVisualShaderNodeTransformParameterImpl{}
var _ Ref = &RefVisualShaderNodeTransformParameterImpl{}

type RefVisualShaderNodeTransformParameter interface {
	Ref
	TypedPtr() VisualShaderNodeTransformParameter
}

type RefVisualShaderNodeTransformParameterImpl TypedRef[VisualShaderNodeTransformParameter]

func (r *RefVisualShaderNodeTransformParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTransformParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTransformParameterImpl) TypedPtr() VisualShaderNodeTransformParameter {
	rg := (*TypedRef[VisualShaderNodeTransformParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTransformParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTransformParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTransformParameterImpl) TypedRef(from *RefVisualShaderNodeTransformParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeTransformParameter])(r)
	t := (*TypedRef[VisualShaderNodeTransformParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTransformParameter])(t))
}

func (r *RefVisualShaderNodeTransformParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTransformParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTransformParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTransformParameter(reference VisualShaderNodeTransformParameter) RefVisualShaderNodeTransformParameter {
	return (RefVisualShaderNodeTransformParameter)(NewTypedRef[VisualShaderNodeTransformParameter](reference))
}

func newRefVisualShaderNodeTransformParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformParameter](reference.(VisualShaderNodeTransformParameter)))
}

func newRefVisualShaderNodeTransformParameterGDExtensionIternalConstructor(reference VisualShaderNodeTransformParameter) RefVisualShaderNodeTransformParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformParameter](reference)
}

var _ RefVisualShaderNodeTransformVecMult = &RefVisualShaderNodeTransformVecMultImpl{}
var _ Ref = &RefVisualShaderNodeTransformVecMultImpl{}

type RefVisualShaderNodeTransformVecMult interface {
	Ref
	TypedPtr() VisualShaderNodeTransformVecMult
}

type RefVisualShaderNodeTransformVecMultImpl TypedRef[VisualShaderNodeTransformVecMult]

func (r *RefVisualShaderNodeTransformVecMultImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeTransformVecMult])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeTransformVecMultImpl) TypedPtr() VisualShaderNodeTransformVecMult {
	rg := (*TypedRef[VisualShaderNodeTransformVecMult])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeTransformVecMultImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeTransformVecMult])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeTransformVecMultImpl) TypedRef(from *RefVisualShaderNodeTransformVecMultImpl) {
	rg := (*TypedRef[VisualShaderNodeTransformVecMult])(r)
	t := (*TypedRef[VisualShaderNodeTransformVecMult])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeTransformVecMult])(t))
}

func (r *RefVisualShaderNodeTransformVecMultImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeTransformVecMult])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeTransformVecMultImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeTransformVecMult(reference VisualShaderNodeTransformVecMult) RefVisualShaderNodeTransformVecMult {
	return (RefVisualShaderNodeTransformVecMult)(NewTypedRef[VisualShaderNodeTransformVecMult](reference))
}

func newRefVisualShaderNodeTransformVecMultAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformVecMult](reference.(VisualShaderNodeTransformVecMult)))
}

func newRefVisualShaderNodeTransformVecMultGDExtensionIternalConstructor(reference VisualShaderNodeTransformVecMult) RefVisualShaderNodeTransformVecMult {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeTransformVecMult](reference)
}

var _ RefVisualShaderNodeUIntConstant = &RefVisualShaderNodeUIntConstantImpl{}
var _ Ref = &RefVisualShaderNodeUIntConstantImpl{}

type RefVisualShaderNodeUIntConstant interface {
	Ref
	TypedPtr() VisualShaderNodeUIntConstant
}

type RefVisualShaderNodeUIntConstantImpl TypedRef[VisualShaderNodeUIntConstant]

func (r *RefVisualShaderNodeUIntConstantImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeUIntConstant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeUIntConstantImpl) TypedPtr() VisualShaderNodeUIntConstant {
	rg := (*TypedRef[VisualShaderNodeUIntConstant])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeUIntConstantImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeUIntConstant])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeUIntConstantImpl) TypedRef(from *RefVisualShaderNodeUIntConstantImpl) {
	rg := (*TypedRef[VisualShaderNodeUIntConstant])(r)
	t := (*TypedRef[VisualShaderNodeUIntConstant])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeUIntConstant])(t))
}

func (r *RefVisualShaderNodeUIntConstantImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeUIntConstant])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeUIntConstantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeUIntConstant(reference VisualShaderNodeUIntConstant) RefVisualShaderNodeUIntConstant {
	return (RefVisualShaderNodeUIntConstant)(NewTypedRef[VisualShaderNodeUIntConstant](reference))
}

func newRefVisualShaderNodeUIntConstantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUIntConstant](reference.(VisualShaderNodeUIntConstant)))
}

func newRefVisualShaderNodeUIntConstantGDExtensionIternalConstructor(reference VisualShaderNodeUIntConstant) RefVisualShaderNodeUIntConstant {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUIntConstant](reference)
}

var _ RefVisualShaderNodeUIntFunc = &RefVisualShaderNodeUIntFuncImpl{}
var _ Ref = &RefVisualShaderNodeUIntFuncImpl{}

type RefVisualShaderNodeUIntFunc interface {
	Ref
	TypedPtr() VisualShaderNodeUIntFunc
}

type RefVisualShaderNodeUIntFuncImpl TypedRef[VisualShaderNodeUIntFunc]

func (r *RefVisualShaderNodeUIntFuncImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeUIntFunc])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeUIntFuncImpl) TypedPtr() VisualShaderNodeUIntFunc {
	rg := (*TypedRef[VisualShaderNodeUIntFunc])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeUIntFuncImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeUIntFunc])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeUIntFuncImpl) TypedRef(from *RefVisualShaderNodeUIntFuncImpl) {
	rg := (*TypedRef[VisualShaderNodeUIntFunc])(r)
	t := (*TypedRef[VisualShaderNodeUIntFunc])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeUIntFunc])(t))
}

func (r *RefVisualShaderNodeUIntFuncImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeUIntFunc])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeUIntFuncImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeUIntFunc(reference VisualShaderNodeUIntFunc) RefVisualShaderNodeUIntFunc {
	return (RefVisualShaderNodeUIntFunc)(NewTypedRef[VisualShaderNodeUIntFunc](reference))
}

func newRefVisualShaderNodeUIntFuncAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUIntFunc](reference.(VisualShaderNodeUIntFunc)))
}

func newRefVisualShaderNodeUIntFuncGDExtensionIternalConstructor(reference VisualShaderNodeUIntFunc) RefVisualShaderNodeUIntFunc {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUIntFunc](reference)
}

var _ RefVisualShaderNodeUIntOp = &RefVisualShaderNodeUIntOpImpl{}
var _ Ref = &RefVisualShaderNodeUIntOpImpl{}

type RefVisualShaderNodeUIntOp interface {
	Ref
	TypedPtr() VisualShaderNodeUIntOp
}

type RefVisualShaderNodeUIntOpImpl TypedRef[VisualShaderNodeUIntOp]

func (r *RefVisualShaderNodeUIntOpImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeUIntOp])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeUIntOpImpl) TypedPtr() VisualShaderNodeUIntOp {
	rg := (*TypedRef[VisualShaderNodeUIntOp])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeUIntOpImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeUIntOp])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeUIntOpImpl) TypedRef(from *RefVisualShaderNodeUIntOpImpl) {
	rg := (*TypedRef[VisualShaderNodeUIntOp])(r)
	t := (*TypedRef[VisualShaderNodeUIntOp])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeUIntOp])(t))
}

func (r *RefVisualShaderNodeUIntOpImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeUIntOp])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeUIntOpImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeUIntOp(reference VisualShaderNodeUIntOp) RefVisualShaderNodeUIntOp {
	return (RefVisualShaderNodeUIntOp)(NewTypedRef[VisualShaderNodeUIntOp](reference))
}

func newRefVisualShaderNodeUIntOpAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUIntOp](reference.(VisualShaderNodeUIntOp)))
}

func newRefVisualShaderNodeUIntOpGDExtensionIternalConstructor(reference VisualShaderNodeUIntOp) RefVisualShaderNodeUIntOp {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUIntOp](reference)
}

var _ RefVisualShaderNodeUIntParameter = &RefVisualShaderNodeUIntParameterImpl{}
var _ Ref = &RefVisualShaderNodeUIntParameterImpl{}

type RefVisualShaderNodeUIntParameter interface {
	Ref
	TypedPtr() VisualShaderNodeUIntParameter
}

type RefVisualShaderNodeUIntParameterImpl TypedRef[VisualShaderNodeUIntParameter]

func (r *RefVisualShaderNodeUIntParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeUIntParameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeUIntParameterImpl) TypedPtr() VisualShaderNodeUIntParameter {
	rg := (*TypedRef[VisualShaderNodeUIntParameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeUIntParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeUIntParameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeUIntParameterImpl) TypedRef(from *RefVisualShaderNodeUIntParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeUIntParameter])(r)
	t := (*TypedRef[VisualShaderNodeUIntParameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeUIntParameter])(t))
}

func (r *RefVisualShaderNodeUIntParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeUIntParameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeUIntParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeUIntParameter(reference VisualShaderNodeUIntParameter) RefVisualShaderNodeUIntParameter {
	return (RefVisualShaderNodeUIntParameter)(NewTypedRef[VisualShaderNodeUIntParameter](reference))
}

func newRefVisualShaderNodeUIntParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUIntParameter](reference.(VisualShaderNodeUIntParameter)))
}

func newRefVisualShaderNodeUIntParameterGDExtensionIternalConstructor(reference VisualShaderNodeUIntParameter) RefVisualShaderNodeUIntParameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUIntParameter](reference)
}

var _ RefVisualShaderNodeUVFunc = &RefVisualShaderNodeUVFuncImpl{}
var _ Ref = &RefVisualShaderNodeUVFuncImpl{}

type RefVisualShaderNodeUVFunc interface {
	Ref
	TypedPtr() VisualShaderNodeUVFunc
}

type RefVisualShaderNodeUVFuncImpl TypedRef[VisualShaderNodeUVFunc]

func (r *RefVisualShaderNodeUVFuncImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeUVFunc])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeUVFuncImpl) TypedPtr() VisualShaderNodeUVFunc {
	rg := (*TypedRef[VisualShaderNodeUVFunc])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeUVFuncImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeUVFunc])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeUVFuncImpl) TypedRef(from *RefVisualShaderNodeUVFuncImpl) {
	rg := (*TypedRef[VisualShaderNodeUVFunc])(r)
	t := (*TypedRef[VisualShaderNodeUVFunc])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeUVFunc])(t))
}

func (r *RefVisualShaderNodeUVFuncImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeUVFunc])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeUVFuncImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeUVFunc(reference VisualShaderNodeUVFunc) RefVisualShaderNodeUVFunc {
	return (RefVisualShaderNodeUVFunc)(NewTypedRef[VisualShaderNodeUVFunc](reference))
}

func newRefVisualShaderNodeUVFuncAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUVFunc](reference.(VisualShaderNodeUVFunc)))
}

func newRefVisualShaderNodeUVFuncGDExtensionIternalConstructor(reference VisualShaderNodeUVFunc) RefVisualShaderNodeUVFunc {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUVFunc](reference)
}

var _ RefVisualShaderNodeUVPolarCoord = &RefVisualShaderNodeUVPolarCoordImpl{}
var _ Ref = &RefVisualShaderNodeUVPolarCoordImpl{}

type RefVisualShaderNodeUVPolarCoord interface {
	Ref
	TypedPtr() VisualShaderNodeUVPolarCoord
}

type RefVisualShaderNodeUVPolarCoordImpl TypedRef[VisualShaderNodeUVPolarCoord]

func (r *RefVisualShaderNodeUVPolarCoordImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeUVPolarCoord])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeUVPolarCoordImpl) TypedPtr() VisualShaderNodeUVPolarCoord {
	rg := (*TypedRef[VisualShaderNodeUVPolarCoord])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeUVPolarCoordImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeUVPolarCoord])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeUVPolarCoordImpl) TypedRef(from *RefVisualShaderNodeUVPolarCoordImpl) {
	rg := (*TypedRef[VisualShaderNodeUVPolarCoord])(r)
	t := (*TypedRef[VisualShaderNodeUVPolarCoord])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeUVPolarCoord])(t))
}

func (r *RefVisualShaderNodeUVPolarCoordImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeUVPolarCoord])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeUVPolarCoordImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeUVPolarCoord(reference VisualShaderNodeUVPolarCoord) RefVisualShaderNodeUVPolarCoord {
	return (RefVisualShaderNodeUVPolarCoord)(NewTypedRef[VisualShaderNodeUVPolarCoord](reference))
}

func newRefVisualShaderNodeUVPolarCoordAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUVPolarCoord](reference.(VisualShaderNodeUVPolarCoord)))
}

func newRefVisualShaderNodeUVPolarCoordGDExtensionIternalConstructor(reference VisualShaderNodeUVPolarCoord) RefVisualShaderNodeUVPolarCoord {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeUVPolarCoord](reference)
}

var _ RefVisualShaderNodeVarying = &RefVisualShaderNodeVaryingImpl{}
var _ Ref = &RefVisualShaderNodeVaryingImpl{}

type RefVisualShaderNodeVarying interface {
	Ref
	TypedPtr() VisualShaderNodeVarying
}

type RefVisualShaderNodeVaryingImpl TypedRef[VisualShaderNodeVarying]

func (r *RefVisualShaderNodeVaryingImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVarying])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVaryingImpl) TypedPtr() VisualShaderNodeVarying {
	rg := (*TypedRef[VisualShaderNodeVarying])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVaryingImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVarying])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVaryingImpl) TypedRef(from *RefVisualShaderNodeVaryingImpl) {
	rg := (*TypedRef[VisualShaderNodeVarying])(r)
	t := (*TypedRef[VisualShaderNodeVarying])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVarying])(t))
}

func (r *RefVisualShaderNodeVaryingImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVarying])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVaryingImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVarying(reference VisualShaderNodeVarying) RefVisualShaderNodeVarying {
	return (RefVisualShaderNodeVarying)(NewTypedRef[VisualShaderNodeVarying](reference))
}

func newRefVisualShaderNodeVaryingAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVarying](reference.(VisualShaderNodeVarying)))
}

func newRefVisualShaderNodeVaryingGDExtensionIternalConstructor(reference VisualShaderNodeVarying) RefVisualShaderNodeVarying {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVarying](reference)
}

var _ RefVisualShaderNodeVaryingGetter = &RefVisualShaderNodeVaryingGetterImpl{}
var _ Ref = &RefVisualShaderNodeVaryingGetterImpl{}

type RefVisualShaderNodeVaryingGetter interface {
	Ref
	TypedPtr() VisualShaderNodeVaryingGetter
}

type RefVisualShaderNodeVaryingGetterImpl TypedRef[VisualShaderNodeVaryingGetter]

func (r *RefVisualShaderNodeVaryingGetterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVaryingGetter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVaryingGetterImpl) TypedPtr() VisualShaderNodeVaryingGetter {
	rg := (*TypedRef[VisualShaderNodeVaryingGetter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVaryingGetterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVaryingGetter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVaryingGetterImpl) TypedRef(from *RefVisualShaderNodeVaryingGetterImpl) {
	rg := (*TypedRef[VisualShaderNodeVaryingGetter])(r)
	t := (*TypedRef[VisualShaderNodeVaryingGetter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVaryingGetter])(t))
}

func (r *RefVisualShaderNodeVaryingGetterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVaryingGetter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVaryingGetterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVaryingGetter(reference VisualShaderNodeVaryingGetter) RefVisualShaderNodeVaryingGetter {
	return (RefVisualShaderNodeVaryingGetter)(NewTypedRef[VisualShaderNodeVaryingGetter](reference))
}

func newRefVisualShaderNodeVaryingGetterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVaryingGetter](reference.(VisualShaderNodeVaryingGetter)))
}

func newRefVisualShaderNodeVaryingGetterGDExtensionIternalConstructor(reference VisualShaderNodeVaryingGetter) RefVisualShaderNodeVaryingGetter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVaryingGetter](reference)
}

var _ RefVisualShaderNodeVaryingSetter = &RefVisualShaderNodeVaryingSetterImpl{}
var _ Ref = &RefVisualShaderNodeVaryingSetterImpl{}

type RefVisualShaderNodeVaryingSetter interface {
	Ref
	TypedPtr() VisualShaderNodeVaryingSetter
}

type RefVisualShaderNodeVaryingSetterImpl TypedRef[VisualShaderNodeVaryingSetter]

func (r *RefVisualShaderNodeVaryingSetterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVaryingSetter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVaryingSetterImpl) TypedPtr() VisualShaderNodeVaryingSetter {
	rg := (*TypedRef[VisualShaderNodeVaryingSetter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVaryingSetterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVaryingSetter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVaryingSetterImpl) TypedRef(from *RefVisualShaderNodeVaryingSetterImpl) {
	rg := (*TypedRef[VisualShaderNodeVaryingSetter])(r)
	t := (*TypedRef[VisualShaderNodeVaryingSetter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVaryingSetter])(t))
}

func (r *RefVisualShaderNodeVaryingSetterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVaryingSetter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVaryingSetterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVaryingSetter(reference VisualShaderNodeVaryingSetter) RefVisualShaderNodeVaryingSetter {
	return (RefVisualShaderNodeVaryingSetter)(NewTypedRef[VisualShaderNodeVaryingSetter](reference))
}

func newRefVisualShaderNodeVaryingSetterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVaryingSetter](reference.(VisualShaderNodeVaryingSetter)))
}

func newRefVisualShaderNodeVaryingSetterGDExtensionIternalConstructor(reference VisualShaderNodeVaryingSetter) RefVisualShaderNodeVaryingSetter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVaryingSetter](reference)
}

var _ RefVisualShaderNodeVec2Constant = &RefVisualShaderNodeVec2ConstantImpl{}
var _ Ref = &RefVisualShaderNodeVec2ConstantImpl{}

type RefVisualShaderNodeVec2Constant interface {
	Ref
	TypedPtr() VisualShaderNodeVec2Constant
}

type RefVisualShaderNodeVec2ConstantImpl TypedRef[VisualShaderNodeVec2Constant]

func (r *RefVisualShaderNodeVec2ConstantImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVec2Constant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVec2ConstantImpl) TypedPtr() VisualShaderNodeVec2Constant {
	rg := (*TypedRef[VisualShaderNodeVec2Constant])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVec2ConstantImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVec2Constant])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVec2ConstantImpl) TypedRef(from *RefVisualShaderNodeVec2ConstantImpl) {
	rg := (*TypedRef[VisualShaderNodeVec2Constant])(r)
	t := (*TypedRef[VisualShaderNodeVec2Constant])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVec2Constant])(t))
}

func (r *RefVisualShaderNodeVec2ConstantImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVec2Constant])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVec2ConstantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVec2Constant(reference VisualShaderNodeVec2Constant) RefVisualShaderNodeVec2Constant {
	return (RefVisualShaderNodeVec2Constant)(NewTypedRef[VisualShaderNodeVec2Constant](reference))
}

func newRefVisualShaderNodeVec2ConstantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec2Constant](reference.(VisualShaderNodeVec2Constant)))
}

func newRefVisualShaderNodeVec2ConstantGDExtensionIternalConstructor(reference VisualShaderNodeVec2Constant) RefVisualShaderNodeVec2Constant {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec2Constant](reference)
}

var _ RefVisualShaderNodeVec2Parameter = &RefVisualShaderNodeVec2ParameterImpl{}
var _ Ref = &RefVisualShaderNodeVec2ParameterImpl{}

type RefVisualShaderNodeVec2Parameter interface {
	Ref
	TypedPtr() VisualShaderNodeVec2Parameter
}

type RefVisualShaderNodeVec2ParameterImpl TypedRef[VisualShaderNodeVec2Parameter]

func (r *RefVisualShaderNodeVec2ParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVec2Parameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVec2ParameterImpl) TypedPtr() VisualShaderNodeVec2Parameter {
	rg := (*TypedRef[VisualShaderNodeVec2Parameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVec2ParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVec2Parameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVec2ParameterImpl) TypedRef(from *RefVisualShaderNodeVec2ParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeVec2Parameter])(r)
	t := (*TypedRef[VisualShaderNodeVec2Parameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVec2Parameter])(t))
}

func (r *RefVisualShaderNodeVec2ParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVec2Parameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVec2ParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVec2Parameter(reference VisualShaderNodeVec2Parameter) RefVisualShaderNodeVec2Parameter {
	return (RefVisualShaderNodeVec2Parameter)(NewTypedRef[VisualShaderNodeVec2Parameter](reference))
}

func newRefVisualShaderNodeVec2ParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec2Parameter](reference.(VisualShaderNodeVec2Parameter)))
}

func newRefVisualShaderNodeVec2ParameterGDExtensionIternalConstructor(reference VisualShaderNodeVec2Parameter) RefVisualShaderNodeVec2Parameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec2Parameter](reference)
}

var _ RefVisualShaderNodeVec3Constant = &RefVisualShaderNodeVec3ConstantImpl{}
var _ Ref = &RefVisualShaderNodeVec3ConstantImpl{}

type RefVisualShaderNodeVec3Constant interface {
	Ref
	TypedPtr() VisualShaderNodeVec3Constant
}

type RefVisualShaderNodeVec3ConstantImpl TypedRef[VisualShaderNodeVec3Constant]

func (r *RefVisualShaderNodeVec3ConstantImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVec3Constant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVec3ConstantImpl) TypedPtr() VisualShaderNodeVec3Constant {
	rg := (*TypedRef[VisualShaderNodeVec3Constant])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVec3ConstantImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVec3Constant])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVec3ConstantImpl) TypedRef(from *RefVisualShaderNodeVec3ConstantImpl) {
	rg := (*TypedRef[VisualShaderNodeVec3Constant])(r)
	t := (*TypedRef[VisualShaderNodeVec3Constant])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVec3Constant])(t))
}

func (r *RefVisualShaderNodeVec3ConstantImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVec3Constant])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVec3ConstantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVec3Constant(reference VisualShaderNodeVec3Constant) RefVisualShaderNodeVec3Constant {
	return (RefVisualShaderNodeVec3Constant)(NewTypedRef[VisualShaderNodeVec3Constant](reference))
}

func newRefVisualShaderNodeVec3ConstantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec3Constant](reference.(VisualShaderNodeVec3Constant)))
}

func newRefVisualShaderNodeVec3ConstantGDExtensionIternalConstructor(reference VisualShaderNodeVec3Constant) RefVisualShaderNodeVec3Constant {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec3Constant](reference)
}

var _ RefVisualShaderNodeVec3Parameter = &RefVisualShaderNodeVec3ParameterImpl{}
var _ Ref = &RefVisualShaderNodeVec3ParameterImpl{}

type RefVisualShaderNodeVec3Parameter interface {
	Ref
	TypedPtr() VisualShaderNodeVec3Parameter
}

type RefVisualShaderNodeVec3ParameterImpl TypedRef[VisualShaderNodeVec3Parameter]

func (r *RefVisualShaderNodeVec3ParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVec3Parameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVec3ParameterImpl) TypedPtr() VisualShaderNodeVec3Parameter {
	rg := (*TypedRef[VisualShaderNodeVec3Parameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVec3ParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVec3Parameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVec3ParameterImpl) TypedRef(from *RefVisualShaderNodeVec3ParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeVec3Parameter])(r)
	t := (*TypedRef[VisualShaderNodeVec3Parameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVec3Parameter])(t))
}

func (r *RefVisualShaderNodeVec3ParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVec3Parameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVec3ParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVec3Parameter(reference VisualShaderNodeVec3Parameter) RefVisualShaderNodeVec3Parameter {
	return (RefVisualShaderNodeVec3Parameter)(NewTypedRef[VisualShaderNodeVec3Parameter](reference))
}

func newRefVisualShaderNodeVec3ParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec3Parameter](reference.(VisualShaderNodeVec3Parameter)))
}

func newRefVisualShaderNodeVec3ParameterGDExtensionIternalConstructor(reference VisualShaderNodeVec3Parameter) RefVisualShaderNodeVec3Parameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec3Parameter](reference)
}

var _ RefVisualShaderNodeVec4Constant = &RefVisualShaderNodeVec4ConstantImpl{}
var _ Ref = &RefVisualShaderNodeVec4ConstantImpl{}

type RefVisualShaderNodeVec4Constant interface {
	Ref
	TypedPtr() VisualShaderNodeVec4Constant
}

type RefVisualShaderNodeVec4ConstantImpl TypedRef[VisualShaderNodeVec4Constant]

func (r *RefVisualShaderNodeVec4ConstantImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVec4Constant])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVec4ConstantImpl) TypedPtr() VisualShaderNodeVec4Constant {
	rg := (*TypedRef[VisualShaderNodeVec4Constant])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVec4ConstantImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVec4Constant])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVec4ConstantImpl) TypedRef(from *RefVisualShaderNodeVec4ConstantImpl) {
	rg := (*TypedRef[VisualShaderNodeVec4Constant])(r)
	t := (*TypedRef[VisualShaderNodeVec4Constant])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVec4Constant])(t))
}

func (r *RefVisualShaderNodeVec4ConstantImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVec4Constant])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVec4ConstantImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVec4Constant(reference VisualShaderNodeVec4Constant) RefVisualShaderNodeVec4Constant {
	return (RefVisualShaderNodeVec4Constant)(NewTypedRef[VisualShaderNodeVec4Constant](reference))
}

func newRefVisualShaderNodeVec4ConstantAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec4Constant](reference.(VisualShaderNodeVec4Constant)))
}

func newRefVisualShaderNodeVec4ConstantGDExtensionIternalConstructor(reference VisualShaderNodeVec4Constant) RefVisualShaderNodeVec4Constant {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec4Constant](reference)
}

var _ RefVisualShaderNodeVec4Parameter = &RefVisualShaderNodeVec4ParameterImpl{}
var _ Ref = &RefVisualShaderNodeVec4ParameterImpl{}

type RefVisualShaderNodeVec4Parameter interface {
	Ref
	TypedPtr() VisualShaderNodeVec4Parameter
}

type RefVisualShaderNodeVec4ParameterImpl TypedRef[VisualShaderNodeVec4Parameter]

func (r *RefVisualShaderNodeVec4ParameterImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVec4Parameter])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVec4ParameterImpl) TypedPtr() VisualShaderNodeVec4Parameter {
	rg := (*TypedRef[VisualShaderNodeVec4Parameter])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVec4ParameterImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVec4Parameter])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVec4ParameterImpl) TypedRef(from *RefVisualShaderNodeVec4ParameterImpl) {
	rg := (*TypedRef[VisualShaderNodeVec4Parameter])(r)
	t := (*TypedRef[VisualShaderNodeVec4Parameter])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVec4Parameter])(t))
}

func (r *RefVisualShaderNodeVec4ParameterImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVec4Parameter])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVec4ParameterImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVec4Parameter(reference VisualShaderNodeVec4Parameter) RefVisualShaderNodeVec4Parameter {
	return (RefVisualShaderNodeVec4Parameter)(NewTypedRef[VisualShaderNodeVec4Parameter](reference))
}

func newRefVisualShaderNodeVec4ParameterAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec4Parameter](reference.(VisualShaderNodeVec4Parameter)))
}

func newRefVisualShaderNodeVec4ParameterGDExtensionIternalConstructor(reference VisualShaderNodeVec4Parameter) RefVisualShaderNodeVec4Parameter {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVec4Parameter](reference)
}

var _ RefVisualShaderNodeVectorBase = &RefVisualShaderNodeVectorBaseImpl{}
var _ Ref = &RefVisualShaderNodeVectorBaseImpl{}

type RefVisualShaderNodeVectorBase interface {
	Ref
	TypedPtr() VisualShaderNodeVectorBase
}

type RefVisualShaderNodeVectorBaseImpl TypedRef[VisualShaderNodeVectorBase]

func (r *RefVisualShaderNodeVectorBaseImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVectorBase])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVectorBaseImpl) TypedPtr() VisualShaderNodeVectorBase {
	rg := (*TypedRef[VisualShaderNodeVectorBase])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVectorBaseImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVectorBase])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVectorBaseImpl) TypedRef(from *RefVisualShaderNodeVectorBaseImpl) {
	rg := (*TypedRef[VisualShaderNodeVectorBase])(r)
	t := (*TypedRef[VisualShaderNodeVectorBase])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVectorBase])(t))
}

func (r *RefVisualShaderNodeVectorBaseImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVectorBase])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVectorBaseImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVectorBase(reference VisualShaderNodeVectorBase) RefVisualShaderNodeVectorBase {
	return (RefVisualShaderNodeVectorBase)(NewTypedRef[VisualShaderNodeVectorBase](reference))
}

func newRefVisualShaderNodeVectorBaseAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorBase](reference.(VisualShaderNodeVectorBase)))
}

func newRefVisualShaderNodeVectorBaseGDExtensionIternalConstructor(reference VisualShaderNodeVectorBase) RefVisualShaderNodeVectorBase {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorBase](reference)
}

var _ RefVisualShaderNodeVectorCompose = &RefVisualShaderNodeVectorComposeImpl{}
var _ Ref = &RefVisualShaderNodeVectorComposeImpl{}

type RefVisualShaderNodeVectorCompose interface {
	Ref
	TypedPtr() VisualShaderNodeVectorCompose
}

type RefVisualShaderNodeVectorComposeImpl TypedRef[VisualShaderNodeVectorCompose]

func (r *RefVisualShaderNodeVectorComposeImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVectorCompose])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVectorComposeImpl) TypedPtr() VisualShaderNodeVectorCompose {
	rg := (*TypedRef[VisualShaderNodeVectorCompose])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVectorComposeImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVectorCompose])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVectorComposeImpl) TypedRef(from *RefVisualShaderNodeVectorComposeImpl) {
	rg := (*TypedRef[VisualShaderNodeVectorCompose])(r)
	t := (*TypedRef[VisualShaderNodeVectorCompose])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVectorCompose])(t))
}

func (r *RefVisualShaderNodeVectorComposeImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVectorCompose])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVectorComposeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVectorCompose(reference VisualShaderNodeVectorCompose) RefVisualShaderNodeVectorCompose {
	return (RefVisualShaderNodeVectorCompose)(NewTypedRef[VisualShaderNodeVectorCompose](reference))
}

func newRefVisualShaderNodeVectorComposeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorCompose](reference.(VisualShaderNodeVectorCompose)))
}

func newRefVisualShaderNodeVectorComposeGDExtensionIternalConstructor(reference VisualShaderNodeVectorCompose) RefVisualShaderNodeVectorCompose {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorCompose](reference)
}

var _ RefVisualShaderNodeVectorDecompose = &RefVisualShaderNodeVectorDecomposeImpl{}
var _ Ref = &RefVisualShaderNodeVectorDecomposeImpl{}

type RefVisualShaderNodeVectorDecompose interface {
	Ref
	TypedPtr() VisualShaderNodeVectorDecompose
}

type RefVisualShaderNodeVectorDecomposeImpl TypedRef[VisualShaderNodeVectorDecompose]

func (r *RefVisualShaderNodeVectorDecomposeImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVectorDecompose])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVectorDecomposeImpl) TypedPtr() VisualShaderNodeVectorDecompose {
	rg := (*TypedRef[VisualShaderNodeVectorDecompose])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVectorDecomposeImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVectorDecompose])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVectorDecomposeImpl) TypedRef(from *RefVisualShaderNodeVectorDecomposeImpl) {
	rg := (*TypedRef[VisualShaderNodeVectorDecompose])(r)
	t := (*TypedRef[VisualShaderNodeVectorDecompose])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVectorDecompose])(t))
}

func (r *RefVisualShaderNodeVectorDecomposeImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVectorDecompose])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVectorDecomposeImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVectorDecompose(reference VisualShaderNodeVectorDecompose) RefVisualShaderNodeVectorDecompose {
	return (RefVisualShaderNodeVectorDecompose)(NewTypedRef[VisualShaderNodeVectorDecompose](reference))
}

func newRefVisualShaderNodeVectorDecomposeAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorDecompose](reference.(VisualShaderNodeVectorDecompose)))
}

func newRefVisualShaderNodeVectorDecomposeGDExtensionIternalConstructor(reference VisualShaderNodeVectorDecompose) RefVisualShaderNodeVectorDecompose {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorDecompose](reference)
}

var _ RefVisualShaderNodeVectorDistance = &RefVisualShaderNodeVectorDistanceImpl{}
var _ Ref = &RefVisualShaderNodeVectorDistanceImpl{}

type RefVisualShaderNodeVectorDistance interface {
	Ref
	TypedPtr() VisualShaderNodeVectorDistance
}

type RefVisualShaderNodeVectorDistanceImpl TypedRef[VisualShaderNodeVectorDistance]

func (r *RefVisualShaderNodeVectorDistanceImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVectorDistance])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVectorDistanceImpl) TypedPtr() VisualShaderNodeVectorDistance {
	rg := (*TypedRef[VisualShaderNodeVectorDistance])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVectorDistanceImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVectorDistance])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVectorDistanceImpl) TypedRef(from *RefVisualShaderNodeVectorDistanceImpl) {
	rg := (*TypedRef[VisualShaderNodeVectorDistance])(r)
	t := (*TypedRef[VisualShaderNodeVectorDistance])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVectorDistance])(t))
}

func (r *RefVisualShaderNodeVectorDistanceImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVectorDistance])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVectorDistanceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVectorDistance(reference VisualShaderNodeVectorDistance) RefVisualShaderNodeVectorDistance {
	return (RefVisualShaderNodeVectorDistance)(NewTypedRef[VisualShaderNodeVectorDistance](reference))
}

func newRefVisualShaderNodeVectorDistanceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorDistance](reference.(VisualShaderNodeVectorDistance)))
}

func newRefVisualShaderNodeVectorDistanceGDExtensionIternalConstructor(reference VisualShaderNodeVectorDistance) RefVisualShaderNodeVectorDistance {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorDistance](reference)
}

var _ RefVisualShaderNodeVectorFunc = &RefVisualShaderNodeVectorFuncImpl{}
var _ Ref = &RefVisualShaderNodeVectorFuncImpl{}

type RefVisualShaderNodeVectorFunc interface {
	Ref
	TypedPtr() VisualShaderNodeVectorFunc
}

type RefVisualShaderNodeVectorFuncImpl TypedRef[VisualShaderNodeVectorFunc]

func (r *RefVisualShaderNodeVectorFuncImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVectorFunc])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVectorFuncImpl) TypedPtr() VisualShaderNodeVectorFunc {
	rg := (*TypedRef[VisualShaderNodeVectorFunc])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVectorFuncImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVectorFunc])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVectorFuncImpl) TypedRef(from *RefVisualShaderNodeVectorFuncImpl) {
	rg := (*TypedRef[VisualShaderNodeVectorFunc])(r)
	t := (*TypedRef[VisualShaderNodeVectorFunc])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVectorFunc])(t))
}

func (r *RefVisualShaderNodeVectorFuncImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVectorFunc])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVectorFuncImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVectorFunc(reference VisualShaderNodeVectorFunc) RefVisualShaderNodeVectorFunc {
	return (RefVisualShaderNodeVectorFunc)(NewTypedRef[VisualShaderNodeVectorFunc](reference))
}

func newRefVisualShaderNodeVectorFuncAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorFunc](reference.(VisualShaderNodeVectorFunc)))
}

func newRefVisualShaderNodeVectorFuncGDExtensionIternalConstructor(reference VisualShaderNodeVectorFunc) RefVisualShaderNodeVectorFunc {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorFunc](reference)
}

var _ RefVisualShaderNodeVectorLen = &RefVisualShaderNodeVectorLenImpl{}
var _ Ref = &RefVisualShaderNodeVectorLenImpl{}

type RefVisualShaderNodeVectorLen interface {
	Ref
	TypedPtr() VisualShaderNodeVectorLen
}

type RefVisualShaderNodeVectorLenImpl TypedRef[VisualShaderNodeVectorLen]

func (r *RefVisualShaderNodeVectorLenImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVectorLen])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVectorLenImpl) TypedPtr() VisualShaderNodeVectorLen {
	rg := (*TypedRef[VisualShaderNodeVectorLen])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVectorLenImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVectorLen])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVectorLenImpl) TypedRef(from *RefVisualShaderNodeVectorLenImpl) {
	rg := (*TypedRef[VisualShaderNodeVectorLen])(r)
	t := (*TypedRef[VisualShaderNodeVectorLen])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVectorLen])(t))
}

func (r *RefVisualShaderNodeVectorLenImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVectorLen])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVectorLenImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVectorLen(reference VisualShaderNodeVectorLen) RefVisualShaderNodeVectorLen {
	return (RefVisualShaderNodeVectorLen)(NewTypedRef[VisualShaderNodeVectorLen](reference))
}

func newRefVisualShaderNodeVectorLenAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorLen](reference.(VisualShaderNodeVectorLen)))
}

func newRefVisualShaderNodeVectorLenGDExtensionIternalConstructor(reference VisualShaderNodeVectorLen) RefVisualShaderNodeVectorLen {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorLen](reference)
}

var _ RefVisualShaderNodeVectorOp = &RefVisualShaderNodeVectorOpImpl{}
var _ Ref = &RefVisualShaderNodeVectorOpImpl{}

type RefVisualShaderNodeVectorOp interface {
	Ref
	TypedPtr() VisualShaderNodeVectorOp
}

type RefVisualShaderNodeVectorOpImpl TypedRef[VisualShaderNodeVectorOp]

func (r *RefVisualShaderNodeVectorOpImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVectorOp])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVectorOpImpl) TypedPtr() VisualShaderNodeVectorOp {
	rg := (*TypedRef[VisualShaderNodeVectorOp])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVectorOpImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVectorOp])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVectorOpImpl) TypedRef(from *RefVisualShaderNodeVectorOpImpl) {
	rg := (*TypedRef[VisualShaderNodeVectorOp])(r)
	t := (*TypedRef[VisualShaderNodeVectorOp])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVectorOp])(t))
}

func (r *RefVisualShaderNodeVectorOpImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVectorOp])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVectorOpImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVectorOp(reference VisualShaderNodeVectorOp) RefVisualShaderNodeVectorOp {
	return (RefVisualShaderNodeVectorOp)(NewTypedRef[VisualShaderNodeVectorOp](reference))
}

func newRefVisualShaderNodeVectorOpAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorOp](reference.(VisualShaderNodeVectorOp)))
}

func newRefVisualShaderNodeVectorOpGDExtensionIternalConstructor(reference VisualShaderNodeVectorOp) RefVisualShaderNodeVectorOp {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorOp](reference)
}

var _ RefVisualShaderNodeVectorRefract = &RefVisualShaderNodeVectorRefractImpl{}
var _ Ref = &RefVisualShaderNodeVectorRefractImpl{}

type RefVisualShaderNodeVectorRefract interface {
	Ref
	TypedPtr() VisualShaderNodeVectorRefract
}

type RefVisualShaderNodeVectorRefractImpl TypedRef[VisualShaderNodeVectorRefract]

func (r *RefVisualShaderNodeVectorRefractImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeVectorRefract])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeVectorRefractImpl) TypedPtr() VisualShaderNodeVectorRefract {
	rg := (*TypedRef[VisualShaderNodeVectorRefract])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeVectorRefractImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeVectorRefract])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeVectorRefractImpl) TypedRef(from *RefVisualShaderNodeVectorRefractImpl) {
	rg := (*TypedRef[VisualShaderNodeVectorRefract])(r)
	t := (*TypedRef[VisualShaderNodeVectorRefract])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeVectorRefract])(t))
}

func (r *RefVisualShaderNodeVectorRefractImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeVectorRefract])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeVectorRefractImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeVectorRefract(reference VisualShaderNodeVectorRefract) RefVisualShaderNodeVectorRefract {
	return (RefVisualShaderNodeVectorRefract)(NewTypedRef[VisualShaderNodeVectorRefract](reference))
}

func newRefVisualShaderNodeVectorRefractAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorRefract](reference.(VisualShaderNodeVectorRefract)))
}

func newRefVisualShaderNodeVectorRefractGDExtensionIternalConstructor(reference VisualShaderNodeVectorRefract) RefVisualShaderNodeVectorRefract {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeVectorRefract](reference)
}

var _ RefVisualShaderNodeWorldPositionFromDepth = &RefVisualShaderNodeWorldPositionFromDepthImpl{}
var _ Ref = &RefVisualShaderNodeWorldPositionFromDepthImpl{}

type RefVisualShaderNodeWorldPositionFromDepth interface {
	Ref
	TypedPtr() VisualShaderNodeWorldPositionFromDepth
}

type RefVisualShaderNodeWorldPositionFromDepthImpl TypedRef[VisualShaderNodeWorldPositionFromDepth]

func (r *RefVisualShaderNodeWorldPositionFromDepthImpl) Ptr() RefCounted {
	rg := (*TypedRef[VisualShaderNodeWorldPositionFromDepth])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVisualShaderNodeWorldPositionFromDepthImpl) TypedPtr() VisualShaderNodeWorldPositionFromDepth {
	rg := (*TypedRef[VisualShaderNodeWorldPositionFromDepth])(r)
	return rg.TypedPtr()
}

func (r *RefVisualShaderNodeWorldPositionFromDepthImpl) Ref(from Ref) {
	rg := (*TypedRef[VisualShaderNodeWorldPositionFromDepth])(r)
	rg.Ref(from)
}

func (r *RefVisualShaderNodeWorldPositionFromDepthImpl) TypedRef(from *RefVisualShaderNodeWorldPositionFromDepthImpl) {
	rg := (*TypedRef[VisualShaderNodeWorldPositionFromDepth])(r)
	t := (*TypedRef[VisualShaderNodeWorldPositionFromDepth])(from)
	rg.TypedRef((*TypedRef[VisualShaderNodeWorldPositionFromDepth])(t))
}

func (r *RefVisualShaderNodeWorldPositionFromDepthImpl) Unref() {
	rg := (*TypedRef[VisualShaderNodeWorldPositionFromDepth])(r)
	rg.Unref()
}

func (r *RefVisualShaderNodeWorldPositionFromDepthImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVisualShaderNodeWorldPositionFromDepth(reference VisualShaderNodeWorldPositionFromDepth) RefVisualShaderNodeWorldPositionFromDepth {
	return (RefVisualShaderNodeWorldPositionFromDepth)(NewTypedRef[VisualShaderNodeWorldPositionFromDepth](reference))
}

func newRefVisualShaderNodeWorldPositionFromDepthAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VisualShaderNodeWorldPositionFromDepth](reference.(VisualShaderNodeWorldPositionFromDepth)))
}

func newRefVisualShaderNodeWorldPositionFromDepthGDExtensionIternalConstructor(reference VisualShaderNodeWorldPositionFromDepth) RefVisualShaderNodeWorldPositionFromDepth {
	return newTypedRefGDExtensionIternalConstructor[VisualShaderNodeWorldPositionFromDepth](reference)
}

var _ RefVoxelGIData = &RefVoxelGIDataImpl{}
var _ Ref = &RefVoxelGIDataImpl{}

type RefVoxelGIData interface {
	Ref
	TypedPtr() VoxelGIData
}

type RefVoxelGIDataImpl TypedRef[VoxelGIData]

func (r *RefVoxelGIDataImpl) Ptr() RefCounted {
	rg := (*TypedRef[VoxelGIData])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefVoxelGIDataImpl) TypedPtr() VoxelGIData {
	rg := (*TypedRef[VoxelGIData])(r)
	return rg.TypedPtr()
}

func (r *RefVoxelGIDataImpl) Ref(from Ref) {
	rg := (*TypedRef[VoxelGIData])(r)
	rg.Ref(from)
}

func (r *RefVoxelGIDataImpl) TypedRef(from *RefVoxelGIDataImpl) {
	rg := (*TypedRef[VoxelGIData])(r)
	t := (*TypedRef[VoxelGIData])(from)
	rg.TypedRef((*TypedRef[VoxelGIData])(t))
}

func (r *RefVoxelGIDataImpl) Unref() {
	rg := (*TypedRef[VoxelGIData])(r)
	rg.Unref()
}

func (r *RefVoxelGIDataImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefVoxelGIData(reference VoxelGIData) RefVoxelGIData {
	return (RefVoxelGIData)(NewTypedRef[VoxelGIData](reference))
}

func newRefVoxelGIDataAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[VoxelGIData](reference.(VoxelGIData)))
}

func newRefVoxelGIDataGDExtensionIternalConstructor(reference VoxelGIData) RefVoxelGIData {
	return newTypedRefGDExtensionIternalConstructor[VoxelGIData](reference)
}

var _ RefWeakRef = &RefWeakRefImpl{}
var _ Ref = &RefWeakRefImpl{}

type RefWeakRef interface {
	Ref
	TypedPtr() WeakRef
}

type RefWeakRefImpl TypedRef[WeakRef]

func (r *RefWeakRefImpl) Ptr() RefCounted {
	rg := (*TypedRef[WeakRef])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWeakRefImpl) TypedPtr() WeakRef {
	rg := (*TypedRef[WeakRef])(r)
	return rg.TypedPtr()
}

func (r *RefWeakRefImpl) Ref(from Ref) {
	rg := (*TypedRef[WeakRef])(r)
	rg.Ref(from)
}

func (r *RefWeakRefImpl) TypedRef(from *RefWeakRefImpl) {
	rg := (*TypedRef[WeakRef])(r)
	t := (*TypedRef[WeakRef])(from)
	rg.TypedRef((*TypedRef[WeakRef])(t))
}

func (r *RefWeakRefImpl) Unref() {
	rg := (*TypedRef[WeakRef])(r)
	rg.Unref()
}

func (r *RefWeakRefImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWeakRef(reference WeakRef) RefWeakRef {
	return (RefWeakRef)(NewTypedRef[WeakRef](reference))
}

func newRefWeakRefAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[WeakRef](reference.(WeakRef)))
}

func newRefWeakRefGDExtensionIternalConstructor(reference WeakRef) RefWeakRef {
	return newTypedRefGDExtensionIternalConstructor[WeakRef](reference)
}

var _ RefWebRTCDataChannel = &RefWebRTCDataChannelImpl{}
var _ Ref = &RefWebRTCDataChannelImpl{}

type RefWebRTCDataChannel interface {
	Ref
	TypedPtr() WebRTCDataChannel
}

type RefWebRTCDataChannelImpl TypedRef[WebRTCDataChannel]

func (r *RefWebRTCDataChannelImpl) Ptr() RefCounted {
	rg := (*TypedRef[WebRTCDataChannel])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWebRTCDataChannelImpl) TypedPtr() WebRTCDataChannel {
	rg := (*TypedRef[WebRTCDataChannel])(r)
	return rg.TypedPtr()
}

func (r *RefWebRTCDataChannelImpl) Ref(from Ref) {
	rg := (*TypedRef[WebRTCDataChannel])(r)
	rg.Ref(from)
}

func (r *RefWebRTCDataChannelImpl) TypedRef(from *RefWebRTCDataChannelImpl) {
	rg := (*TypedRef[WebRTCDataChannel])(r)
	t := (*TypedRef[WebRTCDataChannel])(from)
	rg.TypedRef((*TypedRef[WebRTCDataChannel])(t))
}

func (r *RefWebRTCDataChannelImpl) Unref() {
	rg := (*TypedRef[WebRTCDataChannel])(r)
	rg.Unref()
}

func (r *RefWebRTCDataChannelImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWebRTCDataChannel(reference WebRTCDataChannel) RefWebRTCDataChannel {
	return (RefWebRTCDataChannel)(NewTypedRef[WebRTCDataChannel](reference))
}

func newRefWebRTCDataChannelAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[WebRTCDataChannel](reference.(WebRTCDataChannel)))
}

func newRefWebRTCDataChannelGDExtensionIternalConstructor(reference WebRTCDataChannel) RefWebRTCDataChannel {
	return newTypedRefGDExtensionIternalConstructor[WebRTCDataChannel](reference)
}

var _ RefWebRTCDataChannelExtension = &RefWebRTCDataChannelExtensionImpl{}
var _ Ref = &RefWebRTCDataChannelExtensionImpl{}

type RefWebRTCDataChannelExtension interface {
	Ref
	TypedPtr() WebRTCDataChannelExtension
}

type RefWebRTCDataChannelExtensionImpl TypedRef[WebRTCDataChannelExtension]

func (r *RefWebRTCDataChannelExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[WebRTCDataChannelExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWebRTCDataChannelExtensionImpl) TypedPtr() WebRTCDataChannelExtension {
	rg := (*TypedRef[WebRTCDataChannelExtension])(r)
	return rg.TypedPtr()
}

func (r *RefWebRTCDataChannelExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[WebRTCDataChannelExtension])(r)
	rg.Ref(from)
}

func (r *RefWebRTCDataChannelExtensionImpl) TypedRef(from *RefWebRTCDataChannelExtensionImpl) {
	rg := (*TypedRef[WebRTCDataChannelExtension])(r)
	t := (*TypedRef[WebRTCDataChannelExtension])(from)
	rg.TypedRef((*TypedRef[WebRTCDataChannelExtension])(t))
}

func (r *RefWebRTCDataChannelExtensionImpl) Unref() {
	rg := (*TypedRef[WebRTCDataChannelExtension])(r)
	rg.Unref()
}

func (r *RefWebRTCDataChannelExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWebRTCDataChannelExtension(reference WebRTCDataChannelExtension) RefWebRTCDataChannelExtension {
	return (RefWebRTCDataChannelExtension)(NewTypedRef[WebRTCDataChannelExtension](reference))
}

func newRefWebRTCDataChannelExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[WebRTCDataChannelExtension](reference.(WebRTCDataChannelExtension)))
}

func newRefWebRTCDataChannelExtensionGDExtensionIternalConstructor(reference WebRTCDataChannelExtension) RefWebRTCDataChannelExtension {
	return newTypedRefGDExtensionIternalConstructor[WebRTCDataChannelExtension](reference)
}

var _ RefWebRTCMultiplayerPeer = &RefWebRTCMultiplayerPeerImpl{}
var _ Ref = &RefWebRTCMultiplayerPeerImpl{}

type RefWebRTCMultiplayerPeer interface {
	Ref
	TypedPtr() WebRTCMultiplayerPeer
}

type RefWebRTCMultiplayerPeerImpl TypedRef[WebRTCMultiplayerPeer]

func (r *RefWebRTCMultiplayerPeerImpl) Ptr() RefCounted {
	rg := (*TypedRef[WebRTCMultiplayerPeer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWebRTCMultiplayerPeerImpl) TypedPtr() WebRTCMultiplayerPeer {
	rg := (*TypedRef[WebRTCMultiplayerPeer])(r)
	return rg.TypedPtr()
}

func (r *RefWebRTCMultiplayerPeerImpl) Ref(from Ref) {
	rg := (*TypedRef[WebRTCMultiplayerPeer])(r)
	rg.Ref(from)
}

func (r *RefWebRTCMultiplayerPeerImpl) TypedRef(from *RefWebRTCMultiplayerPeerImpl) {
	rg := (*TypedRef[WebRTCMultiplayerPeer])(r)
	t := (*TypedRef[WebRTCMultiplayerPeer])(from)
	rg.TypedRef((*TypedRef[WebRTCMultiplayerPeer])(t))
}

func (r *RefWebRTCMultiplayerPeerImpl) Unref() {
	rg := (*TypedRef[WebRTCMultiplayerPeer])(r)
	rg.Unref()
}

func (r *RefWebRTCMultiplayerPeerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWebRTCMultiplayerPeer(reference WebRTCMultiplayerPeer) RefWebRTCMultiplayerPeer {
	return (RefWebRTCMultiplayerPeer)(NewTypedRef[WebRTCMultiplayerPeer](reference))
}

func newRefWebRTCMultiplayerPeerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[WebRTCMultiplayerPeer](reference.(WebRTCMultiplayerPeer)))
}

func newRefWebRTCMultiplayerPeerGDExtensionIternalConstructor(reference WebRTCMultiplayerPeer) RefWebRTCMultiplayerPeer {
	return newTypedRefGDExtensionIternalConstructor[WebRTCMultiplayerPeer](reference)
}

var _ RefWebRTCPeerConnection = &RefWebRTCPeerConnectionImpl{}
var _ Ref = &RefWebRTCPeerConnectionImpl{}

type RefWebRTCPeerConnection interface {
	Ref
	TypedPtr() WebRTCPeerConnection
}

type RefWebRTCPeerConnectionImpl TypedRef[WebRTCPeerConnection]

func (r *RefWebRTCPeerConnectionImpl) Ptr() RefCounted {
	rg := (*TypedRef[WebRTCPeerConnection])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWebRTCPeerConnectionImpl) TypedPtr() WebRTCPeerConnection {
	rg := (*TypedRef[WebRTCPeerConnection])(r)
	return rg.TypedPtr()
}

func (r *RefWebRTCPeerConnectionImpl) Ref(from Ref) {
	rg := (*TypedRef[WebRTCPeerConnection])(r)
	rg.Ref(from)
}

func (r *RefWebRTCPeerConnectionImpl) TypedRef(from *RefWebRTCPeerConnectionImpl) {
	rg := (*TypedRef[WebRTCPeerConnection])(r)
	t := (*TypedRef[WebRTCPeerConnection])(from)
	rg.TypedRef((*TypedRef[WebRTCPeerConnection])(t))
}

func (r *RefWebRTCPeerConnectionImpl) Unref() {
	rg := (*TypedRef[WebRTCPeerConnection])(r)
	rg.Unref()
}

func (r *RefWebRTCPeerConnectionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWebRTCPeerConnection(reference WebRTCPeerConnection) RefWebRTCPeerConnection {
	return (RefWebRTCPeerConnection)(NewTypedRef[WebRTCPeerConnection](reference))
}

func newRefWebRTCPeerConnectionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[WebRTCPeerConnection](reference.(WebRTCPeerConnection)))
}

func newRefWebRTCPeerConnectionGDExtensionIternalConstructor(reference WebRTCPeerConnection) RefWebRTCPeerConnection {
	return newTypedRefGDExtensionIternalConstructor[WebRTCPeerConnection](reference)
}

var _ RefWebRTCPeerConnectionExtension = &RefWebRTCPeerConnectionExtensionImpl{}
var _ Ref = &RefWebRTCPeerConnectionExtensionImpl{}

type RefWebRTCPeerConnectionExtension interface {
	Ref
	TypedPtr() WebRTCPeerConnectionExtension
}

type RefWebRTCPeerConnectionExtensionImpl TypedRef[WebRTCPeerConnectionExtension]

func (r *RefWebRTCPeerConnectionExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[WebRTCPeerConnectionExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWebRTCPeerConnectionExtensionImpl) TypedPtr() WebRTCPeerConnectionExtension {
	rg := (*TypedRef[WebRTCPeerConnectionExtension])(r)
	return rg.TypedPtr()
}

func (r *RefWebRTCPeerConnectionExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[WebRTCPeerConnectionExtension])(r)
	rg.Ref(from)
}

func (r *RefWebRTCPeerConnectionExtensionImpl) TypedRef(from *RefWebRTCPeerConnectionExtensionImpl) {
	rg := (*TypedRef[WebRTCPeerConnectionExtension])(r)
	t := (*TypedRef[WebRTCPeerConnectionExtension])(from)
	rg.TypedRef((*TypedRef[WebRTCPeerConnectionExtension])(t))
}

func (r *RefWebRTCPeerConnectionExtensionImpl) Unref() {
	rg := (*TypedRef[WebRTCPeerConnectionExtension])(r)
	rg.Unref()
}

func (r *RefWebRTCPeerConnectionExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWebRTCPeerConnectionExtension(reference WebRTCPeerConnectionExtension) RefWebRTCPeerConnectionExtension {
	return (RefWebRTCPeerConnectionExtension)(NewTypedRef[WebRTCPeerConnectionExtension](reference))
}

func newRefWebRTCPeerConnectionExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[WebRTCPeerConnectionExtension](reference.(WebRTCPeerConnectionExtension)))
}

func newRefWebRTCPeerConnectionExtensionGDExtensionIternalConstructor(reference WebRTCPeerConnectionExtension) RefWebRTCPeerConnectionExtension {
	return newTypedRefGDExtensionIternalConstructor[WebRTCPeerConnectionExtension](reference)
}

var _ RefWebSocketMultiplayerPeer = &RefWebSocketMultiplayerPeerImpl{}
var _ Ref = &RefWebSocketMultiplayerPeerImpl{}

type RefWebSocketMultiplayerPeer interface {
	Ref
	TypedPtr() WebSocketMultiplayerPeer
}

type RefWebSocketMultiplayerPeerImpl TypedRef[WebSocketMultiplayerPeer]

func (r *RefWebSocketMultiplayerPeerImpl) Ptr() RefCounted {
	rg := (*TypedRef[WebSocketMultiplayerPeer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWebSocketMultiplayerPeerImpl) TypedPtr() WebSocketMultiplayerPeer {
	rg := (*TypedRef[WebSocketMultiplayerPeer])(r)
	return rg.TypedPtr()
}

func (r *RefWebSocketMultiplayerPeerImpl) Ref(from Ref) {
	rg := (*TypedRef[WebSocketMultiplayerPeer])(r)
	rg.Ref(from)
}

func (r *RefWebSocketMultiplayerPeerImpl) TypedRef(from *RefWebSocketMultiplayerPeerImpl) {
	rg := (*TypedRef[WebSocketMultiplayerPeer])(r)
	t := (*TypedRef[WebSocketMultiplayerPeer])(from)
	rg.TypedRef((*TypedRef[WebSocketMultiplayerPeer])(t))
}

func (r *RefWebSocketMultiplayerPeerImpl) Unref() {
	rg := (*TypedRef[WebSocketMultiplayerPeer])(r)
	rg.Unref()
}

func (r *RefWebSocketMultiplayerPeerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWebSocketMultiplayerPeer(reference WebSocketMultiplayerPeer) RefWebSocketMultiplayerPeer {
	return (RefWebSocketMultiplayerPeer)(NewTypedRef[WebSocketMultiplayerPeer](reference))
}

func newRefWebSocketMultiplayerPeerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[WebSocketMultiplayerPeer](reference.(WebSocketMultiplayerPeer)))
}

func newRefWebSocketMultiplayerPeerGDExtensionIternalConstructor(reference WebSocketMultiplayerPeer) RefWebSocketMultiplayerPeer {
	return newTypedRefGDExtensionIternalConstructor[WebSocketMultiplayerPeer](reference)
}

var _ RefWebSocketPeer = &RefWebSocketPeerImpl{}
var _ Ref = &RefWebSocketPeerImpl{}

type RefWebSocketPeer interface {
	Ref
	TypedPtr() WebSocketPeer
}

type RefWebSocketPeerImpl TypedRef[WebSocketPeer]

func (r *RefWebSocketPeerImpl) Ptr() RefCounted {
	rg := (*TypedRef[WebSocketPeer])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWebSocketPeerImpl) TypedPtr() WebSocketPeer {
	rg := (*TypedRef[WebSocketPeer])(r)
	return rg.TypedPtr()
}

func (r *RefWebSocketPeerImpl) Ref(from Ref) {
	rg := (*TypedRef[WebSocketPeer])(r)
	rg.Ref(from)
}

func (r *RefWebSocketPeerImpl) TypedRef(from *RefWebSocketPeerImpl) {
	rg := (*TypedRef[WebSocketPeer])(r)
	t := (*TypedRef[WebSocketPeer])(from)
	rg.TypedRef((*TypedRef[WebSocketPeer])(t))
}

func (r *RefWebSocketPeerImpl) Unref() {
	rg := (*TypedRef[WebSocketPeer])(r)
	rg.Unref()
}

func (r *RefWebSocketPeerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWebSocketPeer(reference WebSocketPeer) RefWebSocketPeer {
	return (RefWebSocketPeer)(NewTypedRef[WebSocketPeer](reference))
}

func newRefWebSocketPeerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[WebSocketPeer](reference.(WebSocketPeer)))
}

func newRefWebSocketPeerGDExtensionIternalConstructor(reference WebSocketPeer) RefWebSocketPeer {
	return newTypedRefGDExtensionIternalConstructor[WebSocketPeer](reference)
}

var _ RefWebXRInterface = &RefWebXRInterfaceImpl{}
var _ Ref = &RefWebXRInterfaceImpl{}

type RefWebXRInterface interface {
	Ref
	TypedPtr() WebXRInterface
}

type RefWebXRInterfaceImpl TypedRef[WebXRInterface]

func (r *RefWebXRInterfaceImpl) Ptr() RefCounted {
	rg := (*TypedRef[WebXRInterface])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWebXRInterfaceImpl) TypedPtr() WebXRInterface {
	rg := (*TypedRef[WebXRInterface])(r)
	return rg.TypedPtr()
}

func (r *RefWebXRInterfaceImpl) Ref(from Ref) {
	rg := (*TypedRef[WebXRInterface])(r)
	rg.Ref(from)
}

func (r *RefWebXRInterfaceImpl) TypedRef(from *RefWebXRInterfaceImpl) {
	rg := (*TypedRef[WebXRInterface])(r)
	t := (*TypedRef[WebXRInterface])(from)
	rg.TypedRef((*TypedRef[WebXRInterface])(t))
}

func (r *RefWebXRInterfaceImpl) Unref() {
	rg := (*TypedRef[WebXRInterface])(r)
	rg.Unref()
}

func (r *RefWebXRInterfaceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWebXRInterface(reference WebXRInterface) RefWebXRInterface {
	return (RefWebXRInterface)(NewTypedRef[WebXRInterface](reference))
}

func newRefWebXRInterfaceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[WebXRInterface](reference.(WebXRInterface)))
}

func newRefWebXRInterfaceGDExtensionIternalConstructor(reference WebXRInterface) RefWebXRInterface {
	return newTypedRefGDExtensionIternalConstructor[WebXRInterface](reference)
}

var _ RefWorld2D = &RefWorld2DImpl{}
var _ Ref = &RefWorld2DImpl{}

type RefWorld2D interface {
	Ref
	TypedPtr() World2D
}

type RefWorld2DImpl TypedRef[World2D]

func (r *RefWorld2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[World2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWorld2DImpl) TypedPtr() World2D {
	rg := (*TypedRef[World2D])(r)
	return rg.TypedPtr()
}

func (r *RefWorld2DImpl) Ref(from Ref) {
	rg := (*TypedRef[World2D])(r)
	rg.Ref(from)
}

func (r *RefWorld2DImpl) TypedRef(from *RefWorld2DImpl) {
	rg := (*TypedRef[World2D])(r)
	t := (*TypedRef[World2D])(from)
	rg.TypedRef((*TypedRef[World2D])(t))
}

func (r *RefWorld2DImpl) Unref() {
	rg := (*TypedRef[World2D])(r)
	rg.Unref()
}

func (r *RefWorld2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWorld2D(reference World2D) RefWorld2D {
	return (RefWorld2D)(NewTypedRef[World2D](reference))
}

func newRefWorld2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[World2D](reference.(World2D)))
}

func newRefWorld2DGDExtensionIternalConstructor(reference World2D) RefWorld2D {
	return newTypedRefGDExtensionIternalConstructor[World2D](reference)
}

var _ RefWorld3D = &RefWorld3DImpl{}
var _ Ref = &RefWorld3DImpl{}

type RefWorld3D interface {
	Ref
	TypedPtr() World3D
}

type RefWorld3DImpl TypedRef[World3D]

func (r *RefWorld3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[World3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWorld3DImpl) TypedPtr() World3D {
	rg := (*TypedRef[World3D])(r)
	return rg.TypedPtr()
}

func (r *RefWorld3DImpl) Ref(from Ref) {
	rg := (*TypedRef[World3D])(r)
	rg.Ref(from)
}

func (r *RefWorld3DImpl) TypedRef(from *RefWorld3DImpl) {
	rg := (*TypedRef[World3D])(r)
	t := (*TypedRef[World3D])(from)
	rg.TypedRef((*TypedRef[World3D])(t))
}

func (r *RefWorld3DImpl) Unref() {
	rg := (*TypedRef[World3D])(r)
	rg.Unref()
}

func (r *RefWorld3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWorld3D(reference World3D) RefWorld3D {
	return (RefWorld3D)(NewTypedRef[World3D](reference))
}

func newRefWorld3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[World3D](reference.(World3D)))
}

func newRefWorld3DGDExtensionIternalConstructor(reference World3D) RefWorld3D {
	return newTypedRefGDExtensionIternalConstructor[World3D](reference)
}

var _ RefWorldBoundaryShape2D = &RefWorldBoundaryShape2DImpl{}
var _ Ref = &RefWorldBoundaryShape2DImpl{}

type RefWorldBoundaryShape2D interface {
	Ref
	TypedPtr() WorldBoundaryShape2D
}

type RefWorldBoundaryShape2DImpl TypedRef[WorldBoundaryShape2D]

func (r *RefWorldBoundaryShape2DImpl) Ptr() RefCounted {
	rg := (*TypedRef[WorldBoundaryShape2D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWorldBoundaryShape2DImpl) TypedPtr() WorldBoundaryShape2D {
	rg := (*TypedRef[WorldBoundaryShape2D])(r)
	return rg.TypedPtr()
}

func (r *RefWorldBoundaryShape2DImpl) Ref(from Ref) {
	rg := (*TypedRef[WorldBoundaryShape2D])(r)
	rg.Ref(from)
}

func (r *RefWorldBoundaryShape2DImpl) TypedRef(from *RefWorldBoundaryShape2DImpl) {
	rg := (*TypedRef[WorldBoundaryShape2D])(r)
	t := (*TypedRef[WorldBoundaryShape2D])(from)
	rg.TypedRef((*TypedRef[WorldBoundaryShape2D])(t))
}

func (r *RefWorldBoundaryShape2DImpl) Unref() {
	rg := (*TypedRef[WorldBoundaryShape2D])(r)
	rg.Unref()
}

func (r *RefWorldBoundaryShape2DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWorldBoundaryShape2D(reference WorldBoundaryShape2D) RefWorldBoundaryShape2D {
	return (RefWorldBoundaryShape2D)(NewTypedRef[WorldBoundaryShape2D](reference))
}

func newRefWorldBoundaryShape2DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[WorldBoundaryShape2D](reference.(WorldBoundaryShape2D)))
}

func newRefWorldBoundaryShape2DGDExtensionIternalConstructor(reference WorldBoundaryShape2D) RefWorldBoundaryShape2D {
	return newTypedRefGDExtensionIternalConstructor[WorldBoundaryShape2D](reference)
}

var _ RefWorldBoundaryShape3D = &RefWorldBoundaryShape3DImpl{}
var _ Ref = &RefWorldBoundaryShape3DImpl{}

type RefWorldBoundaryShape3D interface {
	Ref
	TypedPtr() WorldBoundaryShape3D
}

type RefWorldBoundaryShape3DImpl TypedRef[WorldBoundaryShape3D]

func (r *RefWorldBoundaryShape3DImpl) Ptr() RefCounted {
	rg := (*TypedRef[WorldBoundaryShape3D])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefWorldBoundaryShape3DImpl) TypedPtr() WorldBoundaryShape3D {
	rg := (*TypedRef[WorldBoundaryShape3D])(r)
	return rg.TypedPtr()
}

func (r *RefWorldBoundaryShape3DImpl) Ref(from Ref) {
	rg := (*TypedRef[WorldBoundaryShape3D])(r)
	rg.Ref(from)
}

func (r *RefWorldBoundaryShape3DImpl) TypedRef(from *RefWorldBoundaryShape3DImpl) {
	rg := (*TypedRef[WorldBoundaryShape3D])(r)
	t := (*TypedRef[WorldBoundaryShape3D])(from)
	rg.TypedRef((*TypedRef[WorldBoundaryShape3D])(t))
}

func (r *RefWorldBoundaryShape3DImpl) Unref() {
	rg := (*TypedRef[WorldBoundaryShape3D])(r)
	rg.Unref()
}

func (r *RefWorldBoundaryShape3DImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefWorldBoundaryShape3D(reference WorldBoundaryShape3D) RefWorldBoundaryShape3D {
	return (RefWorldBoundaryShape3D)(NewTypedRef[WorldBoundaryShape3D](reference))
}

func newRefWorldBoundaryShape3DAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[WorldBoundaryShape3D](reference.(WorldBoundaryShape3D)))
}

func newRefWorldBoundaryShape3DGDExtensionIternalConstructor(reference WorldBoundaryShape3D) RefWorldBoundaryShape3D {
	return newTypedRefGDExtensionIternalConstructor[WorldBoundaryShape3D](reference)
}

var _ RefX509Certificate = &RefX509CertificateImpl{}
var _ Ref = &RefX509CertificateImpl{}

type RefX509Certificate interface {
	Ref
	TypedPtr() X509Certificate
}

type RefX509CertificateImpl TypedRef[X509Certificate]

func (r *RefX509CertificateImpl) Ptr() RefCounted {
	rg := (*TypedRef[X509Certificate])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefX509CertificateImpl) TypedPtr() X509Certificate {
	rg := (*TypedRef[X509Certificate])(r)
	return rg.TypedPtr()
}

func (r *RefX509CertificateImpl) Ref(from Ref) {
	rg := (*TypedRef[X509Certificate])(r)
	rg.Ref(from)
}

func (r *RefX509CertificateImpl) TypedRef(from *RefX509CertificateImpl) {
	rg := (*TypedRef[X509Certificate])(r)
	t := (*TypedRef[X509Certificate])(from)
	rg.TypedRef((*TypedRef[X509Certificate])(t))
}

func (r *RefX509CertificateImpl) Unref() {
	rg := (*TypedRef[X509Certificate])(r)
	rg.Unref()
}

func (r *RefX509CertificateImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefX509Certificate(reference X509Certificate) RefX509Certificate {
	return (RefX509Certificate)(NewTypedRef[X509Certificate](reference))
}

func newRefX509CertificateAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[X509Certificate](reference.(X509Certificate)))
}

func newRefX509CertificateGDExtensionIternalConstructor(reference X509Certificate) RefX509Certificate {
	return newTypedRefGDExtensionIternalConstructor[X509Certificate](reference)
}

var _ RefXMLParser = &RefXMLParserImpl{}
var _ Ref = &RefXMLParserImpl{}

type RefXMLParser interface {
	Ref
	TypedPtr() XMLParser
}

type RefXMLParserImpl TypedRef[XMLParser]

func (r *RefXMLParserImpl) Ptr() RefCounted {
	rg := (*TypedRef[XMLParser])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefXMLParserImpl) TypedPtr() XMLParser {
	rg := (*TypedRef[XMLParser])(r)
	return rg.TypedPtr()
}

func (r *RefXMLParserImpl) Ref(from Ref) {
	rg := (*TypedRef[XMLParser])(r)
	rg.Ref(from)
}

func (r *RefXMLParserImpl) TypedRef(from *RefXMLParserImpl) {
	rg := (*TypedRef[XMLParser])(r)
	t := (*TypedRef[XMLParser])(from)
	rg.TypedRef((*TypedRef[XMLParser])(t))
}

func (r *RefXMLParserImpl) Unref() {
	rg := (*TypedRef[XMLParser])(r)
	rg.Unref()
}

func (r *RefXMLParserImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefXMLParser(reference XMLParser) RefXMLParser {
	return (RefXMLParser)(NewTypedRef[XMLParser](reference))
}

func newRefXMLParserAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[XMLParser](reference.(XMLParser)))
}

func newRefXMLParserGDExtensionIternalConstructor(reference XMLParser) RefXMLParser {
	return newTypedRefGDExtensionIternalConstructor[XMLParser](reference)
}

var _ RefXRInterface = &RefXRInterfaceImpl{}
var _ Ref = &RefXRInterfaceImpl{}

type RefXRInterface interface {
	Ref
	TypedPtr() XRInterface
}

type RefXRInterfaceImpl TypedRef[XRInterface]

func (r *RefXRInterfaceImpl) Ptr() RefCounted {
	rg := (*TypedRef[XRInterface])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefXRInterfaceImpl) TypedPtr() XRInterface {
	rg := (*TypedRef[XRInterface])(r)
	return rg.TypedPtr()
}

func (r *RefXRInterfaceImpl) Ref(from Ref) {
	rg := (*TypedRef[XRInterface])(r)
	rg.Ref(from)
}

func (r *RefXRInterfaceImpl) TypedRef(from *RefXRInterfaceImpl) {
	rg := (*TypedRef[XRInterface])(r)
	t := (*TypedRef[XRInterface])(from)
	rg.TypedRef((*TypedRef[XRInterface])(t))
}

func (r *RefXRInterfaceImpl) Unref() {
	rg := (*TypedRef[XRInterface])(r)
	rg.Unref()
}

func (r *RefXRInterfaceImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefXRInterface(reference XRInterface) RefXRInterface {
	return (RefXRInterface)(NewTypedRef[XRInterface](reference))
}

func newRefXRInterfaceAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[XRInterface](reference.(XRInterface)))
}

func newRefXRInterfaceGDExtensionIternalConstructor(reference XRInterface) RefXRInterface {
	return newTypedRefGDExtensionIternalConstructor[XRInterface](reference)
}

var _ RefXRInterfaceExtension = &RefXRInterfaceExtensionImpl{}
var _ Ref = &RefXRInterfaceExtensionImpl{}

type RefXRInterfaceExtension interface {
	Ref
	TypedPtr() XRInterfaceExtension
}

type RefXRInterfaceExtensionImpl TypedRef[XRInterfaceExtension]

func (r *RefXRInterfaceExtensionImpl) Ptr() RefCounted {
	rg := (*TypedRef[XRInterfaceExtension])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefXRInterfaceExtensionImpl) TypedPtr() XRInterfaceExtension {
	rg := (*TypedRef[XRInterfaceExtension])(r)
	return rg.TypedPtr()
}

func (r *RefXRInterfaceExtensionImpl) Ref(from Ref) {
	rg := (*TypedRef[XRInterfaceExtension])(r)
	rg.Ref(from)
}

func (r *RefXRInterfaceExtensionImpl) TypedRef(from *RefXRInterfaceExtensionImpl) {
	rg := (*TypedRef[XRInterfaceExtension])(r)
	t := (*TypedRef[XRInterfaceExtension])(from)
	rg.TypedRef((*TypedRef[XRInterfaceExtension])(t))
}

func (r *RefXRInterfaceExtensionImpl) Unref() {
	rg := (*TypedRef[XRInterfaceExtension])(r)
	rg.Unref()
}

func (r *RefXRInterfaceExtensionImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefXRInterfaceExtension(reference XRInterfaceExtension) RefXRInterfaceExtension {
	return (RefXRInterfaceExtension)(NewTypedRef[XRInterfaceExtension](reference))
}

func newRefXRInterfaceExtensionAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[XRInterfaceExtension](reference.(XRInterfaceExtension)))
}

func newRefXRInterfaceExtensionGDExtensionIternalConstructor(reference XRInterfaceExtension) RefXRInterfaceExtension {
	return newTypedRefGDExtensionIternalConstructor[XRInterfaceExtension](reference)
}

var _ RefXRPose = &RefXRPoseImpl{}
var _ Ref = &RefXRPoseImpl{}

type RefXRPose interface {
	Ref
	TypedPtr() XRPose
}

type RefXRPoseImpl TypedRef[XRPose]

func (r *RefXRPoseImpl) Ptr() RefCounted {
	rg := (*TypedRef[XRPose])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefXRPoseImpl) TypedPtr() XRPose {
	rg := (*TypedRef[XRPose])(r)
	return rg.TypedPtr()
}

func (r *RefXRPoseImpl) Ref(from Ref) {
	rg := (*TypedRef[XRPose])(r)
	rg.Ref(from)
}

func (r *RefXRPoseImpl) TypedRef(from *RefXRPoseImpl) {
	rg := (*TypedRef[XRPose])(r)
	t := (*TypedRef[XRPose])(from)
	rg.TypedRef((*TypedRef[XRPose])(t))
}

func (r *RefXRPoseImpl) Unref() {
	rg := (*TypedRef[XRPose])(r)
	rg.Unref()
}

func (r *RefXRPoseImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefXRPose(reference XRPose) RefXRPose {
	return (RefXRPose)(NewTypedRef[XRPose](reference))
}

func newRefXRPoseAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[XRPose](reference.(XRPose)))
}

func newRefXRPoseGDExtensionIternalConstructor(reference XRPose) RefXRPose {
	return newTypedRefGDExtensionIternalConstructor[XRPose](reference)
}

var _ RefXRPositionalTracker = &RefXRPositionalTrackerImpl{}
var _ Ref = &RefXRPositionalTrackerImpl{}

type RefXRPositionalTracker interface {
	Ref
	TypedPtr() XRPositionalTracker
}

type RefXRPositionalTrackerImpl TypedRef[XRPositionalTracker]

func (r *RefXRPositionalTrackerImpl) Ptr() RefCounted {
	rg := (*TypedRef[XRPositionalTracker])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefXRPositionalTrackerImpl) TypedPtr() XRPositionalTracker {
	rg := (*TypedRef[XRPositionalTracker])(r)
	return rg.TypedPtr()
}

func (r *RefXRPositionalTrackerImpl) Ref(from Ref) {
	rg := (*TypedRef[XRPositionalTracker])(r)
	rg.Ref(from)
}

func (r *RefXRPositionalTrackerImpl) TypedRef(from *RefXRPositionalTrackerImpl) {
	rg := (*TypedRef[XRPositionalTracker])(r)
	t := (*TypedRef[XRPositionalTracker])(from)
	rg.TypedRef((*TypedRef[XRPositionalTracker])(t))
}

func (r *RefXRPositionalTrackerImpl) Unref() {
	rg := (*TypedRef[XRPositionalTracker])(r)
	rg.Unref()
}

func (r *RefXRPositionalTrackerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefXRPositionalTracker(reference XRPositionalTracker) RefXRPositionalTracker {
	return (RefXRPositionalTracker)(NewTypedRef[XRPositionalTracker](reference))
}

func newRefXRPositionalTrackerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[XRPositionalTracker](reference.(XRPositionalTracker)))
}

func newRefXRPositionalTrackerGDExtensionIternalConstructor(reference XRPositionalTracker) RefXRPositionalTracker {
	return newTypedRefGDExtensionIternalConstructor[XRPositionalTracker](reference)
}

var _ RefZIPPacker = &RefZIPPackerImpl{}
var _ Ref = &RefZIPPackerImpl{}

type RefZIPPacker interface {
	Ref
	TypedPtr() ZIPPacker
}

type RefZIPPackerImpl TypedRef[ZIPPacker]

func (r *RefZIPPackerImpl) Ptr() RefCounted {
	rg := (*TypedRef[ZIPPacker])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefZIPPackerImpl) TypedPtr() ZIPPacker {
	rg := (*TypedRef[ZIPPacker])(r)
	return rg.TypedPtr()
}

func (r *RefZIPPackerImpl) Ref(from Ref) {
	rg := (*TypedRef[ZIPPacker])(r)
	rg.Ref(from)
}

func (r *RefZIPPackerImpl) TypedRef(from *RefZIPPackerImpl) {
	rg := (*TypedRef[ZIPPacker])(r)
	t := (*TypedRef[ZIPPacker])(from)
	rg.TypedRef((*TypedRef[ZIPPacker])(t))
}

func (r *RefZIPPackerImpl) Unref() {
	rg := (*TypedRef[ZIPPacker])(r)
	rg.Unref()
}

func (r *RefZIPPackerImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefZIPPacker(reference ZIPPacker) RefZIPPacker {
	return (RefZIPPacker)(NewTypedRef[ZIPPacker](reference))
}

func newRefZIPPackerAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ZIPPacker](reference.(ZIPPacker)))
}

func newRefZIPPackerGDExtensionIternalConstructor(reference ZIPPacker) RefZIPPacker {
	return newTypedRefGDExtensionIternalConstructor[ZIPPacker](reference)
}

var _ RefZIPReader = &RefZIPReaderImpl{}
var _ Ref = &RefZIPReaderImpl{}

type RefZIPReader interface {
	Ref
	TypedPtr() ZIPReader
}

type RefZIPReaderImpl TypedRef[ZIPReader]

func (r *RefZIPReaderImpl) Ptr() RefCounted {
	rg := (*TypedRef[ZIPReader])(r)
	return rg.Ptr().(RefCounted)
}

func (r *RefZIPReaderImpl) TypedPtr() ZIPReader {
	rg := (*TypedRef[ZIPReader])(r)
	return rg.TypedPtr()
}

func (r *RefZIPReaderImpl) Ref(from Ref) {
	rg := (*TypedRef[ZIPReader])(r)
	rg.Ref(from)
}

func (r *RefZIPReaderImpl) TypedRef(from *RefZIPReaderImpl) {
	rg := (*TypedRef[ZIPReader])(r)
	t := (*TypedRef[ZIPReader])(from)
	rg.TypedRef((*TypedRef[ZIPReader])(t))
}

func (r *RefZIPReaderImpl) Unref() {
	rg := (*TypedRef[ZIPReader])(r)
	rg.Unref()
}

func (r *RefZIPReaderImpl) IsValid() bool {
	return r != nil && r.reference != nil
}

func NewRefZIPReader(reference ZIPReader) RefZIPReader {
	return (RefZIPReader)(NewTypedRef[ZIPReader](reference))
}

func newRefZIPReaderAsRef(reference RefCounted) Ref {
	return (Ref)(newTypedRefGDExtensionIternalConstructor[ZIPReader](reference.(ZIPReader)))
}

func newRefZIPReaderGDExtensionIternalConstructor(reference ZIPReader) RefZIPReader {
	return newTypedRefGDExtensionIternalConstructor[ZIPReader](reference)
}
func registerEngineClassRefs() {
	gdClassRefConstructors.Clear()
	gdClassRefConstructors.Set("AESContext", newRefAESContextAsRef)
	gdClassRefConstructors.Set("AStar2D", newRefAStar2DAsRef)
	gdClassRefConstructors.Set("AStar3D", newRefAStar3DAsRef)
	gdClassRefConstructors.Set("AStarGrid2D", newRefAStarGrid2DAsRef)
	gdClassRefConstructors.Set("AnimatedTexture", newRefAnimatedTextureAsRef)
	gdClassRefConstructors.Set("Animation", newRefAnimationAsRef)
	gdClassRefConstructors.Set("AnimationLibrary", newRefAnimationLibraryAsRef)
	gdClassRefConstructors.Set("AnimationNode", newRefAnimationNodeAsRef)
	gdClassRefConstructors.Set("AnimationNodeAdd2", newRefAnimationNodeAdd2AsRef)
	gdClassRefConstructors.Set("AnimationNodeAdd3", newRefAnimationNodeAdd3AsRef)
	gdClassRefConstructors.Set("AnimationNodeAnimation", newRefAnimationNodeAnimationAsRef)
	gdClassRefConstructors.Set("AnimationNodeBlend2", newRefAnimationNodeBlend2AsRef)
	gdClassRefConstructors.Set("AnimationNodeBlend3", newRefAnimationNodeBlend3AsRef)
	gdClassRefConstructors.Set("AnimationNodeBlendSpace1D", newRefAnimationNodeBlendSpace1DAsRef)
	gdClassRefConstructors.Set("AnimationNodeBlendSpace2D", newRefAnimationNodeBlendSpace2DAsRef)
	gdClassRefConstructors.Set("AnimationNodeBlendTree", newRefAnimationNodeBlendTreeAsRef)
	gdClassRefConstructors.Set("AnimationNodeOneShot", newRefAnimationNodeOneShotAsRef)
	gdClassRefConstructors.Set("AnimationNodeOutput", newRefAnimationNodeOutputAsRef)
	gdClassRefConstructors.Set("AnimationNodeStateMachine", newRefAnimationNodeStateMachineAsRef)
	gdClassRefConstructors.Set("AnimationNodeStateMachinePlayback", newRefAnimationNodeStateMachinePlaybackAsRef)
	gdClassRefConstructors.Set("AnimationNodeStateMachineTransition", newRefAnimationNodeStateMachineTransitionAsRef)
	gdClassRefConstructors.Set("AnimationNodeSub2", newRefAnimationNodeSub2AsRef)
	gdClassRefConstructors.Set("AnimationNodeSync", newRefAnimationNodeSyncAsRef)
	gdClassRefConstructors.Set("AnimationNodeTimeScale", newRefAnimationNodeTimeScaleAsRef)
	gdClassRefConstructors.Set("AnimationNodeTimeSeek", newRefAnimationNodeTimeSeekAsRef)
	gdClassRefConstructors.Set("AnimationNodeTransition", newRefAnimationNodeTransitionAsRef)
	gdClassRefConstructors.Set("AnimationRootNode", newRefAnimationRootNodeAsRef)
	gdClassRefConstructors.Set("ArrayMesh", newRefArrayMeshAsRef)
	gdClassRefConstructors.Set("ArrayOccluder3D", newRefArrayOccluder3DAsRef)
	gdClassRefConstructors.Set("AtlasTexture", newRefAtlasTextureAsRef)
	gdClassRefConstructors.Set("AudioBusLayout", newRefAudioBusLayoutAsRef)
	gdClassRefConstructors.Set("AudioEffect", newRefAudioEffectAsRef)
	gdClassRefConstructors.Set("AudioEffectAmplify", newRefAudioEffectAmplifyAsRef)
	gdClassRefConstructors.Set("AudioEffectBandLimitFilter", newRefAudioEffectBandLimitFilterAsRef)
	gdClassRefConstructors.Set("AudioEffectBandPassFilter", newRefAudioEffectBandPassFilterAsRef)
	gdClassRefConstructors.Set("AudioEffectCapture", newRefAudioEffectCaptureAsRef)
	gdClassRefConstructors.Set("AudioEffectChorus", newRefAudioEffectChorusAsRef)
	gdClassRefConstructors.Set("AudioEffectCompressor", newRefAudioEffectCompressorAsRef)
	gdClassRefConstructors.Set("AudioEffectDelay", newRefAudioEffectDelayAsRef)
	gdClassRefConstructors.Set("AudioEffectDistortion", newRefAudioEffectDistortionAsRef)
	gdClassRefConstructors.Set("AudioEffectEQ", newRefAudioEffectEQAsRef)
	gdClassRefConstructors.Set("AudioEffectEQ10", newRefAudioEffectEQ10AsRef)
	gdClassRefConstructors.Set("AudioEffectEQ21", newRefAudioEffectEQ21AsRef)
	gdClassRefConstructors.Set("AudioEffectEQ6", newRefAudioEffectEQ6AsRef)
	gdClassRefConstructors.Set("AudioEffectFilter", newRefAudioEffectFilterAsRef)
	gdClassRefConstructors.Set("AudioEffectHighPassFilter", newRefAudioEffectHighPassFilterAsRef)
	gdClassRefConstructors.Set("AudioEffectHighShelfFilter", newRefAudioEffectHighShelfFilterAsRef)
	gdClassRefConstructors.Set("AudioEffectInstance", newRefAudioEffectInstanceAsRef)
	gdClassRefConstructors.Set("AudioEffectLimiter", newRefAudioEffectLimiterAsRef)
	gdClassRefConstructors.Set("AudioEffectLowPassFilter", newRefAudioEffectLowPassFilterAsRef)
	gdClassRefConstructors.Set("AudioEffectLowShelfFilter", newRefAudioEffectLowShelfFilterAsRef)
	gdClassRefConstructors.Set("AudioEffectNotchFilter", newRefAudioEffectNotchFilterAsRef)
	gdClassRefConstructors.Set("AudioEffectPanner", newRefAudioEffectPannerAsRef)
	gdClassRefConstructors.Set("AudioEffectPhaser", newRefAudioEffectPhaserAsRef)
	gdClassRefConstructors.Set("AudioEffectPitchShift", newRefAudioEffectPitchShiftAsRef)
	gdClassRefConstructors.Set("AudioEffectRecord", newRefAudioEffectRecordAsRef)
	gdClassRefConstructors.Set("AudioEffectReverb", newRefAudioEffectReverbAsRef)
	gdClassRefConstructors.Set("AudioEffectSpectrumAnalyzer", newRefAudioEffectSpectrumAnalyzerAsRef)
	gdClassRefConstructors.Set("AudioEffectSpectrumAnalyzerInstance", newRefAudioEffectSpectrumAnalyzerInstanceAsRef)
	gdClassRefConstructors.Set("AudioEffectStereoEnhance", newRefAudioEffectStereoEnhanceAsRef)
	gdClassRefConstructors.Set("AudioStream", newRefAudioStreamAsRef)
	gdClassRefConstructors.Set("AudioStreamGenerator", newRefAudioStreamGeneratorAsRef)
	gdClassRefConstructors.Set("AudioStreamGeneratorPlayback", newRefAudioStreamGeneratorPlaybackAsRef)
	gdClassRefConstructors.Set("AudioStreamMP3", newRefAudioStreamMP3AsRef)
	gdClassRefConstructors.Set("AudioStreamMicrophone", newRefAudioStreamMicrophoneAsRef)
	gdClassRefConstructors.Set("AudioStreamOggVorbis", newRefAudioStreamOggVorbisAsRef)
	gdClassRefConstructors.Set("AudioStreamPlayback", newRefAudioStreamPlaybackAsRef)
	gdClassRefConstructors.Set("AudioStreamPlaybackOggVorbis", newRefAudioStreamPlaybackOggVorbisAsRef)
	gdClassRefConstructors.Set("AudioStreamPlaybackPolyphonic", newRefAudioStreamPlaybackPolyphonicAsRef)
	gdClassRefConstructors.Set("AudioStreamPlaybackResampled", newRefAudioStreamPlaybackResampledAsRef)
	gdClassRefConstructors.Set("AudioStreamPolyphonic", newRefAudioStreamPolyphonicAsRef)
	gdClassRefConstructors.Set("AudioStreamRandomizer", newRefAudioStreamRandomizerAsRef)
	gdClassRefConstructors.Set("AudioStreamWAV", newRefAudioStreamWAVAsRef)
	gdClassRefConstructors.Set("BaseMaterial3D", newRefBaseMaterial3DAsRef)
	gdClassRefConstructors.Set("BitMap", newRefBitMapAsRef)
	gdClassRefConstructors.Set("BoneMap", newRefBoneMapAsRef)
	gdClassRefConstructors.Set("BoxMesh", newRefBoxMeshAsRef)
	gdClassRefConstructors.Set("BoxOccluder3D", newRefBoxOccluder3DAsRef)
	gdClassRefConstructors.Set("BoxShape3D", newRefBoxShape3DAsRef)
	gdClassRefConstructors.Set("ButtonGroup", newRefButtonGroupAsRef)
	gdClassRefConstructors.Set("CallbackTweener", newRefCallbackTweenerAsRef)
	gdClassRefConstructors.Set("CameraAttributes", newRefCameraAttributesAsRef)
	gdClassRefConstructors.Set("CameraAttributesPhysical", newRefCameraAttributesPhysicalAsRef)
	gdClassRefConstructors.Set("CameraAttributesPractical", newRefCameraAttributesPracticalAsRef)
	gdClassRefConstructors.Set("CameraFeed", newRefCameraFeedAsRef)
	gdClassRefConstructors.Set("CameraTexture", newRefCameraTextureAsRef)
	gdClassRefConstructors.Set("CanvasItemMaterial", newRefCanvasItemMaterialAsRef)
	gdClassRefConstructors.Set("CanvasTexture", newRefCanvasTextureAsRef)
	gdClassRefConstructors.Set("CapsuleMesh", newRefCapsuleMeshAsRef)
	gdClassRefConstructors.Set("CapsuleShape2D", newRefCapsuleShape2DAsRef)
	gdClassRefConstructors.Set("CapsuleShape3D", newRefCapsuleShape3DAsRef)
	gdClassRefConstructors.Set("CharFXTransform", newRefCharFXTransformAsRef)
	gdClassRefConstructors.Set("CircleShape2D", newRefCircleShape2DAsRef)
	gdClassRefConstructors.Set("CodeHighlighter", newRefCodeHighlighterAsRef)
	gdClassRefConstructors.Set("CompressedCubemap", newRefCompressedCubemapAsRef)
	gdClassRefConstructors.Set("CompressedCubemapArray", newRefCompressedCubemapArrayAsRef)
	gdClassRefConstructors.Set("CompressedTexture2D", newRefCompressedTexture2DAsRef)
	gdClassRefConstructors.Set("CompressedTexture2DArray", newRefCompressedTexture2DArrayAsRef)
	gdClassRefConstructors.Set("CompressedTexture3D", newRefCompressedTexture3DAsRef)
	gdClassRefConstructors.Set("CompressedTextureLayered", newRefCompressedTextureLayeredAsRef)
	gdClassRefConstructors.Set("ConcavePolygonShape2D", newRefConcavePolygonShape2DAsRef)
	gdClassRefConstructors.Set("ConcavePolygonShape3D", newRefConcavePolygonShape3DAsRef)
	gdClassRefConstructors.Set("ConfigFile", newRefConfigFileAsRef)
	gdClassRefConstructors.Set("ConvexPolygonShape2D", newRefConvexPolygonShape2DAsRef)
	gdClassRefConstructors.Set("ConvexPolygonShape3D", newRefConvexPolygonShape3DAsRef)
	gdClassRefConstructors.Set("Crypto", newRefCryptoAsRef)
	gdClassRefConstructors.Set("CryptoKey", newRefCryptoKeyAsRef)
	gdClassRefConstructors.Set("Cubemap", newRefCubemapAsRef)
	gdClassRefConstructors.Set("CubemapArray", newRefCubemapArrayAsRef)
	gdClassRefConstructors.Set("Curve", newRefCurveAsRef)
	gdClassRefConstructors.Set("Curve2D", newRefCurve2DAsRef)
	gdClassRefConstructors.Set("Curve3D", newRefCurve3DAsRef)
	gdClassRefConstructors.Set("CurveTexture", newRefCurveTextureAsRef)
	gdClassRefConstructors.Set("CurveXYZTexture", newRefCurveXYZTextureAsRef)
	gdClassRefConstructors.Set("CylinderMesh", newRefCylinderMeshAsRef)
	gdClassRefConstructors.Set("CylinderShape3D", newRefCylinderShape3DAsRef)
	gdClassRefConstructors.Set("DTLSServer", newRefDTLSServerAsRef)
	gdClassRefConstructors.Set("DirAccess", newRefDirAccessAsRef)
	gdClassRefConstructors.Set("ENetConnection", newRefENetConnectionAsRef)
	gdClassRefConstructors.Set("ENetMultiplayerPeer", newRefENetMultiplayerPeerAsRef)
	gdClassRefConstructors.Set("ENetPacketPeer", newRefENetPacketPeerAsRef)
	gdClassRefConstructors.Set("EditorDebuggerPlugin", newRefEditorDebuggerPluginAsRef)
	gdClassRefConstructors.Set("EditorDebuggerSession", newRefEditorDebuggerSessionAsRef)
	gdClassRefConstructors.Set("EditorExportPlatform", newRefEditorExportPlatformAsRef)
	gdClassRefConstructors.Set("EditorExportPlatformAndroid", newRefEditorExportPlatformAndroidAsRef)
	gdClassRefConstructors.Set("EditorExportPlatformIOS", newRefEditorExportPlatformIOSAsRef)
	gdClassRefConstructors.Set("EditorExportPlatformLinuxBSD", newRefEditorExportPlatformLinuxBSDAsRef)
	gdClassRefConstructors.Set("EditorExportPlatformMacOS", newRefEditorExportPlatformMacOSAsRef)
	gdClassRefConstructors.Set("EditorExportPlatformPC", newRefEditorExportPlatformPCAsRef)
	gdClassRefConstructors.Set("EditorExportPlatformWeb", newRefEditorExportPlatformWebAsRef)
	gdClassRefConstructors.Set("EditorExportPlatformWindows", newRefEditorExportPlatformWindowsAsRef)
	gdClassRefConstructors.Set("EditorExportPlugin", newRefEditorExportPluginAsRef)
	gdClassRefConstructors.Set("EditorFeatureProfile", newRefEditorFeatureProfileAsRef)
	gdClassRefConstructors.Set("EditorFileSystemImportFormatSupportQuery", newRefEditorFileSystemImportFormatSupportQueryAsRef)
	gdClassRefConstructors.Set("EditorImportPlugin", newRefEditorImportPluginAsRef)
	gdClassRefConstructors.Set("EditorInspectorPlugin", newRefEditorInspectorPluginAsRef)
	gdClassRefConstructors.Set("EditorNode3DGizmo", newRefEditorNode3DGizmoAsRef)
	gdClassRefConstructors.Set("EditorNode3DGizmoPlugin", newRefEditorNode3DGizmoPluginAsRef)
	gdClassRefConstructors.Set("EditorResourceConversionPlugin", newRefEditorResourceConversionPluginAsRef)
	gdClassRefConstructors.Set("EditorResourcePreviewGenerator", newRefEditorResourcePreviewGeneratorAsRef)
	gdClassRefConstructors.Set("EditorResourceTooltipPlugin", newRefEditorResourceTooltipPluginAsRef)
	gdClassRefConstructors.Set("EditorSceneFormatImporter", newRefEditorSceneFormatImporterAsRef)
	gdClassRefConstructors.Set("EditorSceneFormatImporterBlend", newRefEditorSceneFormatImporterBlendAsRef)
	gdClassRefConstructors.Set("EditorSceneFormatImporterFBX", newRefEditorSceneFormatImporterFBXAsRef)
	gdClassRefConstructors.Set("EditorSceneFormatImporterGLTF", newRefEditorSceneFormatImporterGLTFAsRef)
	gdClassRefConstructors.Set("EditorScenePostImport", newRefEditorScenePostImportAsRef)
	gdClassRefConstructors.Set("EditorScenePostImportPlugin", newRefEditorScenePostImportPluginAsRef)
	gdClassRefConstructors.Set("EditorScript", newRefEditorScriptAsRef)
	gdClassRefConstructors.Set("EditorSettings", newRefEditorSettingsAsRef)
	gdClassRefConstructors.Set("EditorSyntaxHighlighter", newRefEditorSyntaxHighlighterAsRef)
	gdClassRefConstructors.Set("EditorTranslationParserPlugin", newRefEditorTranslationParserPluginAsRef)
	gdClassRefConstructors.Set("EncodedObjectAsID", newRefEncodedObjectAsIDAsRef)
	gdClassRefConstructors.Set("EngineProfiler", newRefEngineProfilerAsRef)
	gdClassRefConstructors.Set("Environment", newRefEnvironmentAsRef)
	gdClassRefConstructors.Set("Expression", newRefExpressionAsRef)
	gdClassRefConstructors.Set("FastNoiseLite", newRefFastNoiseLiteAsRef)
	gdClassRefConstructors.Set("FileAccess", newRefFileAccessAsRef)
	gdClassRefConstructors.Set("FogMaterial", newRefFogMaterialAsRef)
	gdClassRefConstructors.Set("Font", newRefFontAsRef)
	gdClassRefConstructors.Set("FontFile", newRefFontFileAsRef)
	gdClassRefConstructors.Set("FontVariation", newRefFontVariationAsRef)
	gdClassRefConstructors.Set("GDExtension", newRefGDExtensionAsRef)
	gdClassRefConstructors.Set("GDScript", newRefGDScriptAsRef)
	gdClassRefConstructors.Set("GLTFAccessor", newRefGLTFAccessorAsRef)
	gdClassRefConstructors.Set("GLTFAnimation", newRefGLTFAnimationAsRef)
	gdClassRefConstructors.Set("GLTFBufferView", newRefGLTFBufferViewAsRef)
	gdClassRefConstructors.Set("GLTFCamera", newRefGLTFCameraAsRef)
	gdClassRefConstructors.Set("GLTFDocument", newRefGLTFDocumentAsRef)
	gdClassRefConstructors.Set("GLTFDocumentExtension", newRefGLTFDocumentExtensionAsRef)
	gdClassRefConstructors.Set("GLTFDocumentExtensionConvertImporterMesh", newRefGLTFDocumentExtensionConvertImporterMeshAsRef)
	gdClassRefConstructors.Set("GLTFLight", newRefGLTFLightAsRef)
	gdClassRefConstructors.Set("GLTFMesh", newRefGLTFMeshAsRef)
	gdClassRefConstructors.Set("GLTFNode", newRefGLTFNodeAsRef)
	gdClassRefConstructors.Set("GLTFPhysicsBody", newRefGLTFPhysicsBodyAsRef)
	gdClassRefConstructors.Set("GLTFPhysicsShape", newRefGLTFPhysicsShapeAsRef)
	gdClassRefConstructors.Set("GLTFSkeleton", newRefGLTFSkeletonAsRef)
	gdClassRefConstructors.Set("GLTFSkin", newRefGLTFSkinAsRef)
	gdClassRefConstructors.Set("GLTFSpecGloss", newRefGLTFSpecGlossAsRef)
	gdClassRefConstructors.Set("GLTFState", newRefGLTFStateAsRef)
	gdClassRefConstructors.Set("GLTFTexture", newRefGLTFTextureAsRef)
	gdClassRefConstructors.Set("GLTFTextureSampler", newRefGLTFTextureSamplerAsRef)
	gdClassRefConstructors.Set("Gradient", newRefGradientAsRef)
	gdClassRefConstructors.Set("GradientTexture1D", newRefGradientTexture1DAsRef)
	gdClassRefConstructors.Set("GradientTexture2D", newRefGradientTexture2DAsRef)
	gdClassRefConstructors.Set("HMACContext", newRefHMACContextAsRef)
	gdClassRefConstructors.Set("HTTPClient", newRefHTTPClientAsRef)
	gdClassRefConstructors.Set("HashingContext", newRefHashingContextAsRef)
	gdClassRefConstructors.Set("HeightMapShape3D", newRefHeightMapShape3DAsRef)
	gdClassRefConstructors.Set("Image", newRefImageAsRef)
	gdClassRefConstructors.Set("ImageFormatLoader", newRefImageFormatLoaderAsRef)
	gdClassRefConstructors.Set("ImageFormatLoaderExtension", newRefImageFormatLoaderExtensionAsRef)
	gdClassRefConstructors.Set("ImageTexture", newRefImageTextureAsRef)
	gdClassRefConstructors.Set("ImageTexture3D", newRefImageTexture3DAsRef)
	gdClassRefConstructors.Set("ImageTextureLayered", newRefImageTextureLayeredAsRef)
	gdClassRefConstructors.Set("ImmediateMesh", newRefImmediateMeshAsRef)
	gdClassRefConstructors.Set("ImporterMesh", newRefImporterMeshAsRef)
	gdClassRefConstructors.Set("InputEvent", newRefInputEventAsRef)
	gdClassRefConstructors.Set("InputEventAction", newRefInputEventActionAsRef)
	gdClassRefConstructors.Set("InputEventFromWindow", newRefInputEventFromWindowAsRef)
	gdClassRefConstructors.Set("InputEventGesture", newRefInputEventGestureAsRef)
	gdClassRefConstructors.Set("InputEventJoypadButton", newRefInputEventJoypadButtonAsRef)
	gdClassRefConstructors.Set("InputEventJoypadMotion", newRefInputEventJoypadMotionAsRef)
	gdClassRefConstructors.Set("InputEventKey", newRefInputEventKeyAsRef)
	gdClassRefConstructors.Set("InputEventMIDI", newRefInputEventMIDIAsRef)
	gdClassRefConstructors.Set("InputEventMagnifyGesture", newRefInputEventMagnifyGestureAsRef)
	gdClassRefConstructors.Set("InputEventMouse", newRefInputEventMouseAsRef)
	gdClassRefConstructors.Set("InputEventMouseButton", newRefInputEventMouseButtonAsRef)
	gdClassRefConstructors.Set("InputEventMouseMotion", newRefInputEventMouseMotionAsRef)
	gdClassRefConstructors.Set("InputEventPanGesture", newRefInputEventPanGestureAsRef)
	gdClassRefConstructors.Set("InputEventScreenDrag", newRefInputEventScreenDragAsRef)
	gdClassRefConstructors.Set("InputEventScreenTouch", newRefInputEventScreenTouchAsRef)
	gdClassRefConstructors.Set("InputEventShortcut", newRefInputEventShortcutAsRef)
	gdClassRefConstructors.Set("InputEventWithModifiers", newRefInputEventWithModifiersAsRef)
	gdClassRefConstructors.Set("IntervalTweener", newRefIntervalTweenerAsRef)
	gdClassRefConstructors.Set("JSON", newRefJSONAsRef)
	gdClassRefConstructors.Set("JavaClass", newRefJavaClassAsRef)
	gdClassRefConstructors.Set("JavaScriptObject", newRefJavaScriptObjectAsRef)
	gdClassRefConstructors.Set("KinematicCollision2D", newRefKinematicCollision2DAsRef)
	gdClassRefConstructors.Set("KinematicCollision3D", newRefKinematicCollision3DAsRef)
	gdClassRefConstructors.Set("LabelSettings", newRefLabelSettingsAsRef)
	gdClassRefConstructors.Set("LightmapGIData", newRefLightmapGIDataAsRef)
	gdClassRefConstructors.Set("Lightmapper", newRefLightmapperAsRef)
	gdClassRefConstructors.Set("LightmapperRD", newRefLightmapperRDAsRef)
	gdClassRefConstructors.Set("Material", newRefMaterialAsRef)
	gdClassRefConstructors.Set("Mesh", newRefMeshAsRef)
	gdClassRefConstructors.Set("MeshConvexDecompositionSettings", newRefMeshConvexDecompositionSettingsAsRef)
	gdClassRefConstructors.Set("MeshDataTool", newRefMeshDataToolAsRef)
	gdClassRefConstructors.Set("MeshLibrary", newRefMeshLibraryAsRef)
	gdClassRefConstructors.Set("MeshTexture", newRefMeshTextureAsRef)
	gdClassRefConstructors.Set("MethodTweener", newRefMethodTweenerAsRef)
	gdClassRefConstructors.Set("MissingResource", newRefMissingResourceAsRef)
	gdClassRefConstructors.Set("MobileVRInterface", newRefMobileVRInterfaceAsRef)
	gdClassRefConstructors.Set("MultiMesh", newRefMultiMeshAsRef)
	gdClassRefConstructors.Set("MultiplayerAPI", newRefMultiplayerAPIAsRef)
	gdClassRefConstructors.Set("MultiplayerAPIExtension", newRefMultiplayerAPIExtensionAsRef)
	gdClassRefConstructors.Set("MultiplayerPeer", newRefMultiplayerPeerAsRef)
	gdClassRefConstructors.Set("MultiplayerPeerExtension", newRefMultiplayerPeerExtensionAsRef)
	gdClassRefConstructors.Set("Mutex", newRefMutexAsRef)
	gdClassRefConstructors.Set("NavigationMesh", newRefNavigationMeshAsRef)
	gdClassRefConstructors.Set("NavigationMeshSourceGeometryData2D", newRefNavigationMeshSourceGeometryData2DAsRef)
	gdClassRefConstructors.Set("NavigationMeshSourceGeometryData3D", newRefNavigationMeshSourceGeometryData3DAsRef)
	gdClassRefConstructors.Set("NavigationPathQueryParameters2D", newRefNavigationPathQueryParameters2DAsRef)
	gdClassRefConstructors.Set("NavigationPathQueryParameters3D", newRefNavigationPathQueryParameters3DAsRef)
	gdClassRefConstructors.Set("NavigationPathQueryResult2D", newRefNavigationPathQueryResult2DAsRef)
	gdClassRefConstructors.Set("NavigationPathQueryResult3D", newRefNavigationPathQueryResult3DAsRef)
	gdClassRefConstructors.Set("NavigationPolygon", newRefNavigationPolygonAsRef)
	gdClassRefConstructors.Set("Node3DGizmo", newRefNode3DGizmoAsRef)
	gdClassRefConstructors.Set("Noise", newRefNoiseAsRef)
	gdClassRefConstructors.Set("NoiseTexture2D", newRefNoiseTexture2DAsRef)
	gdClassRefConstructors.Set("NoiseTexture3D", newRefNoiseTexture3DAsRef)
	gdClassRefConstructors.Set("ORMMaterial3D", newRefORMMaterial3DAsRef)
	gdClassRefConstructors.Set("Occluder3D", newRefOccluder3DAsRef)
	gdClassRefConstructors.Set("OccluderPolygon2D", newRefOccluderPolygon2DAsRef)
	gdClassRefConstructors.Set("OfflineMultiplayerPeer", newRefOfflineMultiplayerPeerAsRef)
	gdClassRefConstructors.Set("OggPacketSequence", newRefOggPacketSequenceAsRef)
	gdClassRefConstructors.Set("OggPacketSequencePlayback", newRefOggPacketSequencePlaybackAsRef)
	gdClassRefConstructors.Set("OpenXRAPIExtension", newRefOpenXRAPIExtensionAsRef)
	gdClassRefConstructors.Set("OpenXRAction", newRefOpenXRActionAsRef)
	gdClassRefConstructors.Set("OpenXRActionMap", newRefOpenXRActionMapAsRef)
	gdClassRefConstructors.Set("OpenXRActionSet", newRefOpenXRActionSetAsRef)
	gdClassRefConstructors.Set("OpenXRIPBinding", newRefOpenXRIPBindingAsRef)
	gdClassRefConstructors.Set("OpenXRInteractionProfile", newRefOpenXRInteractionProfileAsRef)
	gdClassRefConstructors.Set("OpenXRInterface", newRefOpenXRInterfaceAsRef)
	gdClassRefConstructors.Set("OptimizedTranslation", newRefOptimizedTranslationAsRef)
	gdClassRefConstructors.Set("PCKPacker", newRefPCKPackerAsRef)
	gdClassRefConstructors.Set("PackedDataContainer", newRefPackedDataContainerAsRef)
	gdClassRefConstructors.Set("PackedDataContainerRef", newRefPackedDataContainerRefAsRef)
	gdClassRefConstructors.Set("PackedScene", newRefPackedSceneAsRef)
	gdClassRefConstructors.Set("PacketPeer", newRefPacketPeerAsRef)
	gdClassRefConstructors.Set("PacketPeerDTLS", newRefPacketPeerDTLSAsRef)
	gdClassRefConstructors.Set("PacketPeerExtension", newRefPacketPeerExtensionAsRef)
	gdClassRefConstructors.Set("PacketPeerStream", newRefPacketPeerStreamAsRef)
	gdClassRefConstructors.Set("PacketPeerUDP", newRefPacketPeerUDPAsRef)
	gdClassRefConstructors.Set("PanoramaSkyMaterial", newRefPanoramaSkyMaterialAsRef)
	gdClassRefConstructors.Set("ParticleProcessMaterial", newRefParticleProcessMaterialAsRef)
	gdClassRefConstructors.Set("PhysicalSkyMaterial", newRefPhysicalSkyMaterialAsRef)
	gdClassRefConstructors.Set("PhysicsMaterial", newRefPhysicsMaterialAsRef)
	gdClassRefConstructors.Set("PhysicsPointQueryParameters2D", newRefPhysicsPointQueryParameters2DAsRef)
	gdClassRefConstructors.Set("PhysicsPointQueryParameters3D", newRefPhysicsPointQueryParameters3DAsRef)
	gdClassRefConstructors.Set("PhysicsRayQueryParameters2D", newRefPhysicsRayQueryParameters2DAsRef)
	gdClassRefConstructors.Set("PhysicsRayQueryParameters3D", newRefPhysicsRayQueryParameters3DAsRef)
	gdClassRefConstructors.Set("PhysicsShapeQueryParameters2D", newRefPhysicsShapeQueryParameters2DAsRef)
	gdClassRefConstructors.Set("PhysicsShapeQueryParameters3D", newRefPhysicsShapeQueryParameters3DAsRef)
	gdClassRefConstructors.Set("PhysicsTestMotionParameters2D", newRefPhysicsTestMotionParameters2DAsRef)
	gdClassRefConstructors.Set("PhysicsTestMotionParameters3D", newRefPhysicsTestMotionParameters3DAsRef)
	gdClassRefConstructors.Set("PhysicsTestMotionResult2D", newRefPhysicsTestMotionResult2DAsRef)
	gdClassRefConstructors.Set("PhysicsTestMotionResult3D", newRefPhysicsTestMotionResult3DAsRef)
	gdClassRefConstructors.Set("PlaceholderCubemap", newRefPlaceholderCubemapAsRef)
	gdClassRefConstructors.Set("PlaceholderCubemapArray", newRefPlaceholderCubemapArrayAsRef)
	gdClassRefConstructors.Set("PlaceholderMaterial", newRefPlaceholderMaterialAsRef)
	gdClassRefConstructors.Set("PlaceholderMesh", newRefPlaceholderMeshAsRef)
	gdClassRefConstructors.Set("PlaceholderTexture2D", newRefPlaceholderTexture2DAsRef)
	gdClassRefConstructors.Set("PlaceholderTexture2DArray", newRefPlaceholderTexture2DArrayAsRef)
	gdClassRefConstructors.Set("PlaceholderTexture3D", newRefPlaceholderTexture3DAsRef)
	gdClassRefConstructors.Set("PlaceholderTextureLayered", newRefPlaceholderTextureLayeredAsRef)
	gdClassRefConstructors.Set("PlaneMesh", newRefPlaneMeshAsRef)
	gdClassRefConstructors.Set("PointMesh", newRefPointMeshAsRef)
	gdClassRefConstructors.Set("PolygonOccluder3D", newRefPolygonOccluder3DAsRef)
	gdClassRefConstructors.Set("PolygonPathFinder", newRefPolygonPathFinderAsRef)
	gdClassRefConstructors.Set("PortableCompressedTexture2D", newRefPortableCompressedTexture2DAsRef)
	gdClassRefConstructors.Set("PrimitiveMesh", newRefPrimitiveMeshAsRef)
	gdClassRefConstructors.Set("PrismMesh", newRefPrismMeshAsRef)
	gdClassRefConstructors.Set("ProceduralSkyMaterial", newRefProceduralSkyMaterialAsRef)
	gdClassRefConstructors.Set("PropertyTweener", newRefPropertyTweenerAsRef)
	gdClassRefConstructors.Set("QuadMesh", newRefQuadMeshAsRef)
	gdClassRefConstructors.Set("QuadOccluder3D", newRefQuadOccluder3DAsRef)
	gdClassRefConstructors.Set("RDAttachmentFormat", newRefRDAttachmentFormatAsRef)
	gdClassRefConstructors.Set("RDFramebufferPass", newRefRDFramebufferPassAsRef)
	gdClassRefConstructors.Set("RDPipelineColorBlendState", newRefRDPipelineColorBlendStateAsRef)
	gdClassRefConstructors.Set("RDPipelineColorBlendStateAttachment", newRefRDPipelineColorBlendStateAttachmentAsRef)
	gdClassRefConstructors.Set("RDPipelineDepthStencilState", newRefRDPipelineDepthStencilStateAsRef)
	gdClassRefConstructors.Set("RDPipelineMultisampleState", newRefRDPipelineMultisampleStateAsRef)
	gdClassRefConstructors.Set("RDPipelineRasterizationState", newRefRDPipelineRasterizationStateAsRef)
	gdClassRefConstructors.Set("RDPipelineSpecializationConstant", newRefRDPipelineSpecializationConstantAsRef)
	gdClassRefConstructors.Set("RDSamplerState", newRefRDSamplerStateAsRef)
	gdClassRefConstructors.Set("RDShaderFile", newRefRDShaderFileAsRef)
	gdClassRefConstructors.Set("RDShaderSPIRV", newRefRDShaderSPIRVAsRef)
	gdClassRefConstructors.Set("RDShaderSource", newRefRDShaderSourceAsRef)
	gdClassRefConstructors.Set("RDTextureFormat", newRefRDTextureFormatAsRef)
	gdClassRefConstructors.Set("RDTextureView", newRefRDTextureViewAsRef)
	gdClassRefConstructors.Set("RDUniform", newRefRDUniformAsRef)
	gdClassRefConstructors.Set("RDVertexAttribute", newRefRDVertexAttributeAsRef)
	gdClassRefConstructors.Set("RandomNumberGenerator", newRefRandomNumberGeneratorAsRef)
	gdClassRefConstructors.Set("RectangleShape2D", newRefRectangleShape2DAsRef)
	gdClassRefConstructors.Set("RefCounted", newRefRefCountedAsRef)
	gdClassRefConstructors.Set("RegEx", newRefRegExAsRef)
	gdClassRefConstructors.Set("RegExMatch", newRefRegExMatchAsRef)
	gdClassRefConstructors.Set("RenderSceneBuffers", newRefRenderSceneBuffersAsRef)
	gdClassRefConstructors.Set("RenderSceneBuffersConfiguration", newRefRenderSceneBuffersConfigurationAsRef)
	gdClassRefConstructors.Set("RenderSceneBuffersExtension", newRefRenderSceneBuffersExtensionAsRef)
	gdClassRefConstructors.Set("RenderSceneBuffersRD", newRefRenderSceneBuffersRDAsRef)
	gdClassRefConstructors.Set("Resource", newRefResourceAsRef)
	gdClassRefConstructors.Set("ResourceFormatLoader", newRefResourceFormatLoaderAsRef)
	gdClassRefConstructors.Set("ResourceFormatSaver", newRefResourceFormatSaverAsRef)
	gdClassRefConstructors.Set("ResourceImporter", newRefResourceImporterAsRef)
	gdClassRefConstructors.Set("ResourceImporterBMFont", newRefResourceImporterBMFontAsRef)
	gdClassRefConstructors.Set("ResourceImporterBitMap", newRefResourceImporterBitMapAsRef)
	gdClassRefConstructors.Set("ResourceImporterCSVTranslation", newRefResourceImporterCSVTranslationAsRef)
	gdClassRefConstructors.Set("ResourceImporterDynamicFont", newRefResourceImporterDynamicFontAsRef)
	gdClassRefConstructors.Set("ResourceImporterImage", newRefResourceImporterImageAsRef)
	gdClassRefConstructors.Set("ResourceImporterImageFont", newRefResourceImporterImageFontAsRef)
	gdClassRefConstructors.Set("ResourceImporterLayeredTexture", newRefResourceImporterLayeredTextureAsRef)
	gdClassRefConstructors.Set("ResourceImporterMP3", newRefResourceImporterMP3AsRef)
	gdClassRefConstructors.Set("ResourceImporterOBJ", newRefResourceImporterOBJAsRef)
	gdClassRefConstructors.Set("ResourceImporterOggVorbis", newRefResourceImporterOggVorbisAsRef)
	gdClassRefConstructors.Set("ResourceImporterScene", newRefResourceImporterSceneAsRef)
	gdClassRefConstructors.Set("ResourceImporterShaderFile", newRefResourceImporterShaderFileAsRef)
	gdClassRefConstructors.Set("ResourceImporterTexture", newRefResourceImporterTextureAsRef)
	gdClassRefConstructors.Set("ResourceImporterTextureAtlas", newRefResourceImporterTextureAtlasAsRef)
	gdClassRefConstructors.Set("ResourceImporterWAV", newRefResourceImporterWAVAsRef)
	gdClassRefConstructors.Set("RibbonTrailMesh", newRefRibbonTrailMeshAsRef)
	gdClassRefConstructors.Set("RichTextEffect", newRefRichTextEffectAsRef)
	gdClassRefConstructors.Set("SceneMultiplayer", newRefSceneMultiplayerAsRef)
	gdClassRefConstructors.Set("SceneReplicationConfig", newRefSceneReplicationConfigAsRef)
	gdClassRefConstructors.Set("SceneState", newRefSceneStateAsRef)
	gdClassRefConstructors.Set("SceneTreeTimer", newRefSceneTreeTimerAsRef)
	gdClassRefConstructors.Set("Script", newRefScriptAsRef)
	gdClassRefConstructors.Set("ScriptExtension", newRefScriptExtensionAsRef)
	gdClassRefConstructors.Set("SegmentShape2D", newRefSegmentShape2DAsRef)
	gdClassRefConstructors.Set("Semaphore", newRefSemaphoreAsRef)
	gdClassRefConstructors.Set("SeparationRayShape2D", newRefSeparationRayShape2DAsRef)
	gdClassRefConstructors.Set("SeparationRayShape3D", newRefSeparationRayShape3DAsRef)
	gdClassRefConstructors.Set("Shader", newRefShaderAsRef)
	gdClassRefConstructors.Set("ShaderInclude", newRefShaderIncludeAsRef)
	gdClassRefConstructors.Set("ShaderMaterial", newRefShaderMaterialAsRef)
	gdClassRefConstructors.Set("Shape2D", newRefShape2DAsRef)
	gdClassRefConstructors.Set("Shape3D", newRefShape3DAsRef)
	gdClassRefConstructors.Set("Shortcut", newRefShortcutAsRef)
	gdClassRefConstructors.Set("SkeletonModification2D", newRefSkeletonModification2DAsRef)
	gdClassRefConstructors.Set("SkeletonModification2DCCDIK", newRefSkeletonModification2DCCDIKAsRef)
	gdClassRefConstructors.Set("SkeletonModification2DFABRIK", newRefSkeletonModification2DFABRIKAsRef)
	gdClassRefConstructors.Set("SkeletonModification2DJiggle", newRefSkeletonModification2DJiggleAsRef)
	gdClassRefConstructors.Set("SkeletonModification2DLookAt", newRefSkeletonModification2DLookAtAsRef)
	gdClassRefConstructors.Set("SkeletonModification2DPhysicalBones", newRefSkeletonModification2DPhysicalBonesAsRef)
	gdClassRefConstructors.Set("SkeletonModification2DStackHolder", newRefSkeletonModification2DStackHolderAsRef)
	gdClassRefConstructors.Set("SkeletonModification2DTwoBoneIK", newRefSkeletonModification2DTwoBoneIKAsRef)
	gdClassRefConstructors.Set("SkeletonModificationStack2D", newRefSkeletonModificationStack2DAsRef)
	gdClassRefConstructors.Set("SkeletonProfile", newRefSkeletonProfileAsRef)
	gdClassRefConstructors.Set("SkeletonProfileHumanoid", newRefSkeletonProfileHumanoidAsRef)
	gdClassRefConstructors.Set("Skin", newRefSkinAsRef)
	gdClassRefConstructors.Set("SkinReference", newRefSkinReferenceAsRef)
	gdClassRefConstructors.Set("Sky", newRefSkyAsRef)
	gdClassRefConstructors.Set("SphereMesh", newRefSphereMeshAsRef)
	gdClassRefConstructors.Set("SphereOccluder3D", newRefSphereOccluder3DAsRef)
	gdClassRefConstructors.Set("SphereShape3D", newRefSphereShape3DAsRef)
	gdClassRefConstructors.Set("SpriteFrames", newRefSpriteFramesAsRef)
	gdClassRefConstructors.Set("StandardMaterial3D", newRefStandardMaterial3DAsRef)
	gdClassRefConstructors.Set("StreamPeer", newRefStreamPeerAsRef)
	gdClassRefConstructors.Set("StreamPeerBuffer", newRefStreamPeerBufferAsRef)
	gdClassRefConstructors.Set("StreamPeerExtension", newRefStreamPeerExtensionAsRef)
	gdClassRefConstructors.Set("StreamPeerGZIP", newRefStreamPeerGZIPAsRef)
	gdClassRefConstructors.Set("StreamPeerTCP", newRefStreamPeerTCPAsRef)
	gdClassRefConstructors.Set("StreamPeerTLS", newRefStreamPeerTLSAsRef)
	gdClassRefConstructors.Set("StyleBox", newRefStyleBoxAsRef)
	gdClassRefConstructors.Set("StyleBoxEmpty", newRefStyleBoxEmptyAsRef)
	gdClassRefConstructors.Set("StyleBoxFlat", newRefStyleBoxFlatAsRef)
	gdClassRefConstructors.Set("StyleBoxLine", newRefStyleBoxLineAsRef)
	gdClassRefConstructors.Set("StyleBoxTexture", newRefStyleBoxTextureAsRef)
	gdClassRefConstructors.Set("SurfaceTool", newRefSurfaceToolAsRef)
	gdClassRefConstructors.Set("SyntaxHighlighter", newRefSyntaxHighlighterAsRef)
	gdClassRefConstructors.Set("SystemFont", newRefSystemFontAsRef)
	gdClassRefConstructors.Set("TCPServer", newRefTCPServerAsRef)
	gdClassRefConstructors.Set("TLSOptions", newRefTLSOptionsAsRef)
	gdClassRefConstructors.Set("TextLine", newRefTextLineAsRef)
	gdClassRefConstructors.Set("TextMesh", newRefTextMeshAsRef)
	gdClassRefConstructors.Set("TextParagraph", newRefTextParagraphAsRef)
	gdClassRefConstructors.Set("TextServer", newRefTextServerAsRef)
	gdClassRefConstructors.Set("TextServerAdvanced", newRefTextServerAdvancedAsRef)
	gdClassRefConstructors.Set("TextServerDummy", newRefTextServerDummyAsRef)
	gdClassRefConstructors.Set("TextServerExtension", newRefTextServerExtensionAsRef)
	gdClassRefConstructors.Set("Texture", newRefTextureAsRef)
	gdClassRefConstructors.Set("Texture2D", newRefTexture2DAsRef)
	gdClassRefConstructors.Set("Texture2DArray", newRefTexture2DArrayAsRef)
	gdClassRefConstructors.Set("Texture2DArrayRD", newRefTexture2DArrayRDAsRef)
	gdClassRefConstructors.Set("Texture2DRD", newRefTexture2DRDAsRef)
	gdClassRefConstructors.Set("Texture3D", newRefTexture3DAsRef)
	gdClassRefConstructors.Set("Texture3DRD", newRefTexture3DRDAsRef)
	gdClassRefConstructors.Set("TextureCubemapArrayRD", newRefTextureCubemapArrayRDAsRef)
	gdClassRefConstructors.Set("TextureCubemapRD", newRefTextureCubemapRDAsRef)
	gdClassRefConstructors.Set("TextureLayered", newRefTextureLayeredAsRef)
	gdClassRefConstructors.Set("TextureLayeredRD", newRefTextureLayeredRDAsRef)
	gdClassRefConstructors.Set("Theme", newRefThemeAsRef)
	gdClassRefConstructors.Set("Thread", newRefThreadAsRef)
	gdClassRefConstructors.Set("TileMapPattern", newRefTileMapPatternAsRef)
	gdClassRefConstructors.Set("TileSet", newRefTileSetAsRef)
	gdClassRefConstructors.Set("TileSetAtlasSource", newRefTileSetAtlasSourceAsRef)
	gdClassRefConstructors.Set("TileSetScenesCollectionSource", newRefTileSetScenesCollectionSourceAsRef)
	gdClassRefConstructors.Set("TileSetSource", newRefTileSetSourceAsRef)
	gdClassRefConstructors.Set("TorusMesh", newRefTorusMeshAsRef)
	gdClassRefConstructors.Set("Translation", newRefTranslationAsRef)
	gdClassRefConstructors.Set("TriangleMesh", newRefTriangleMeshAsRef)
	gdClassRefConstructors.Set("TubeTrailMesh", newRefTubeTrailMeshAsRef)
	gdClassRefConstructors.Set("Tween", newRefTweenAsRef)
	gdClassRefConstructors.Set("Tweener", newRefTweenerAsRef)
	gdClassRefConstructors.Set("UDPServer", newRefUDPServerAsRef)
	gdClassRefConstructors.Set("UPNP", newRefUPNPAsRef)
	gdClassRefConstructors.Set("UPNPDevice", newRefUPNPDeviceAsRef)
	gdClassRefConstructors.Set("VideoStream", newRefVideoStreamAsRef)
	gdClassRefConstructors.Set("VideoStreamPlayback", newRefVideoStreamPlaybackAsRef)
	gdClassRefConstructors.Set("VideoStreamTheora", newRefVideoStreamTheoraAsRef)
	gdClassRefConstructors.Set("ViewportTexture", newRefViewportTextureAsRef)
	gdClassRefConstructors.Set("VisualShader", newRefVisualShaderAsRef)
	gdClassRefConstructors.Set("VisualShaderNode", newRefVisualShaderNodeAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeBillboard", newRefVisualShaderNodeBillboardAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeBooleanConstant", newRefVisualShaderNodeBooleanConstantAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeBooleanParameter", newRefVisualShaderNodeBooleanParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeClamp", newRefVisualShaderNodeClampAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeColorConstant", newRefVisualShaderNodeColorConstantAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeColorFunc", newRefVisualShaderNodeColorFuncAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeColorOp", newRefVisualShaderNodeColorOpAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeColorParameter", newRefVisualShaderNodeColorParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeComment", newRefVisualShaderNodeCommentAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeCompare", newRefVisualShaderNodeCompareAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeConstant", newRefVisualShaderNodeConstantAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeCubemap", newRefVisualShaderNodeCubemapAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeCubemapParameter", newRefVisualShaderNodeCubemapParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeCurveTexture", newRefVisualShaderNodeCurveTextureAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeCurveXYZTexture", newRefVisualShaderNodeCurveXYZTextureAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeCustom", newRefVisualShaderNodeCustomAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeDerivativeFunc", newRefVisualShaderNodeDerivativeFuncAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeDeterminant", newRefVisualShaderNodeDeterminantAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeDistanceFade", newRefVisualShaderNodeDistanceFadeAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeDotProduct", newRefVisualShaderNodeDotProductAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeExpression", newRefVisualShaderNodeExpressionAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeFaceForward", newRefVisualShaderNodeFaceForwardAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeFloatConstant", newRefVisualShaderNodeFloatConstantAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeFloatFunc", newRefVisualShaderNodeFloatFuncAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeFloatOp", newRefVisualShaderNodeFloatOpAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeFloatParameter", newRefVisualShaderNodeFloatParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeFresnel", newRefVisualShaderNodeFresnelAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeGlobalExpression", newRefVisualShaderNodeGlobalExpressionAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeGroupBase", newRefVisualShaderNodeGroupBaseAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeIf", newRefVisualShaderNodeIfAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeInput", newRefVisualShaderNodeInputAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeIntConstant", newRefVisualShaderNodeIntConstantAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeIntFunc", newRefVisualShaderNodeIntFuncAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeIntOp", newRefVisualShaderNodeIntOpAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeIntParameter", newRefVisualShaderNodeIntParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeIs", newRefVisualShaderNodeIsAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeLinearSceneDepth", newRefVisualShaderNodeLinearSceneDepthAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeMix", newRefVisualShaderNodeMixAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeMultiplyAdd", newRefVisualShaderNodeMultiplyAddAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeOuterProduct", newRefVisualShaderNodeOuterProductAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeOutput", newRefVisualShaderNodeOutputAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParameter", newRefVisualShaderNodeParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParameterRef", newRefVisualShaderNodeParameterRefAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParticleAccelerator", newRefVisualShaderNodeParticleAcceleratorAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParticleBoxEmitter", newRefVisualShaderNodeParticleBoxEmitterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParticleConeVelocity", newRefVisualShaderNodeParticleConeVelocityAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParticleEmit", newRefVisualShaderNodeParticleEmitAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParticleEmitter", newRefVisualShaderNodeParticleEmitterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParticleMeshEmitter", newRefVisualShaderNodeParticleMeshEmitterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParticleMultiplyByAxisAngle", newRefVisualShaderNodeParticleMultiplyByAxisAngleAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParticleOutput", newRefVisualShaderNodeParticleOutputAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParticleRandomness", newRefVisualShaderNodeParticleRandomnessAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParticleRingEmitter", newRefVisualShaderNodeParticleRingEmitterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeParticleSphereEmitter", newRefVisualShaderNodeParticleSphereEmitterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeProximityFade", newRefVisualShaderNodeProximityFadeAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeRandomRange", newRefVisualShaderNodeRandomRangeAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeRemap", newRefVisualShaderNodeRemapAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeResizableBase", newRefVisualShaderNodeResizableBaseAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeRotationByAxis", newRefVisualShaderNodeRotationByAxisAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeSDFRaymarch", newRefVisualShaderNodeSDFRaymarchAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeSDFToScreenUV", newRefVisualShaderNodeSDFToScreenUVAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeSample3D", newRefVisualShaderNodeSample3DAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeScreenNormalWorldSpace", newRefVisualShaderNodeScreenNormalWorldSpaceAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeScreenUVToSDF", newRefVisualShaderNodeScreenUVToSDFAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeSmoothStep", newRefVisualShaderNodeSmoothStepAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeStep", newRefVisualShaderNodeStepAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeSwitch", newRefVisualShaderNodeSwitchAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTexture", newRefVisualShaderNodeTextureAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTexture2DArray", newRefVisualShaderNodeTexture2DArrayAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTexture2DArrayParameter", newRefVisualShaderNodeTexture2DArrayParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTexture2DParameter", newRefVisualShaderNodeTexture2DParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTexture3D", newRefVisualShaderNodeTexture3DAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTexture3DParameter", newRefVisualShaderNodeTexture3DParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTextureParameter", newRefVisualShaderNodeTextureParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTextureParameterTriplanar", newRefVisualShaderNodeTextureParameterTriplanarAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTextureSDF", newRefVisualShaderNodeTextureSDFAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTextureSDFNormal", newRefVisualShaderNodeTextureSDFNormalAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTransformCompose", newRefVisualShaderNodeTransformComposeAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTransformConstant", newRefVisualShaderNodeTransformConstantAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTransformDecompose", newRefVisualShaderNodeTransformDecomposeAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTransformFunc", newRefVisualShaderNodeTransformFuncAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTransformOp", newRefVisualShaderNodeTransformOpAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTransformParameter", newRefVisualShaderNodeTransformParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeTransformVecMult", newRefVisualShaderNodeTransformVecMultAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeUIntConstant", newRefVisualShaderNodeUIntConstantAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeUIntFunc", newRefVisualShaderNodeUIntFuncAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeUIntOp", newRefVisualShaderNodeUIntOpAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeUIntParameter", newRefVisualShaderNodeUIntParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeUVFunc", newRefVisualShaderNodeUVFuncAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeUVPolarCoord", newRefVisualShaderNodeUVPolarCoordAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVarying", newRefVisualShaderNodeVaryingAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVaryingGetter", newRefVisualShaderNodeVaryingGetterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVaryingSetter", newRefVisualShaderNodeVaryingSetterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVec2Constant", newRefVisualShaderNodeVec2ConstantAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVec2Parameter", newRefVisualShaderNodeVec2ParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVec3Constant", newRefVisualShaderNodeVec3ConstantAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVec3Parameter", newRefVisualShaderNodeVec3ParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVec4Constant", newRefVisualShaderNodeVec4ConstantAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVec4Parameter", newRefVisualShaderNodeVec4ParameterAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVectorBase", newRefVisualShaderNodeVectorBaseAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVectorCompose", newRefVisualShaderNodeVectorComposeAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVectorDecompose", newRefVisualShaderNodeVectorDecomposeAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVectorDistance", newRefVisualShaderNodeVectorDistanceAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVectorFunc", newRefVisualShaderNodeVectorFuncAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVectorLen", newRefVisualShaderNodeVectorLenAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVectorOp", newRefVisualShaderNodeVectorOpAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeVectorRefract", newRefVisualShaderNodeVectorRefractAsRef)
	gdClassRefConstructors.Set("VisualShaderNodeWorldPositionFromDepth", newRefVisualShaderNodeWorldPositionFromDepthAsRef)
	gdClassRefConstructors.Set("VoxelGIData", newRefVoxelGIDataAsRef)
	gdClassRefConstructors.Set("WeakRef", newRefWeakRefAsRef)
	gdClassRefConstructors.Set("WebRTCDataChannel", newRefWebRTCDataChannelAsRef)
	gdClassRefConstructors.Set("WebRTCDataChannelExtension", newRefWebRTCDataChannelExtensionAsRef)
	gdClassRefConstructors.Set("WebRTCMultiplayerPeer", newRefWebRTCMultiplayerPeerAsRef)
	gdClassRefConstructors.Set("WebRTCPeerConnection", newRefWebRTCPeerConnectionAsRef)
	gdClassRefConstructors.Set("WebRTCPeerConnectionExtension", newRefWebRTCPeerConnectionExtensionAsRef)
	gdClassRefConstructors.Set("WebSocketMultiplayerPeer", newRefWebSocketMultiplayerPeerAsRef)
	gdClassRefConstructors.Set("WebSocketPeer", newRefWebSocketPeerAsRef)
	gdClassRefConstructors.Set("WebXRInterface", newRefWebXRInterfaceAsRef)
	gdClassRefConstructors.Set("World2D", newRefWorld2DAsRef)
	gdClassRefConstructors.Set("World3D", newRefWorld3DAsRef)
	gdClassRefConstructors.Set("WorldBoundaryShape2D", newRefWorldBoundaryShape2DAsRef)
	gdClassRefConstructors.Set("WorldBoundaryShape3D", newRefWorldBoundaryShape3DAsRef)
	gdClassRefConstructors.Set("X509Certificate", newRefX509CertificateAsRef)
	gdClassRefConstructors.Set("XMLParser", newRefXMLParserAsRef)
	gdClassRefConstructors.Set("XRInterface", newRefXRInterfaceAsRef)
	gdClassRefConstructors.Set("XRInterfaceExtension", newRefXRInterfaceExtensionAsRef)
	gdClassRefConstructors.Set("XRPose", newRefXRPoseAsRef)
	gdClassRefConstructors.Set("XRPositionalTracker", newRefXRPositionalTrackerAsRef)
	gdClassRefConstructors.Set("ZIPPacker", newRefZIPPackerAsRef)
	gdClassRefConstructors.Set("ZIPReader", newRefZIPReaderAsRef)
}
