package gdnative

/*------------------------------------------------------------------------------
//   This code was generated by template type.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "type.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/

//revive:disable

/*
#include <gdnative.wrapper.gen.h>
#include <gdnative/aabb.h>
#include <gdnative/array.h>
#include <gdnative/basis.h>
#include <gdnative/color.h>
#include <gdnative/dictionary.h>
#include <gdnative/gdnative.h>
#include <gdnative/node_path.h>
#include <gdnative/plane.h>
#include <gdnative/pool_arrays.h>
#include <gdnative/quat.h>
#include <gdnative/rect2.h>
#include <gdnative/rid.h>
#include <gdnative/string.h>
#include <gdnative/string_name.h>
#include <gdnative/transform.h>
#include <gdnative/transform2d.h>
#include <gdnative/variant.h>
#include <gdnative/vector2.h>
#include <gdnative/vector3.h>
#include <gdnative_api_struct.gen.h>
#include <stdlib.h>
*/
import "C"
import (
	"runtime"
	"unsafe"
)

func init() {
	registerInternalInitCallback(InitAABBGodotType)
	registerInternalInitCallback(InitArrayGodotType)
	registerInternalInitCallback(InitBasisGodotType)
	registerInternalInitCallback(InitColorGodotType)
	registerInternalInitCallback(InitDictionaryGodotType)
	registerInternalInitCallback(InitErrorGodotType)
	registerInternalInitCallback(InitGdnativeApiStructGodotType)
	registerInternalInitCallback(InitGdnativeApiVersionGodotType)
	registerInternalInitCallback(InitGdnativeInitOptionsGodotType)
	registerInternalInitCallback(InitGdnativeTerminateOptionsGodotType)
	registerInternalInitCallback(InitMethodBindGodotType)
	registerInternalInitCallback(InitGodotObjectGodotType)
	registerInternalInitCallback(InitNodePathGodotType)
	registerInternalInitCallback(InitPlaneGodotType)
	registerInternalInitCallback(InitPoolArrayReadAccessGodotType)
	registerInternalInitCallback(InitPoolArrayWriteAccessGodotType)
	registerInternalInitCallback(InitPoolByteArrayGodotType)
	registerInternalInitCallback(InitPoolByteArrayReadAccessGodotType)
	registerInternalInitCallback(InitPoolByteArrayWriteAccessGodotType)
	registerInternalInitCallback(InitPoolColorArrayGodotType)
	registerInternalInitCallback(InitPoolColorArrayReadAccessGodotType)
	registerInternalInitCallback(InitPoolColorArrayWriteAccessGodotType)
	registerInternalInitCallback(InitPoolIntArrayGodotType)
	registerInternalInitCallback(InitPoolIntArrayReadAccessGodotType)
	registerInternalInitCallback(InitPoolIntArrayWriteAccessGodotType)
	registerInternalInitCallback(InitPoolRealArrayGodotType)
	registerInternalInitCallback(InitPoolRealArrayReadAccessGodotType)
	registerInternalInitCallback(InitPoolRealArrayWriteAccessGodotType)
	registerInternalInitCallback(InitPoolStringArrayGodotType)
	registerInternalInitCallback(InitPoolStringArrayReadAccessGodotType)
	registerInternalInitCallback(InitPoolStringArrayWriteAccessGodotType)
	registerInternalInitCallback(InitPoolVector2ArrayGodotType)
	registerInternalInitCallback(InitPoolVector2ArrayReadAccessGodotType)
	registerInternalInitCallback(InitPoolVector2ArrayWriteAccessGodotType)
	registerInternalInitCallback(InitPoolVector3ArrayGodotType)
	registerInternalInitCallback(InitPoolVector3ArrayReadAccessGodotType)
	registerInternalInitCallback(InitPoolVector3ArrayWriteAccessGodotType)
	registerInternalInitCallback(InitQuatGodotType)
	registerInternalInitCallback(InitRect2GodotType)
	registerInternalInitCallback(InitRIDGodotType)
	registerInternalInitCallback(InitCharStringGodotType)
	registerInternalInitCallback(InitStringGodotType)
	registerInternalInitCallback(InitStringNameGodotType)
	registerInternalInitCallback(InitTransformGodotType)
	registerInternalInitCallback(InitTransform2DGodotType)
	registerInternalInitCallback(InitVariantGodotType)
	registerInternalInitCallback(InitVariantCallErrorGodotType)
	registerInternalInitCallback(InitVariantCallErrorErrorGodotType)
	registerInternalInitCallback(InitVariantOperatorGodotType)
	registerInternalInitCallback(InitVariantTypeGodotType)
	registerInternalInitCallback(InitVector2GodotType)
	registerInternalInitCallback(InitVector3GodotType)
	registerInternalInitCallback(InitVector3AxisGodotType)
	registerInternalInitCallback(InitGdnativeCore11ApiStructGodotType)
	registerInternalInitCallback(InitGdnativeCore12ApiStructGodotType)
	registerInternalInitCallback(InitGdnativeCoreApiStructGodotType)
	registerInternalInitCallback(InitGdnativeExtAndroidApiStructGodotType)
	registerInternalInitCallback(InitGdnativeExtArvrApiStructGodotType)
	registerInternalInitCallback(InitGdnativeExtNativescript11ApiStructGodotType)
	registerInternalInitCallback(InitGdnativeExtNativescriptApiStructGodotType)
	registerInternalInitCallback(InitGdnativeExtNet32ApiStructGodotType)
	registerInternalInitCallback(InitGdnativeExtNetApiStructGodotType)
	registerInternalInitCallback(InitGdnativeExtPluginscriptApiStructGodotType)
	registerInternalInitCallback(InitGdnativeExtVideodecoderApiStructGodotType)
	registerInternalInitCallback(InitInstanceBindingFunctionsGodotType)
	registerInternalInitCallback(InitMethodArgGodotType)
	registerInternalInitCallback(InitMethodRpcModeGodotType)
	registerInternalInitCallback(InitPropertyAttributesGodotType)
	registerInternalInitCallback(InitPropertyHintGodotType)
	registerInternalInitCallback(InitSignalGodotType)
	registerInternalInitCallback(InitSignalArgumentGodotType)
	registerInternalInitCallback(InitNetMultiplayerPeerGodotType)
	registerInternalInitCallback(InitNetPacketPeerGodotType)
	registerInternalInitCallback(InitNetStreamPeerGodotType)
	registerInternalInitCallback(InitNetWebrtcDataChannelGodotType)
	registerInternalInitCallback(InitNetWebrtcLibraryGodotType)
	registerInternalInitCallback(InitNetWebrtcPeerConnectionGodotType)
	registerInternalInitCallback(InitVideodecoderInterfaceGdnativeGodotType)
}

/* Global Functions */

/* Global Method: godot_string_chr -> godot_string */

func StringChr(
	p_character int32, /* else case */
) String {
	api := CoreApi
	in0 := *(*C.wchar_t)(unsafe.Pointer(&p_character))

	/* go_godot_string_chr(API_STRUCT,wchar_t) ->godot_string */

	ret := C.go_godot_string_chr(
		api,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))

}

/* Global Method: godot_object_destroy -> void */

func ObjectDestroy(
	p_o *GodotObject,
) {
	api := CoreApi
	in0 := unsafe.Pointer(p_o)

	/* go_godot_object_destroy(API_STRUCT, *godot_object) ->void */

	C.go_godot_object_destroy(
		api,
		in0,
	)
	runtime.KeepAlive(in0)

}

/* Global Method: *godot_global_get_singleton -> *godot_object */

func GlobalGetSingleton(
	p_name string,
) *GodotObject {
	api := CoreApi
	in0 := C.CString(p_name)
	defer C.free(unsafe.Pointer(in0))

	/* go_godot_global_get_singleton(API_STRUCT, *char) -> *GodotObject */

	ret := C.go_godot_global_get_singleton(
		api,
		in0,
	)
	runtime.KeepAlive(in0)

	return (*GodotObject)(unsafe.Pointer(ret))

}

/* Global Method: *godot_method_bind_get_method -> *godot_method_bind */

func MethodBindGetMethod(
	p_classname string, p_methodname string,
) *MethodBind {
	api := CoreApi
	in0 := C.CString(p_classname)
	defer C.free(unsafe.Pointer(in0))
	in1 := C.CString(p_methodname)
	defer C.free(unsafe.Pointer(in1))

	/* go_godot_method_bind_get_method(API_STRUCT, *char, *char) -> *MethodBind */

	ret := C.go_godot_method_bind_get_method(
		api,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return (*MethodBind)(unsafe.Pointer(&ret))

}

/* Global Method: *godot_alloc -> *void */

func Alloc(
	p_bytes int32, /* else case */
) unsafe.Pointer {
	api := CoreApi
	in0 := *(*C.int)(unsafe.Pointer(&p_bytes))

	/* go_godot_alloc(API_STRUCT,int) -> *void */

	ret := C.go_godot_alloc(
		api,
		in0,
	)
	runtime.KeepAlive(in0)

	return unsafe.Pointer(ret)

}

/* Global Method: *godot_realloc -> *void */

func Realloc(
	p_ptr unsafe.Pointer, p_bytes int32, /* else case */
) unsafe.Pointer {
	api := CoreApi
	in0 := unsafe.Pointer(p_ptr)
	in1 := *(*C.int)(unsafe.Pointer(&p_bytes))

	/* go_godot_realloc(API_STRUCT, *void,int) -> *void */

	ret := C.go_godot_realloc(
		api,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return unsafe.Pointer(ret)

}

/* Global Method: godot_free -> void */

func Free(
	p_ptr unsafe.Pointer,
) {
	api := CoreApi
	in0 := unsafe.Pointer(p_ptr)

	/* go_godot_free(API_STRUCT, *void) ->void */

	C.go_godot_free(
		api,
		in0,
	)
	runtime.KeepAlive(in0)

}

/* Global Method: godot_print_error -> void */

func PrintError(
	p_description string, p_function string, p_file string, p_line int32, /* else case */
) {
	api := CoreApi
	in0 := C.CString(p_description)
	defer C.free(unsafe.Pointer(in0))
	in1 := C.CString(p_function)
	defer C.free(unsafe.Pointer(in1))
	in2 := C.CString(p_file)
	defer C.free(unsafe.Pointer(in2))
	in3 := *(*C.int)(unsafe.Pointer(&p_line))

	/* go_godot_print_error(API_STRUCT, *char, *char, *char,int) ->void */

	C.go_godot_print_error(
		api,
		in0,
		in1,
		in2,
		in3,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

}

/* Global Method: godot_print_warning -> void */

func PrintWarning(
	p_description string, p_function string, p_file string, p_line int32, /* else case */
) {
	api := CoreApi
	in0 := C.CString(p_description)
	defer C.free(unsafe.Pointer(in0))
	in1 := C.CString(p_function)
	defer C.free(unsafe.Pointer(in1))
	in2 := C.CString(p_file)
	defer C.free(unsafe.Pointer(in2))
	in3 := *(*C.int)(unsafe.Pointer(&p_line))

	/* go_godot_print_warning(API_STRUCT, *char, *char, *char,int) ->void */

	C.go_godot_print_warning(
		api,
		in0,
		in1,
		in2,
		in3,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

}

/* Global Method: godot_print -> void */

func Print(
	p_message String, /* godot_string */
) {
	api := CoreApi
	in0 := (*C.godot_string)(unsafe.Pointer(&p_message))

	/* go_godot_print(API_STRUCT, *godot_string) ->void */

	C.go_godot_print(
		api,
		in0,
	)
	runtime.KeepAlive(in0)

}

/* Global Method: godot_is_instance_valid -> bool */

func IsInstanceValid(
	p_object *GodotObject,
) bool {
	api := Core11Api
	in0 := unsafe.Pointer(p_object)

	/* go_godot_is_instance_valid(API_STRUCT, *godot_object) ->bool */

	ret := C.go_godot_is_instance_valid(
		api,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))

}

/* Global Method: godot_variant_get_operator_name -> godot_string */

func VariantGetOperatorName(
	p_op VariantOperator, /* else case */
) String {
	api := Core11Api
	in0 := *(*C.godot_variant_operator)(unsafe.Pointer(&p_op))

	/* go_godot_variant_get_operator_name(API_STRUCT,godot_variant_operator) ->godot_string */

	ret := C.go_godot_variant_get_operator_name(
		api,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))

}

/* Global Method: godot_variant_evaluate -> void */

func VariantEvaluate(
	p_op VariantOperator /* else case */, p_a Variant /* godot_variant */, p_b Variant /* godot_variant */, r_ret Variant /* godot_variant */, r_valid bool, /* godot_bool */
) {
	api := Core11Api
	in0 := *(*C.godot_variant_operator)(unsafe.Pointer(&p_op))
	in1 := (*C.godot_variant)(unsafe.Pointer(&p_a))
	in2 := (*C.godot_variant)(unsafe.Pointer(&p_b))
	in3 := (*C.godot_variant)(unsafe.Pointer(&r_ret))
	in4 := (*C.godot_bool)(unsafe.Pointer(&r_valid))

	/* go_godot_variant_evaluate(API_STRUCT,godot_variant_operator, *godot_variant, *godot_variant, *godot_variant, *godot_bool) ->void */

	C.go_godot_variant_evaluate(
		api,
		in0,
		in1,
		in2,
		in3,
		in4,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)
	runtime.KeepAlive(in4)

}

/* Global Method: *godot_get_class_tag -> *void */

func GetClassTag(
	p_class StringName, /* godot_string_name */
) unsafe.Pointer {
	api := Core12Api
	in0 := (*C.godot_string_name)(unsafe.Pointer(&p_class))

	/* go_godot_get_class_tag(API_STRUCT, *godot_string_name) -> *void */

	ret := C.go_godot_get_class_tag(
		api,
		in0,
	)
	runtime.KeepAlive(in0)

	return unsafe.Pointer(ret)

}

/* Global Method: *godot_object_cast_to -> *godot_object */

func ObjectCastTo(
	p_object *GodotObject, p_class_tag unsafe.Pointer,
) *GodotObject {
	api := Core12Api
	in0 := unsafe.Pointer(p_object)
	in1 := unsafe.Pointer(p_class_tag)

	/* go_godot_object_cast_to(API_STRUCT, *godot_object, *void) -> *GodotObject */

	ret := C.go_godot_object_cast_to(
		api,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return (*GodotObject)(unsafe.Pointer(ret))

}

/* Global Method: *godot_instance_from_id -> *godot_object */

func InstanceFromId(
	p_instance_id int32, /* else case */
) *GodotObject {
	api := Core12Api
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_instance_id))

	/* go_godot_instance_from_id(API_STRUCT,godot_int) -> *GodotObject */

	ret := C.go_godot_instance_from_id(
		api,
		in0,
	)
	runtime.KeepAlive(in0)

	return (*GodotObject)(unsafe.Pointer(ret))

}

/* TypeDefs */
type AABB C.godot_aabb

func InitAABBGodotType() {
	RegisterState.Stats.GodotTypeAllocs["AABB"] = 0
	RegisterState.Stats.GodotTypeFrees["AABB"] = 0
}

func NewAABB(
	p_pos Vector3 /* godot_vector3 */, p_size Vector3, /* godot_vector3 */
) AABB {
	dest := AABB{}

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_pos))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_size))

	/* go_godot_aabb_new(API_STRUCT, *godot_vector3, *godot_vector3) -> *AABB */

	C.go_godot_aabb_new(
		api,
		rcv,
		in0,
		in1,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	RegisterState.Stats.GodotTypeAllocs["AABB"]++

	return dest
}

/* Getter Method: godot_aabb_get_position -> godot_vector3 */
func (gdt *AABB) GetPosition() Vector3 {

	/* go_godot_aabb_get_position(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_get_position(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_aabb_set_position -> void */
func (gdt *AABB) SetPosition(
	p_v Vector3, /* godot_vector3 */
) {

	/* go_godot_aabb_set_position(API_STRUCT, *godot_vector3) ->void */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_v))

	C.go_godot_aabb_set_position(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_aabb_get_size -> godot_vector3 */
func (gdt *AABB) GetSize() Vector3 {

	/* go_godot_aabb_get_size(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_get_size(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_aabb_set_size -> void */
func (gdt *AABB) SetSize(
	p_v Vector3, /* godot_vector3 */
) {

	/* go_godot_aabb_set_size(API_STRUCT, *godot_vector3) ->void */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_v))

	C.go_godot_aabb_set_size(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_aabb_as_string -> godot_string */
func (gdt *AABB) AsString() String {

	/* go_godot_aabb_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_get_area -> godot_real */
func (gdt *AABB) GetArea() float32 {

	/* go_godot_aabb_get_area(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_get_area(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_has_no_area -> godot_bool */
func (gdt *AABB) HasNoArea() bool {

	/* go_godot_aabb_has_no_area(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_has_no_area(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_has_no_surface -> godot_bool */
func (gdt *AABB) HasNoSurface() bool {

	/* go_godot_aabb_has_no_surface(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_has_no_surface(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_intersects -> godot_bool */
func (gdt *AABB) Intersects(
	p_with AABB, /* godot_aabb */
) bool {

	/* go_godot_aabb_intersects(API_STRUCT, *godot_aabb) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_aabb)(unsafe.Pointer(&p_with))

	ret := C.go_godot_aabb_intersects(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_encloses -> godot_bool */
func (gdt *AABB) Encloses(
	p_with AABB, /* godot_aabb */
) bool {

	/* go_godot_aabb_encloses(API_STRUCT, *godot_aabb) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_aabb)(unsafe.Pointer(&p_with))

	ret := C.go_godot_aabb_encloses(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_merge -> godot_aabb */
func (gdt *AABB) Merge(
	p_with AABB, /* godot_aabb */
) AABB {

	/* go_godot_aabb_merge(API_STRUCT, *godot_aabb) ->godot_aabb */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_aabb)(unsafe.Pointer(&p_with))

	ret := C.go_godot_aabb_merge(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*AABB)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_intersection -> godot_aabb */
func (gdt *AABB) Intersection(
	p_with AABB, /* godot_aabb */
) AABB {

	/* go_godot_aabb_intersection(API_STRUCT, *godot_aabb) ->godot_aabb */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_aabb)(unsafe.Pointer(&p_with))

	ret := C.go_godot_aabb_intersection(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*AABB)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_intersects_plane -> godot_bool */
func (gdt *AABB) IntersectsPlane(
	p_plane Plane, /* godot_plane */
) bool {

	/* go_godot_aabb_intersects_plane(API_STRUCT, *godot_plane) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_plane)(unsafe.Pointer(&p_plane))

	ret := C.go_godot_aabb_intersects_plane(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_intersects_segment -> godot_bool */
func (gdt *AABB) IntersectsSegment(
	p_from Vector3 /* godot_vector3 */, p_to Vector3, /* godot_vector3 */
) bool {

	/* go_godot_aabb_intersects_segment(API_STRUCT, *godot_vector3, *godot_vector3) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_from))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_to))

	ret := C.go_godot_aabb_intersects_segment(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_has_point -> godot_bool */
func (gdt *AABB) HasPoint(
	p_point Vector3, /* godot_vector3 */
) bool {

	/* go_godot_aabb_has_point(API_STRUCT, *godot_vector3) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_point))

	ret := C.go_godot_aabb_has_point(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_get_support -> godot_vector3 */
func (gdt *AABB) GetSupport(
	p_dir Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_aabb_get_support(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_dir))

	ret := C.go_godot_aabb_get_support(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_get_longest_axis -> godot_vector3 */
func (gdt *AABB) GetLongestAxis() Vector3 {

	/* go_godot_aabb_get_longest_axis(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_get_longest_axis(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_get_longest_axis_index -> godot_int */
func (gdt *AABB) GetLongestAxisIndex() int32 {

	/* go_godot_aabb_get_longest_axis_index(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_get_longest_axis_index(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_get_longest_axis_size -> godot_real */
func (gdt *AABB) GetLongestAxisSize() float32 {

	/* go_godot_aabb_get_longest_axis_size(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_get_longest_axis_size(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_get_shortest_axis -> godot_vector3 */
func (gdt *AABB) GetShortestAxis() Vector3 {

	/* go_godot_aabb_get_shortest_axis(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_get_shortest_axis(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_get_shortest_axis_index -> godot_int */
func (gdt *AABB) GetShortestAxisIndex() int32 {

	/* go_godot_aabb_get_shortest_axis_index(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_get_shortest_axis_index(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_get_shortest_axis_size -> godot_real */
func (gdt *AABB) GetShortestAxisSize() float32 {

	/* go_godot_aabb_get_shortest_axis_size(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))

	ret := C.go_godot_aabb_get_shortest_axis_size(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_expand -> godot_aabb */
func (gdt *AABB) Expand(
	p_to_point Vector3, /* godot_vector3 */
) AABB {

	/* go_godot_aabb_expand(API_STRUCT, *godot_vector3) ->godot_aabb */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_to_point))

	ret := C.go_godot_aabb_expand(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*AABB)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_grow -> godot_aabb */
func (gdt *AABB) Grow(
	p_by float32, /* else case */
) AABB {

	/* go_godot_aabb_grow(API_STRUCT,godot_real) ->godot_aabb */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_by))

	ret := C.go_godot_aabb_grow(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*AABB)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_get_endpoint -> godot_vector3 */
func (gdt *AABB) GetEndpoint(
	p_idx int32, /* else case */
) Vector3 {

	/* go_godot_aabb_get_endpoint(API_STRUCT,godot_int) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_aabb_get_endpoint(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_aabb_operator_equal -> godot_bool */
func (gdt *AABB) OperatorEqual(
	p_b AABB, /* godot_aabb */
) bool {

	/* go_godot_aabb_operator_equal(API_STRUCT, *godot_aabb) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_aabb)(unsafe.Pointer(gdt))
	in0 := (*C.godot_aabb)(unsafe.Pointer(&p_b))

	ret := C.go_godot_aabb_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

type Array C.godot_array

func InitArrayGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Array"] = 0
	RegisterState.Stats.GodotTypeFrees["Array"] = 0
}

func NewArray() Array {
	dest := Array{}

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(&dest))

	/* go_godot_array_new(API_STRUCT) -> *Array */

	C.go_godot_array_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["Array"]++

	return dest
}

func NewArrayCopy(
	p_src Array, /* godot_array */
) Array {
	dest := Array{}

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_src))

	/* go_godot_array_new_copy(API_STRUCT, *godot_array) -> *Array */

	C.go_godot_array_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Array"]++

	return dest
}

func NewArrayPoolColorArray(
	p_pca PoolColorArray, /* godot_pool_color_array */
) Array {
	dest := Array{}

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_color_array)(unsafe.Pointer(&p_pca))

	/* go_godot_array_new_pool_color_array(API_STRUCT, *godot_pool_color_array) -> *Array */

	C.go_godot_array_new_pool_color_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Array"]++

	return dest
}

func NewArrayPoolVector3Array(
	p_pv3a PoolVector3Array, /* godot_pool_vector3_array */
) Array {
	dest := Array{}

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_vector3_array)(unsafe.Pointer(&p_pv3a))

	/* go_godot_array_new_pool_vector3_array(API_STRUCT, *godot_pool_vector3_array) -> *Array */

	C.go_godot_array_new_pool_vector3_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Array"]++

	return dest
}

func NewArrayPoolVector2Array(
	p_pv2a PoolVector2Array, /* godot_pool_vector2_array */
) Array {
	dest := Array{}

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_vector2_array)(unsafe.Pointer(&p_pv2a))

	/* go_godot_array_new_pool_vector2_array(API_STRUCT, *godot_pool_vector2_array) -> *Array */

	C.go_godot_array_new_pool_vector2_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Array"]++

	return dest
}

func NewArrayPoolStringArray(
	p_psa PoolStringArray, /* godot_pool_string_array */
) Array {
	dest := Array{}

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_string_array)(unsafe.Pointer(&p_psa))

	/* go_godot_array_new_pool_string_array(API_STRUCT, *godot_pool_string_array) -> *Array */

	C.go_godot_array_new_pool_string_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Array"]++

	return dest
}

func NewArrayPoolRealArray(
	p_pra PoolRealArray, /* godot_pool_real_array */
) Array {
	dest := Array{}

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_real_array)(unsafe.Pointer(&p_pra))

	/* go_godot_array_new_pool_real_array(API_STRUCT, *godot_pool_real_array) -> *Array */

	C.go_godot_array_new_pool_real_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Array"]++

	return dest
}

func NewArrayPoolIntArray(
	p_pia PoolIntArray, /* godot_pool_int_array */
) Array {
	dest := Array{}

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_int_array)(unsafe.Pointer(&p_pia))

	/* go_godot_array_new_pool_int_array(API_STRUCT, *godot_pool_int_array) -> *Array */

	C.go_godot_array_new_pool_int_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Array"]++

	return dest
}

func NewArrayPoolByteArray(
	p_pba PoolByteArray, /* godot_pool_byte_array */
) Array {
	dest := Array{}

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_byte_array)(unsafe.Pointer(&p_pba))

	/* go_godot_array_new_pool_byte_array(API_STRUCT, *godot_pool_byte_array) -> *Array */

	C.go_godot_array_new_pool_byte_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Array"]++

	return dest
}

/* Setter Method: godot_array_set -> void */
func (gdt *Array) Set(
	p_idx int32 /* else case */, p_value Variant, /* godot_variant */
) {

	/* go_godot_array_set(API_STRUCT,godot_int, *godot_variant) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := (*C.godot_variant)(unsafe.Pointer(&p_value))

	C.go_godot_array_set(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_array_get -> godot_variant */
func (gdt *Array) Get(
	p_idx int32, /* else case */
) Variant {

	/* go_godot_array_get(API_STRUCT,godot_int) ->godot_variant */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_array_get(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_operator_index -> godot_variant */
func (gdt *Array) OperatorIndex(
	p_idx int32, /* else case */
) Variant {

	/* go_godot_array_operator_index(API_STRUCT,godot_int) -> *Variant */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_array_operator_index(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_operator_index_const -> godot_variant */
func (gdt *Array) OperatorIndexConst(
	p_idx int32, /* else case */
) Variant {

	/* go_godot_array_operator_index_const(API_STRUCT,godot_int) -> *Variant */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_array_operator_index_const(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_array_append -> void */
func (gdt *Array) Append(
	p_value Variant, /* godot_variant */
) {

	/* go_godot_array_append(API_STRUCT, *godot_variant) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_value))

	C.go_godot_array_append(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_array_clear -> void */
func (gdt *Array) Clear() {

	/* go_godot_array_clear(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	C.go_godot_array_clear(
		api,
		rcv,
	)
}

/* Getter Method: godot_array_count -> godot_int */
func (gdt *Array) Count(
	p_value Variant, /* godot_variant */
) int32 {

	/* go_godot_array_count(API_STRUCT, *godot_variant) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_value))

	ret := C.go_godot_array_count(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_empty -> godot_bool */
func (gdt *Array) Empty() bool {

	/* go_godot_array_empty(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_array_empty(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_array_erase -> void */
func (gdt *Array) Erase(
	p_value Variant, /* godot_variant */
) {

	/* go_godot_array_erase(API_STRUCT, *godot_variant) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_value))

	C.go_godot_array_erase(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_array_front -> godot_variant */
func (gdt *Array) Front() Variant {

	/* go_godot_array_front(API_STRUCT) ->godot_variant */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_array_front(
		api,
		rcv,
	)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_back -> godot_variant */
func (gdt *Array) Back() Variant {

	/* go_godot_array_back(API_STRUCT) ->godot_variant */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_array_back(
		api,
		rcv,
	)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_find -> godot_int */
func (gdt *Array) Find(
	p_what Variant /* godot_variant */, p_from int32, /* else case */
) int32 {

	/* go_godot_array_find(API_STRUCT, *godot_variant,godot_int) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_what))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_from))

	ret := C.go_godot_array_find(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_find_last -> godot_int */
func (gdt *Array) FindLast(
	p_what Variant, /* godot_variant */
) int32 {

	/* go_godot_array_find_last(API_STRUCT, *godot_variant) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_what))

	ret := C.go_godot_array_find_last(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_has -> godot_bool */
func (gdt *Array) Has(
	p_value Variant, /* godot_variant */
) bool {

	/* go_godot_array_has(API_STRUCT, *godot_variant) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_value))

	ret := C.go_godot_array_has(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_hash -> godot_int */
func (gdt *Array) Hash() int32 {

	/* go_godot_array_hash(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_array_hash(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_array_insert -> void */
func (gdt *Array) Insert(
	p_pos int32 /* else case */, p_value Variant, /* godot_variant */
) {

	/* go_godot_array_insert(API_STRUCT,godot_int, *godot_variant) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_pos))
	in1 := (*C.godot_variant)(unsafe.Pointer(&p_value))

	C.go_godot_array_insert(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Setter Method: godot_array_invert -> void */
func (gdt *Array) Invert() {

	/* go_godot_array_invert(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	C.go_godot_array_invert(
		api,
		rcv,
	)
}

/* Getter Method: godot_array_pop_back -> godot_variant */
func (gdt *Array) PopBack() Variant {

	/* go_godot_array_pop_back(API_STRUCT) ->godot_variant */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_array_pop_back(
		api,
		rcv,
	)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_pop_front -> godot_variant */
func (gdt *Array) PopFront() Variant {

	/* go_godot_array_pop_front(API_STRUCT) ->godot_variant */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_array_pop_front(
		api,
		rcv,
	)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_array_push_back -> void */
func (gdt *Array) PushBack(
	p_value Variant, /* godot_variant */
) {

	/* go_godot_array_push_back(API_STRUCT, *godot_variant) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_value))

	C.go_godot_array_push_back(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_array_push_front -> void */
func (gdt *Array) PushFront(
	p_value Variant, /* godot_variant */
) {

	/* go_godot_array_push_front(API_STRUCT, *godot_variant) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_value))

	C.go_godot_array_push_front(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_array_remove -> void */
func (gdt *Array) Remove(
	p_idx int32, /* else case */
) {

	/* go_godot_array_remove(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	C.go_godot_array_remove(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_array_resize -> void */
func (gdt *Array) Resize(
	p_size int32, /* else case */
) {

	/* go_godot_array_resize(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_size))

	C.go_godot_array_resize(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_array_rfind -> godot_int */
func (gdt *Array) Rfind(
	p_what Variant /* godot_variant */, p_from int32, /* else case */
) int32 {

	/* go_godot_array_rfind(API_STRUCT, *godot_variant,godot_int) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_what))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_from))

	ret := C.go_godot_array_rfind(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_size -> godot_int */
func (gdt *Array) Size() int32 {

	/* go_godot_array_size(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_array_size(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_array_sort -> void */
func (gdt *Array) Sort() {

	/* go_godot_array_sort(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	C.go_godot_array_sort(
		api,
		rcv,
	)
}

/* Setter Method: godot_array_sort_custom -> void */
func (gdt *Array) SortCustom(
	p_obj *GodotObject, p_func String, /* godot_string */
) {

	/* go_godot_array_sort_custom(API_STRUCT, *godot_object, *godot_string) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := unsafe.Pointer(p_obj)
	in1 := (*C.godot_string)(unsafe.Pointer(&p_func))

	C.go_godot_array_sort_custom(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_array_bsearch -> godot_int */
func (gdt *Array) Bsearch(
	p_value Variant /* godot_variant */, p_before bool, /* else case */
) int32 {

	/* go_godot_array_bsearch(API_STRUCT, *godot_variant,godot_bool) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_value))
	in1 := *(*C.godot_bool)(unsafe.Pointer(&p_before))

	ret := C.go_godot_array_bsearch(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_bsearch_custom -> godot_int */
func (gdt *Array) BsearchCustom(
	p_value Variant /* godot_variant */, p_obj *GodotObject, p_func String /* godot_string */, p_before bool, /* else case */
) int32 {

	/* go_godot_array_bsearch_custom(API_STRUCT, *godot_variant, *godot_object, *godot_string,godot_bool) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_value))
	in1 := unsafe.Pointer(p_obj)
	in2 := (*C.godot_string)(unsafe.Pointer(&p_func))
	in3 := *(*C.godot_bool)(unsafe.Pointer(&p_before))

	ret := C.go_godot_array_bsearch_custom(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_array_destroy -> void */
func (gdt *Array) Destroy() {

	/* go_godot_array_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	C.go_godot_array_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["Array"]++

}

/* Getter Method: godot_array_duplicate -> godot_array */
func (gdt *Array) Duplicate(
	p_deep bool, /* else case */
) Array {

	/* go_godot_array_duplicate(API_STRUCT,godot_bool) ->godot_array */

	api := Core11Api
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_bool)(unsafe.Pointer(&p_deep))

	ret := C.go_godot_array_duplicate(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_max -> godot_variant */
func (gdt *Array) Max() Variant {

	/* go_godot_array_max(API_STRUCT) ->godot_variant */

	api := Core11Api
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_array_max(
		api,
		rcv,
	)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_array_min -> godot_variant */
func (gdt *Array) Min() Variant {

	/* go_godot_array_min(API_STRUCT) ->godot_variant */

	api := Core11Api
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_array_min(
		api,
		rcv,
	)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_array_shuffle -> void */
func (gdt *Array) Shuffle() {

	/* go_godot_array_shuffle(API_STRUCT) ->void */

	api := Core11Api
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))

	C.go_godot_array_shuffle(
		api,
		rcv,
	)
}

/* Getter Method: godot_array_slice -> godot_array */
func (gdt *Array) Slice(
	p_begin int32 /* else case */, p_end int32 /* else case */, p_step int32 /* else case */, p_deep bool, /* else case */
) Array {

	/* go_godot_array_slice(API_STRUCT,godot_int,godot_int,godot_int,godot_bool) ->godot_array */

	api := Core12Api
	rcv := (*C.godot_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_begin))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_end))
	in2 := *(*C.godot_int)(unsafe.Pointer(&p_step))
	in3 := *(*C.godot_bool)(unsafe.Pointer(&p_deep))

	ret := C.go_godot_array_slice(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	return *(*Array)(unsafe.Pointer(&ret))
}

type Basis C.godot_basis

func InitBasisGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Basis"] = 0
	RegisterState.Stats.GodotTypeFrees["Basis"] = 0
}

func NewBasisWithRows(
	p_x_axis Vector3 /* godot_vector3 */, p_y_axis Vector3 /* godot_vector3 */, p_z_axis Vector3, /* godot_vector3 */
) Basis {
	dest := Basis{}

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_x_axis))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_y_axis))
	in2 := (*C.godot_vector3)(unsafe.Pointer(&p_z_axis))

	/* go_godot_basis_new_with_rows(API_STRUCT, *godot_vector3, *godot_vector3, *godot_vector3) -> *Basis */

	C.go_godot_basis_new_with_rows(
		api,
		rcv,
		in0,
		in1,
		in2,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)

	RegisterState.Stats.GodotTypeAllocs["Basis"]++

	return dest
}

func NewBasisWithAxisAndAngle(
	p_axis Vector3 /* godot_vector3 */, p_phi float32, /* else case */
) Basis {
	dest := Basis{}

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_axis))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_phi))

	/* go_godot_basis_new_with_axis_and_angle(API_STRUCT, *godot_vector3,godot_real) -> *Basis */

	C.go_godot_basis_new_with_axis_and_angle(
		api,
		rcv,
		in0,
		in1,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	RegisterState.Stats.GodotTypeAllocs["Basis"]++

	return dest
}

func NewBasisWithEuler(
	p_euler Vector3, /* godot_vector3 */
) Basis {
	dest := Basis{}

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_euler))

	/* go_godot_basis_new_with_euler(API_STRUCT, *godot_vector3) -> *Basis */

	C.go_godot_basis_new_with_euler(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Basis"]++

	return dest
}

func NewBasis() Basis {
	dest := Basis{}

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(&dest))

	/* go_godot_basis_new(API_STRUCT) -> *Basis */

	C.go_godot_basis_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["Basis"]++

	return dest
}

func NewBasisWithEulerQuat(
	p_euler Quat, /* godot_quat */
) Basis {
	dest := Basis{}

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(&dest))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_euler))

	/* go_godot_basis_new_with_euler_quat(API_STRUCT, *godot_quat) -> *Basis */

	C.go_godot_basis_new_with_euler_quat(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Basis"]++

	return dest
}

/* Getter Method: godot_basis_as_string -> godot_string */
func (gdt *Basis) AsString() String {

	/* go_godot_basis_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))

	ret := C.go_godot_basis_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_inverse -> godot_basis */
func (gdt *Basis) Inverse() Basis {

	/* go_godot_basis_inverse(API_STRUCT) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))

	ret := C.go_godot_basis_inverse(
		api,
		rcv,
	)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_transposed -> godot_basis */
func (gdt *Basis) Transposed() Basis {

	/* go_godot_basis_transposed(API_STRUCT) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))

	ret := C.go_godot_basis_transposed(
		api,
		rcv,
	)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_orthonormalized -> godot_basis */
func (gdt *Basis) Orthonormalized() Basis {

	/* go_godot_basis_orthonormalized(API_STRUCT) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))

	ret := C.go_godot_basis_orthonormalized(
		api,
		rcv,
	)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_determinant -> godot_real */
func (gdt *Basis) Determinant() float32 {

	/* go_godot_basis_determinant(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))

	ret := C.go_godot_basis_determinant(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_rotated -> godot_basis */
func (gdt *Basis) Rotated(
	p_axis Vector3 /* godot_vector3 */, p_phi float32, /* else case */
) Basis {

	/* go_godot_basis_rotated(API_STRUCT, *godot_vector3,godot_real) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_axis))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_phi))

	ret := C.go_godot_basis_rotated(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_scaled -> godot_basis */
func (gdt *Basis) Scaled(
	p_scale Vector3, /* godot_vector3 */
) Basis {

	/* go_godot_basis_scaled(API_STRUCT, *godot_vector3) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_scale))

	ret := C.go_godot_basis_scaled(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_get_scale -> godot_vector3 */
func (gdt *Basis) GetScale() Vector3 {

	/* go_godot_basis_get_scale(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))

	ret := C.go_godot_basis_get_scale(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_get_euler -> godot_vector3 */
func (gdt *Basis) GetEuler() Vector3 {

	/* go_godot_basis_get_euler(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))

	ret := C.go_godot_basis_get_euler(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_tdotx -> godot_real */
func (gdt *Basis) Tdotx(
	p_with Vector3, /* godot_vector3 */
) float32 {

	/* go_godot_basis_tdotx(API_STRUCT, *godot_vector3) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_with))

	ret := C.go_godot_basis_tdotx(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_tdoty -> godot_real */
func (gdt *Basis) Tdoty(
	p_with Vector3, /* godot_vector3 */
) float32 {

	/* go_godot_basis_tdoty(API_STRUCT, *godot_vector3) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_with))

	ret := C.go_godot_basis_tdoty(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_tdotz -> godot_real */
func (gdt *Basis) Tdotz(
	p_with Vector3, /* godot_vector3 */
) float32 {

	/* go_godot_basis_tdotz(API_STRUCT, *godot_vector3) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_with))

	ret := C.go_godot_basis_tdotz(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_xform -> godot_vector3 */
func (gdt *Basis) Xform(
	p_v Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_basis_xform(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_v))

	ret := C.go_godot_basis_xform(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_xform_inv -> godot_vector3 */
func (gdt *Basis) XformInv(
	p_v Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_basis_xform_inv(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_v))

	ret := C.go_godot_basis_xform_inv(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_get_orthogonal_index -> godot_int */
func (gdt *Basis) GetOrthogonalIndex() int32 {

	/* go_godot_basis_get_orthogonal_index(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))

	ret := C.go_godot_basis_get_orthogonal_index(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_basis_get_elements -> void */
func (gdt *Basis) GetElements(
	p_elements Vector3, /* godot_vector3 */
) {

	/* go_godot_basis_get_elements(API_STRUCT, *godot_vector3) ->void */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_elements))

	C.go_godot_basis_get_elements(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_basis_get_axis -> godot_vector3 */
func (gdt *Basis) GetAxis(
	p_axis int32, /* else case */
) Vector3 {

	/* go_godot_basis_get_axis(API_STRUCT,godot_int) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_axis))

	ret := C.go_godot_basis_get_axis(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_basis_set_axis -> void */
func (gdt *Basis) SetAxis(
	p_axis int32 /* else case */, p_value Vector3, /* godot_vector3 */
) {

	/* go_godot_basis_set_axis(API_STRUCT,godot_int, *godot_vector3) ->void */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_axis))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_value))

	C.go_godot_basis_set_axis(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_basis_get_row -> godot_vector3 */
func (gdt *Basis) GetRow(
	p_row int32, /* else case */
) Vector3 {

	/* go_godot_basis_get_row(API_STRUCT,godot_int) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_row))

	ret := C.go_godot_basis_get_row(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_basis_set_row -> void */
func (gdt *Basis) SetRow(
	p_row int32 /* else case */, p_value Vector3, /* godot_vector3 */
) {

	/* go_godot_basis_set_row(API_STRUCT,godot_int, *godot_vector3) ->void */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_row))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_value))

	C.go_godot_basis_set_row(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_basis_operator_equal -> godot_bool */
func (gdt *Basis) OperatorEqual(
	p_b Basis, /* godot_basis */
) bool {

	/* go_godot_basis_operator_equal(API_STRUCT, *godot_basis) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_basis)(unsafe.Pointer(&p_b))

	ret := C.go_godot_basis_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_operator_add -> godot_basis */
func (gdt *Basis) OperatorAdd(
	p_b Basis, /* godot_basis */
) Basis {

	/* go_godot_basis_operator_add(API_STRUCT, *godot_basis) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_basis)(unsafe.Pointer(&p_b))

	ret := C.go_godot_basis_operator_add(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_operator_subtract -> godot_basis */
func (gdt *Basis) OperatorSubtract(
	p_b Basis, /* godot_basis */
) Basis {

	/* go_godot_basis_operator_subtract(API_STRUCT, *godot_basis) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_basis)(unsafe.Pointer(&p_b))

	ret := C.go_godot_basis_operator_subtract(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_operator_multiply_vector -> godot_basis */
func (gdt *Basis) OperatorMultiplyVector(
	p_b Basis, /* godot_basis */
) Basis {

	/* go_godot_basis_operator_multiply_vector(API_STRUCT, *godot_basis) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_basis)(unsafe.Pointer(&p_b))

	ret := C.go_godot_basis_operator_multiply_vector(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_operator_multiply_scalar -> godot_basis */
func (gdt *Basis) OperatorMultiplyScalar(
	p_b float32, /* else case */
) Basis {

	/* go_godot_basis_operator_multiply_scalar(API_STRUCT,godot_real) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_b))

	ret := C.go_godot_basis_operator_multiply_scalar(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_slerp -> godot_basis */
func (gdt *Basis) Slerp(
	p_b Basis /* godot_basis */, p_t float32, /* else case */
) Basis {

	/* go_godot_basis_slerp(API_STRUCT, *godot_basis,godot_real) ->godot_basis */

	api := Core11Api
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_basis)(unsafe.Pointer(&p_b))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_t))

	ret := C.go_godot_basis_slerp(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_basis_get_quat -> godot_quat */
func (gdt *Basis) GetQuat() Quat {

	/* go_godot_basis_get_quat(API_STRUCT) ->godot_quat */

	api := Core11Api
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))

	ret := C.go_godot_basis_get_quat(
		api,
		rcv,
	)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_basis_set_quat -> void */
func (gdt *Basis) SetQuat(
	p_quat Quat, /* godot_quat */
) {

	/* go_godot_basis_set_quat(API_STRUCT, *godot_quat) ->void */

	api := Core11Api
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_quat))

	C.go_godot_basis_set_quat(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_basis_set_axis_angle_scale -> void */
func (gdt *Basis) SetAxisAngleScale(
	p_axis Vector3 /* godot_vector3 */, p_phi float32 /* else case */, p_scale Vector3, /* godot_vector3 */
) {

	/* go_godot_basis_set_axis_angle_scale(API_STRUCT, *godot_vector3,godot_real, *godot_vector3) ->void */

	api := Core11Api
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_axis))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_phi))
	in2 := (*C.godot_vector3)(unsafe.Pointer(&p_scale))

	C.go_godot_basis_set_axis_angle_scale(
		api,
		rcv,
		in0,
		in1,
		in2,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
}

/* Setter Method: godot_basis_set_euler_scale -> void */
func (gdt *Basis) SetEulerScale(
	p_euler Vector3 /* godot_vector3 */, p_scale Vector3, /* godot_vector3 */
) {

	/* go_godot_basis_set_euler_scale(API_STRUCT, *godot_vector3, *godot_vector3) ->void */

	api := Core11Api
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_euler))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_scale))

	C.go_godot_basis_set_euler_scale(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Setter Method: godot_basis_set_quat_scale -> void */
func (gdt *Basis) SetQuatScale(
	p_quat Quat /* godot_quat */, p_scale Vector3, /* godot_vector3 */
) {

	/* go_godot_basis_set_quat_scale(API_STRUCT, *godot_quat, *godot_vector3) ->void */

	api := Core11Api
	rcv := (*C.godot_basis)(unsafe.Pointer(gdt))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_quat))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_scale))

	C.go_godot_basis_set_quat_scale(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

type Color C.godot_color

func InitColorGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Color"] = 0
	RegisterState.Stats.GodotTypeFrees["Color"] = 0
}

func NewColorRgba(
	p_r float32 /* else case */, p_g float32 /* else case */, p_b float32 /* else case */, p_a float32, /* else case */
) Color {
	dest := Color{}

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(&dest))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_r))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_g))
	in2 := *(*C.godot_real)(unsafe.Pointer(&p_b))
	in3 := *(*C.godot_real)(unsafe.Pointer(&p_a))

	/* go_godot_color_new_rgba(API_STRUCT,godot_real,godot_real,godot_real,godot_real) -> *Color */

	C.go_godot_color_new_rgba(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	RegisterState.Stats.GodotTypeAllocs["Color"]++

	return dest
}

func NewColorRgb(
	p_r float32 /* else case */, p_g float32 /* else case */, p_b float32, /* else case */
) Color {
	dest := Color{}

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(&dest))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_r))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_g))
	in2 := *(*C.godot_real)(unsafe.Pointer(&p_b))

	/* go_godot_color_new_rgb(API_STRUCT,godot_real,godot_real,godot_real) -> *Color */

	C.go_godot_color_new_rgb(
		api,
		rcv,
		in0,
		in1,
		in2,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)

	RegisterState.Stats.GodotTypeAllocs["Color"]++

	return dest
}

/* Getter Method: godot_color_get_r -> godot_real */
func (gdt *Color) GetR() float32 {

	/* go_godot_color_get_r(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_get_r(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_color_set_r -> void */
func (gdt *Color) SetR(
	r float32, /* else case */
) {

	/* go_godot_color_set_r(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&r))

	C.go_godot_color_set_r(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_color_get_g -> godot_real */
func (gdt *Color) GetG() float32 {

	/* go_godot_color_get_g(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_get_g(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_color_set_g -> void */
func (gdt *Color) SetG(
	g float32, /* else case */
) {

	/* go_godot_color_set_g(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&g))

	C.go_godot_color_set_g(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_color_get_b -> godot_real */
func (gdt *Color) GetB() float32 {

	/* go_godot_color_get_b(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_get_b(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_color_set_b -> void */
func (gdt *Color) SetB(
	b float32, /* else case */
) {

	/* go_godot_color_set_b(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&b))

	C.go_godot_color_set_b(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_color_get_a -> godot_real */
func (gdt *Color) GetA() float32 {

	/* go_godot_color_get_a(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_get_a(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_color_set_a -> void */
func (gdt *Color) SetA(
	a float32, /* else case */
) {

	/* go_godot_color_set_a(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&a))

	C.go_godot_color_set_a(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_color_get_h -> godot_real */
func (gdt *Color) GetH() float32 {

	/* go_godot_color_get_h(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_get_h(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_get_s -> godot_real */
func (gdt *Color) GetS() float32 {

	/* go_godot_color_get_s(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_get_s(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_get_v -> godot_real */
func (gdt *Color) GetV() float32 {

	/* go_godot_color_get_v(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_get_v(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_as_string -> godot_string */
func (gdt *Color) AsString() String {

	/* go_godot_color_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_to_rgba32 -> godot_int */
func (gdt *Color) ToRgba32() int32 {

	/* go_godot_color_to_rgba32(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_to_rgba32(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_to_argb32 -> godot_int */
func (gdt *Color) ToArgb32() int32 {

	/* go_godot_color_to_argb32(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_to_argb32(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_gray -> godot_real */
func (gdt *Color) Gray() float32 {

	/* go_godot_color_gray(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_gray(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_inverted -> godot_color */
func (gdt *Color) Inverted() Color {

	/* go_godot_color_inverted(API_STRUCT) ->godot_color */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_inverted(
		api,
		rcv,
	)

	return *(*Color)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_contrasted -> godot_color */
func (gdt *Color) Contrasted() Color {

	/* go_godot_color_contrasted(API_STRUCT) ->godot_color */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_contrasted(
		api,
		rcv,
	)

	return *(*Color)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_linear_interpolate -> godot_color */
func (gdt *Color) LinearInterpolate(
	p_b Color /* godot_color */, p_t float32, /* else case */
) Color {

	/* go_godot_color_linear_interpolate(API_STRUCT, *godot_color,godot_real) ->godot_color */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := (*C.godot_color)(unsafe.Pointer(&p_b))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_t))

	ret := C.go_godot_color_linear_interpolate(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Color)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_blend -> godot_color */
func (gdt *Color) Blend(
	p_over Color, /* godot_color */
) Color {

	/* go_godot_color_blend(API_STRUCT, *godot_color) ->godot_color */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := (*C.godot_color)(unsafe.Pointer(&p_over))

	ret := C.go_godot_color_blend(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Color)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_to_html -> godot_string */
func (gdt *Color) ToHtml(
	p_with_alpha bool, /* else case */
) String {

	/* go_godot_color_to_html(API_STRUCT,godot_bool) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_bool)(unsafe.Pointer(&p_with_alpha))

	ret := C.go_godot_color_to_html(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_operator_equal -> godot_bool */
func (gdt *Color) OperatorEqual(
	p_b Color, /* godot_color */
) bool {

	/* go_godot_color_operator_equal(API_STRUCT, *godot_color) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := (*C.godot_color)(unsafe.Pointer(&p_b))

	ret := C.go_godot_color_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_operator_less -> godot_bool */
func (gdt *Color) OperatorLess(
	p_b Color, /* godot_color */
) bool {

	/* go_godot_color_operator_less(API_STRUCT, *godot_color) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := (*C.godot_color)(unsafe.Pointer(&p_b))

	ret := C.go_godot_color_operator_less(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_to_abgr32 -> godot_int */
func (gdt *Color) ToAbgr32() int32 {

	/* go_godot_color_to_abgr32(API_STRUCT) ->godot_int */

	api := Core11Api
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_to_abgr32(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_to_abgr64 -> godot_int */
func (gdt *Color) ToAbgr64() int32 {

	/* go_godot_color_to_abgr64(API_STRUCT) ->godot_int */

	api := Core11Api
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_to_abgr64(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_to_argb64 -> godot_int */
func (gdt *Color) ToArgb64() int32 {

	/* go_godot_color_to_argb64(API_STRUCT) ->godot_int */

	api := Core11Api
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_to_argb64(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_to_rgba64 -> godot_int */
func (gdt *Color) ToRgba64() int32 {

	/* go_godot_color_to_rgba64(API_STRUCT) ->godot_int */

	api := Core11Api
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))

	ret := C.go_godot_color_to_rgba64(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_darkened -> godot_color */
func (gdt *Color) Darkened(
	p_amount float32, /* else case */
) Color {

	/* go_godot_color_darkened(API_STRUCT,godot_real) ->godot_color */

	api := Core11Api
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_amount))

	ret := C.go_godot_color_darkened(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Color)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_from_hsv -> godot_color */
func (gdt *Color) FromHsv(
	p_h float32 /* else case */, p_s float32 /* else case */, p_v float32 /* else case */, p_a float32, /* else case */
) Color {

	/* go_godot_color_from_hsv(API_STRUCT,godot_real,godot_real,godot_real,godot_real) ->godot_color */

	api := Core11Api
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_h))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_s))
	in2 := *(*C.godot_real)(unsafe.Pointer(&p_v))
	in3 := *(*C.godot_real)(unsafe.Pointer(&p_a))

	ret := C.go_godot_color_from_hsv(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	return *(*Color)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_color_lightened -> godot_color */
func (gdt *Color) Lightened(
	p_amount float32, /* else case */
) Color {

	/* go_godot_color_lightened(API_STRUCT,godot_real) ->godot_color */

	api := Core11Api
	rcv := (*C.godot_color)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_amount))

	ret := C.go_godot_color_lightened(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Color)(unsafe.Pointer(&ret))
}

type Dictionary C.godot_dictionary

func InitDictionaryGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Dictionary"] = 0
	RegisterState.Stats.GodotTypeFrees["Dictionary"] = 0
}

func NewDictionary() Dictionary {
	dest := Dictionary{}

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(&dest))

	/* go_godot_dictionary_new(API_STRUCT) -> *Dictionary */

	C.go_godot_dictionary_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["Dictionary"]++

	return dest
}

func NewDictionaryCopy(
	p_src Dictionary, /* godot_dictionary */
) Dictionary {
	dest := Dictionary{}

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(&dest))
	in0 := (*C.godot_dictionary)(unsafe.Pointer(&p_src))

	/* go_godot_dictionary_new_copy(API_STRUCT, *godot_dictionary) -> *Dictionary */

	C.go_godot_dictionary_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Dictionary"]++

	return dest
}

/* Setter Method: godot_dictionary_destroy -> void */
func (gdt *Dictionary) Destroy() {

	/* go_godot_dictionary_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))

	C.go_godot_dictionary_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["Dictionary"]++

}

/* Getter Method: godot_dictionary_size -> godot_int */
func (gdt *Dictionary) Size() int32 {

	/* go_godot_dictionary_size(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))

	ret := C.go_godot_dictionary_size(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_empty -> godot_bool */
func (gdt *Dictionary) Empty() bool {

	/* go_godot_dictionary_empty(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))

	ret := C.go_godot_dictionary_empty(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_dictionary_clear -> void */
func (gdt *Dictionary) Clear() {

	/* go_godot_dictionary_clear(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))

	C.go_godot_dictionary_clear(
		api,
		rcv,
	)
}

/* Getter Method: godot_dictionary_has -> godot_bool */
func (gdt *Dictionary) Has(
	p_key Variant, /* godot_variant */
) bool {

	/* go_godot_dictionary_has(API_STRUCT, *godot_variant) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_key))

	ret := C.go_godot_dictionary_has(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_has_all -> godot_bool */
func (gdt *Dictionary) HasAll(
	p_keys Array, /* godot_array */
) bool {

	/* go_godot_dictionary_has_all(API_STRUCT, *godot_array) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_keys))

	ret := C.go_godot_dictionary_has_all(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_dictionary_erase -> void */
func (gdt *Dictionary) Erase(
	p_key Variant, /* godot_variant */
) {

	/* go_godot_dictionary_erase(API_STRUCT, *godot_variant) ->void */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_key))

	C.go_godot_dictionary_erase(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_dictionary_hash -> godot_int */
func (gdt *Dictionary) Hash() int32 {

	/* go_godot_dictionary_hash(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))

	ret := C.go_godot_dictionary_hash(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_keys -> godot_array */
func (gdt *Dictionary) Keys() Array {

	/* go_godot_dictionary_keys(API_STRUCT) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))

	ret := C.go_godot_dictionary_keys(
		api,
		rcv,
	)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_values -> godot_array */
func (gdt *Dictionary) Values() Array {

	/* go_godot_dictionary_values(API_STRUCT) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))

	ret := C.go_godot_dictionary_values(
		api,
		rcv,
	)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_get -> godot_variant */
func (gdt *Dictionary) Get(
	p_key Variant, /* godot_variant */
) Variant {

	/* go_godot_dictionary_get(API_STRUCT, *godot_variant) ->godot_variant */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_key))

	ret := C.go_godot_dictionary_get(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_dictionary_set -> void */
func (gdt *Dictionary) Set(
	p_key Variant /* godot_variant */, p_value Variant, /* godot_variant */
) {

	/* go_godot_dictionary_set(API_STRUCT, *godot_variant, *godot_variant) ->void */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_key))
	in1 := (*C.godot_variant)(unsafe.Pointer(&p_value))

	C.go_godot_dictionary_set(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_dictionary_operator_index -> godot_variant */
func (gdt *Dictionary) OperatorIndex(
	p_key Variant, /* godot_variant */
) Variant {

	/* go_godot_dictionary_operator_index(API_STRUCT, *godot_variant) -> *Variant */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_key))

	ret := C.go_godot_dictionary_operator_index(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_operator_index_const -> godot_variant */
func (gdt *Dictionary) OperatorIndexConst(
	p_key Variant, /* godot_variant */
) Variant {

	/* go_godot_dictionary_operator_index_const(API_STRUCT, *godot_variant) -> *Variant */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_key))

	ret := C.go_godot_dictionary_operator_index_const(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_next -> godot_variant */
func (gdt *Dictionary) Next(
	p_key Variant, /* godot_variant */
) Variant {

	/* go_godot_dictionary_next(API_STRUCT, *godot_variant) -> *Variant */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_key))

	ret := C.go_godot_dictionary_next(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_operator_equal -> godot_bool */
func (gdt *Dictionary) OperatorEqual(
	p_b Dictionary, /* godot_dictionary */
) bool {

	/* go_godot_dictionary_operator_equal(API_STRUCT, *godot_dictionary) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := (*C.godot_dictionary)(unsafe.Pointer(&p_b))

	ret := C.go_godot_dictionary_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_to_json -> godot_string */
func (gdt *Dictionary) ToJson() String {

	/* go_godot_dictionary_to_json(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))

	ret := C.go_godot_dictionary_to_json(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_get_with_default -> godot_variant */
func (gdt *Dictionary) GetWithDefault(
	p_key Variant /* godot_variant */, p_default Variant, /* godot_variant */
) Variant {

	/* go_godot_dictionary_get_with_default(API_STRUCT, *godot_variant, *godot_variant) ->godot_variant */

	api := Core11Api
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_key))
	in1 := (*C.godot_variant)(unsafe.Pointer(&p_default))

	ret := C.go_godot_dictionary_get_with_default(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_erase_with_return -> bool */
func (gdt *Dictionary) EraseWithReturn(
	p_key Variant, /* godot_variant */
) bool {

	/* go_godot_dictionary_erase_with_return(API_STRUCT, *godot_variant) ->bool */

	api := Core11Api
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_key))

	ret := C.go_godot_dictionary_erase_with_return(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_dictionary_duplicate -> godot_dictionary */
func (gdt *Dictionary) Duplicate(
	p_deep bool, /* else case */
) Dictionary {

	/* go_godot_dictionary_duplicate(API_STRUCT,godot_bool) ->godot_dictionary */

	api := Core12Api
	rcv := (*C.godot_dictionary)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_bool)(unsafe.Pointer(&p_deep))

	ret := C.go_godot_dictionary_duplicate(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Dictionary)(unsafe.Pointer(&ret))
}

// mapped C.godot_bool to native go type bool

type Error C.godot_error

func InitErrorGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Error"] = 0
	RegisterState.Stats.GodotTypeFrees["Error"] = 0
}

/* Enum Error */
const (
	GODOT_OK Error = iota
	GODOT_FAILED
	GODOT_ERR_UNAVAILABLE
	GODOT_ERR_UNCONFIGURED
	GODOT_ERR_UNAUTHORIZED
	GODOT_ERR_PARAMETER_RANGE_ERROR
	GODOT_ERR_OUT_OF_MEMORY
	GODOT_ERR_FILE_NOT_FOUND
	GODOT_ERR_FILE_BAD_DRIVE
	GODOT_ERR_FILE_BAD_PATH
	GODOT_ERR_FILE_NO_PERMISSION
	GODOT_ERR_FILE_ALREADY_IN_USE
	GODOT_ERR_FILE_CANT_OPEN
	GODOT_ERR_FILE_CANT_WRITE
	GODOT_ERR_FILE_CANT_READ
	GODOT_ERR_FILE_UNRECOGNIZED
	GODOT_ERR_FILE_CORRUPT
	GODOT_ERR_FILE_MISSING_DEPENDENCIES
	GODOT_ERR_FILE_EOF
	GODOT_ERR_CANT_OPEN
	GODOT_ERR_CANT_CREATE
	GODOT_ERR_QUERY_FAILED
	GODOT_ERR_ALREADY_IN_USE
	GODOT_ERR_LOCKED
	GODOT_ERR_TIMEOUT
	GODOT_ERR_CANT_CONNECT
	GODOT_ERR_CANT_RESOLVE
	GODOT_ERR_CONNECTION_ERROR
	GODOT_ERR_CANT_ACQUIRE_RESOURCE
	GODOT_ERR_CANT_FORK
	GODOT_ERR_INVALID_DATA
	GODOT_ERR_INVALID_PARAMETER
	GODOT_ERR_ALREADY_EXISTS
	GODOT_ERR_DOES_NOT_EXIST
	GODOT_ERR_DATABASE_CANT_READ
	GODOT_ERR_DATABASE_CANT_WRITE
	GODOT_ERR_COMPILATION_FAILED
	GODOT_ERR_METHOD_NOT_FOUND
	GODOT_ERR_LINK_FAILED
	GODOT_ERR_SCRIPT_FAILED
	GODOT_ERR_CYCLIC_LINK
	GODOT_ERR_INVALID_DECLARATION
	GODOT_ERR_DUPLICATE_SYMBOL
	GODOT_ERR_PARSE_ERROR
	GODOT_ERR_BUSY
	GODOT_ERR_SKIP
	GODOT_ERR_HELP
	GODOT_ERR_BUG
	GODOT_ERR_PRINTER_ON_FIRE
)

type GdnativeApiStruct C.godot_gdnative_api_struct

func InitGdnativeApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeApiStruct"] = 0
}

type GdnativeApiVersion C.godot_gdnative_api_version

func InitGdnativeApiVersionGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeApiVersion"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeApiVersion"] = 0
}

type GdnativeInitOptions C.godot_gdnative_init_options

func InitGdnativeInitOptionsGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeInitOptions"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeInitOptions"] = 0
}

type GdnativeTerminateOptions C.godot_gdnative_terminate_options

func InitGdnativeTerminateOptionsGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeTerminateOptions"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeTerminateOptions"] = 0
}

// mapped C.godot_int to native go type int32

type MethodBind C.godot_method_bind

func InitMethodBindGodotType() {
	RegisterState.Stats.GodotTypeAllocs["MethodBind"] = 0
	RegisterState.Stats.GodotTypeFrees["MethodBind"] = 0
}

/* Setter Method: godot_method_bind_ptrcall -> void */
func (gdt *MethodBind) Ptrcall(
	p_instance *GodotObject, p_args []unsafe.Pointer, p_ret unsafe.Pointer,
) {

	/* go_godot_method_bind_ptrcall(API_STRUCT, *godot_object, **void, *void) ->void */

	api := CoreApi
	rcv := (*C.godot_method_bind)(unsafe.Pointer(gdt))
	in0 := unsafe.Pointer(p_instance)
	cArr1 := ArrayRefFromPtrSlice(p_args)
	in1 := (*unsafe.Pointer)(unsafe.Pointer(cArr1))
	in2 := unsafe.Pointer(p_ret)

	C.go_godot_method_bind_ptrcall(
		api,
		rcv,
		in0,
		in1,
		in2,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
}

/* Getter Method: godot_method_bind_call -> godot_variant */
func (gdt *MethodBind) Call(
	p_instance *GodotObject, p_args []*Variant, p_arg_count int32 /* else case */, p_call_error VariantCallError, /* godot_variant_call_error */
) Variant {

	/* go_godot_method_bind_call(API_STRUCT, *godot_object, **godot_variant,int, *godot_variant_call_error) ->godot_variant */

	api := CoreApi
	rcv := (*C.godot_method_bind)(unsafe.Pointer(gdt))
	in0 := unsafe.Pointer(p_instance)
	cArr1 := AllocNewArrayAsUnsafePointer(p_args)
	defer Free(cArr1)
	in1 := (**C.godot_variant)(unsafe.Pointer(cArr1))
	in2 := *(*C.int)(unsafe.Pointer(&p_arg_count))
	in3 := (*C.godot_variant_call_error)(unsafe.Pointer(&p_call_error))

	ret := C.go_godot_method_bind_call(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	return *(*Variant)(unsafe.Pointer(&ret))
}

type GodotObject C.godot_object

func InitGodotObjectGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GodotObject"] = 0
	RegisterState.Stats.GodotTypeFrees["GodotObject"] = 0
}

// mapped C.godot_real to native go type float32

type NodePath C.godot_node_path

func InitNodePathGodotType() {
	RegisterState.Stats.GodotTypeAllocs["NodePath"] = 0
	RegisterState.Stats.GodotTypeFrees["NodePath"] = 0
}

func NewNodePath(
	p_from string, /* Hides String */
) NodePath {
	dest := NodePath{}

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(&dest))
	// hide godot_string / String and expose native go string
	strIn0 := internWithGoString(p_from)
	in0 := (*C.godot_string)(unsafe.Pointer(&strIn0))

	/* go_godot_node_path_new(API_STRUCT, *godot_string) -> *NodePath */

	C.go_godot_node_path_new(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["NodePath"]++

	return dest
}

func NewNodePathCopy(
	p_src NodePath, /* godot_node_path */
) NodePath {
	dest := NodePath{}

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(&dest))
	in0 := (*C.godot_node_path)(unsafe.Pointer(&p_src))

	/* go_godot_node_path_new_copy(API_STRUCT, *godot_node_path) -> *NodePath */

	C.go_godot_node_path_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["NodePath"]++

	return dest
}

/* Setter Method: godot_node_path_destroy -> void */
func (gdt *NodePath) Destroy() {

	/* go_godot_node_path_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(gdt))

	C.go_godot_node_path_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["NodePath"]++

}

/* Getter Method: godot_node_path_as_string -> godot_string */
func (gdt *NodePath) AsString() String {

	/* go_godot_node_path_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(gdt))

	ret := C.go_godot_node_path_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_node_path_is_absolute -> godot_bool */
func (gdt *NodePath) IsAbsolute() bool {

	/* go_godot_node_path_is_absolute(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(gdt))

	ret := C.go_godot_node_path_is_absolute(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_node_path_get_name_count -> godot_int */
func (gdt *NodePath) GetNameCount() int32 {

	/* go_godot_node_path_get_name_count(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(gdt))

	ret := C.go_godot_node_path_get_name_count(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_node_path_get_name -> godot_string */
func (gdt *NodePath) GetName(
	p_idx int32, /* else case */
) String {

	/* go_godot_node_path_get_name(API_STRUCT,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_node_path_get_name(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_node_path_get_subname_count -> godot_int */
func (gdt *NodePath) GetSubnameCount() int32 {

	/* go_godot_node_path_get_subname_count(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(gdt))

	ret := C.go_godot_node_path_get_subname_count(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_node_path_get_subname -> godot_string */
func (gdt *NodePath) GetSubname(
	p_idx int32, /* else case */
) String {

	/* go_godot_node_path_get_subname(API_STRUCT,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_node_path_get_subname(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_node_path_get_concatenated_subnames -> godot_string */
func (gdt *NodePath) GetConcatenatedSubnames() String {

	/* go_godot_node_path_get_concatenated_subnames(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(gdt))

	ret := C.go_godot_node_path_get_concatenated_subnames(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_node_path_is_empty -> godot_bool */
func (gdt *NodePath) IsEmpty() bool {

	/* go_godot_node_path_is_empty(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(gdt))

	ret := C.go_godot_node_path_is_empty(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_node_path_operator_equal -> godot_bool */
func (gdt *NodePath) OperatorEqual(
	p_b NodePath, /* godot_node_path */
) bool {

	/* go_godot_node_path_operator_equal(API_STRUCT, *godot_node_path) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_node_path)(unsafe.Pointer(gdt))
	in0 := (*C.godot_node_path)(unsafe.Pointer(&p_b))

	ret := C.go_godot_node_path_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_node_path_get_as_property_path -> godot_node_path */
func (gdt *NodePath) GetAsPropertyPath() NodePath {

	/* go_godot_node_path_get_as_property_path(API_STRUCT) ->godot_node_path */

	api := Core11Api
	rcv := (*C.godot_node_path)(unsafe.Pointer(gdt))

	ret := C.go_godot_node_path_get_as_property_path(
		api,
		rcv,
	)

	return *(*NodePath)(unsafe.Pointer(&ret))
}

type Plane C.godot_plane

func InitPlaneGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Plane"] = 0
	RegisterState.Stats.GodotTypeFrees["Plane"] = 0
}

func NewPlaneWithReals(
	p_a float32 /* else case */, p_b float32 /* else case */, p_c float32 /* else case */, p_d float32, /* else case */
) Plane {
	dest := Plane{}

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(&dest))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_a))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_b))
	in2 := *(*C.godot_real)(unsafe.Pointer(&p_c))
	in3 := *(*C.godot_real)(unsafe.Pointer(&p_d))

	/* go_godot_plane_new_with_reals(API_STRUCT,godot_real,godot_real,godot_real,godot_real) -> *Plane */

	C.go_godot_plane_new_with_reals(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	RegisterState.Stats.GodotTypeAllocs["Plane"]++

	return dest
}

func NewPlaneWithVectors(
	p_v1 Vector3 /* godot_vector3 */, p_v2 Vector3 /* godot_vector3 */, p_v3 Vector3, /* godot_vector3 */
) Plane {
	dest := Plane{}

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_v1))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_v2))
	in2 := (*C.godot_vector3)(unsafe.Pointer(&p_v3))

	/* go_godot_plane_new_with_vectors(API_STRUCT, *godot_vector3, *godot_vector3, *godot_vector3) -> *Plane */

	C.go_godot_plane_new_with_vectors(
		api,
		rcv,
		in0,
		in1,
		in2,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)

	RegisterState.Stats.GodotTypeAllocs["Plane"]++

	return dest
}

func NewPlaneWithNormal(
	p_normal Vector3 /* godot_vector3 */, p_d float32, /* else case */
) Plane {
	dest := Plane{}

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_normal))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_d))

	/* go_godot_plane_new_with_normal(API_STRUCT, *godot_vector3,godot_real) -> *Plane */

	C.go_godot_plane_new_with_normal(
		api,
		rcv,
		in0,
		in1,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	RegisterState.Stats.GodotTypeAllocs["Plane"]++

	return dest
}

/* Getter Method: godot_plane_as_string -> godot_string */
func (gdt *Plane) AsString() String {

	/* go_godot_plane_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))

	ret := C.go_godot_plane_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_normalized -> godot_plane */
func (gdt *Plane) Normalized() Plane {

	/* go_godot_plane_normalized(API_STRUCT) ->godot_plane */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))

	ret := C.go_godot_plane_normalized(
		api,
		rcv,
	)

	return *(*Plane)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_center -> godot_vector3 */
func (gdt *Plane) Center() Vector3 {

	/* go_godot_plane_center(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))

	ret := C.go_godot_plane_center(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_get_any_point -> godot_vector3 */
func (gdt *Plane) GetAnyPoint() Vector3 {

	/* go_godot_plane_get_any_point(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))

	ret := C.go_godot_plane_get_any_point(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_is_point_over -> godot_bool */
func (gdt *Plane) IsPointOver(
	p_point Vector3, /* godot_vector3 */
) bool {

	/* go_godot_plane_is_point_over(API_STRUCT, *godot_vector3) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_point))

	ret := C.go_godot_plane_is_point_over(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_distance_to -> godot_real */
func (gdt *Plane) DistanceTo(
	p_point Vector3, /* godot_vector3 */
) float32 {

	/* go_godot_plane_distance_to(API_STRUCT, *godot_vector3) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_point))

	ret := C.go_godot_plane_distance_to(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_has_point -> godot_bool */
func (gdt *Plane) HasPoint(
	p_point Vector3 /* godot_vector3 */, p_epsilon float32, /* else case */
) bool {

	/* go_godot_plane_has_point(API_STRUCT, *godot_vector3,godot_real) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_point))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_epsilon))

	ret := C.go_godot_plane_has_point(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_project -> godot_vector3 */
func (gdt *Plane) Project(
	p_point Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_plane_project(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_point))

	ret := C.go_godot_plane_project(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_intersect_3 -> godot_bool */
func (gdt *Plane) Intersect3(
	r_dest Vector3 /* godot_vector3 */, p_b Plane /* godot_plane */, p_c Plane, /* godot_plane */
) bool {

	/* go_godot_plane_intersect_3(API_STRUCT, *godot_vector3, *godot_plane, *godot_plane) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&r_dest))
	in1 := (*C.godot_plane)(unsafe.Pointer(&p_b))
	in2 := (*C.godot_plane)(unsafe.Pointer(&p_c))

	ret := C.go_godot_plane_intersect_3(
		api,
		rcv,
		in0,
		in1,
		in2,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_intersects_ray -> godot_bool */
func (gdt *Plane) IntersectsRay(
	r_dest Vector3 /* godot_vector3 */, p_from Vector3 /* godot_vector3 */, p_dir Vector3, /* godot_vector3 */
) bool {

	/* go_godot_plane_intersects_ray(API_STRUCT, *godot_vector3, *godot_vector3, *godot_vector3) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&r_dest))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_from))
	in2 := (*C.godot_vector3)(unsafe.Pointer(&p_dir))

	ret := C.go_godot_plane_intersects_ray(
		api,
		rcv,
		in0,
		in1,
		in2,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_intersects_segment -> godot_bool */
func (gdt *Plane) IntersectsSegment(
	r_dest Vector3 /* godot_vector3 */, p_begin Vector3 /* godot_vector3 */, p_end Vector3, /* godot_vector3 */
) bool {

	/* go_godot_plane_intersects_segment(API_STRUCT, *godot_vector3, *godot_vector3, *godot_vector3) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&r_dest))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_begin))
	in2 := (*C.godot_vector3)(unsafe.Pointer(&p_end))

	ret := C.go_godot_plane_intersects_segment(
		api,
		rcv,
		in0,
		in1,
		in2,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_operator_neg -> godot_plane */
func (gdt *Plane) OperatorNeg() Plane {

	/* go_godot_plane_operator_neg(API_STRUCT) ->godot_plane */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))

	ret := C.go_godot_plane_operator_neg(
		api,
		rcv,
	)

	return *(*Plane)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_operator_equal -> godot_bool */
func (gdt *Plane) OperatorEqual(
	p_b Plane, /* godot_plane */
) bool {

	/* go_godot_plane_operator_equal(API_STRUCT, *godot_plane) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))
	in0 := (*C.godot_plane)(unsafe.Pointer(&p_b))

	ret := C.go_godot_plane_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_plane_set_normal -> void */
func (gdt *Plane) SetNormal(
	p_normal Vector3, /* godot_vector3 */
) {

	/* go_godot_plane_set_normal(API_STRUCT, *godot_vector3) ->void */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_normal))

	C.go_godot_plane_set_normal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_plane_get_normal -> godot_vector3 */
func (gdt *Plane) GetNormal() Vector3 {

	/* go_godot_plane_get_normal(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))

	ret := C.go_godot_plane_get_normal(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_plane_get_d -> godot_real */
func (gdt *Plane) GetD() float32 {

	/* go_godot_plane_get_d(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))

	ret := C.go_godot_plane_get_d(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_plane_set_d -> void */
func (gdt *Plane) SetD(
	p_d float32, /* else case */
) {

	/* go_godot_plane_set_d(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_plane)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_d))

	C.go_godot_plane_set_d(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

type PoolArrayReadAccess C.godot_pool_array_read_access

func InitPoolArrayReadAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolArrayReadAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolArrayReadAccess"] = 0
}

type PoolArrayWriteAccess C.godot_pool_array_write_access

func InitPoolArrayWriteAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolArrayWriteAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolArrayWriteAccess"] = 0
}

type PoolByteArray C.godot_pool_byte_array

func InitPoolByteArrayGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolByteArray"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolByteArray"] = 0
}

func NewPoolByteArray() PoolByteArray {
	dest := PoolByteArray{}

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(&dest))

	/* go_godot_pool_byte_array_new(API_STRUCT) -> *PoolByteArray */

	C.go_godot_pool_byte_array_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["PoolByteArray"]++

	return dest
}

func NewPoolByteArrayCopy(
	p_src PoolByteArray, /* godot_pool_byte_array */
) PoolByteArray {
	dest := PoolByteArray{}

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_byte_array)(unsafe.Pointer(&p_src))

	/* go_godot_pool_byte_array_new_copy(API_STRUCT, *godot_pool_byte_array) -> *PoolByteArray */

	C.go_godot_pool_byte_array_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolByteArray"]++

	return dest
}

func NewPoolByteArrayWithArray(
	p_a Array, /* godot_array */
) PoolByteArray {
	dest := PoolByteArray{}

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_a))

	/* go_godot_pool_byte_array_new_with_array(API_STRUCT, *godot_array) -> *PoolByteArray */

	C.go_godot_pool_byte_array_new_with_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolByteArray"]++

	return dest
}

/* Setter Method: godot_pool_byte_array_append -> void */
func (gdt *PoolByteArray) Append(
	p_data uint8, /* else case */
) {

	/* go_godot_pool_byte_array_append(API_STRUCT,uint8_t) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))
	in0 := *(*C.uint8_t)(unsafe.Pointer(&p_data))

	C.go_godot_pool_byte_array_append(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_byte_array_append_array -> void */
func (gdt *PoolByteArray) AppendArray(
	p_array PoolByteArray, /* godot_pool_byte_array */
) {

	/* go_godot_pool_byte_array_append_array(API_STRUCT, *godot_pool_byte_array) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_byte_array)(unsafe.Pointer(&p_array))

	C.go_godot_pool_byte_array_append_array(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_byte_array_insert -> godot_error */
func (gdt *PoolByteArray) Insert(
	p_idx int32 /* else case */, p_data uint8, /* else case */
) Error {

	/* go_godot_pool_byte_array_insert(API_STRUCT,godot_int,uint8_t) ->godot_error */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := *(*C.uint8_t)(unsafe.Pointer(&p_data))

	ret := C.go_godot_pool_byte_array_insert(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Error)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_byte_array_invert -> void */
func (gdt *PoolByteArray) Invert() {

	/* go_godot_pool_byte_array_invert(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_byte_array_invert(
		api,
		rcv,
	)
}

/* Setter Method: godot_pool_byte_array_push_back -> void */
func (gdt *PoolByteArray) PushBack(
	p_data uint8, /* else case */
) {

	/* go_godot_pool_byte_array_push_back(API_STRUCT,uint8_t) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))
	in0 := *(*C.uint8_t)(unsafe.Pointer(&p_data))

	C.go_godot_pool_byte_array_push_back(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_byte_array_remove -> void */
func (gdt *PoolByteArray) Remove(
	p_idx int32, /* else case */
) {

	/* go_godot_pool_byte_array_remove(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	C.go_godot_pool_byte_array_remove(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_byte_array_resize -> void */
func (gdt *PoolByteArray) Resize(
	p_size int32, /* else case */
) {

	/* go_godot_pool_byte_array_resize(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_size))

	C.go_godot_pool_byte_array_resize(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_byte_array_read -> godot_pool_byte_array_read_access */
func (gdt *PoolByteArray) Read() PoolByteArrayReadAccess {

	/* go_godot_pool_byte_array_read(API_STRUCT) -> *PoolByteArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_byte_array_read(
		api,
		rcv,
	)

	return *(*PoolByteArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_byte_array_write -> godot_pool_byte_array_write_access */
func (gdt *PoolByteArray) Write() PoolByteArrayWriteAccess {

	/* go_godot_pool_byte_array_write(API_STRUCT) -> *PoolByteArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_byte_array_write(
		api,
		rcv,
	)

	return *(*PoolByteArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_byte_array_set -> void */
func (gdt *PoolByteArray) Set(
	p_idx int32 /* else case */, p_data uint8, /* else case */
) {

	/* go_godot_pool_byte_array_set(API_STRUCT,godot_int,uint8_t) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := *(*C.uint8_t)(unsafe.Pointer(&p_data))

	C.go_godot_pool_byte_array_set(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_pool_byte_array_get -> uint8_t */
func (gdt *PoolByteArray) Get(
	p_idx int32, /* else case */
) uint8 {

	/* go_godot_pool_byte_array_get(API_STRUCT,godot_int) ->uint8_t */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_pool_byte_array_get(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*uint8)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_byte_array_size -> godot_int */
func (gdt *PoolByteArray) Size() int32 {

	/* go_godot_pool_byte_array_size(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_byte_array_size(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_byte_array_destroy -> void */
func (gdt *PoolByteArray) Destroy() {

	/* go_godot_pool_byte_array_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_byte_array_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolByteArray"]++

}

/* Getter Method: godot_pool_byte_array_empty -> godot_bool */
func (gdt *PoolByteArray) Empty() bool {

	/* go_godot_pool_byte_array_empty(API_STRUCT) ->godot_bool */

	api := Core12Api
	rcv := (*C.godot_pool_byte_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_byte_array_empty(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

type PoolByteArrayReadAccess C.godot_pool_byte_array_read_access

func InitPoolByteArrayReadAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolByteArrayReadAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolByteArrayReadAccess"] = 0
}

/* Getter Method: godot_pool_byte_array_read_access_copy -> godot_pool_byte_array_read_access */
func (gdt *PoolByteArrayReadAccess) Copy() PoolByteArrayReadAccess {

	/* go_godot_pool_byte_array_read_access_copy(API_STRUCT) -> *PoolByteArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_byte_array_read_access_copy(
		api,
		rcv,
	)

	return *(*PoolByteArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_byte_array_read_access_ptr -> uint8_t */
func (gdt *PoolByteArrayReadAccess) Ptr() uint8 {

	/* go_godot_pool_byte_array_read_access_ptr(API_STRUCT) -> *uint8 */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_byte_array_read_access_ptr(
		api,
		rcv,
	)

	return *(*uint8)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_byte_array_read_access_operator_assign -> void */
func (gdt *PoolByteArrayReadAccess) OperatorAssign(
	p_other PoolByteArrayReadAccess, /* godot_pool_byte_array_read_access */
) {

	/* go_godot_pool_byte_array_read_access_operator_assign(API_STRUCT, *godot_pool_byte_array_read_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array_read_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_byte_array_read_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_byte_array_read_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_byte_array_read_access_destroy -> void */
func (gdt *PoolByteArrayReadAccess) Destroy() {

	/* go_godot_pool_byte_array_read_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array_read_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_byte_array_read_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolByteArrayReadAccess"]++

}

type PoolByteArrayWriteAccess C.godot_pool_byte_array_write_access

func InitPoolByteArrayWriteAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolByteArrayWriteAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolByteArrayWriteAccess"] = 0
}

/* Getter Method: godot_pool_byte_array_write_access_copy -> godot_pool_byte_array_write_access */
func (gdt *PoolByteArrayWriteAccess) Copy() PoolByteArrayWriteAccess {

	/* go_godot_pool_byte_array_write_access_copy(API_STRUCT) -> *PoolByteArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_byte_array_write_access_copy(
		api,
		rcv,
	)

	return *(*PoolByteArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_byte_array_write_access_ptr -> uint8_t */
func (gdt *PoolByteArrayWriteAccess) Ptr() uint8 {

	/* go_godot_pool_byte_array_write_access_ptr(API_STRUCT) -> *uint8 */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_byte_array_write_access_ptr(
		api,
		rcv,
	)

	return *(*uint8)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_byte_array_write_access_operator_assign -> void */
func (gdt *PoolByteArrayWriteAccess) OperatorAssign(
	p_other PoolByteArrayWriteAccess, /* godot_pool_byte_array_write_access */
) {

	/* go_godot_pool_byte_array_write_access_operator_assign(API_STRUCT, *godot_pool_byte_array_write_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array_write_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_byte_array_write_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_byte_array_write_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_byte_array_write_access_destroy -> void */
func (gdt *PoolByteArrayWriteAccess) Destroy() {

	/* go_godot_pool_byte_array_write_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_byte_array_write_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_byte_array_write_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolByteArrayWriteAccess"]++

}

type PoolColorArray C.godot_pool_color_array

func InitPoolColorArrayGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolColorArray"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolColorArray"] = 0
}

func NewPoolColorArray() PoolColorArray {
	dest := PoolColorArray{}

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(&dest))

	/* go_godot_pool_color_array_new(API_STRUCT) -> *PoolColorArray */

	C.go_godot_pool_color_array_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["PoolColorArray"]++

	return dest
}

func NewPoolColorArrayCopy(
	p_src PoolColorArray, /* godot_pool_color_array */
) PoolColorArray {
	dest := PoolColorArray{}

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_color_array)(unsafe.Pointer(&p_src))

	/* go_godot_pool_color_array_new_copy(API_STRUCT, *godot_pool_color_array) -> *PoolColorArray */

	C.go_godot_pool_color_array_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolColorArray"]++

	return dest
}

func NewPoolColorArrayWithArray(
	p_a Array, /* godot_array */
) PoolColorArray {
	dest := PoolColorArray{}

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_a))

	/* go_godot_pool_color_array_new_with_array(API_STRUCT, *godot_array) -> *PoolColorArray */

	C.go_godot_pool_color_array_new_with_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolColorArray"]++

	return dest
}

/* Setter Method: godot_pool_color_array_append -> void */
func (gdt *PoolColorArray) Append(
	p_data Color, /* godot_color */
) {

	/* go_godot_pool_color_array_append(API_STRUCT, *godot_color) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_color)(unsafe.Pointer(&p_data))

	C.go_godot_pool_color_array_append(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_color_array_append_array -> void */
func (gdt *PoolColorArray) AppendArray(
	p_array PoolColorArray, /* godot_pool_color_array */
) {

	/* go_godot_pool_color_array_append_array(API_STRUCT, *godot_pool_color_array) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_color_array)(unsafe.Pointer(&p_array))

	C.go_godot_pool_color_array_append_array(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_color_array_insert -> godot_error */
func (gdt *PoolColorArray) Insert(
	p_idx int32 /* else case */, p_data Color, /* godot_color */
) Error {

	/* go_godot_pool_color_array_insert(API_STRUCT,godot_int, *godot_color) ->godot_error */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := (*C.godot_color)(unsafe.Pointer(&p_data))

	ret := C.go_godot_pool_color_array_insert(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Error)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_color_array_invert -> void */
func (gdt *PoolColorArray) Invert() {

	/* go_godot_pool_color_array_invert(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_color_array_invert(
		api,
		rcv,
	)
}

/* Setter Method: godot_pool_color_array_push_back -> void */
func (gdt *PoolColorArray) PushBack(
	p_data Color, /* godot_color */
) {

	/* go_godot_pool_color_array_push_back(API_STRUCT, *godot_color) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_color)(unsafe.Pointer(&p_data))

	C.go_godot_pool_color_array_push_back(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_color_array_remove -> void */
func (gdt *PoolColorArray) Remove(
	p_idx int32, /* else case */
) {

	/* go_godot_pool_color_array_remove(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	C.go_godot_pool_color_array_remove(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_color_array_resize -> void */
func (gdt *PoolColorArray) Resize(
	p_size int32, /* else case */
) {

	/* go_godot_pool_color_array_resize(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_size))

	C.go_godot_pool_color_array_resize(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_color_array_read -> godot_pool_color_array_read_access */
func (gdt *PoolColorArray) Read() PoolColorArrayReadAccess {

	/* go_godot_pool_color_array_read(API_STRUCT) -> *PoolColorArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_color_array_read(
		api,
		rcv,
	)

	return *(*PoolColorArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_color_array_write -> godot_pool_color_array_write_access */
func (gdt *PoolColorArray) Write() PoolColorArrayWriteAccess {

	/* go_godot_pool_color_array_write(API_STRUCT) -> *PoolColorArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_color_array_write(
		api,
		rcv,
	)

	return *(*PoolColorArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_color_array_set -> void */
func (gdt *PoolColorArray) Set(
	p_idx int32 /* else case */, p_data Color, /* godot_color */
) {

	/* go_godot_pool_color_array_set(API_STRUCT,godot_int, *godot_color) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := (*C.godot_color)(unsafe.Pointer(&p_data))

	C.go_godot_pool_color_array_set(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_pool_color_array_get -> godot_color */
func (gdt *PoolColorArray) Get(
	p_idx int32, /* else case */
) Color {

	/* go_godot_pool_color_array_get(API_STRUCT,godot_int) ->godot_color */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_pool_color_array_get(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Color)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_color_array_size -> godot_int */
func (gdt *PoolColorArray) Size() int32 {

	/* go_godot_pool_color_array_size(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_color_array_size(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_color_array_destroy -> void */
func (gdt *PoolColorArray) Destroy() {

	/* go_godot_pool_color_array_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_color_array_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolColorArray"]++

}

/* Getter Method: godot_pool_color_array_empty -> godot_bool */
func (gdt *PoolColorArray) Empty() bool {

	/* go_godot_pool_color_array_empty(API_STRUCT) ->godot_bool */

	api := Core12Api
	rcv := (*C.godot_pool_color_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_color_array_empty(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

type PoolColorArrayReadAccess C.godot_pool_color_array_read_access

func InitPoolColorArrayReadAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolColorArrayReadAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolColorArrayReadAccess"] = 0
}

/* Getter Method: godot_pool_color_array_read_access_copy -> godot_pool_color_array_read_access */
func (gdt *PoolColorArrayReadAccess) Copy() PoolColorArrayReadAccess {

	/* go_godot_pool_color_array_read_access_copy(API_STRUCT) -> *PoolColorArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_color_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_color_array_read_access_copy(
		api,
		rcv,
	)

	return *(*PoolColorArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_color_array_read_access_ptr -> godot_color */
func (gdt *PoolColorArrayReadAccess) Ptr() Color {

	/* go_godot_pool_color_array_read_access_ptr(API_STRUCT) -> *Color */

	api := CoreApi
	rcv := (*C.godot_pool_color_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_color_array_read_access_ptr(
		api,
		rcv,
	)

	return *(*Color)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_color_array_read_access_operator_assign -> void */
func (gdt *PoolColorArrayReadAccess) OperatorAssign(
	p_other PoolColorArrayReadAccess, /* godot_pool_color_array_read_access */
) {

	/* go_godot_pool_color_array_read_access_operator_assign(API_STRUCT, *godot_pool_color_array_read_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array_read_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_color_array_read_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_color_array_read_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_color_array_read_access_destroy -> void */
func (gdt *PoolColorArrayReadAccess) Destroy() {

	/* go_godot_pool_color_array_read_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array_read_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_color_array_read_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolColorArrayReadAccess"]++

}

type PoolColorArrayWriteAccess C.godot_pool_color_array_write_access

func InitPoolColorArrayWriteAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolColorArrayWriteAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolColorArrayWriteAccess"] = 0
}

/* Getter Method: godot_pool_color_array_write_access_copy -> godot_pool_color_array_write_access */
func (gdt *PoolColorArrayWriteAccess) Copy() PoolColorArrayWriteAccess {

	/* go_godot_pool_color_array_write_access_copy(API_STRUCT) -> *PoolColorArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_color_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_color_array_write_access_copy(
		api,
		rcv,
	)

	return *(*PoolColorArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_color_array_write_access_ptr -> godot_color */
func (gdt *PoolColorArrayWriteAccess) Ptr() Color {

	/* go_godot_pool_color_array_write_access_ptr(API_STRUCT) -> *Color */

	api := CoreApi
	rcv := (*C.godot_pool_color_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_color_array_write_access_ptr(
		api,
		rcv,
	)

	return *(*Color)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_color_array_write_access_operator_assign -> void */
func (gdt *PoolColorArrayWriteAccess) OperatorAssign(
	p_other PoolColorArrayWriteAccess, /* godot_pool_color_array_write_access */
) {

	/* go_godot_pool_color_array_write_access_operator_assign(API_STRUCT, *godot_pool_color_array_write_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array_write_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_color_array_write_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_color_array_write_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_color_array_write_access_destroy -> void */
func (gdt *PoolColorArrayWriteAccess) Destroy() {

	/* go_godot_pool_color_array_write_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_color_array_write_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_color_array_write_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolColorArrayWriteAccess"]++

}

type PoolIntArray C.godot_pool_int_array

func InitPoolIntArrayGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolIntArray"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolIntArray"] = 0
}

func NewPoolIntArray() PoolIntArray {
	dest := PoolIntArray{}

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(&dest))

	/* go_godot_pool_int_array_new(API_STRUCT) -> *PoolIntArray */

	C.go_godot_pool_int_array_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["PoolIntArray"]++

	return dest
}

func NewPoolIntArrayCopy(
	p_src PoolIntArray, /* godot_pool_int_array */
) PoolIntArray {
	dest := PoolIntArray{}

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_int_array)(unsafe.Pointer(&p_src))

	/* go_godot_pool_int_array_new_copy(API_STRUCT, *godot_pool_int_array) -> *PoolIntArray */

	C.go_godot_pool_int_array_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolIntArray"]++

	return dest
}

func NewPoolIntArrayWithArray(
	p_a Array, /* godot_array */
) PoolIntArray {
	dest := PoolIntArray{}

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_a))

	/* go_godot_pool_int_array_new_with_array(API_STRUCT, *godot_array) -> *PoolIntArray */

	C.go_godot_pool_int_array_new_with_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolIntArray"]++

	return dest
}

/* Setter Method: godot_pool_int_array_append -> void */
func (gdt *PoolIntArray) Append(
	p_data int32, /* else case */
) {

	/* go_godot_pool_int_array_append(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_data))

	C.go_godot_pool_int_array_append(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_int_array_append_array -> void */
func (gdt *PoolIntArray) AppendArray(
	p_array PoolIntArray, /* godot_pool_int_array */
) {

	/* go_godot_pool_int_array_append_array(API_STRUCT, *godot_pool_int_array) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_int_array)(unsafe.Pointer(&p_array))

	C.go_godot_pool_int_array_append_array(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_int_array_insert -> godot_error */
func (gdt *PoolIntArray) Insert(
	p_idx int32 /* else case */, p_data int32, /* else case */
) Error {

	/* go_godot_pool_int_array_insert(API_STRUCT,godot_int,godot_int) ->godot_error */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_data))

	ret := C.go_godot_pool_int_array_insert(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Error)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_int_array_invert -> void */
func (gdt *PoolIntArray) Invert() {

	/* go_godot_pool_int_array_invert(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_int_array_invert(
		api,
		rcv,
	)
}

/* Setter Method: godot_pool_int_array_push_back -> void */
func (gdt *PoolIntArray) PushBack(
	p_data int32, /* else case */
) {

	/* go_godot_pool_int_array_push_back(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_data))

	C.go_godot_pool_int_array_push_back(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_int_array_remove -> void */
func (gdt *PoolIntArray) Remove(
	p_idx int32, /* else case */
) {

	/* go_godot_pool_int_array_remove(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	C.go_godot_pool_int_array_remove(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_int_array_resize -> void */
func (gdt *PoolIntArray) Resize(
	p_size int32, /* else case */
) {

	/* go_godot_pool_int_array_resize(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_size))

	C.go_godot_pool_int_array_resize(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_int_array_read -> godot_pool_int_array_read_access */
func (gdt *PoolIntArray) Read() PoolIntArrayReadAccess {

	/* go_godot_pool_int_array_read(API_STRUCT) -> *PoolIntArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_int_array_read(
		api,
		rcv,
	)

	return *(*PoolIntArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_int_array_write -> godot_pool_int_array_write_access */
func (gdt *PoolIntArray) Write() PoolIntArrayWriteAccess {

	/* go_godot_pool_int_array_write(API_STRUCT) -> *PoolIntArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_int_array_write(
		api,
		rcv,
	)

	return *(*PoolIntArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_int_array_set -> void */
func (gdt *PoolIntArray) Set(
	p_idx int32 /* else case */, p_data int32, /* else case */
) {

	/* go_godot_pool_int_array_set(API_STRUCT,godot_int,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_data))

	C.go_godot_pool_int_array_set(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_pool_int_array_get -> godot_int */
func (gdt *PoolIntArray) Get(
	p_idx int32, /* else case */
) int32 {

	/* go_godot_pool_int_array_get(API_STRUCT,godot_int) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_pool_int_array_get(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_int_array_size -> godot_int */
func (gdt *PoolIntArray) Size() int32 {

	/* go_godot_pool_int_array_size(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_int_array_size(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_int_array_destroy -> void */
func (gdt *PoolIntArray) Destroy() {

	/* go_godot_pool_int_array_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_int_array_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolIntArray"]++

}

/* Getter Method: godot_pool_int_array_empty -> godot_bool */
func (gdt *PoolIntArray) Empty() bool {

	/* go_godot_pool_int_array_empty(API_STRUCT) ->godot_bool */

	api := Core12Api
	rcv := (*C.godot_pool_int_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_int_array_empty(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

type PoolIntArrayReadAccess C.godot_pool_int_array_read_access

func InitPoolIntArrayReadAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolIntArrayReadAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolIntArrayReadAccess"] = 0
}

/* Getter Method: godot_pool_int_array_read_access_copy -> godot_pool_int_array_read_access */
func (gdt *PoolIntArrayReadAccess) Copy() PoolIntArrayReadAccess {

	/* go_godot_pool_int_array_read_access_copy(API_STRUCT) -> *PoolIntArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_int_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_int_array_read_access_copy(
		api,
		rcv,
	)

	return *(*PoolIntArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_int_array_read_access_ptr -> godot_int */
func (gdt *PoolIntArrayReadAccess) Ptr() int32 {

	/* go_godot_pool_int_array_read_access_ptr(API_STRUCT) -> *int32 */

	api := CoreApi
	rcv := (*C.godot_pool_int_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_int_array_read_access_ptr(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_int_array_read_access_operator_assign -> void */
func (gdt *PoolIntArrayReadAccess) OperatorAssign(
	p_other PoolIntArrayReadAccess, /* godot_pool_int_array_read_access */
) {

	/* go_godot_pool_int_array_read_access_operator_assign(API_STRUCT, *godot_pool_int_array_read_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array_read_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_int_array_read_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_int_array_read_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_int_array_read_access_destroy -> void */
func (gdt *PoolIntArrayReadAccess) Destroy() {

	/* go_godot_pool_int_array_read_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array_read_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_int_array_read_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolIntArrayReadAccess"]++

}

type PoolIntArrayWriteAccess C.godot_pool_int_array_write_access

func InitPoolIntArrayWriteAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolIntArrayWriteAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolIntArrayWriteAccess"] = 0
}

/* Getter Method: godot_pool_int_array_write_access_copy -> godot_pool_int_array_write_access */
func (gdt *PoolIntArrayWriteAccess) Copy() PoolIntArrayWriteAccess {

	/* go_godot_pool_int_array_write_access_copy(API_STRUCT) -> *PoolIntArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_int_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_int_array_write_access_copy(
		api,
		rcv,
	)

	return *(*PoolIntArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_int_array_write_access_ptr -> godot_int */
func (gdt *PoolIntArrayWriteAccess) Ptr() int32 {

	/* go_godot_pool_int_array_write_access_ptr(API_STRUCT) -> *int32 */

	api := CoreApi
	rcv := (*C.godot_pool_int_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_int_array_write_access_ptr(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_int_array_write_access_operator_assign -> void */
func (gdt *PoolIntArrayWriteAccess) OperatorAssign(
	p_other PoolIntArrayWriteAccess, /* godot_pool_int_array_write_access */
) {

	/* go_godot_pool_int_array_write_access_operator_assign(API_STRUCT, *godot_pool_int_array_write_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array_write_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_int_array_write_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_int_array_write_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_int_array_write_access_destroy -> void */
func (gdt *PoolIntArrayWriteAccess) Destroy() {

	/* go_godot_pool_int_array_write_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_int_array_write_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_int_array_write_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolIntArrayWriteAccess"]++

}

type PoolRealArray C.godot_pool_real_array

func InitPoolRealArrayGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolRealArray"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolRealArray"] = 0
}

func NewPoolRealArray() PoolRealArray {
	dest := PoolRealArray{}

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(&dest))

	/* go_godot_pool_real_array_new(API_STRUCT) -> *PoolRealArray */

	C.go_godot_pool_real_array_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["PoolRealArray"]++

	return dest
}

func NewPoolRealArrayCopy(
	p_src PoolRealArray, /* godot_pool_real_array */
) PoolRealArray {
	dest := PoolRealArray{}

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_real_array)(unsafe.Pointer(&p_src))

	/* go_godot_pool_real_array_new_copy(API_STRUCT, *godot_pool_real_array) -> *PoolRealArray */

	C.go_godot_pool_real_array_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolRealArray"]++

	return dest
}

func NewPoolRealArrayWithArray(
	p_a Array, /* godot_array */
) PoolRealArray {
	dest := PoolRealArray{}

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_a))

	/* go_godot_pool_real_array_new_with_array(API_STRUCT, *godot_array) -> *PoolRealArray */

	C.go_godot_pool_real_array_new_with_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolRealArray"]++

	return dest
}

/* Setter Method: godot_pool_real_array_append -> void */
func (gdt *PoolRealArray) Append(
	p_data float32, /* else case */
) {

	/* go_godot_pool_real_array_append(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_data))

	C.go_godot_pool_real_array_append(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_real_array_append_array -> void */
func (gdt *PoolRealArray) AppendArray(
	p_array PoolRealArray, /* godot_pool_real_array */
) {

	/* go_godot_pool_real_array_append_array(API_STRUCT, *godot_pool_real_array) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_real_array)(unsafe.Pointer(&p_array))

	C.go_godot_pool_real_array_append_array(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_real_array_insert -> godot_error */
func (gdt *PoolRealArray) Insert(
	p_idx int32 /* else case */, p_data float32, /* else case */
) Error {

	/* go_godot_pool_real_array_insert(API_STRUCT,godot_int,godot_real) ->godot_error */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_data))

	ret := C.go_godot_pool_real_array_insert(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Error)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_real_array_invert -> void */
func (gdt *PoolRealArray) Invert() {

	/* go_godot_pool_real_array_invert(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_real_array_invert(
		api,
		rcv,
	)
}

/* Setter Method: godot_pool_real_array_push_back -> void */
func (gdt *PoolRealArray) PushBack(
	p_data float32, /* else case */
) {

	/* go_godot_pool_real_array_push_back(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_data))

	C.go_godot_pool_real_array_push_back(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_real_array_remove -> void */
func (gdt *PoolRealArray) Remove(
	p_idx int32, /* else case */
) {

	/* go_godot_pool_real_array_remove(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	C.go_godot_pool_real_array_remove(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_real_array_resize -> void */
func (gdt *PoolRealArray) Resize(
	p_size int32, /* else case */
) {

	/* go_godot_pool_real_array_resize(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_size))

	C.go_godot_pool_real_array_resize(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_real_array_read -> godot_pool_real_array_read_access */
func (gdt *PoolRealArray) Read() PoolRealArrayReadAccess {

	/* go_godot_pool_real_array_read(API_STRUCT) -> *PoolRealArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_real_array_read(
		api,
		rcv,
	)

	return *(*PoolRealArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_real_array_write -> godot_pool_real_array_write_access */
func (gdt *PoolRealArray) Write() PoolRealArrayWriteAccess {

	/* go_godot_pool_real_array_write(API_STRUCT) -> *PoolRealArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_real_array_write(
		api,
		rcv,
	)

	return *(*PoolRealArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_real_array_set -> void */
func (gdt *PoolRealArray) Set(
	p_idx int32 /* else case */, p_data float32, /* else case */
) {

	/* go_godot_pool_real_array_set(API_STRUCT,godot_int,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_data))

	C.go_godot_pool_real_array_set(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_pool_real_array_get -> godot_real */
func (gdt *PoolRealArray) Get(
	p_idx int32, /* else case */
) float32 {

	/* go_godot_pool_real_array_get(API_STRUCT,godot_int) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_pool_real_array_get(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_real_array_size -> godot_int */
func (gdt *PoolRealArray) Size() int32 {

	/* go_godot_pool_real_array_size(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_real_array_size(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_real_array_destroy -> void */
func (gdt *PoolRealArray) Destroy() {

	/* go_godot_pool_real_array_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_real_array_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolRealArray"]++

}

/* Getter Method: godot_pool_real_array_empty -> godot_bool */
func (gdt *PoolRealArray) Empty() bool {

	/* go_godot_pool_real_array_empty(API_STRUCT) ->godot_bool */

	api := Core12Api
	rcv := (*C.godot_pool_real_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_real_array_empty(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

type PoolRealArrayReadAccess C.godot_pool_real_array_read_access

func InitPoolRealArrayReadAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolRealArrayReadAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolRealArrayReadAccess"] = 0
}

/* Getter Method: godot_pool_real_array_read_access_copy -> godot_pool_real_array_read_access */
func (gdt *PoolRealArrayReadAccess) Copy() PoolRealArrayReadAccess {

	/* go_godot_pool_real_array_read_access_copy(API_STRUCT) -> *PoolRealArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_real_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_real_array_read_access_copy(
		api,
		rcv,
	)

	return *(*PoolRealArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_real_array_read_access_ptr -> godot_real */
func (gdt *PoolRealArrayReadAccess) Ptr() float32 {

	/* go_godot_pool_real_array_read_access_ptr(API_STRUCT) -> *float32 */

	api := CoreApi
	rcv := (*C.godot_pool_real_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_real_array_read_access_ptr(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_real_array_read_access_operator_assign -> void */
func (gdt *PoolRealArrayReadAccess) OperatorAssign(
	p_other PoolRealArrayReadAccess, /* godot_pool_real_array_read_access */
) {

	/* go_godot_pool_real_array_read_access_operator_assign(API_STRUCT, *godot_pool_real_array_read_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array_read_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_real_array_read_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_real_array_read_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_real_array_read_access_destroy -> void */
func (gdt *PoolRealArrayReadAccess) Destroy() {

	/* go_godot_pool_real_array_read_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array_read_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_real_array_read_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolRealArrayReadAccess"]++

}

type PoolRealArrayWriteAccess C.godot_pool_real_array_write_access

func InitPoolRealArrayWriteAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolRealArrayWriteAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolRealArrayWriteAccess"] = 0
}

/* Getter Method: godot_pool_real_array_write_access_copy -> godot_pool_real_array_write_access */
func (gdt *PoolRealArrayWriteAccess) Copy() PoolRealArrayWriteAccess {

	/* go_godot_pool_real_array_write_access_copy(API_STRUCT) -> *PoolRealArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_real_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_real_array_write_access_copy(
		api,
		rcv,
	)

	return *(*PoolRealArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_real_array_write_access_ptr -> godot_real */
func (gdt *PoolRealArrayWriteAccess) Ptr() float32 {

	/* go_godot_pool_real_array_write_access_ptr(API_STRUCT) -> *float32 */

	api := CoreApi
	rcv := (*C.godot_pool_real_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_real_array_write_access_ptr(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_real_array_write_access_operator_assign -> void */
func (gdt *PoolRealArrayWriteAccess) OperatorAssign(
	p_other PoolRealArrayWriteAccess, /* godot_pool_real_array_write_access */
) {

	/* go_godot_pool_real_array_write_access_operator_assign(API_STRUCT, *godot_pool_real_array_write_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array_write_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_real_array_write_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_real_array_write_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_real_array_write_access_destroy -> void */
func (gdt *PoolRealArrayWriteAccess) Destroy() {

	/* go_godot_pool_real_array_write_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_real_array_write_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_real_array_write_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolRealArrayWriteAccess"]++

}

type PoolStringArray C.godot_pool_string_array

func InitPoolStringArrayGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolStringArray"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolStringArray"] = 0
}

func NewPoolStringArray() PoolStringArray {
	dest := PoolStringArray{}

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(&dest))

	/* go_godot_pool_string_array_new(API_STRUCT) -> *PoolStringArray */

	C.go_godot_pool_string_array_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["PoolStringArray"]++

	return dest
}

func NewPoolStringArrayCopy(
	p_src PoolStringArray, /* godot_pool_string_array */
) PoolStringArray {
	dest := PoolStringArray{}

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_string_array)(unsafe.Pointer(&p_src))

	/* go_godot_pool_string_array_new_copy(API_STRUCT, *godot_pool_string_array) -> *PoolStringArray */

	C.go_godot_pool_string_array_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolStringArray"]++

	return dest
}

func NewPoolStringArrayWithArray(
	p_a Array, /* godot_array */
) PoolStringArray {
	dest := PoolStringArray{}

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_a))

	/* go_godot_pool_string_array_new_with_array(API_STRUCT, *godot_array) -> *PoolStringArray */

	C.go_godot_pool_string_array_new_with_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolStringArray"]++

	return dest
}

/* Setter Method: godot_pool_string_array_append -> void */
func (gdt *PoolStringArray) Append(
	p_data String, /* godot_string */
) {

	/* go_godot_pool_string_array_append(API_STRUCT, *godot_string) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_data))

	C.go_godot_pool_string_array_append(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_string_array_append_array -> void */
func (gdt *PoolStringArray) AppendArray(
	p_array PoolStringArray, /* godot_pool_string_array */
) {

	/* go_godot_pool_string_array_append_array(API_STRUCT, *godot_pool_string_array) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_string_array)(unsafe.Pointer(&p_array))

	C.go_godot_pool_string_array_append_array(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_string_array_insert -> godot_error */
func (gdt *PoolStringArray) Insert(
	p_idx int32 /* else case */, p_data String, /* godot_string */
) Error {

	/* go_godot_pool_string_array_insert(API_STRUCT,godot_int, *godot_string) ->godot_error */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := (*C.godot_string)(unsafe.Pointer(&p_data))

	ret := C.go_godot_pool_string_array_insert(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Error)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_string_array_invert -> void */
func (gdt *PoolStringArray) Invert() {

	/* go_godot_pool_string_array_invert(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_string_array_invert(
		api,
		rcv,
	)
}

/* Setter Method: godot_pool_string_array_push_back -> void */
func (gdt *PoolStringArray) PushBack(
	p_data String, /* godot_string */
) {

	/* go_godot_pool_string_array_push_back(API_STRUCT, *godot_string) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_data))

	C.go_godot_pool_string_array_push_back(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_string_array_remove -> void */
func (gdt *PoolStringArray) Remove(
	p_idx int32, /* else case */
) {

	/* go_godot_pool_string_array_remove(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	C.go_godot_pool_string_array_remove(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_string_array_resize -> void */
func (gdt *PoolStringArray) Resize(
	p_size int32, /* else case */
) {

	/* go_godot_pool_string_array_resize(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_size))

	C.go_godot_pool_string_array_resize(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_string_array_read -> godot_pool_string_array_read_access */
func (gdt *PoolStringArray) Read() PoolStringArrayReadAccess {

	/* go_godot_pool_string_array_read(API_STRUCT) -> *PoolStringArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_string_array_read(
		api,
		rcv,
	)

	return *(*PoolStringArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_string_array_write -> godot_pool_string_array_write_access */
func (gdt *PoolStringArray) Write() PoolStringArrayWriteAccess {

	/* go_godot_pool_string_array_write(API_STRUCT) -> *PoolStringArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_string_array_write(
		api,
		rcv,
	)

	return *(*PoolStringArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_string_array_set -> void */
func (gdt *PoolStringArray) Set(
	p_idx int32 /* else case */, p_data String, /* godot_string */
) {

	/* go_godot_pool_string_array_set(API_STRUCT,godot_int, *godot_string) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := (*C.godot_string)(unsafe.Pointer(&p_data))

	C.go_godot_pool_string_array_set(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_pool_string_array_get -> godot_string */
func (gdt *PoolStringArray) Get(
	p_idx int32, /* else case */
) String {

	/* go_godot_pool_string_array_get(API_STRUCT,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_pool_string_array_get(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_string_array_size -> godot_int */
func (gdt *PoolStringArray) Size() int32 {

	/* go_godot_pool_string_array_size(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_string_array_size(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_string_array_destroy -> void */
func (gdt *PoolStringArray) Destroy() {

	/* go_godot_pool_string_array_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_string_array_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolStringArray"]++

}

/* Getter Method: godot_pool_string_array_empty -> godot_bool */
func (gdt *PoolStringArray) Empty() bool {

	/* go_godot_pool_string_array_empty(API_STRUCT) ->godot_bool */

	api := Core12Api
	rcv := (*C.godot_pool_string_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_string_array_empty(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

type PoolStringArrayReadAccess C.godot_pool_string_array_read_access

func InitPoolStringArrayReadAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolStringArrayReadAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolStringArrayReadAccess"] = 0
}

/* Getter Method: godot_pool_string_array_read_access_copy -> godot_pool_string_array_read_access */
func (gdt *PoolStringArrayReadAccess) Copy() PoolStringArrayReadAccess {

	/* go_godot_pool_string_array_read_access_copy(API_STRUCT) -> *PoolStringArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_string_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_string_array_read_access_copy(
		api,
		rcv,
	)

	return *(*PoolStringArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_string_array_read_access_ptr -> godot_string */
func (gdt *PoolStringArrayReadAccess) Ptr() String {

	/* go_godot_pool_string_array_read_access_ptr(API_STRUCT) -> *String */

	api := CoreApi
	rcv := (*C.godot_pool_string_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_string_array_read_access_ptr(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_string_array_read_access_operator_assign -> void */
func (gdt *PoolStringArrayReadAccess) OperatorAssign(
	p_other PoolStringArrayReadAccess, /* godot_pool_string_array_read_access */
) {

	/* go_godot_pool_string_array_read_access_operator_assign(API_STRUCT, *godot_pool_string_array_read_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array_read_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_string_array_read_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_string_array_read_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_string_array_read_access_destroy -> void */
func (gdt *PoolStringArrayReadAccess) Destroy() {

	/* go_godot_pool_string_array_read_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array_read_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_string_array_read_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolStringArrayReadAccess"]++

}

type PoolStringArrayWriteAccess C.godot_pool_string_array_write_access

func InitPoolStringArrayWriteAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolStringArrayWriteAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolStringArrayWriteAccess"] = 0
}

/* Getter Method: godot_pool_string_array_write_access_copy -> godot_pool_string_array_write_access */
func (gdt *PoolStringArrayWriteAccess) Copy() PoolStringArrayWriteAccess {

	/* go_godot_pool_string_array_write_access_copy(API_STRUCT) -> *PoolStringArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_string_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_string_array_write_access_copy(
		api,
		rcv,
	)

	return *(*PoolStringArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_string_array_write_access_ptr -> godot_string */
func (gdt *PoolStringArrayWriteAccess) Ptr() String {

	/* go_godot_pool_string_array_write_access_ptr(API_STRUCT) -> *String */

	api := CoreApi
	rcv := (*C.godot_pool_string_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_string_array_write_access_ptr(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_string_array_write_access_operator_assign -> void */
func (gdt *PoolStringArrayWriteAccess) OperatorAssign(
	p_other PoolStringArrayWriteAccess, /* godot_pool_string_array_write_access */
) {

	/* go_godot_pool_string_array_write_access_operator_assign(API_STRUCT, *godot_pool_string_array_write_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array_write_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_string_array_write_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_string_array_write_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_string_array_write_access_destroy -> void */
func (gdt *PoolStringArrayWriteAccess) Destroy() {

	/* go_godot_pool_string_array_write_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_string_array_write_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_string_array_write_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolStringArrayWriteAccess"]++

}

type PoolVector2Array C.godot_pool_vector2_array

func InitPoolVector2ArrayGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolVector2Array"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolVector2Array"] = 0
}

func NewPoolVector2Array() PoolVector2Array {
	dest := PoolVector2Array{}

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(&dest))

	/* go_godot_pool_vector2_array_new(API_STRUCT) -> *PoolVector2Array */

	C.go_godot_pool_vector2_array_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["PoolVector2Array"]++

	return dest
}

func NewPoolVector2ArrayCopy(
	p_src PoolVector2Array, /* godot_pool_vector2_array */
) PoolVector2Array {
	dest := PoolVector2Array{}

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_vector2_array)(unsafe.Pointer(&p_src))

	/* go_godot_pool_vector2_array_new_copy(API_STRUCT, *godot_pool_vector2_array) -> *PoolVector2Array */

	C.go_godot_pool_vector2_array_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolVector2Array"]++

	return dest
}

func NewPoolVector2ArrayWithArray(
	p_a Array, /* godot_array */
) PoolVector2Array {
	dest := PoolVector2Array{}

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_a))

	/* go_godot_pool_vector2_array_new_with_array(API_STRUCT, *godot_array) -> *PoolVector2Array */

	C.go_godot_pool_vector2_array_new_with_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolVector2Array"]++

	return dest
}

/* Setter Method: godot_pool_vector2_array_append -> void */
func (gdt *PoolVector2Array) Append(
	p_data Vector2, /* godot_vector2 */
) {

	/* go_godot_pool_vector2_array_append(API_STRUCT, *godot_vector2) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_data))

	C.go_godot_pool_vector2_array_append(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_vector2_array_append_array -> void */
func (gdt *PoolVector2Array) AppendArray(
	p_array PoolVector2Array, /* godot_pool_vector2_array */
) {

	/* go_godot_pool_vector2_array_append_array(API_STRUCT, *godot_pool_vector2_array) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_vector2_array)(unsafe.Pointer(&p_array))

	C.go_godot_pool_vector2_array_append_array(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_vector2_array_insert -> godot_error */
func (gdt *PoolVector2Array) Insert(
	p_idx int32 /* else case */, p_data Vector2, /* godot_vector2 */
) Error {

	/* go_godot_pool_vector2_array_insert(API_STRUCT,godot_int, *godot_vector2) ->godot_error */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := (*C.godot_vector2)(unsafe.Pointer(&p_data))

	ret := C.go_godot_pool_vector2_array_insert(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Error)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_vector2_array_invert -> void */
func (gdt *PoolVector2Array) Invert() {

	/* go_godot_pool_vector2_array_invert(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_vector2_array_invert(
		api,
		rcv,
	)
}

/* Setter Method: godot_pool_vector2_array_push_back -> void */
func (gdt *PoolVector2Array) PushBack(
	p_data Vector2, /* godot_vector2 */
) {

	/* go_godot_pool_vector2_array_push_back(API_STRUCT, *godot_vector2) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_data))

	C.go_godot_pool_vector2_array_push_back(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_vector2_array_remove -> void */
func (gdt *PoolVector2Array) Remove(
	p_idx int32, /* else case */
) {

	/* go_godot_pool_vector2_array_remove(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	C.go_godot_pool_vector2_array_remove(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_vector2_array_resize -> void */
func (gdt *PoolVector2Array) Resize(
	p_size int32, /* else case */
) {

	/* go_godot_pool_vector2_array_resize(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_size))

	C.go_godot_pool_vector2_array_resize(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_vector2_array_read -> godot_pool_vector2_array_read_access */
func (gdt *PoolVector2Array) Read() PoolVector2ArrayReadAccess {

	/* go_godot_pool_vector2_array_read(API_STRUCT) -> *PoolVector2ArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector2_array_read(
		api,
		rcv,
	)

	return *(*PoolVector2ArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_vector2_array_write -> godot_pool_vector2_array_write_access */
func (gdt *PoolVector2Array) Write() PoolVector2ArrayWriteAccess {

	/* go_godot_pool_vector2_array_write(API_STRUCT) -> *PoolVector2ArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector2_array_write(
		api,
		rcv,
	)

	return *(*PoolVector2ArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_vector2_array_set -> void */
func (gdt *PoolVector2Array) Set(
	p_idx int32 /* else case */, p_data Vector2, /* godot_vector2 */
) {

	/* go_godot_pool_vector2_array_set(API_STRUCT,godot_int, *godot_vector2) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := (*C.godot_vector2)(unsafe.Pointer(&p_data))

	C.go_godot_pool_vector2_array_set(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_pool_vector2_array_get -> godot_vector2 */
func (gdt *PoolVector2Array) Get(
	p_idx int32, /* else case */
) Vector2 {

	/* go_godot_pool_vector2_array_get(API_STRUCT,godot_int) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_pool_vector2_array_get(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_vector2_array_size -> godot_int */
func (gdt *PoolVector2Array) Size() int32 {

	/* go_godot_pool_vector2_array_size(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector2_array_size(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_vector2_array_destroy -> void */
func (gdt *PoolVector2Array) Destroy() {

	/* go_godot_pool_vector2_array_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_vector2_array_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolVector2Array"]++

}

/* Getter Method: godot_pool_vector2_array_empty -> godot_bool */
func (gdt *PoolVector2Array) Empty() bool {

	/* go_godot_pool_vector2_array_empty(API_STRUCT) ->godot_bool */

	api := Core12Api
	rcv := (*C.godot_pool_vector2_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector2_array_empty(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

type PoolVector2ArrayReadAccess C.godot_pool_vector2_array_read_access

func InitPoolVector2ArrayReadAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolVector2ArrayReadAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolVector2ArrayReadAccess"] = 0
}

/* Getter Method: godot_pool_vector2_array_read_access_copy -> godot_pool_vector2_array_read_access */
func (gdt *PoolVector2ArrayReadAccess) Copy() PoolVector2ArrayReadAccess {

	/* go_godot_pool_vector2_array_read_access_copy(API_STRUCT) -> *PoolVector2ArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector2_array_read_access_copy(
		api,
		rcv,
	)

	return *(*PoolVector2ArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_vector2_array_read_access_ptr -> godot_vector2 */
func (gdt *PoolVector2ArrayReadAccess) Ptr() Vector2 {

	/* go_godot_pool_vector2_array_read_access_ptr(API_STRUCT) -> *Vector2 */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector2_array_read_access_ptr(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_vector2_array_read_access_operator_assign -> void */
func (gdt *PoolVector2ArrayReadAccess) OperatorAssign(
	p_other PoolVector2ArrayReadAccess, /* godot_pool_vector2_array_read_access */
) {

	/* go_godot_pool_vector2_array_read_access_operator_assign(API_STRUCT, *godot_pool_vector2_array_read_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array_read_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_vector2_array_read_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_vector2_array_read_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_vector2_array_read_access_destroy -> void */
func (gdt *PoolVector2ArrayReadAccess) Destroy() {

	/* go_godot_pool_vector2_array_read_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array_read_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_vector2_array_read_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolVector2ArrayReadAccess"]++

}

type PoolVector2ArrayWriteAccess C.godot_pool_vector2_array_write_access

func InitPoolVector2ArrayWriteAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolVector2ArrayWriteAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolVector2ArrayWriteAccess"] = 0
}

/* Getter Method: godot_pool_vector2_array_write_access_copy -> godot_pool_vector2_array_write_access */
func (gdt *PoolVector2ArrayWriteAccess) Copy() PoolVector2ArrayWriteAccess {

	/* go_godot_pool_vector2_array_write_access_copy(API_STRUCT) -> *PoolVector2ArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector2_array_write_access_copy(
		api,
		rcv,
	)

	return *(*PoolVector2ArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_vector2_array_write_access_ptr -> godot_vector2 */
func (gdt *PoolVector2ArrayWriteAccess) Ptr() Vector2 {

	/* go_godot_pool_vector2_array_write_access_ptr(API_STRUCT) -> *Vector2 */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector2_array_write_access_ptr(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_vector2_array_write_access_operator_assign -> void */
func (gdt *PoolVector2ArrayWriteAccess) OperatorAssign(
	p_other PoolVector2ArrayWriteAccess, /* godot_pool_vector2_array_write_access */
) {

	/* go_godot_pool_vector2_array_write_access_operator_assign(API_STRUCT, *godot_pool_vector2_array_write_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array_write_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_vector2_array_write_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_vector2_array_write_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_vector2_array_write_access_destroy -> void */
func (gdt *PoolVector2ArrayWriteAccess) Destroy() {

	/* go_godot_pool_vector2_array_write_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector2_array_write_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_vector2_array_write_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolVector2ArrayWriteAccess"]++

}

type PoolVector3Array C.godot_pool_vector3_array

func InitPoolVector3ArrayGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolVector3Array"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolVector3Array"] = 0
}

func NewPoolVector3Array() PoolVector3Array {
	dest := PoolVector3Array{}

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(&dest))

	/* go_godot_pool_vector3_array_new(API_STRUCT) -> *PoolVector3Array */

	C.go_godot_pool_vector3_array_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["PoolVector3Array"]++

	return dest
}

func NewPoolVector3ArrayCopy(
	p_src PoolVector3Array, /* godot_pool_vector3_array */
) PoolVector3Array {
	dest := PoolVector3Array{}

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_vector3_array)(unsafe.Pointer(&p_src))

	/* go_godot_pool_vector3_array_new_copy(API_STRUCT, *godot_pool_vector3_array) -> *PoolVector3Array */

	C.go_godot_pool_vector3_array_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolVector3Array"]++

	return dest
}

func NewPoolVector3ArrayWithArray(
	p_a Array, /* godot_array */
) PoolVector3Array {
	dest := PoolVector3Array{}

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(&dest))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_a))

	/* go_godot_pool_vector3_array_new_with_array(API_STRUCT, *godot_array) -> *PoolVector3Array */

	C.go_godot_pool_vector3_array_new_with_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["PoolVector3Array"]++

	return dest
}

/* Setter Method: godot_pool_vector3_array_append -> void */
func (gdt *PoolVector3Array) Append(
	p_data Vector3, /* godot_vector3 */
) {

	/* go_godot_pool_vector3_array_append(API_STRUCT, *godot_vector3) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_data))

	C.go_godot_pool_vector3_array_append(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_vector3_array_append_array -> void */
func (gdt *PoolVector3Array) AppendArray(
	p_array PoolVector3Array, /* godot_pool_vector3_array */
) {

	/* go_godot_pool_vector3_array_append_array(API_STRUCT, *godot_pool_vector3_array) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_vector3_array)(unsafe.Pointer(&p_array))

	C.go_godot_pool_vector3_array_append_array(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_vector3_array_insert -> godot_error */
func (gdt *PoolVector3Array) Insert(
	p_idx int32 /* else case */, p_data Vector3, /* godot_vector3 */
) Error {

	/* go_godot_pool_vector3_array_insert(API_STRUCT,godot_int, *godot_vector3) ->godot_error */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_data))

	ret := C.go_godot_pool_vector3_array_insert(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Error)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_vector3_array_invert -> void */
func (gdt *PoolVector3Array) Invert() {

	/* go_godot_pool_vector3_array_invert(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_vector3_array_invert(
		api,
		rcv,
	)
}

/* Setter Method: godot_pool_vector3_array_push_back -> void */
func (gdt *PoolVector3Array) PushBack(
	p_data Vector3, /* godot_vector3 */
) {

	/* go_godot_pool_vector3_array_push_back(API_STRUCT, *godot_vector3) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_data))

	C.go_godot_pool_vector3_array_push_back(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_vector3_array_remove -> void */
func (gdt *PoolVector3Array) Remove(
	p_idx int32, /* else case */
) {

	/* go_godot_pool_vector3_array_remove(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	C.go_godot_pool_vector3_array_remove(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_vector3_array_resize -> void */
func (gdt *PoolVector3Array) Resize(
	p_size int32, /* else case */
) {

	/* go_godot_pool_vector3_array_resize(API_STRUCT,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_size))

	C.go_godot_pool_vector3_array_resize(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_pool_vector3_array_read -> godot_pool_vector3_array_read_access */
func (gdt *PoolVector3Array) Read() PoolVector3ArrayReadAccess {

	/* go_godot_pool_vector3_array_read(API_STRUCT) -> *PoolVector3ArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector3_array_read(
		api,
		rcv,
	)

	return *(*PoolVector3ArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_vector3_array_write -> godot_pool_vector3_array_write_access */
func (gdt *PoolVector3Array) Write() PoolVector3ArrayWriteAccess {

	/* go_godot_pool_vector3_array_write(API_STRUCT) -> *PoolVector3ArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector3_array_write(
		api,
		rcv,
	)

	return *(*PoolVector3ArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_vector3_array_set -> void */
func (gdt *PoolVector3Array) Set(
	p_idx int32 /* else case */, p_data Vector3, /* godot_vector3 */
) {

	/* go_godot_pool_vector3_array_set(API_STRUCT,godot_int, *godot_vector3) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_data))

	C.go_godot_pool_vector3_array_set(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_pool_vector3_array_get -> godot_vector3 */
func (gdt *PoolVector3Array) Get(
	p_idx int32, /* else case */
) Vector3 {

	/* go_godot_pool_vector3_array_get(API_STRUCT,godot_int) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_pool_vector3_array_get(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_vector3_array_size -> godot_int */
func (gdt *PoolVector3Array) Size() int32 {

	/* go_godot_pool_vector3_array_size(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector3_array_size(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_vector3_array_destroy -> void */
func (gdt *PoolVector3Array) Destroy() {

	/* go_godot_pool_vector3_array_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))

	C.go_godot_pool_vector3_array_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolVector3Array"]++

}

/* Getter Method: godot_pool_vector3_array_empty -> godot_bool */
func (gdt *PoolVector3Array) Empty() bool {

	/* go_godot_pool_vector3_array_empty(API_STRUCT) ->godot_bool */

	api := Core12Api
	rcv := (*C.godot_pool_vector3_array)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector3_array_empty(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

type PoolVector3ArrayReadAccess C.godot_pool_vector3_array_read_access

func InitPoolVector3ArrayReadAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolVector3ArrayReadAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolVector3ArrayReadAccess"] = 0
}

/* Getter Method: godot_pool_vector3_array_read_access_copy -> godot_pool_vector3_array_read_access */
func (gdt *PoolVector3ArrayReadAccess) Copy() PoolVector3ArrayReadAccess {

	/* go_godot_pool_vector3_array_read_access_copy(API_STRUCT) -> *PoolVector3ArrayReadAccess */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector3_array_read_access_copy(
		api,
		rcv,
	)

	return *(*PoolVector3ArrayReadAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_vector3_array_read_access_ptr -> godot_vector3 */
func (gdt *PoolVector3ArrayReadAccess) Ptr() Vector3 {

	/* go_godot_pool_vector3_array_read_access_ptr(API_STRUCT) -> *Vector3 */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array_read_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector3_array_read_access_ptr(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_vector3_array_read_access_operator_assign -> void */
func (gdt *PoolVector3ArrayReadAccess) OperatorAssign(
	p_other PoolVector3ArrayReadAccess, /* godot_pool_vector3_array_read_access */
) {

	/* go_godot_pool_vector3_array_read_access_operator_assign(API_STRUCT, *godot_pool_vector3_array_read_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array_read_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_vector3_array_read_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_vector3_array_read_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_vector3_array_read_access_destroy -> void */
func (gdt *PoolVector3ArrayReadAccess) Destroy() {

	/* go_godot_pool_vector3_array_read_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array_read_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_vector3_array_read_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolVector3ArrayReadAccess"]++

}

type PoolVector3ArrayWriteAccess C.godot_pool_vector3_array_write_access

func InitPoolVector3ArrayWriteAccessGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PoolVector3ArrayWriteAccess"] = 0
	RegisterState.Stats.GodotTypeFrees["PoolVector3ArrayWriteAccess"] = 0
}

/* Getter Method: godot_pool_vector3_array_write_access_copy -> godot_pool_vector3_array_write_access */
func (gdt *PoolVector3ArrayWriteAccess) Copy() PoolVector3ArrayWriteAccess {

	/* go_godot_pool_vector3_array_write_access_copy(API_STRUCT) -> *PoolVector3ArrayWriteAccess */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector3_array_write_access_copy(
		api,
		rcv,
	)

	return *(*PoolVector3ArrayWriteAccess)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_pool_vector3_array_write_access_ptr -> godot_vector3 */
func (gdt *PoolVector3ArrayWriteAccess) Ptr() Vector3 {

	/* go_godot_pool_vector3_array_write_access_ptr(API_STRUCT) -> *Vector3 */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array_write_access)(unsafe.Pointer(gdt))

	ret := C.go_godot_pool_vector3_array_write_access_ptr(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_pool_vector3_array_write_access_operator_assign -> void */
func (gdt *PoolVector3ArrayWriteAccess) OperatorAssign(
	p_other PoolVector3ArrayWriteAccess, /* godot_pool_vector3_array_write_access */
) {

	/* go_godot_pool_vector3_array_write_access_operator_assign(API_STRUCT, *godot_pool_vector3_array_write_access) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array_write_access)(unsafe.Pointer(gdt))
	in0 := (*C.godot_pool_vector3_array_write_access)(unsafe.Pointer(&p_other))

	C.go_godot_pool_vector3_array_write_access_operator_assign(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_pool_vector3_array_write_access_destroy -> void */
func (gdt *PoolVector3ArrayWriteAccess) Destroy() {

	/* go_godot_pool_vector3_array_write_access_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_pool_vector3_array_write_access)(unsafe.Pointer(gdt))

	C.go_godot_pool_vector3_array_write_access_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["PoolVector3ArrayWriteAccess"]++

}

type Quat C.godot_quat

func InitQuatGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Quat"] = 0
	RegisterState.Stats.GodotTypeFrees["Quat"] = 0
}

func NewQuat(
	p_x float32 /* else case */, p_y float32 /* else case */, p_z float32 /* else case */, p_w float32, /* else case */
) Quat {
	dest := Quat{}

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(&dest))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_x))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_y))
	in2 := *(*C.godot_real)(unsafe.Pointer(&p_z))
	in3 := *(*C.godot_real)(unsafe.Pointer(&p_w))

	/* go_godot_quat_new(API_STRUCT,godot_real,godot_real,godot_real,godot_real) -> *Quat */

	C.go_godot_quat_new(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	RegisterState.Stats.GodotTypeAllocs["Quat"]++

	return dest
}

func NewQuatWithAxisAngle(
	p_axis Vector3 /* godot_vector3 */, p_angle float32, /* else case */
) Quat {
	dest := Quat{}

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_axis))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_angle))

	/* go_godot_quat_new_with_axis_angle(API_STRUCT, *godot_vector3,godot_real) -> *Quat */

	C.go_godot_quat_new_with_axis_angle(
		api,
		rcv,
		in0,
		in1,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	RegisterState.Stats.GodotTypeAllocs["Quat"]++

	return dest
}

func NewQuatWithBasis(
	p_basis Basis, /* godot_basis */
) Quat {
	dest := Quat{}

	api := Core11Api
	rcv := (*C.godot_quat)(unsafe.Pointer(&dest))
	in0 := (*C.godot_basis)(unsafe.Pointer(&p_basis))

	/* go_godot_quat_new_with_basis(API_STRUCT, *godot_basis) -> *Quat */

	C.go_godot_quat_new_with_basis(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Quat"]++

	return dest
}

func NewQuatWithEuler(
	p_euler Vector3, /* godot_vector3 */
) Quat {
	dest := Quat{}

	api := Core11Api
	rcv := (*C.godot_quat)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_euler))

	/* go_godot_quat_new_with_euler(API_STRUCT, *godot_vector3) -> *Quat */

	C.go_godot_quat_new_with_euler(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Quat"]++

	return dest
}

/* Getter Method: godot_quat_get_x -> godot_real */
func (gdt *Quat) GetX() float32 {

	/* go_godot_quat_get_x(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))

	ret := C.go_godot_quat_get_x(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_quat_set_x -> void */
func (gdt *Quat) SetX(
	val float32, /* else case */
) {

	/* go_godot_quat_set_x(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&val))

	C.go_godot_quat_set_x(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_quat_get_y -> godot_real */
func (gdt *Quat) GetY() float32 {

	/* go_godot_quat_get_y(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))

	ret := C.go_godot_quat_get_y(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_quat_set_y -> void */
func (gdt *Quat) SetY(
	val float32, /* else case */
) {

	/* go_godot_quat_set_y(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&val))

	C.go_godot_quat_set_y(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_quat_get_z -> godot_real */
func (gdt *Quat) GetZ() float32 {

	/* go_godot_quat_get_z(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))

	ret := C.go_godot_quat_get_z(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_quat_set_z -> void */
func (gdt *Quat) SetZ(
	val float32, /* else case */
) {

	/* go_godot_quat_set_z(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&val))

	C.go_godot_quat_set_z(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_quat_get_w -> godot_real */
func (gdt *Quat) GetW() float32 {

	/* go_godot_quat_get_w(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))

	ret := C.go_godot_quat_get_w(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_quat_set_w -> void */
func (gdt *Quat) SetW(
	val float32, /* else case */
) {

	/* go_godot_quat_set_w(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&val))

	C.go_godot_quat_set_w(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_quat_as_string -> godot_string */
func (gdt *Quat) AsString() String {

	/* go_godot_quat_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))

	ret := C.go_godot_quat_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_length -> godot_real */
func (gdt *Quat) Length() float32 {

	/* go_godot_quat_length(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))

	ret := C.go_godot_quat_length(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_length_squared -> godot_real */
func (gdt *Quat) LengthSquared() float32 {

	/* go_godot_quat_length_squared(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))

	ret := C.go_godot_quat_length_squared(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_normalized -> godot_quat */
func (gdt *Quat) Normalized() Quat {

	/* go_godot_quat_normalized(API_STRUCT) ->godot_quat */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))

	ret := C.go_godot_quat_normalized(
		api,
		rcv,
	)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_is_normalized -> godot_bool */
func (gdt *Quat) IsNormalized() bool {

	/* go_godot_quat_is_normalized(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))

	ret := C.go_godot_quat_is_normalized(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_inverse -> godot_quat */
func (gdt *Quat) Inverse() Quat {

	/* go_godot_quat_inverse(API_STRUCT) ->godot_quat */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))

	ret := C.go_godot_quat_inverse(
		api,
		rcv,
	)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_dot -> godot_real */
func (gdt *Quat) Dot(
	p_b Quat, /* godot_quat */
) float32 {

	/* go_godot_quat_dot(API_STRUCT, *godot_quat) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_b))

	ret := C.go_godot_quat_dot(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_xform -> godot_vector3 */
func (gdt *Quat) Xform(
	p_v Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_quat_xform(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_v))

	ret := C.go_godot_quat_xform(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_slerp -> godot_quat */
func (gdt *Quat) Slerp(
	p_b Quat /* godot_quat */, p_t float32, /* else case */
) Quat {

	/* go_godot_quat_slerp(API_STRUCT, *godot_quat,godot_real) ->godot_quat */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_b))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_t))

	ret := C.go_godot_quat_slerp(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_slerpni -> godot_quat */
func (gdt *Quat) Slerpni(
	p_b Quat /* godot_quat */, p_t float32, /* else case */
) Quat {

	/* go_godot_quat_slerpni(API_STRUCT, *godot_quat,godot_real) ->godot_quat */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_b))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_t))

	ret := C.go_godot_quat_slerpni(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_cubic_slerp -> godot_quat */
func (gdt *Quat) CubicSlerp(
	p_b Quat /* godot_quat */, p_pre_a Quat /* godot_quat */, p_post_b Quat /* godot_quat */, p_t float32, /* else case */
) Quat {

	/* go_godot_quat_cubic_slerp(API_STRUCT, *godot_quat, *godot_quat, *godot_quat,godot_real) ->godot_quat */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_b))
	in1 := (*C.godot_quat)(unsafe.Pointer(&p_pre_a))
	in2 := (*C.godot_quat)(unsafe.Pointer(&p_post_b))
	in3 := *(*C.godot_real)(unsafe.Pointer(&p_t))

	ret := C.go_godot_quat_cubic_slerp(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_operator_multiply -> godot_quat */
func (gdt *Quat) OperatorMultiply(
	p_b float32, /* else case */
) Quat {

	/* go_godot_quat_operator_multiply(API_STRUCT,godot_real) ->godot_quat */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_b))

	ret := C.go_godot_quat_operator_multiply(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_operator_add -> godot_quat */
func (gdt *Quat) OperatorAdd(
	p_b Quat, /* godot_quat */
) Quat {

	/* go_godot_quat_operator_add(API_STRUCT, *godot_quat) ->godot_quat */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_b))

	ret := C.go_godot_quat_operator_add(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_operator_subtract -> godot_quat */
func (gdt *Quat) OperatorSubtract(
	p_b Quat, /* godot_quat */
) Quat {

	/* go_godot_quat_operator_subtract(API_STRUCT, *godot_quat) ->godot_quat */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_b))

	ret := C.go_godot_quat_operator_subtract(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_operator_divide -> godot_quat */
func (gdt *Quat) OperatorDivide(
	p_b float32, /* else case */
) Quat {

	/* go_godot_quat_operator_divide(API_STRUCT,godot_real) ->godot_quat */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_b))

	ret := C.go_godot_quat_operator_divide(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_operator_equal -> godot_bool */
func (gdt *Quat) OperatorEqual(
	p_b Quat, /* godot_quat */
) bool {

	/* go_godot_quat_operator_equal(API_STRUCT, *godot_quat) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_b))

	ret := C.go_godot_quat_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_quat_operator_neg -> godot_quat */
func (gdt *Quat) OperatorNeg() Quat {

	/* go_godot_quat_operator_neg(API_STRUCT) ->godot_quat */

	api := CoreApi
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))

	ret := C.go_godot_quat_operator_neg(
		api,
		rcv,
	)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_quat_set_axis_angle -> void */
func (gdt *Quat) SetAxisAngle(
	p_axis Vector3 /* godot_vector3 */, p_angle float32, /* else case */
) {

	/* go_godot_quat_set_axis_angle(API_STRUCT, *godot_vector3,godot_real) ->void */

	api := Core11Api
	rcv := (*C.godot_quat)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_axis))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_angle))

	C.go_godot_quat_set_axis_angle(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

type Rect2 C.godot_rect2

func InitRect2GodotType() {
	RegisterState.Stats.GodotTypeAllocs["Rect2"] = 0
	RegisterState.Stats.GodotTypeFrees["Rect2"] = 0
}

func NewRect2WithPositionAndSize(
	p_pos Vector2 /* godot_vector2 */, p_size Vector2, /* godot_vector2 */
) Rect2 {
	dest := Rect2{}

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_pos))
	in1 := (*C.godot_vector2)(unsafe.Pointer(&p_size))

	/* go_godot_rect2_new_with_position_and_size(API_STRUCT, *godot_vector2, *godot_vector2) -> *Rect2 */

	C.go_godot_rect2_new_with_position_and_size(
		api,
		rcv,
		in0,
		in1,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	RegisterState.Stats.GodotTypeAllocs["Rect2"]++

	return dest
}

func NewRect2(
	p_x float32 /* else case */, p_y float32 /* else case */, p_width float32 /* else case */, p_height float32, /* else case */
) Rect2 {
	dest := Rect2{}

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(&dest))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_x))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_y))
	in2 := *(*C.godot_real)(unsafe.Pointer(&p_width))
	in3 := *(*C.godot_real)(unsafe.Pointer(&p_height))

	/* go_godot_rect2_new(API_STRUCT,godot_real,godot_real,godot_real,godot_real) -> *Rect2 */

	C.go_godot_rect2_new(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	RegisterState.Stats.GodotTypeAllocs["Rect2"]++

	return dest
}

/* Getter Method: godot_rect2_as_string -> godot_string */
func (gdt *Rect2) AsString() String {

	/* go_godot_rect2_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))

	ret := C.go_godot_rect2_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_get_area -> godot_real */
func (gdt *Rect2) GetArea() float32 {

	/* go_godot_rect2_get_area(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))

	ret := C.go_godot_rect2_get_area(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_intersects -> godot_bool */
func (gdt *Rect2) Intersects(
	p_b Rect2, /* godot_rect2 */
) bool {

	/* go_godot_rect2_intersects(API_STRUCT, *godot_rect2) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_rect2)(unsafe.Pointer(&p_b))

	ret := C.go_godot_rect2_intersects(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_encloses -> godot_bool */
func (gdt *Rect2) Encloses(
	p_b Rect2, /* godot_rect2 */
) bool {

	/* go_godot_rect2_encloses(API_STRUCT, *godot_rect2) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_rect2)(unsafe.Pointer(&p_b))

	ret := C.go_godot_rect2_encloses(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_has_no_area -> godot_bool */
func (gdt *Rect2) HasNoArea() bool {

	/* go_godot_rect2_has_no_area(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))

	ret := C.go_godot_rect2_has_no_area(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_clip -> godot_rect2 */
func (gdt *Rect2) Clip(
	p_b Rect2, /* godot_rect2 */
) Rect2 {

	/* go_godot_rect2_clip(API_STRUCT, *godot_rect2) ->godot_rect2 */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_rect2)(unsafe.Pointer(&p_b))

	ret := C.go_godot_rect2_clip(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Rect2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_merge -> godot_rect2 */
func (gdt *Rect2) Merge(
	p_b Rect2, /* godot_rect2 */
) Rect2 {

	/* go_godot_rect2_merge(API_STRUCT, *godot_rect2) ->godot_rect2 */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_rect2)(unsafe.Pointer(&p_b))

	ret := C.go_godot_rect2_merge(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Rect2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_has_point -> godot_bool */
func (gdt *Rect2) HasPoint(
	p_point Vector2, /* godot_vector2 */
) bool {

	/* go_godot_rect2_has_point(API_STRUCT, *godot_vector2) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_point))

	ret := C.go_godot_rect2_has_point(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_grow -> godot_rect2 */
func (gdt *Rect2) Grow(
	p_by float32, /* else case */
) Rect2 {

	/* go_godot_rect2_grow(API_STRUCT,godot_real) ->godot_rect2 */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_by))

	ret := C.go_godot_rect2_grow(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Rect2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_expand -> godot_rect2 */
func (gdt *Rect2) Expand(
	p_to Vector2, /* godot_vector2 */
) Rect2 {

	/* go_godot_rect2_expand(API_STRUCT, *godot_vector2) ->godot_rect2 */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_to))

	ret := C.go_godot_rect2_expand(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Rect2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_operator_equal -> godot_bool */
func (gdt *Rect2) OperatorEqual(
	p_b Rect2, /* godot_rect2 */
) bool {

	/* go_godot_rect2_operator_equal(API_STRUCT, *godot_rect2) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_rect2)(unsafe.Pointer(&p_b))

	ret := C.go_godot_rect2_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_get_position -> godot_vector2 */
func (gdt *Rect2) GetPosition() Vector2 {

	/* go_godot_rect2_get_position(API_STRUCT) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))

	ret := C.go_godot_rect2_get_position(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_get_size -> godot_vector2 */
func (gdt *Rect2) GetSize() Vector2 {

	/* go_godot_rect2_get_size(API_STRUCT) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))

	ret := C.go_godot_rect2_get_size(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_rect2_set_position -> void */
func (gdt *Rect2) SetPosition(
	p_pos Vector2, /* godot_vector2 */
) {

	/* go_godot_rect2_set_position(API_STRUCT, *godot_vector2) ->void */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_pos))

	C.go_godot_rect2_set_position(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_rect2_set_size -> void */
func (gdt *Rect2) SetSize(
	p_size Vector2, /* godot_vector2 */
) {

	/* go_godot_rect2_set_size(API_STRUCT, *godot_vector2) ->void */

	api := CoreApi
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_size))

	C.go_godot_rect2_set_size(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_rect2_grow_individual -> godot_rect2 */
func (gdt *Rect2) GrowIndividual(
	p_left float32 /* else case */, p_top float32 /* else case */, p_right float32 /* else case */, p_bottom float32, /* else case */
) Rect2 {

	/* go_godot_rect2_grow_individual(API_STRUCT,godot_real,godot_real,godot_real,godot_real) ->godot_rect2 */

	api := Core11Api
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_left))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_top))
	in2 := *(*C.godot_real)(unsafe.Pointer(&p_right))
	in3 := *(*C.godot_real)(unsafe.Pointer(&p_bottom))

	ret := C.go_godot_rect2_grow_individual(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	return *(*Rect2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_grow_margin -> godot_rect2 */
func (gdt *Rect2) GrowMargin(
	p_margin int32 /* else case */, p_by float32, /* else case */
) Rect2 {

	/* go_godot_rect2_grow_margin(API_STRUCT,godot_int,godot_real) ->godot_rect2 */

	api := Core11Api
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_margin))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_by))

	ret := C.go_godot_rect2_grow_margin(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Rect2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rect2_abs -> godot_rect2 */
func (gdt *Rect2) Abs() Rect2 {

	/* go_godot_rect2_abs(API_STRUCT) ->godot_rect2 */

	api := Core11Api
	rcv := (*C.godot_rect2)(unsafe.Pointer(gdt))

	ret := C.go_godot_rect2_abs(
		api,
		rcv,
	)

	return *(*Rect2)(unsafe.Pointer(&ret))
}

type RID C.godot_rid

func InitRIDGodotType() {
	RegisterState.Stats.GodotTypeAllocs["RID"] = 0
	RegisterState.Stats.GodotTypeFrees["RID"] = 0
}

func NewRID() RID {
	dest := RID{}

	api := CoreApi
	rcv := (*C.godot_rid)(unsafe.Pointer(&dest))

	/* go_godot_rid_new(API_STRUCT) -> *RID */

	C.go_godot_rid_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["RID"]++

	return dest
}

func NewRIDWithResource(
	p_from *GodotObject,
) RID {
	dest := RID{}

	api := CoreApi
	rcv := (*C.godot_rid)(unsafe.Pointer(&dest))
	in0 := unsafe.Pointer(p_from)

	/* go_godot_rid_new_with_resource(API_STRUCT, *godot_object) -> *RID */

	C.go_godot_rid_new_with_resource(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["RID"]++

	return dest
}

/* Getter Method: godot_rid_get_id -> godot_int */
func (gdt *RID) GetId() int32 {

	/* go_godot_rid_get_id(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_rid)(unsafe.Pointer(gdt))

	ret := C.go_godot_rid_get_id(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rid_operator_equal -> godot_bool */
func (gdt *RID) OperatorEqual(
	p_b RID, /* godot_rid */
) bool {

	/* go_godot_rid_operator_equal(API_STRUCT, *godot_rid) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_rid)(unsafe.Pointer(gdt))
	in0 := (*C.godot_rid)(unsafe.Pointer(&p_b))

	ret := C.go_godot_rid_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_rid_operator_less -> godot_bool */
func (gdt *RID) OperatorLess(
	p_b RID, /* godot_rid */
) bool {

	/* go_godot_rid_operator_less(API_STRUCT, *godot_rid) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_rid)(unsafe.Pointer(gdt))
	in0 := (*C.godot_rid)(unsafe.Pointer(&p_b))

	ret := C.go_godot_rid_operator_less(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

type CharString C.godot_char_string

func InitCharStringGodotType() {
	RegisterState.Stats.GodotTypeAllocs["CharString"] = 0
	RegisterState.Stats.GodotTypeFrees["CharString"] = 0
}

/* Getter Method: godot_char_string_length -> godot_int */
func (gdt *CharString) Length() int32 {

	/* go_godot_char_string_length(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_char_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_char_string_length(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_char_string_get_data -> char */
func (gdt *CharString) GetData() string {

	/* go_godot_char_string_get_data(API_STRUCT) -> *C.char */

	api := CoreApi
	rcv := (*C.godot_char_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_char_string_get_data(
		api,
		rcv,
	)

	return C.GoString(ret)
}

/* Setter Method: godot_char_string_destroy -> void */
func (gdt *CharString) Destroy() {

	/* go_godot_char_string_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_char_string)(unsafe.Pointer(gdt))

	C.go_godot_char_string_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["CharString"]++

}

type String C.godot_string

func InitStringGodotType() {
	RegisterState.Stats.GodotTypeAllocs["String"] = 0
	RegisterState.Stats.GodotTypeFrees["String"] = 0
}

func NewString() String {
	dest := String{}

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(&dest))

	/* go_godot_string_new(API_STRUCT) -> *String */

	C.go_godot_string_new(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["String"]++

	return dest
}

func NewStringCopy(
	p_src String, /* godot_string */
) String {
	dest := String{}

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(&dest))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_src))

	/* go_godot_string_new_copy(API_STRUCT, *godot_string) -> *String */

	C.go_godot_string_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["String"]++

	return dest
}

func NewStringWithWideString(
	p_contents int32 /* wchar_t */, p_size int32, /* else case */
) String {
	dest := String{}

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(&dest))
	in0 := (*C.wchar_t)(unsafe.Pointer(&p_contents))
	in1 := *(*C.int)(unsafe.Pointer(&p_size))

	/* go_godot_string_new_with_wide_string(API_STRUCT, *wchar_t,int) -> *String */

	C.go_godot_string_new_with_wide_string(
		api,
		rcv,
		in0,
		in1,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	RegisterState.Stats.GodotTypeAllocs["String"]++

	return dest
}

/* Getter Method: godot_string_operator_index -> wchar_t */
func (gdt *String) OperatorIndex(
	p_idx int32, /* else case */
) int32 {

	/* go_godot_string_operator_index(API_STRUCT,godot_int) -> *int32 */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_string_operator_index(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_operator_index_const -> wchar_t */
func (gdt *String) OperatorIndexConst(
	p_idx int32, /* else case */
) int32 {

	/* go_godot_string_operator_index_const(API_STRUCT,godot_int) ->wchar_t */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_string_operator_index_const(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_wide_str -> wchar_t */
func (gdt *String) WideStr() int32 {

	/* go_godot_string_wide_str(API_STRUCT) -> *int32 */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_wide_str(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_operator_equal -> godot_bool */
func (gdt *String) OperatorEqual(
	p_b String, /* godot_string */
) bool {

	/* go_godot_string_operator_equal(API_STRUCT, *godot_string) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_b))

	ret := C.go_godot_string_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_operator_less -> godot_bool */
func (gdt *String) OperatorLess(
	p_b String, /* godot_string */
) bool {

	/* go_godot_string_operator_less(API_STRUCT, *godot_string) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_b))

	ret := C.go_godot_string_operator_less(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_operator_plus -> godot_string */
func (gdt *String) OperatorPlus(
	p_b String, /* godot_string */
) String {

	/* go_godot_string_operator_plus(API_STRUCT, *godot_string) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_b))

	ret := C.go_godot_string_operator_plus(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_length -> godot_int */
func (gdt *String) Length() int32 {

	/* go_godot_string_length(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_length(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_begins_with -> godot_bool */
func (gdt *String) BeginsWith(
	p_string String, /* godot_string */
) bool {

	/* go_godot_string_begins_with(API_STRUCT, *godot_string) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_string))

	ret := C.go_godot_string_begins_with(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_bigrams -> godot_array */
func (gdt *String) Bigrams() Array {

	/* go_godot_string_bigrams(API_STRUCT) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_bigrams(
		api,
		rcv,
	)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_ends_with -> godot_bool */
func (gdt *String) EndsWith(
	p_string String, /* godot_string */
) bool {

	/* go_godot_string_ends_with(API_STRUCT, *godot_string) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_string))

	ret := C.go_godot_string_ends_with(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_find -> godot_int */
func (gdt *String) Find(
	p_what String, /* else case */
) int32 {

	/* go_godot_string_find(API_STRUCT,godot_string) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_what))

	ret := C.go_godot_string_find(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_find_from -> godot_int */
func (gdt *String) FindFrom(
	p_what String /* else case */, p_from int32, /* else case */
) int32 {

	/* go_godot_string_find_from(API_STRUCT,godot_string,godot_int) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_what))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_from))

	ret := C.go_godot_string_find_from(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_findmk -> godot_int */
func (gdt *String) Findmk(
	p_keys Array, /* godot_array */
) int32 {

	/* go_godot_string_findmk(API_STRUCT, *godot_array) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_keys))

	ret := C.go_godot_string_findmk(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_findmk_from -> godot_int */
func (gdt *String) FindmkFrom(
	p_keys Array /* godot_array */, p_from int32, /* else case */
) int32 {

	/* go_godot_string_findmk_from(API_STRUCT, *godot_array,godot_int) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_keys))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_from))

	ret := C.go_godot_string_findmk_from(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_findn -> godot_int */
func (gdt *String) Findn(
	p_what String, /* else case */
) int32 {

	/* go_godot_string_findn(API_STRUCT,godot_string) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_what))

	ret := C.go_godot_string_findn(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_findn_from -> godot_int */
func (gdt *String) FindnFrom(
	p_what String /* else case */, p_from int32, /* else case */
) int32 {

	/* go_godot_string_findn_from(API_STRUCT,godot_string,godot_int) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_what))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_from))

	ret := C.go_godot_string_findn_from(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_find_last -> godot_int */
func (gdt *String) FindLast(
	p_what String, /* else case */
) int32 {

	/* go_godot_string_find_last(API_STRUCT,godot_string) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_what))

	ret := C.go_godot_string_find_last(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_format -> godot_string */
func (gdt *String) Format(
	p_values Variant, /* godot_variant */
) String {

	/* go_godot_string_format(API_STRUCT, *godot_variant) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_values))

	ret := C.go_godot_string_format(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_hex_to_int -> godot_int */
func (gdt *String) HexToInt() int32 {

	/* go_godot_string_hex_to_int(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_hex_to_int(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_hex_to_int_without_prefix -> godot_int */
func (gdt *String) HexToIntWithoutPrefix() int32 {

	/* go_godot_string_hex_to_int_without_prefix(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_hex_to_int_without_prefix(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_insert -> godot_string */
func (gdt *String) Insert(
	p_at_pos int32 /* else case */, p_string String, /* else case */
) String {

	/* go_godot_string_insert(API_STRUCT,godot_int,godot_string) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_at_pos))
	in1 := *(*C.godot_string)(unsafe.Pointer(&p_string))

	ret := C.go_godot_string_insert(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_numeric -> godot_bool */
func (gdt *String) IsNumeric() bool {

	/* go_godot_string_is_numeric(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_is_numeric(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_subsequence_of -> godot_bool */
func (gdt *String) IsSubsequenceOf(
	p_string String, /* godot_string */
) bool {

	/* go_godot_string_is_subsequence_of(API_STRUCT, *godot_string) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_string))

	ret := C.go_godot_string_is_subsequence_of(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_subsequence_ofi -> godot_bool */
func (gdt *String) IsSubsequenceOfi(
	p_string String, /* godot_string */
) bool {

	/* go_godot_string_is_subsequence_ofi(API_STRUCT, *godot_string) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_string))

	ret := C.go_godot_string_is_subsequence_ofi(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_lpad -> godot_string */
func (gdt *String) Lpad(
	p_min_length int32, /* else case */
) String {

	/* go_godot_string_lpad(API_STRUCT,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_min_length))

	ret := C.go_godot_string_lpad(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_lpad_with_custom_character -> godot_string */
func (gdt *String) LpadWithCustomCharacter(
	p_min_length int32 /* else case */, p_character String, /* godot_string */
) String {

	/* go_godot_string_lpad_with_custom_character(API_STRUCT,godot_int, *godot_string) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_min_length))
	in1 := (*C.godot_string)(unsafe.Pointer(&p_character))

	ret := C.go_godot_string_lpad_with_custom_character(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_match -> godot_bool */
func (gdt *String) Match(
	p_wildcard String, /* godot_string */
) bool {

	/* go_godot_string_match(API_STRUCT, *godot_string) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_wildcard))

	ret := C.go_godot_string_match(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_matchn -> godot_bool */
func (gdt *String) Matchn(
	p_wildcard String, /* godot_string */
) bool {

	/* go_godot_string_matchn(API_STRUCT, *godot_string) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_wildcard))

	ret := C.go_godot_string_matchn(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_pad_decimals -> godot_string */
func (gdt *String) PadDecimals(
	p_digits int32, /* else case */
) String {

	/* go_godot_string_pad_decimals(API_STRUCT,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_digits))

	ret := C.go_godot_string_pad_decimals(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_pad_zeros -> godot_string */
func (gdt *String) PadZeros(
	p_digits int32, /* else case */
) String {

	/* go_godot_string_pad_zeros(API_STRUCT,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_digits))

	ret := C.go_godot_string_pad_zeros(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_replace_first -> godot_string */
func (gdt *String) ReplaceFirst(
	p_key String /* else case */, p_with String, /* else case */
) String {

	/* go_godot_string_replace_first(API_STRUCT,godot_string,godot_string) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_key))
	in1 := *(*C.godot_string)(unsafe.Pointer(&p_with))

	ret := C.go_godot_string_replace_first(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_replace -> godot_string */
func (gdt *String) Replace(
	p_key String /* else case */, p_with String, /* else case */
) String {

	/* go_godot_string_replace(API_STRUCT,godot_string,godot_string) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_key))
	in1 := *(*C.godot_string)(unsafe.Pointer(&p_with))

	ret := C.go_godot_string_replace(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_replacen -> godot_string */
func (gdt *String) Replacen(
	p_key String /* else case */, p_with String, /* else case */
) String {

	/* go_godot_string_replacen(API_STRUCT,godot_string,godot_string) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_key))
	in1 := *(*C.godot_string)(unsafe.Pointer(&p_with))

	ret := C.go_godot_string_replacen(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_rfind -> godot_int */
func (gdt *String) Rfind(
	p_what String, /* else case */
) int32 {

	/* go_godot_string_rfind(API_STRUCT,godot_string) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_what))

	ret := C.go_godot_string_rfind(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_rfindn -> godot_int */
func (gdt *String) Rfindn(
	p_what String, /* else case */
) int32 {

	/* go_godot_string_rfindn(API_STRUCT,godot_string) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_what))

	ret := C.go_godot_string_rfindn(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_rfind_from -> godot_int */
func (gdt *String) RfindFrom(
	p_what String /* else case */, p_from int32, /* else case */
) int32 {

	/* go_godot_string_rfind_from(API_STRUCT,godot_string,godot_int) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_what))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_from))

	ret := C.go_godot_string_rfind_from(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_rfindn_from -> godot_int */
func (gdt *String) RfindnFrom(
	p_what String /* else case */, p_from int32, /* else case */
) int32 {

	/* go_godot_string_rfindn_from(API_STRUCT,godot_string,godot_int) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_what))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_from))

	ret := C.go_godot_string_rfindn_from(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_rpad -> godot_string */
func (gdt *String) Rpad(
	p_min_length int32, /* else case */
) String {

	/* go_godot_string_rpad(API_STRUCT,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_min_length))

	ret := C.go_godot_string_rpad(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_rpad_with_custom_character -> godot_string */
func (gdt *String) RpadWithCustomCharacter(
	p_min_length int32 /* else case */, p_character String, /* godot_string */
) String {

	/* go_godot_string_rpad_with_custom_character(API_STRUCT,godot_int, *godot_string) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_min_length))
	in1 := (*C.godot_string)(unsafe.Pointer(&p_character))

	ret := C.go_godot_string_rpad_with_custom_character(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_similarity -> godot_real */
func (gdt *String) Similarity(
	p_string String, /* godot_string */
) float32 {

	/* go_godot_string_similarity(API_STRUCT, *godot_string) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_string))

	ret := C.go_godot_string_similarity(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_sprintf -> godot_string */
func (gdt *String) Sprintf(
	p_values Array /* godot_array */, p_error bool, /* godot_bool */
) String {

	/* go_godot_string_sprintf(API_STRUCT, *godot_array, *godot_bool) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_values))
	in1 := (*C.godot_bool)(unsafe.Pointer(&p_error))

	ret := C.go_godot_string_sprintf(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_substr -> godot_string */
func (gdt *String) Substr(
	p_from int32 /* else case */, p_chars int32, /* else case */
) String {

	/* go_godot_string_substr(API_STRUCT,godot_int,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_from))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_chars))

	ret := C.go_godot_string_substr(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_to_double -> double */
func (gdt *String) ToDouble() float64 {

	/* go_godot_string_to_double(API_STRUCT) ->double */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_to_double(
		api,
		rcv,
	)

	return *(*float64)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_to_float -> godot_real */
func (gdt *String) ToFloat() float32 {

	/* go_godot_string_to_float(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_to_float(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_to_int -> godot_int */
func (gdt *String) ToInt() int32 {

	/* go_godot_string_to_int(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_to_int(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_camelcase_to_underscore -> godot_string */
func (gdt *String) CamelcaseToUnderscore() String {

	/* go_godot_string_camelcase_to_underscore(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_camelcase_to_underscore(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_camelcase_to_underscore_lowercased -> godot_string */
func (gdt *String) CamelcaseToUnderscoreLowercased() String {

	/* go_godot_string_camelcase_to_underscore_lowercased(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_camelcase_to_underscore_lowercased(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_capitalize -> godot_string */
func (gdt *String) Capitalize() String {

	/* go_godot_string_capitalize(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_capitalize(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_hex_to_int64 -> int64_t */
func (gdt *String) HexToInt64() int64 {

	/* go_godot_string_hex_to_int64(API_STRUCT) ->int64_t */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_hex_to_int64(
		api,
		rcv,
	)

	return *(*int64)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_hex_to_int64_with_prefix -> int64_t */
func (gdt *String) HexToInt64WithPrefix() int64 {

	/* go_godot_string_hex_to_int64_with_prefix(API_STRUCT) ->int64_t */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_hex_to_int64_with_prefix(
		api,
		rcv,
	)

	return *(*int64)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_to_int64 -> int64_t */
func (gdt *String) ToInt64() int64 {

	/* go_godot_string_to_int64(API_STRUCT) ->int64_t */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_to_int64(
		api,
		rcv,
	)

	return *(*int64)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_get_slice_count -> godot_int */
func (gdt *String) GetSliceCount(
	p_splitter String, /* else case */
) int32 {

	/* go_godot_string_get_slice_count(API_STRUCT,godot_string) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_splitter))

	ret := C.go_godot_string_get_slice_count(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_get_slice -> godot_string */
func (gdt *String) GetSlice(
	p_splitter String /* else case */, p_slice int32, /* else case */
) String {

	/* go_godot_string_get_slice(API_STRUCT,godot_string,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_splitter))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_slice))

	ret := C.go_godot_string_get_slice(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_split -> godot_array */
func (gdt *String) Split(
	p_splitter String, /* godot_string */
) Array {

	/* go_godot_string_split(API_STRUCT, *godot_string) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_splitter))

	ret := C.go_godot_string_split(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_split_allow_empty -> godot_array */
func (gdt *String) SplitAllowEmpty(
	p_splitter String, /* godot_string */
) Array {

	/* go_godot_string_split_allow_empty(API_STRUCT, *godot_string) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_splitter))

	ret := C.go_godot_string_split_allow_empty(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_split_floats -> godot_array */
func (gdt *String) SplitFloats(
	p_splitter String, /* godot_string */
) Array {

	/* go_godot_string_split_floats(API_STRUCT, *godot_string) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_splitter))

	ret := C.go_godot_string_split_floats(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_split_floats_allows_empty -> godot_array */
func (gdt *String) SplitFloatsAllowsEmpty(
	p_splitter String, /* godot_string */
) Array {

	/* go_godot_string_split_floats_allows_empty(API_STRUCT, *godot_string) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_splitter))

	ret := C.go_godot_string_split_floats_allows_empty(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_split_floats_mk -> godot_array */
func (gdt *String) SplitFloatsMk(
	p_splitters Array, /* godot_array */
) Array {

	/* go_godot_string_split_floats_mk(API_STRUCT, *godot_array) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_splitters))

	ret := C.go_godot_string_split_floats_mk(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_split_floats_mk_allows_empty -> godot_array */
func (gdt *String) SplitFloatsMkAllowsEmpty(
	p_splitters Array, /* godot_array */
) Array {

	/* go_godot_string_split_floats_mk_allows_empty(API_STRUCT, *godot_array) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_splitters))

	ret := C.go_godot_string_split_floats_mk_allows_empty(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_split_ints -> godot_array */
func (gdt *String) SplitInts(
	p_splitter String, /* godot_string */
) Array {

	/* go_godot_string_split_ints(API_STRUCT, *godot_string) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_splitter))

	ret := C.go_godot_string_split_ints(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_split_ints_allows_empty -> godot_array */
func (gdt *String) SplitIntsAllowsEmpty(
	p_splitter String, /* godot_string */
) Array {

	/* go_godot_string_split_ints_allows_empty(API_STRUCT, *godot_string) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_splitter))

	ret := C.go_godot_string_split_ints_allows_empty(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_split_ints_mk -> godot_array */
func (gdt *String) SplitIntsMk(
	p_splitters Array, /* godot_array */
) Array {

	/* go_godot_string_split_ints_mk(API_STRUCT, *godot_array) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_splitters))

	ret := C.go_godot_string_split_ints_mk(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_split_ints_mk_allows_empty -> godot_array */
func (gdt *String) SplitIntsMkAllowsEmpty(
	p_splitters Array, /* godot_array */
) Array {

	/* go_godot_string_split_ints_mk_allows_empty(API_STRUCT, *godot_array) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_splitters))

	ret := C.go_godot_string_split_ints_mk_allows_empty(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_split_spaces -> godot_array */
func (gdt *String) SplitSpaces() Array {

	/* go_godot_string_split_spaces(API_STRUCT) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_split_spaces(
		api,
		rcv,
	)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_to_lower -> godot_string */
func (gdt *String) ToLower() String {

	/* go_godot_string_to_lower(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_to_lower(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_to_upper -> godot_string */
func (gdt *String) ToUpper() String {

	/* go_godot_string_to_upper(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_to_upper(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_get_basename -> godot_string */
func (gdt *String) GetBasename() String {

	/* go_godot_string_get_basename(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_get_basename(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_get_extension -> godot_string */
func (gdt *String) GetExtension() String {

	/* go_godot_string_get_extension(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_get_extension(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_left -> godot_string */
func (gdt *String) Left(
	p_pos int32, /* else case */
) String {

	/* go_godot_string_left(API_STRUCT,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_pos))

	ret := C.go_godot_string_left(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_ord_at -> wchar_t */
func (gdt *String) OrdAt(
	p_idx int32, /* else case */
) int32 {

	/* go_godot_string_ord_at(API_STRUCT,godot_int) ->wchar_t */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_idx))

	ret := C.go_godot_string_ord_at(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_plus_file -> godot_string */
func (gdt *String) PlusFile(
	p_file String, /* godot_string */
) String {

	/* go_godot_string_plus_file(API_STRUCT, *godot_string) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_file))

	ret := C.go_godot_string_plus_file(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_right -> godot_string */
func (gdt *String) Right(
	p_pos int32, /* else case */
) String {

	/* go_godot_string_right(API_STRUCT,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_pos))

	ret := C.go_godot_string_right(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_strip_edges -> godot_string */
func (gdt *String) StripEdges(
	p_left bool /* else case */, p_right bool, /* else case */
) String {

	/* go_godot_string_strip_edges(API_STRUCT,godot_bool,godot_bool) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_bool)(unsafe.Pointer(&p_left))
	in1 := *(*C.godot_bool)(unsafe.Pointer(&p_right))

	ret := C.go_godot_string_strip_edges(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_strip_escapes -> godot_string */
func (gdt *String) StripEscapes() String {

	/* go_godot_string_strip_escapes(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_strip_escapes(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_string_erase -> void */
func (gdt *String) Erase(
	p_pos int32 /* else case */, p_chars int32, /* else case */
) {

	/* go_godot_string_erase(API_STRUCT,godot_int,godot_int) ->void */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_pos))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_chars))

	C.go_godot_string_erase(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_string_ascii -> godot_char_string */
func (gdt *String) Ascii() CharString {

	/* go_godot_string_ascii(API_STRUCT) ->godot_char_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_ascii(
		api,
		rcv,
	)

	return *(*CharString)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_ascii_extended -> godot_char_string */
func (gdt *String) AsciiExtended() CharString {

	/* go_godot_string_ascii_extended(API_STRUCT) ->godot_char_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_ascii_extended(
		api,
		rcv,
	)

	return *(*CharString)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_utf8 -> godot_char_string */
func (gdt *String) Utf8() CharString {

	/* go_godot_string_utf8(API_STRUCT) ->godot_char_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_utf8(
		api,
		rcv,
	)

	return *(*CharString)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_parse_utf8 -> godot_bool */
func (gdt *String) ParseUtf8(
	p_utf8 string,
) bool {

	/* go_godot_string_parse_utf8(API_STRUCT, *char) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := C.CString(p_utf8)
	defer C.free(unsafe.Pointer(in0))

	ret := C.go_godot_string_parse_utf8(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_parse_utf8_with_len -> godot_bool */
func (gdt *String) ParseUtf8WithLen(
	p_utf8 string, p_len int32, /* else case */
) bool {

	/* go_godot_string_parse_utf8_with_len(API_STRUCT, *char,godot_int) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := C.CString(p_utf8)
	defer C.free(unsafe.Pointer(in0))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_len))

	ret := C.go_godot_string_parse_utf8_with_len(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_hash64 -> uint64_t */
func (gdt *String) Hash64() uint64 {

	/* go_godot_string_hash64(API_STRUCT) ->uint64_t */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_hash64(
		api,
		rcv,
	)

	return *(*uint64)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_md5_buffer -> godot_pool_byte_array */
func (gdt *String) Md5Buffer() PoolByteArray {

	/* go_godot_string_md5_buffer(API_STRUCT) ->godot_pool_byte_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_md5_buffer(
		api,
		rcv,
	)

	return *(*PoolByteArray)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_md5_text -> godot_string */
func (gdt *String) Md5Text() String {

	/* go_godot_string_md5_text(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_md5_text(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_sha256_buffer -> godot_pool_byte_array */
func (gdt *String) Sha256Buffer() PoolByteArray {

	/* go_godot_string_sha256_buffer(API_STRUCT) ->godot_pool_byte_array */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_sha256_buffer(
		api,
		rcv,
	)

	return *(*PoolByteArray)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_sha256_text -> godot_string */
func (gdt *String) Sha256Text() String {

	/* go_godot_string_sha256_text(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_sha256_text(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_empty -> godot_bool */
func (gdt *String) Empty() bool {

	/* go_godot_string_empty(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_empty(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_get_base_dir -> godot_string */
func (gdt *String) GetBaseDir() String {

	/* go_godot_string_get_base_dir(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_get_base_dir(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_get_file -> godot_string */
func (gdt *String) GetFile() String {

	/* go_godot_string_get_file(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_get_file(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_abs_path -> godot_bool */
func (gdt *String) IsAbsPath() bool {

	/* go_godot_string_is_abs_path(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_is_abs_path(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_rel_path -> godot_bool */
func (gdt *String) IsRelPath() bool {

	/* go_godot_string_is_rel_path(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_is_rel_path(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_resource_file -> godot_bool */
func (gdt *String) IsResourceFile() bool {

	/* go_godot_string_is_resource_file(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_is_resource_file(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_path_to -> godot_string */
func (gdt *String) PathTo(
	p_path String, /* godot_string */
) String {

	/* go_godot_string_path_to(API_STRUCT, *godot_string) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_path))

	ret := C.go_godot_string_path_to(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_path_to_file -> godot_string */
func (gdt *String) PathToFile(
	p_path String, /* godot_string */
) String {

	/* go_godot_string_path_to_file(API_STRUCT, *godot_string) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_path))

	ret := C.go_godot_string_path_to_file(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_simplify_path -> godot_string */
func (gdt *String) SimplifyPath() String {

	/* go_godot_string_simplify_path(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_simplify_path(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_c_escape -> godot_string */
func (gdt *String) CEscape() String {

	/* go_godot_string_c_escape(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_c_escape(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_c_escape_multiline -> godot_string */
func (gdt *String) CEscapeMultiline() String {

	/* go_godot_string_c_escape_multiline(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_c_escape_multiline(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_c_unescape -> godot_string */
func (gdt *String) CUnescape() String {

	/* go_godot_string_c_unescape(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_c_unescape(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_http_escape -> godot_string */
func (gdt *String) HttpEscape() String {

	/* go_godot_string_http_escape(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_http_escape(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_http_unescape -> godot_string */
func (gdt *String) HttpUnescape() String {

	/* go_godot_string_http_unescape(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_http_unescape(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_json_escape -> godot_string */
func (gdt *String) JsonEscape() String {

	/* go_godot_string_json_escape(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_json_escape(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_word_wrap -> godot_string */
func (gdt *String) WordWrap(
	p_chars_per_line int32, /* else case */
) String {

	/* go_godot_string_word_wrap(API_STRUCT,godot_int) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_int)(unsafe.Pointer(&p_chars_per_line))

	ret := C.go_godot_string_word_wrap(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_xml_escape -> godot_string */
func (gdt *String) XmlEscape() String {

	/* go_godot_string_xml_escape(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_xml_escape(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_xml_escape_with_quotes -> godot_string */
func (gdt *String) XmlEscapeWithQuotes() String {

	/* go_godot_string_xml_escape_with_quotes(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_xml_escape_with_quotes(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_xml_unescape -> godot_string */
func (gdt *String) XmlUnescape() String {

	/* go_godot_string_xml_unescape(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_xml_unescape(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_percent_decode -> godot_string */
func (gdt *String) PercentDecode() String {

	/* go_godot_string_percent_decode(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_percent_decode(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_percent_encode -> godot_string */
func (gdt *String) PercentEncode() String {

	/* go_godot_string_percent_encode(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_percent_encode(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_valid_float -> godot_bool */
func (gdt *String) IsValidFloat() bool {

	/* go_godot_string_is_valid_float(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_is_valid_float(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_valid_hex_number -> godot_bool */
func (gdt *String) IsValidHexNumber(
	p_with_prefix bool, /* else case */
) bool {

	/* go_godot_string_is_valid_hex_number(API_STRUCT,godot_bool) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_bool)(unsafe.Pointer(&p_with_prefix))

	ret := C.go_godot_string_is_valid_hex_number(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_valid_html_color -> godot_bool */
func (gdt *String) IsValidHtmlColor() bool {

	/* go_godot_string_is_valid_html_color(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_is_valid_html_color(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_valid_identifier -> godot_bool */
func (gdt *String) IsValidIdentifier() bool {

	/* go_godot_string_is_valid_identifier(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_is_valid_identifier(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_valid_integer -> godot_bool */
func (gdt *String) IsValidInteger() bool {

	/* go_godot_string_is_valid_integer(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_is_valid_integer(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_is_valid_ip_address -> godot_bool */
func (gdt *String) IsValidIpAddress() bool {

	/* go_godot_string_is_valid_ip_address(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_is_valid_ip_address(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_string_destroy -> void */
func (gdt *String) Destroy() {

	/* go_godot_string_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	C.go_godot_string_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["String"]++

}

/* Getter Method: godot_string_dedent -> godot_string */
func (gdt *String) Dedent() String {

	/* go_godot_string_dedent(API_STRUCT) ->godot_string */

	api := Core11Api
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_dedent(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_trim_prefix -> godot_string */
func (gdt *String) TrimPrefix(
	p_prefix String, /* godot_string */
) String {

	/* go_godot_string_trim_prefix(API_STRUCT, *godot_string) ->godot_string */

	api := Core11Api
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_prefix))

	ret := C.go_godot_string_trim_prefix(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_trim_suffix -> godot_string */
func (gdt *String) TrimSuffix(
	p_suffix String, /* godot_string */
) String {

	/* go_godot_string_trim_suffix(API_STRUCT, *godot_string) ->godot_string */

	api := Core11Api
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_suffix))

	ret := C.go_godot_string_trim_suffix(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_rstrip -> godot_string */
func (gdt *String) Rstrip(
	p_chars String, /* godot_string */
) String {

	/* go_godot_string_rstrip(API_STRUCT, *godot_string) ->godot_string */

	api := Core11Api
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_chars))

	ret := C.go_godot_string_rstrip(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_rsplit -> godot_pool_string_array */
func (gdt *String) Rsplit(
	p_divisor String /* godot_string */, p_allow_empty bool /* else case */, p_maxsplit int32, /* else case */
) PoolStringArray {

	/* go_godot_string_rsplit(API_STRUCT, *godot_string,godot_bool,godot_int) ->godot_pool_string_array */

	api := Core11Api
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_divisor))
	in1 := *(*C.godot_bool)(unsafe.Pointer(&p_allow_empty))
	in2 := *(*C.godot_int)(unsafe.Pointer(&p_maxsplit))

	ret := C.go_godot_string_rsplit(
		api,
		rcv,
		in0,
		in1,
		in2,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)

	return *(*PoolStringArray)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_count -> godot_int */
func (gdt *String) Count(
	p_what String /* else case */, p_from int32 /* else case */, p_to int32, /* else case */
) int32 {

	/* go_godot_string_count(API_STRUCT,godot_string,godot_int,godot_int) ->godot_int */

	api := Core12Api
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_what))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_from))
	in2 := *(*C.godot_int)(unsafe.Pointer(&p_to))

	ret := C.go_godot_string_count(
		api,
		rcv,
		in0,
		in1,
		in2,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_countn -> godot_int */
func (gdt *String) Countn(
	p_what String /* else case */, p_from int32 /* else case */, p_to int32, /* else case */
) int32 {

	/* go_godot_string_countn(API_STRUCT,godot_string,godot_int,godot_int) ->godot_int */

	api := Core12Api
	rcv := (*C.godot_string)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_string)(unsafe.Pointer(&p_what))
	in1 := *(*C.godot_int)(unsafe.Pointer(&p_from))
	in2 := *(*C.godot_int)(unsafe.Pointer(&p_to))

	ret := C.go_godot_string_countn(
		api,
		rcv,
		in0,
		in1,
		in2,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)

	return *(*int32)(unsafe.Pointer(&ret))
}

type StringName C.godot_string_name

func InitStringNameGodotType() {
	RegisterState.Stats.GodotTypeAllocs["StringName"] = 0
	RegisterState.Stats.GodotTypeFrees["StringName"] = 0
}

func NewStringName(
	p_name String, /* godot_string */
) StringName {
	dest := StringName{}

	api := CoreApi
	rcv := (*C.godot_string_name)(unsafe.Pointer(&dest))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_name))

	/* go_godot_string_name_new(API_STRUCT, *godot_string) -> *StringName */

	C.go_godot_string_name_new(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["StringName"]++

	return dest
}

func NewStringNameData(
	p_name string,
) StringName {
	dest := StringName{}

	api := CoreApi
	rcv := (*C.godot_string_name)(unsafe.Pointer(&dest))
	in0 := C.CString(p_name)
	defer C.free(unsafe.Pointer(in0))

	/* go_godot_string_name_new_data(API_STRUCT, *char) -> *StringName */

	C.go_godot_string_name_new_data(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["StringName"]++

	return dest
}

/* Getter Method: godot_string_name_get_name -> godot_string */
func (gdt *StringName) GetName() String {

	/* go_godot_string_name_get_name(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_string_name)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_name_get_name(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_name_get_hash -> uint32_t */
func (gdt *StringName) GetHash() uint32 {

	/* go_godot_string_name_get_hash(API_STRUCT) ->uint32_t */

	api := CoreApi
	rcv := (*C.godot_string_name)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_name_get_hash(
		api,
		rcv,
	)

	return *(*uint32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_name_get_data_unique_pointer -> void */
func (gdt *StringName) GetDataUniquePointer() unsafe.Pointer {

	/* go_godot_string_name_get_data_unique_pointer(API_STRUCT) -> *void */

	api := CoreApi
	rcv := (*C.godot_string_name)(unsafe.Pointer(gdt))

	ret := C.go_godot_string_name_get_data_unique_pointer(
		api,
		rcv,
	)

	return unsafe.Pointer(ret)
}

/* Getter Method: godot_string_name_operator_equal -> godot_bool */
func (gdt *StringName) OperatorEqual(
	p_other StringName, /* godot_string_name */
) bool {

	/* go_godot_string_name_operator_equal(API_STRUCT, *godot_string_name) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string_name)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string_name)(unsafe.Pointer(&p_other))

	ret := C.go_godot_string_name_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_string_name_operator_less -> godot_bool */
func (gdt *StringName) OperatorLess(
	p_other StringName, /* godot_string_name */
) bool {

	/* go_godot_string_name_operator_less(API_STRUCT, *godot_string_name) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_string_name)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string_name)(unsafe.Pointer(&p_other))

	ret := C.go_godot_string_name_operator_less(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_string_name_destroy -> void */
func (gdt *StringName) Destroy() {

	/* go_godot_string_name_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_string_name)(unsafe.Pointer(gdt))

	C.go_godot_string_name_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["StringName"]++

}

type Transform C.godot_transform

func InitTransformGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Transform"] = 0
	RegisterState.Stats.GodotTypeFrees["Transform"] = 0
}

func NewTransformWithAxisOrigin(
	p_x_axis Vector3 /* godot_vector3 */, p_y_axis Vector3 /* godot_vector3 */, p_z_axis Vector3 /* godot_vector3 */, p_origin Vector3, /* godot_vector3 */
) Transform {
	dest := Transform{}

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_x_axis))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_y_axis))
	in2 := (*C.godot_vector3)(unsafe.Pointer(&p_z_axis))
	in3 := (*C.godot_vector3)(unsafe.Pointer(&p_origin))

	/* go_godot_transform_new_with_axis_origin(API_STRUCT, *godot_vector3, *godot_vector3, *godot_vector3, *godot_vector3) -> *Transform */

	C.go_godot_transform_new_with_axis_origin(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	RegisterState.Stats.GodotTypeAllocs["Transform"]++

	return dest
}

func NewTransform(
	p_basis Basis /* godot_basis */, p_origin Vector3, /* godot_vector3 */
) Transform {
	dest := Transform{}

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(&dest))
	in0 := (*C.godot_basis)(unsafe.Pointer(&p_basis))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_origin))

	/* go_godot_transform_new(API_STRUCT, *godot_basis, *godot_vector3) -> *Transform */

	C.go_godot_transform_new(
		api,
		rcv,
		in0,
		in1,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	RegisterState.Stats.GodotTypeAllocs["Transform"]++

	return dest
}

func NewTransformIdentity() Transform {
	dest := Transform{}

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(&dest))

	/* go_godot_transform_new_identity(API_STRUCT) -> *Transform */

	C.go_godot_transform_new_identity(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["Transform"]++

	return dest
}

func NewTransformWithQuat(
	p_quat Quat, /* godot_quat */
) Transform {
	dest := Transform{}

	api := Core11Api
	rcv := (*C.godot_transform)(unsafe.Pointer(&dest))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_quat))

	/* go_godot_transform_new_with_quat(API_STRUCT, *godot_quat) -> *Transform */

	C.go_godot_transform_new_with_quat(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Transform"]++

	return dest
}

/* Getter Method: godot_transform_get_basis -> godot_basis */
func (gdt *Transform) GetBasis() Basis {

	/* go_godot_transform_get_basis(API_STRUCT) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform_get_basis(
		api,
		rcv,
	)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_transform_set_basis -> void */
func (gdt *Transform) SetBasis(
	p_v Basis, /* godot_basis */
) {

	/* go_godot_transform_set_basis(API_STRUCT, *godot_basis) ->void */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_basis)(unsafe.Pointer(&p_v))

	C.go_godot_transform_set_basis(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_transform_get_origin -> godot_vector3 */
func (gdt *Transform) GetOrigin() Vector3 {

	/* go_godot_transform_get_origin(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform_get_origin(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_transform_set_origin -> void */
func (gdt *Transform) SetOrigin(
	p_v Vector3, /* godot_vector3 */
) {

	/* go_godot_transform_set_origin(API_STRUCT, *godot_vector3) ->void */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_v))

	C.go_godot_transform_set_origin(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_transform_as_string -> godot_string */
func (gdt *Transform) AsString() String {

	/* go_godot_transform_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_inverse -> godot_transform */
func (gdt *Transform) Inverse() Transform {

	/* go_godot_transform_inverse(API_STRUCT) ->godot_transform */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform_inverse(
		api,
		rcv,
	)

	return *(*Transform)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_affine_inverse -> godot_transform */
func (gdt *Transform) AffineInverse() Transform {

	/* go_godot_transform_affine_inverse(API_STRUCT) ->godot_transform */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform_affine_inverse(
		api,
		rcv,
	)

	return *(*Transform)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_orthonormalized -> godot_transform */
func (gdt *Transform) Orthonormalized() Transform {

	/* go_godot_transform_orthonormalized(API_STRUCT) ->godot_transform */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform_orthonormalized(
		api,
		rcv,
	)

	return *(*Transform)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_rotated -> godot_transform */
func (gdt *Transform) Rotated(
	p_axis Vector3 /* godot_vector3 */, p_phi float32, /* else case */
) Transform {

	/* go_godot_transform_rotated(API_STRUCT, *godot_vector3,godot_real) ->godot_transform */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_axis))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_phi))

	ret := C.go_godot_transform_rotated(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Transform)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_scaled -> godot_transform */
func (gdt *Transform) Scaled(
	p_scale Vector3, /* godot_vector3 */
) Transform {

	/* go_godot_transform_scaled(API_STRUCT, *godot_vector3) ->godot_transform */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_scale))

	ret := C.go_godot_transform_scaled(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Transform)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_translated -> godot_transform */
func (gdt *Transform) Translated(
	p_ofs Vector3, /* godot_vector3 */
) Transform {

	/* go_godot_transform_translated(API_STRUCT, *godot_vector3) ->godot_transform */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_ofs))

	ret := C.go_godot_transform_translated(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Transform)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_looking_at -> godot_transform */
func (gdt *Transform) LookingAt(
	p_target Vector3 /* godot_vector3 */, p_up Vector3, /* godot_vector3 */
) Transform {

	/* go_godot_transform_looking_at(API_STRUCT, *godot_vector3, *godot_vector3) ->godot_transform */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_target))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_up))

	ret := C.go_godot_transform_looking_at(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Transform)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_xform_plane -> godot_plane */
func (gdt *Transform) XformPlane(
	p_v Plane, /* godot_plane */
) Plane {

	/* go_godot_transform_xform_plane(API_STRUCT, *godot_plane) ->godot_plane */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_plane)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform_xform_plane(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Plane)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_xform_inv_plane -> godot_plane */
func (gdt *Transform) XformInvPlane(
	p_v Plane, /* godot_plane */
) Plane {

	/* go_godot_transform_xform_inv_plane(API_STRUCT, *godot_plane) ->godot_plane */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_plane)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform_xform_inv_plane(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Plane)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_operator_equal -> godot_bool */
func (gdt *Transform) OperatorEqual(
	p_b Transform, /* godot_transform */
) bool {

	/* go_godot_transform_operator_equal(API_STRUCT, *godot_transform) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_transform)(unsafe.Pointer(&p_b))

	ret := C.go_godot_transform_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_operator_multiply -> godot_transform */
func (gdt *Transform) OperatorMultiply(
	p_b Transform, /* godot_transform */
) Transform {

	/* go_godot_transform_operator_multiply(API_STRUCT, *godot_transform) ->godot_transform */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_transform)(unsafe.Pointer(&p_b))

	ret := C.go_godot_transform_operator_multiply(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Transform)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_xform_vector3 -> godot_vector3 */
func (gdt *Transform) XformVector3(
	p_v Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_transform_xform_vector3(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform_xform_vector3(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_xform_inv_vector3 -> godot_vector3 */
func (gdt *Transform) XformInvVector3(
	p_v Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_transform_xform_inv_vector3(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform_xform_inv_vector3(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_xform_aabb -> godot_aabb */
func (gdt *Transform) XformAABB(
	p_v AABB, /* godot_aabb */
) AABB {

	/* go_godot_transform_xform_aabb(API_STRUCT, *godot_aabb) ->godot_aabb */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_aabb)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform_xform_aabb(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*AABB)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform_xform_inv_aabb -> godot_aabb */
func (gdt *Transform) XformInvAABB(
	p_v AABB, /* godot_aabb */
) AABB {

	/* go_godot_transform_xform_inv_aabb(API_STRUCT, *godot_aabb) ->godot_aabb */

	api := CoreApi
	rcv := (*C.godot_transform)(unsafe.Pointer(gdt))
	in0 := (*C.godot_aabb)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform_xform_inv_aabb(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*AABB)(unsafe.Pointer(&ret))
}

type Transform2D C.godot_transform2d

func InitTransform2DGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Transform2D"] = 0
	RegisterState.Stats.GodotTypeFrees["Transform2D"] = 0
}

func NewTransform2D(
	p_rot float32 /* else case */, p_pos Vector2, /* godot_vector2 */
) Transform2D {
	dest := Transform2D{}

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(&dest))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_rot))
	in1 := (*C.godot_vector2)(unsafe.Pointer(&p_pos))

	/* go_godot_transform2d_new(API_STRUCT,godot_real, *godot_vector2) -> *Transform2D */

	C.go_godot_transform2d_new(
		api,
		rcv,
		in0,
		in1,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	RegisterState.Stats.GodotTypeAllocs["Transform2D"]++

	return dest
}

func NewTransform2DAxisOrigin(
	p_x_axis Vector2 /* godot_vector2 */, p_y_axis Vector2 /* godot_vector2 */, p_origin Vector2, /* godot_vector2 */
) Transform2D {
	dest := Transform2D{}

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_x_axis))
	in1 := (*C.godot_vector2)(unsafe.Pointer(&p_y_axis))
	in2 := (*C.godot_vector2)(unsafe.Pointer(&p_origin))

	/* go_godot_transform2d_new_axis_origin(API_STRUCT, *godot_vector2, *godot_vector2, *godot_vector2) -> *Transform2D */

	C.go_godot_transform2d_new_axis_origin(
		api,
		rcv,
		in0,
		in1,
		in2,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)

	RegisterState.Stats.GodotTypeAllocs["Transform2D"]++

	return dest
}

func NewTransform2DIdentity() Transform2D {
	dest := Transform2D{}

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(&dest))

	/* go_godot_transform2d_new_identity(API_STRUCT) -> *Transform2D */

	C.go_godot_transform2d_new_identity(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["Transform2D"]++

	return dest
}

/* Getter Method: godot_transform2d_as_string -> godot_string */
func (gdt *Transform2D) AsString() String {

	/* go_godot_transform2d_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform2d_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_inverse -> godot_transform2d */
func (gdt *Transform2D) Inverse() Transform2D {

	/* go_godot_transform2d_inverse(API_STRUCT) ->godot_transform2d */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform2d_inverse(
		api,
		rcv,
	)

	return *(*Transform2D)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_affine_inverse -> godot_transform2d */
func (gdt *Transform2D) AffineInverse() Transform2D {

	/* go_godot_transform2d_affine_inverse(API_STRUCT) ->godot_transform2d */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform2d_affine_inverse(
		api,
		rcv,
	)

	return *(*Transform2D)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_get_rotation -> godot_real */
func (gdt *Transform2D) GetRotation() float32 {

	/* go_godot_transform2d_get_rotation(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform2d_get_rotation(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_get_origin -> godot_vector2 */
func (gdt *Transform2D) GetOrigin() Vector2 {

	/* go_godot_transform2d_get_origin(API_STRUCT) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform2d_get_origin(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_get_scale -> godot_vector2 */
func (gdt *Transform2D) GetScale() Vector2 {

	/* go_godot_transform2d_get_scale(API_STRUCT) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform2d_get_scale(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_orthonormalized -> godot_transform2d */
func (gdt *Transform2D) Orthonormalized() Transform2D {

	/* go_godot_transform2d_orthonormalized(API_STRUCT) ->godot_transform2d */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))

	ret := C.go_godot_transform2d_orthonormalized(
		api,
		rcv,
	)

	return *(*Transform2D)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_rotated -> godot_transform2d */
func (gdt *Transform2D) Rotated(
	p_phi float32, /* else case */
) Transform2D {

	/* go_godot_transform2d_rotated(API_STRUCT,godot_real) ->godot_transform2d */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_phi))

	ret := C.go_godot_transform2d_rotated(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Transform2D)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_scaled -> godot_transform2d */
func (gdt *Transform2D) Scaled(
	p_scale Vector2, /* godot_vector2 */
) Transform2D {

	/* go_godot_transform2d_scaled(API_STRUCT, *godot_vector2) ->godot_transform2d */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_scale))

	ret := C.go_godot_transform2d_scaled(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Transform2D)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_translated -> godot_transform2d */
func (gdt *Transform2D) Translated(
	p_offset Vector2, /* godot_vector2 */
) Transform2D {

	/* go_godot_transform2d_translated(API_STRUCT, *godot_vector2) ->godot_transform2d */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_offset))

	ret := C.go_godot_transform2d_translated(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Transform2D)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_xform_vector2 -> godot_vector2 */
func (gdt *Transform2D) XformVector2(
	p_v Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_transform2d_xform_vector2(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform2d_xform_vector2(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_xform_inv_vector2 -> godot_vector2 */
func (gdt *Transform2D) XformInvVector2(
	p_v Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_transform2d_xform_inv_vector2(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform2d_xform_inv_vector2(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_basis_xform_vector2 -> godot_vector2 */
func (gdt *Transform2D) BasisXformVector2(
	p_v Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_transform2d_basis_xform_vector2(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform2d_basis_xform_vector2(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_basis_xform_inv_vector2 -> godot_vector2 */
func (gdt *Transform2D) BasisXformInvVector2(
	p_v Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_transform2d_basis_xform_inv_vector2(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform2d_basis_xform_inv_vector2(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_interpolate_with -> godot_transform2d */
func (gdt *Transform2D) InterpolateWith(
	p_m Transform2D /* godot_transform2d */, p_c float32, /* else case */
) Transform2D {

	/* go_godot_transform2d_interpolate_with(API_STRUCT, *godot_transform2d,godot_real) ->godot_transform2d */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := (*C.godot_transform2d)(unsafe.Pointer(&p_m))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_c))

	ret := C.go_godot_transform2d_interpolate_with(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Transform2D)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_operator_equal -> godot_bool */
func (gdt *Transform2D) OperatorEqual(
	p_b Transform2D, /* godot_transform2d */
) bool {

	/* go_godot_transform2d_operator_equal(API_STRUCT, *godot_transform2d) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := (*C.godot_transform2d)(unsafe.Pointer(&p_b))

	ret := C.go_godot_transform2d_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_operator_multiply -> godot_transform2d */
func (gdt *Transform2D) OperatorMultiply(
	p_b Transform2D, /* godot_transform2d */
) Transform2D {

	/* go_godot_transform2d_operator_multiply(API_STRUCT, *godot_transform2d) ->godot_transform2d */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := (*C.godot_transform2d)(unsafe.Pointer(&p_b))

	ret := C.go_godot_transform2d_operator_multiply(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Transform2D)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_xform_rect2 -> godot_rect2 */
func (gdt *Transform2D) XformRect2(
	p_v Rect2, /* godot_rect2 */
) Rect2 {

	/* go_godot_transform2d_xform_rect2(API_STRUCT, *godot_rect2) ->godot_rect2 */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := (*C.godot_rect2)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform2d_xform_rect2(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Rect2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_transform2d_xform_inv_rect2 -> godot_rect2 */
func (gdt *Transform2D) XformInvRect2(
	p_v Rect2, /* godot_rect2 */
) Rect2 {

	/* go_godot_transform2d_xform_inv_rect2(API_STRUCT, *godot_rect2) ->godot_rect2 */

	api := CoreApi
	rcv := (*C.godot_transform2d)(unsafe.Pointer(gdt))
	in0 := (*C.godot_rect2)(unsafe.Pointer(&p_v))

	ret := C.go_godot_transform2d_xform_inv_rect2(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Rect2)(unsafe.Pointer(&ret))
}

type Variant C.godot_variant

func InitVariantGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Variant"] = 0
	RegisterState.Stats.GodotTypeFrees["Variant"] = 0
}

func NewVariantCopy(
	p_src Variant, /* godot_variant */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_src))

	/* go_godot_variant_new_copy(API_STRUCT, *godot_variant) -> *Variant */

	C.go_godot_variant_new_copy(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantNil() Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))

	/* go_godot_variant_new_nil(API_STRUCT) -> *Variant */

	C.go_godot_variant_new_nil(
		api,
		rcv,
	)

	runtime.KeepAlive(rcv)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantBool(
	p_b bool, /* else case */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := *(*C.godot_bool)(unsafe.Pointer(&p_b))

	/* go_godot_variant_new_bool(API_STRUCT,godot_bool) -> *Variant */

	C.go_godot_variant_new_bool(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantUint(
	p_i uint64, /* else case */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := *(*C.uint64_t)(unsafe.Pointer(&p_i))

	/* go_godot_variant_new_uint(API_STRUCT,uint64_t) -> *Variant */

	C.go_godot_variant_new_uint(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantInt(
	p_i int64, /* else case */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := *(*C.int64_t)(unsafe.Pointer(&p_i))

	/* go_godot_variant_new_int(API_STRUCT,int64_t) -> *Variant */

	C.go_godot_variant_new_int(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantReal(
	p_r float64, /* else case */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := *(*C.double)(unsafe.Pointer(&p_r))

	/* go_godot_variant_new_real(API_STRUCT,double) -> *Variant */

	C.go_godot_variant_new_real(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantString(
	p_s string, /* Hides String */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	// hide godot_string / String and expose native go string
	strIn0 := internWithGoString(p_s)
	in0 := (*C.godot_string)(unsafe.Pointer(&strIn0))

	/* go_godot_variant_new_string(API_STRUCT, *godot_string) -> *Variant */

	C.go_godot_variant_new_string(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantVector2(
	p_v2 Vector2, /* godot_vector2 */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_v2))

	/* go_godot_variant_new_vector2(API_STRUCT, *godot_vector2) -> *Variant */

	C.go_godot_variant_new_vector2(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantRect2(
	p_rect2 Rect2, /* godot_rect2 */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_rect2)(unsafe.Pointer(&p_rect2))

	/* go_godot_variant_new_rect2(API_STRUCT, *godot_rect2) -> *Variant */

	C.go_godot_variant_new_rect2(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantVector3(
	p_v3 Vector3, /* godot_vector3 */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_v3))

	/* go_godot_variant_new_vector3(API_STRUCT, *godot_vector3) -> *Variant */

	C.go_godot_variant_new_vector3(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantTransform2D(
	p_t2d Transform2D, /* godot_transform2d */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_transform2d)(unsafe.Pointer(&p_t2d))

	/* go_godot_variant_new_transform2d(API_STRUCT, *godot_transform2d) -> *Variant */

	C.go_godot_variant_new_transform2d(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantPlane(
	p_plane Plane, /* godot_plane */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_plane)(unsafe.Pointer(&p_plane))

	/* go_godot_variant_new_plane(API_STRUCT, *godot_plane) -> *Variant */

	C.go_godot_variant_new_plane(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantQuat(
	p_quat Quat, /* godot_quat */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_quat)(unsafe.Pointer(&p_quat))

	/* go_godot_variant_new_quat(API_STRUCT, *godot_quat) -> *Variant */

	C.go_godot_variant_new_quat(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantAABB(
	p_aabb AABB, /* godot_aabb */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_aabb)(unsafe.Pointer(&p_aabb))

	/* go_godot_variant_new_aabb(API_STRUCT, *godot_aabb) -> *Variant */

	C.go_godot_variant_new_aabb(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantBasis(
	p_basis Basis, /* godot_basis */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_basis)(unsafe.Pointer(&p_basis))

	/* go_godot_variant_new_basis(API_STRUCT, *godot_basis) -> *Variant */

	C.go_godot_variant_new_basis(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantTransform(
	p_trans Transform, /* godot_transform */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_transform)(unsafe.Pointer(&p_trans))

	/* go_godot_variant_new_transform(API_STRUCT, *godot_transform) -> *Variant */

	C.go_godot_variant_new_transform(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantColor(
	p_color Color, /* godot_color */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_color)(unsafe.Pointer(&p_color))

	/* go_godot_variant_new_color(API_STRUCT, *godot_color) -> *Variant */

	C.go_godot_variant_new_color(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantNodePath(
	p_np NodePath, /* godot_node_path */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_node_path)(unsafe.Pointer(&p_np))

	/* go_godot_variant_new_node_path(API_STRUCT, *godot_node_path) -> *Variant */

	C.go_godot_variant_new_node_path(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantRID(
	p_rid RID, /* godot_rid */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_rid)(unsafe.Pointer(&p_rid))

	/* go_godot_variant_new_rid(API_STRUCT, *godot_rid) -> *Variant */

	C.go_godot_variant_new_rid(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantObject(
	p_obj *GodotObject,
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := unsafe.Pointer(p_obj)

	/* go_godot_variant_new_object(API_STRUCT, *godot_object) -> *Variant */

	C.go_godot_variant_new_object(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantDictionary(
	p_dict Dictionary, /* godot_dictionary */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_dictionary)(unsafe.Pointer(&p_dict))

	/* go_godot_variant_new_dictionary(API_STRUCT, *godot_dictionary) -> *Variant */

	C.go_godot_variant_new_dictionary(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantArray(
	p_arr Array, /* godot_array */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_array)(unsafe.Pointer(&p_arr))

	/* go_godot_variant_new_array(API_STRUCT, *godot_array) -> *Variant */

	C.go_godot_variant_new_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantPoolByteArray(
	p_pba PoolByteArray, /* godot_pool_byte_array */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_byte_array)(unsafe.Pointer(&p_pba))

	/* go_godot_variant_new_pool_byte_array(API_STRUCT, *godot_pool_byte_array) -> *Variant */

	C.go_godot_variant_new_pool_byte_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantPoolIntArray(
	p_pia PoolIntArray, /* godot_pool_int_array */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_int_array)(unsafe.Pointer(&p_pia))

	/* go_godot_variant_new_pool_int_array(API_STRUCT, *godot_pool_int_array) -> *Variant */

	C.go_godot_variant_new_pool_int_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantPoolRealArray(
	p_pra PoolRealArray, /* godot_pool_real_array */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_real_array)(unsafe.Pointer(&p_pra))

	/* go_godot_variant_new_pool_real_array(API_STRUCT, *godot_pool_real_array) -> *Variant */

	C.go_godot_variant_new_pool_real_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantPoolStringArray(
	p_psa PoolStringArray, /* godot_pool_string_array */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_string_array)(unsafe.Pointer(&p_psa))

	/* go_godot_variant_new_pool_string_array(API_STRUCT, *godot_pool_string_array) -> *Variant */

	C.go_godot_variant_new_pool_string_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantPoolVector2Array(
	p_pv2a PoolVector2Array, /* godot_pool_vector2_array */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_vector2_array)(unsafe.Pointer(&p_pv2a))

	/* go_godot_variant_new_pool_vector2_array(API_STRUCT, *godot_pool_vector2_array) -> *Variant */

	C.go_godot_variant_new_pool_vector2_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantPoolVector3Array(
	p_pv3a PoolVector3Array, /* godot_pool_vector3_array */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_vector3_array)(unsafe.Pointer(&p_pv3a))

	/* go_godot_variant_new_pool_vector3_array(API_STRUCT, *godot_pool_vector3_array) -> *Variant */

	C.go_godot_variant_new_pool_vector3_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

func NewVariantPoolColorArray(
	p_pca PoolColorArray, /* godot_pool_color_array */
) Variant {
	dest := Variant{}

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(&dest))
	in0 := (*C.godot_pool_color_array)(unsafe.Pointer(&p_pca))

	/* go_godot_variant_new_pool_color_array(API_STRUCT, *godot_pool_color_array) -> *Variant */

	C.go_godot_variant_new_pool_color_array(
		api,
		rcv,
		in0,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)

	RegisterState.Stats.GodotTypeAllocs["Variant"]++

	return dest
}

/* Getter Method: godot_variant_get_type -> godot_variant_type */
func (gdt *Variant) GetType() VariantType {

	/* go_godot_variant_get_type(API_STRUCT) ->godot_variant_type */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_get_type(
		api,
		rcv,
	)

	return *(*VariantType)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_bool -> godot_bool */
func (gdt *Variant) AsBool() bool {

	/* go_godot_variant_as_bool(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_bool(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_uint -> uint64_t */
func (gdt *Variant) AsUint() uint64 {

	/* go_godot_variant_as_uint(API_STRUCT) ->uint64_t */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_uint(
		api,
		rcv,
	)

	return *(*uint64)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_int -> int64_t */
func (gdt *Variant) AsInt() int64 {

	/* go_godot_variant_as_int(API_STRUCT) ->int64_t */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_int(
		api,
		rcv,
	)

	return *(*int64)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_real -> double */
func (gdt *Variant) AsReal() float64 {

	/* go_godot_variant_as_real(API_STRUCT) ->double */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_real(
		api,
		rcv,
	)

	return *(*float64)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_string -> godot_string */
func (gdt *Variant) AsString() String {

	/* go_godot_variant_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_vector2 -> godot_vector2 */
func (gdt *Variant) AsVector2() Vector2 {

	/* go_godot_variant_as_vector2(API_STRUCT) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_vector2(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_rect2 -> godot_rect2 */
func (gdt *Variant) AsRect2() Rect2 {

	/* go_godot_variant_as_rect2(API_STRUCT) ->godot_rect2 */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_rect2(
		api,
		rcv,
	)

	return *(*Rect2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_vector3 -> godot_vector3 */
func (gdt *Variant) AsVector3() Vector3 {

	/* go_godot_variant_as_vector3(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_vector3(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_transform2d -> godot_transform2d */
func (gdt *Variant) AsTransform2D() Transform2D {

	/* go_godot_variant_as_transform2d(API_STRUCT) ->godot_transform2d */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_transform2d(
		api,
		rcv,
	)

	return *(*Transform2D)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_plane -> godot_plane */
func (gdt *Variant) AsPlane() Plane {

	/* go_godot_variant_as_plane(API_STRUCT) ->godot_plane */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_plane(
		api,
		rcv,
	)

	return *(*Plane)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_quat -> godot_quat */
func (gdt *Variant) AsQuat() Quat {

	/* go_godot_variant_as_quat(API_STRUCT) ->godot_quat */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_quat(
		api,
		rcv,
	)

	return *(*Quat)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_aabb -> godot_aabb */
func (gdt *Variant) AsAABB() AABB {

	/* go_godot_variant_as_aabb(API_STRUCT) ->godot_aabb */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_aabb(
		api,
		rcv,
	)

	return *(*AABB)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_basis -> godot_basis */
func (gdt *Variant) AsBasis() Basis {

	/* go_godot_variant_as_basis(API_STRUCT) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_basis(
		api,
		rcv,
	)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_transform -> godot_transform */
func (gdt *Variant) AsTransform() Transform {

	/* go_godot_variant_as_transform(API_STRUCT) ->godot_transform */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_transform(
		api,
		rcv,
	)

	return *(*Transform)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_color -> godot_color */
func (gdt *Variant) AsColor() Color {

	/* go_godot_variant_as_color(API_STRUCT) ->godot_color */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_color(
		api,
		rcv,
	)

	return *(*Color)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_node_path -> godot_node_path */
func (gdt *Variant) AsNodePath() NodePath {

	/* go_godot_variant_as_node_path(API_STRUCT) ->godot_node_path */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_node_path(
		api,
		rcv,
	)

	return *(*NodePath)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_rid -> godot_rid */
func (gdt *Variant) AsRID() RID {

	/* go_godot_variant_as_rid(API_STRUCT) ->godot_rid */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_rid(
		api,
		rcv,
	)

	return *(*RID)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_object -> godot_object */
func (gdt *Variant) AsObject() *GodotObject {

	/* go_godot_variant_as_object(API_STRUCT) -> *GodotObject */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_object(
		api,
		rcv,
	)

	return (*GodotObject)(unsafe.Pointer(ret))
}

/* Getter Method: godot_variant_as_dictionary -> godot_dictionary */
func (gdt *Variant) AsDictionary() Dictionary {

	/* go_godot_variant_as_dictionary(API_STRUCT) ->godot_dictionary */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_dictionary(
		api,
		rcv,
	)

	return *(*Dictionary)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_array -> godot_array */
func (gdt *Variant) AsArray() Array {

	/* go_godot_variant_as_array(API_STRUCT) ->godot_array */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_array(
		api,
		rcv,
	)

	return *(*Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_pool_byte_array -> godot_pool_byte_array */
func (gdt *Variant) AsPoolByteArray() PoolByteArray {

	/* go_godot_variant_as_pool_byte_array(API_STRUCT) ->godot_pool_byte_array */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_pool_byte_array(
		api,
		rcv,
	)

	return *(*PoolByteArray)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_pool_int_array -> godot_pool_int_array */
func (gdt *Variant) AsPoolIntArray() PoolIntArray {

	/* go_godot_variant_as_pool_int_array(API_STRUCT) ->godot_pool_int_array */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_pool_int_array(
		api,
		rcv,
	)

	return *(*PoolIntArray)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_pool_real_array -> godot_pool_real_array */
func (gdt *Variant) AsPoolRealArray() PoolRealArray {

	/* go_godot_variant_as_pool_real_array(API_STRUCT) ->godot_pool_real_array */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_pool_real_array(
		api,
		rcv,
	)

	return *(*PoolRealArray)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_pool_string_array -> godot_pool_string_array */
func (gdt *Variant) AsPoolStringArray() PoolStringArray {

	/* go_godot_variant_as_pool_string_array(API_STRUCT) ->godot_pool_string_array */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_pool_string_array(
		api,
		rcv,
	)

	return *(*PoolStringArray)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_pool_vector2_array -> godot_pool_vector2_array */
func (gdt *Variant) AsPoolVector2Array() PoolVector2Array {

	/* go_godot_variant_as_pool_vector2_array(API_STRUCT) ->godot_pool_vector2_array */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_pool_vector2_array(
		api,
		rcv,
	)

	return *(*PoolVector2Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_pool_vector3_array -> godot_pool_vector3_array */
func (gdt *Variant) AsPoolVector3Array() PoolVector3Array {

	/* go_godot_variant_as_pool_vector3_array(API_STRUCT) ->godot_pool_vector3_array */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_pool_vector3_array(
		api,
		rcv,
	)

	return *(*PoolVector3Array)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_as_pool_color_array -> godot_pool_color_array */
func (gdt *Variant) AsPoolColorArray() PoolColorArray {

	/* go_godot_variant_as_pool_color_array(API_STRUCT) ->godot_pool_color_array */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_as_pool_color_array(
		api,
		rcv,
	)

	return *(*PoolColorArray)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_call -> godot_variant */
func (gdt *Variant) Call(
	p_method String /* godot_string */, p_args []*Variant, p_argcount int32 /* else case */, r_error VariantCallError, /* godot_variant_call_error */
) Variant {

	/* go_godot_variant_call(API_STRUCT, *godot_string, **godot_variant,godot_int, *godot_variant_call_error) ->godot_variant */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_method))
	cArr1 := AllocNewArrayAsUnsafePointer(p_args)
	defer Free(cArr1)
	in1 := (**C.godot_variant)(unsafe.Pointer(cArr1))
	in2 := *(*C.godot_int)(unsafe.Pointer(&p_argcount))
	in3 := (*C.godot_variant_call_error)(unsafe.Pointer(&r_error))

	ret := C.go_godot_variant_call(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	return *(*Variant)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_has_method -> godot_bool */
func (gdt *Variant) HasMethod(
	p_method String, /* godot_string */
) bool {

	/* go_godot_variant_has_method(API_STRUCT, *godot_string) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))
	in0 := (*C.godot_string)(unsafe.Pointer(&p_method))

	ret := C.go_godot_variant_has_method(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_operator_equal -> godot_bool */
func (gdt *Variant) OperatorEqual(
	p_other Variant, /* godot_variant */
) bool {

	/* go_godot_variant_operator_equal(API_STRUCT, *godot_variant) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_other))

	ret := C.go_godot_variant_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_operator_less -> godot_bool */
func (gdt *Variant) OperatorLess(
	p_other Variant, /* godot_variant */
) bool {

	/* go_godot_variant_operator_less(API_STRUCT, *godot_variant) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_other))

	ret := C.go_godot_variant_operator_less(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_hash_compare -> godot_bool */
func (gdt *Variant) HashCompare(
	p_other Variant, /* godot_variant */
) bool {

	/* go_godot_variant_hash_compare(API_STRUCT, *godot_variant) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))
	in0 := (*C.godot_variant)(unsafe.Pointer(&p_other))

	ret := C.go_godot_variant_hash_compare(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_variant_booleanize -> godot_bool */
func (gdt *Variant) Booleanize() bool {

	/* go_godot_variant_booleanize(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	ret := C.go_godot_variant_booleanize(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_variant_destroy -> void */
func (gdt *Variant) Destroy() {

	/* go_godot_variant_destroy(API_STRUCT) ->void */

	api := CoreApi
	rcv := (*C.godot_variant)(unsafe.Pointer(gdt))

	C.go_godot_variant_destroy(
		api,
		rcv,
	)
	RegisterState.Stats.GodotTypeFrees["Variant"]++

}

type VariantCallError C.godot_variant_call_error

func InitVariantCallErrorGodotType() {
	RegisterState.Stats.GodotTypeAllocs["VariantCallError"] = 0
	RegisterState.Stats.GodotTypeFrees["VariantCallError"] = 0
}

type VariantCallErrorError C.godot_variant_call_error_error

func InitVariantCallErrorErrorGodotType() {
	RegisterState.Stats.GodotTypeAllocs["VariantCallErrorError"] = 0
	RegisterState.Stats.GodotTypeFrees["VariantCallErrorError"] = 0
}

/* Enum VariantCallErrorError */
const (
	GODOT_CALL_ERROR_CALL_OK VariantCallErrorError = iota
	GODOT_CALL_ERROR_CALL_ERROR_INVALID_METHOD
	GODOT_CALL_ERROR_CALL_ERROR_INVALID_ARGUMENT
	GODOT_CALL_ERROR_CALL_ERROR_TOO_MANY_ARGUMENTS
	GODOT_CALL_ERROR_CALL_ERROR_TOO_FEW_ARGUMENTS
	GODOT_CALL_ERROR_CALL_ERROR_INSTANCE_IS_NULL
)

type VariantOperator C.godot_variant_operator

func InitVariantOperatorGodotType() {
	RegisterState.Stats.GodotTypeAllocs["VariantOperator"] = 0
	RegisterState.Stats.GodotTypeFrees["VariantOperator"] = 0
}

/* Enum VariantOperator */
const (
	GODOT_VARIANT_OP_EQUAL VariantOperator = iota
	GODOT_VARIANT_OP_NOT_EQUAL
	GODOT_VARIANT_OP_LESS
	GODOT_VARIANT_OP_LESS_EQUAL
	GODOT_VARIANT_OP_GREATER
	GODOT_VARIANT_OP_GREATER_EQUAL
	GODOT_VARIANT_OP_ADD
	GODOT_VARIANT_OP_SUBTRACT
	GODOT_VARIANT_OP_MULTIPLY
	GODOT_VARIANT_OP_DIVIDE
	GODOT_VARIANT_OP_NEGATE
	GODOT_VARIANT_OP_POSITIVE
	GODOT_VARIANT_OP_MODULE
	GODOT_VARIANT_OP_STRING_CONCAT
	GODOT_VARIANT_OP_SHIFT_LEFT
	GODOT_VARIANT_OP_SHIFT_RIGHT
	GODOT_VARIANT_OP_BIT_AND
	GODOT_VARIANT_OP_BIT_OR
	GODOT_VARIANT_OP_BIT_XOR
	GODOT_VARIANT_OP_BIT_NEGATE
	GODOT_VARIANT_OP_AND
	GODOT_VARIANT_OP_OR
	GODOT_VARIANT_OP_XOR
	GODOT_VARIANT_OP_NOT
	GODOT_VARIANT_OP_IN
	GODOT_VARIANT_OP_MAX
)

type VariantType C.godot_variant_type

func InitVariantTypeGodotType() {
	RegisterState.Stats.GodotTypeAllocs["VariantType"] = 0
	RegisterState.Stats.GodotTypeFrees["VariantType"] = 0
}

/* Enum VariantType */
const (
	GODOT_VARIANT_TYPE_NIL VariantType = iota
	GODOT_VARIANT_TYPE_BOOL
	GODOT_VARIANT_TYPE_INT
	GODOT_VARIANT_TYPE_REAL
	GODOT_VARIANT_TYPE_STRING
	GODOT_VARIANT_TYPE_VECTOR2
	GODOT_VARIANT_TYPE_RECT2
	GODOT_VARIANT_TYPE_VECTOR3
	GODOT_VARIANT_TYPE_TRANSFORM2D
	GODOT_VARIANT_TYPE_PLANE
	GODOT_VARIANT_TYPE_QUAT
	GODOT_VARIANT_TYPE_AABB
	GODOT_VARIANT_TYPE_BASIS
	GODOT_VARIANT_TYPE_TRANSFORM
	GODOT_VARIANT_TYPE_COLOR
	GODOT_VARIANT_TYPE_NODE_PATH
	GODOT_VARIANT_TYPE_RID
	GODOT_VARIANT_TYPE_OBJECT
	GODOT_VARIANT_TYPE_DICTIONARY
	GODOT_VARIANT_TYPE_ARRAY
	GODOT_VARIANT_TYPE_POOL_BYTE_ARRAY
	GODOT_VARIANT_TYPE_POOL_INT_ARRAY
	GODOT_VARIANT_TYPE_POOL_REAL_ARRAY
	GODOT_VARIANT_TYPE_POOL_STRING_ARRAY
	GODOT_VARIANT_TYPE_POOL_VECTOR2_ARRAY
	GODOT_VARIANT_TYPE_POOL_VECTOR3_ARRAY
	GODOT_VARIANT_TYPE_POOL_COLOR_ARRAY
)

type Vector2 C.godot_vector2

func InitVector2GodotType() {
	RegisterState.Stats.GodotTypeAllocs["Vector2"] = 0
	RegisterState.Stats.GodotTypeFrees["Vector2"] = 0
}

func NewVector2(
	p_x float32 /* else case */, p_y float32, /* else case */
) Vector2 {
	dest := Vector2{}

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(&dest))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_x))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_y))

	/* go_godot_vector2_new(API_STRUCT,godot_real,godot_real) -> *Vector2 */

	C.go_godot_vector2_new(
		api,
		rcv,
		in0,
		in1,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	RegisterState.Stats.GodotTypeAllocs["Vector2"]++

	return dest
}

/* Getter Method: godot_vector2_as_string -> godot_string */
func (gdt *Vector2) AsString() String {

	/* go_godot_vector2_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_normalized -> godot_vector2 */
func (gdt *Vector2) Normalized() Vector2 {

	/* go_godot_vector2_normalized(API_STRUCT) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_normalized(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_length -> godot_real */
func (gdt *Vector2) Length() float32 {

	/* go_godot_vector2_length(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_length(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_angle -> godot_real */
func (gdt *Vector2) Angle() float32 {

	/* go_godot_vector2_angle(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_angle(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_length_squared -> godot_real */
func (gdt *Vector2) LengthSquared() float32 {

	/* go_godot_vector2_length_squared(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_length_squared(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_is_normalized -> godot_bool */
func (gdt *Vector2) IsNormalized() bool {

	/* go_godot_vector2_is_normalized(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_is_normalized(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_distance_to -> godot_real */
func (gdt *Vector2) DistanceTo(
	p_to Vector2, /* godot_vector2 */
) float32 {

	/* go_godot_vector2_distance_to(API_STRUCT, *godot_vector2) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_to))

	ret := C.go_godot_vector2_distance_to(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_distance_squared_to -> godot_real */
func (gdt *Vector2) DistanceSquaredTo(
	p_to Vector2, /* godot_vector2 */
) float32 {

	/* go_godot_vector2_distance_squared_to(API_STRUCT, *godot_vector2) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_to))

	ret := C.go_godot_vector2_distance_squared_to(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_angle_to -> godot_real */
func (gdt *Vector2) AngleTo(
	p_to Vector2, /* godot_vector2 */
) float32 {

	/* go_godot_vector2_angle_to(API_STRUCT, *godot_vector2) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_to))

	ret := C.go_godot_vector2_angle_to(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_angle_to_point -> godot_real */
func (gdt *Vector2) AngleToPoint(
	p_to Vector2, /* godot_vector2 */
) float32 {

	/* go_godot_vector2_angle_to_point(API_STRUCT, *godot_vector2) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_to))

	ret := C.go_godot_vector2_angle_to_point(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_linear_interpolate -> godot_vector2 */
func (gdt *Vector2) LinearInterpolate(
	p_b Vector2 /* godot_vector2 */, p_t float32, /* else case */
) Vector2 {

	/* go_godot_vector2_linear_interpolate(API_STRUCT, *godot_vector2,godot_real) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_b))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_t))

	ret := C.go_godot_vector2_linear_interpolate(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_cubic_interpolate -> godot_vector2 */
func (gdt *Vector2) CubicInterpolate(
	p_b Vector2 /* godot_vector2 */, p_pre_a Vector2 /* godot_vector2 */, p_post_b Vector2 /* godot_vector2 */, p_t float32, /* else case */
) Vector2 {

	/* go_godot_vector2_cubic_interpolate(API_STRUCT, *godot_vector2, *godot_vector2, *godot_vector2,godot_real) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_b))
	in1 := (*C.godot_vector2)(unsafe.Pointer(&p_pre_a))
	in2 := (*C.godot_vector2)(unsafe.Pointer(&p_post_b))
	in3 := *(*C.godot_real)(unsafe.Pointer(&p_t))

	ret := C.go_godot_vector2_cubic_interpolate(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_rotated -> godot_vector2 */
func (gdt *Vector2) Rotated(
	p_phi float32, /* else case */
) Vector2 {

	/* go_godot_vector2_rotated(API_STRUCT,godot_real) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_phi))

	ret := C.go_godot_vector2_rotated(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_tangent -> godot_vector2 */
func (gdt *Vector2) Tangent() Vector2 {

	/* go_godot_vector2_tangent(API_STRUCT) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_tangent(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_floor -> godot_vector2 */
func (gdt *Vector2) Floor() Vector2 {

	/* go_godot_vector2_floor(API_STRUCT) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_floor(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_snapped -> godot_vector2 */
func (gdt *Vector2) Snapped(
	p_by Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_vector2_snapped(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_by))

	ret := C.go_godot_vector2_snapped(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_aspect -> godot_real */
func (gdt *Vector2) Aspect() float32 {

	/* go_godot_vector2_aspect(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_aspect(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_dot -> godot_real */
func (gdt *Vector2) Dot(
	p_with Vector2, /* godot_vector2 */
) float32 {

	/* go_godot_vector2_dot(API_STRUCT, *godot_vector2) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_with))

	ret := C.go_godot_vector2_dot(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_slide -> godot_vector2 */
func (gdt *Vector2) Slide(
	p_n Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_vector2_slide(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_n))

	ret := C.go_godot_vector2_slide(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_bounce -> godot_vector2 */
func (gdt *Vector2) Bounce(
	p_n Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_vector2_bounce(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_n))

	ret := C.go_godot_vector2_bounce(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_reflect -> godot_vector2 */
func (gdt *Vector2) Reflect(
	p_n Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_vector2_reflect(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_n))

	ret := C.go_godot_vector2_reflect(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_abs -> godot_vector2 */
func (gdt *Vector2) Abs() Vector2 {

	/* go_godot_vector2_abs(API_STRUCT) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_abs(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_clamped -> godot_vector2 */
func (gdt *Vector2) Clamped(
	p_length float32, /* else case */
) Vector2 {

	/* go_godot_vector2_clamped(API_STRUCT,godot_real) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_length))

	ret := C.go_godot_vector2_clamped(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_operator_add -> godot_vector2 */
func (gdt *Vector2) OperatorAdd(
	p_b Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_vector2_operator_add(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector2_operator_add(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_operator_subtract -> godot_vector2 */
func (gdt *Vector2) OperatorSubtract(
	p_b Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_vector2_operator_subtract(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector2_operator_subtract(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_operator_multiply_vector -> godot_vector2 */
func (gdt *Vector2) OperatorMultiplyVector(
	p_b Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_vector2_operator_multiply_vector(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector2_operator_multiply_vector(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_operator_multiply_scalar -> godot_vector2 */
func (gdt *Vector2) OperatorMultiplyScalar(
	p_b float32, /* else case */
) Vector2 {

	/* go_godot_vector2_operator_multiply_scalar(API_STRUCT,godot_real) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector2_operator_multiply_scalar(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_operator_divide_vector -> godot_vector2 */
func (gdt *Vector2) OperatorDivideVector(
	p_b Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_vector2_operator_divide_vector(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector2_operator_divide_vector(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_operator_divide_scalar -> godot_vector2 */
func (gdt *Vector2) OperatorDivideScalar(
	p_b float32, /* else case */
) Vector2 {

	/* go_godot_vector2_operator_divide_scalar(API_STRUCT,godot_real) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector2_operator_divide_scalar(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_operator_equal -> godot_bool */
func (gdt *Vector2) OperatorEqual(
	p_b Vector2, /* godot_vector2 */
) bool {

	/* go_godot_vector2_operator_equal(API_STRUCT, *godot_vector2) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector2_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_operator_less -> godot_bool */
func (gdt *Vector2) OperatorLess(
	p_b Vector2, /* godot_vector2 */
) bool {

	/* go_godot_vector2_operator_less(API_STRUCT, *godot_vector2) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector2_operator_less(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_operator_neg -> godot_vector2 */
func (gdt *Vector2) OperatorNeg() Vector2 {

	/* go_godot_vector2_operator_neg(API_STRUCT) ->godot_vector2 */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_operator_neg(
		api,
		rcv,
	)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_vector2_set_x -> void */
func (gdt *Vector2) SetX(
	p_x float32, /* else case */
) {

	/* go_godot_vector2_set_x(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_x))

	C.go_godot_vector2_set_x(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Setter Method: godot_vector2_set_y -> void */
func (gdt *Vector2) SetY(
	p_y float32, /* else case */
) {

	/* go_godot_vector2_set_y(API_STRUCT,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_y))

	C.go_godot_vector2_set_y(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)
}

/* Getter Method: godot_vector2_get_x -> godot_real */
func (gdt *Vector2) GetX() float32 {

	/* go_godot_vector2_get_x(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_get_x(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_get_y -> godot_real */
func (gdt *Vector2) GetY() float32 {

	/* go_godot_vector2_get_y(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector2_get_y(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_move_toward -> godot_vector2 */
func (gdt *Vector2) MoveToward(
	p_to Vector2 /* godot_vector2 */, p_delta float32, /* else case */
) Vector2 {

	/* go_godot_vector2_move_toward(API_STRUCT, *godot_vector2,godot_real) ->godot_vector2 */

	api := Core12Api
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_to))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_delta))

	ret := C.go_godot_vector2_move_toward(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector2_direction_to -> godot_vector2 */
func (gdt *Vector2) DirectionTo(
	p_to Vector2, /* godot_vector2 */
) Vector2 {

	/* go_godot_vector2_direction_to(API_STRUCT, *godot_vector2) ->godot_vector2 */

	api := Core12Api
	rcv := (*C.godot_vector2)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector2)(unsafe.Pointer(&p_to))

	ret := C.go_godot_vector2_direction_to(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector2)(unsafe.Pointer(&ret))
}

type Vector3 C.godot_vector3

func InitVector3GodotType() {
	RegisterState.Stats.GodotTypeAllocs["Vector3"] = 0
	RegisterState.Stats.GodotTypeFrees["Vector3"] = 0
}

func NewVector3(
	p_x float32 /* else case */, p_y float32 /* else case */, p_z float32, /* else case */
) Vector3 {
	dest := Vector3{}

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(&dest))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_x))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_y))
	in2 := *(*C.godot_real)(unsafe.Pointer(&p_z))

	/* go_godot_vector3_new(API_STRUCT,godot_real,godot_real,godot_real) -> *Vector3 */

	C.go_godot_vector3_new(
		api,
		rcv,
		in0,
		in1,
		in2,
	)

	runtime.KeepAlive(rcv)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)

	RegisterState.Stats.GodotTypeAllocs["Vector3"]++

	return dest
}

/* Getter Method: godot_vector3_as_string -> godot_string */
func (gdt *Vector3) AsString() String {

	/* go_godot_vector3_as_string(API_STRUCT) ->godot_string */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_as_string(
		api,
		rcv,
	)

	return *(*String)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_min_axis -> godot_int */
func (gdt *Vector3) MinAxis() int32 {

	/* go_godot_vector3_min_axis(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_min_axis(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_max_axis -> godot_int */
func (gdt *Vector3) MaxAxis() int32 {

	/* go_godot_vector3_max_axis(API_STRUCT) ->godot_int */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_max_axis(
		api,
		rcv,
	)

	return *(*int32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_length -> godot_real */
func (gdt *Vector3) Length() float32 {

	/* go_godot_vector3_length(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_length(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_length_squared -> godot_real */
func (gdt *Vector3) LengthSquared() float32 {

	/* go_godot_vector3_length_squared(API_STRUCT) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_length_squared(
		api,
		rcv,
	)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_is_normalized -> godot_bool */
func (gdt *Vector3) IsNormalized() bool {

	/* go_godot_vector3_is_normalized(API_STRUCT) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_is_normalized(
		api,
		rcv,
	)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_normalized -> godot_vector3 */
func (gdt *Vector3) Normalized() Vector3 {

	/* go_godot_vector3_normalized(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_normalized(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_inverse -> godot_vector3 */
func (gdt *Vector3) Inverse() Vector3 {

	/* go_godot_vector3_inverse(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_inverse(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_snapped -> godot_vector3 */
func (gdt *Vector3) Snapped(
	p_by Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_vector3_snapped(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_by))

	ret := C.go_godot_vector3_snapped(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_rotated -> godot_vector3 */
func (gdt *Vector3) Rotated(
	p_axis Vector3 /* godot_vector3 */, p_phi float32, /* else case */
) Vector3 {

	/* go_godot_vector3_rotated(API_STRUCT, *godot_vector3,godot_real) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_axis))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_phi))

	ret := C.go_godot_vector3_rotated(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_linear_interpolate -> godot_vector3 */
func (gdt *Vector3) LinearInterpolate(
	p_b Vector3 /* godot_vector3 */, p_t float32, /* else case */
) Vector3 {

	/* go_godot_vector3_linear_interpolate(API_STRUCT, *godot_vector3,godot_real) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_t))

	ret := C.go_godot_vector3_linear_interpolate(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_cubic_interpolate -> godot_vector3 */
func (gdt *Vector3) CubicInterpolate(
	p_b Vector3 /* godot_vector3 */, p_pre_a Vector3 /* godot_vector3 */, p_post_b Vector3 /* godot_vector3 */, p_t float32, /* else case */
) Vector3 {

	/* go_godot_vector3_cubic_interpolate(API_STRUCT, *godot_vector3, *godot_vector3, *godot_vector3,godot_real) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))
	in1 := (*C.godot_vector3)(unsafe.Pointer(&p_pre_a))
	in2 := (*C.godot_vector3)(unsafe.Pointer(&p_post_b))
	in3 := *(*C.godot_real)(unsafe.Pointer(&p_t))

	ret := C.go_godot_vector3_cubic_interpolate(
		api,
		rcv,
		in0,
		in1,
		in2,
		in3,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
	runtime.KeepAlive(in2)
	runtime.KeepAlive(in3)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_dot -> godot_real */
func (gdt *Vector3) Dot(
	p_b Vector3, /* godot_vector3 */
) float32 {

	/* go_godot_vector3_dot(API_STRUCT, *godot_vector3) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_dot(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_cross -> godot_vector3 */
func (gdt *Vector3) Cross(
	p_b Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_vector3_cross(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_cross(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_outer -> godot_basis */
func (gdt *Vector3) Outer(
	p_b Vector3, /* godot_vector3 */
) Basis {

	/* go_godot_vector3_outer(API_STRUCT, *godot_vector3) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_outer(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_to_diagonal_matrix -> godot_basis */
func (gdt *Vector3) ToDiagonalMatrix() Basis {

	/* go_godot_vector3_to_diagonal_matrix(API_STRUCT) ->godot_basis */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_to_diagonal_matrix(
		api,
		rcv,
	)

	return *(*Basis)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_abs -> godot_vector3 */
func (gdt *Vector3) Abs() Vector3 {

	/* go_godot_vector3_abs(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_abs(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_floor -> godot_vector3 */
func (gdt *Vector3) Floor() Vector3 {

	/* go_godot_vector3_floor(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_floor(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_ceil -> godot_vector3 */
func (gdt *Vector3) Ceil() Vector3 {

	/* go_godot_vector3_ceil(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_ceil(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_distance_to -> godot_real */
func (gdt *Vector3) DistanceTo(
	p_b Vector3, /* godot_vector3 */
) float32 {

	/* go_godot_vector3_distance_to(API_STRUCT, *godot_vector3) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_distance_to(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_distance_squared_to -> godot_real */
func (gdt *Vector3) DistanceSquaredTo(
	p_b Vector3, /* godot_vector3 */
) float32 {

	/* go_godot_vector3_distance_squared_to(API_STRUCT, *godot_vector3) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_distance_squared_to(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_angle_to -> godot_real */
func (gdt *Vector3) AngleTo(
	p_to Vector3, /* godot_vector3 */
) float32 {

	/* go_godot_vector3_angle_to(API_STRUCT, *godot_vector3) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_to))

	ret := C.go_godot_vector3_angle_to(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_slide -> godot_vector3 */
func (gdt *Vector3) Slide(
	p_n Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_vector3_slide(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_n))

	ret := C.go_godot_vector3_slide(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_bounce -> godot_vector3 */
func (gdt *Vector3) Bounce(
	p_n Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_vector3_bounce(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_n))

	ret := C.go_godot_vector3_bounce(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_reflect -> godot_vector3 */
func (gdt *Vector3) Reflect(
	p_n Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_vector3_reflect(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_n))

	ret := C.go_godot_vector3_reflect(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_operator_add -> godot_vector3 */
func (gdt *Vector3) OperatorAdd(
	p_b Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_vector3_operator_add(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_operator_add(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_operator_subtract -> godot_vector3 */
func (gdt *Vector3) OperatorSubtract(
	p_b Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_vector3_operator_subtract(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_operator_subtract(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_operator_multiply_vector -> godot_vector3 */
func (gdt *Vector3) OperatorMultiplyVector(
	p_b Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_vector3_operator_multiply_vector(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_operator_multiply_vector(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_operator_multiply_scalar -> godot_vector3 */
func (gdt *Vector3) OperatorMultiplyScalar(
	p_b float32, /* else case */
) Vector3 {

	/* go_godot_vector3_operator_multiply_scalar(API_STRUCT,godot_real) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_operator_multiply_scalar(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_operator_divide_vector -> godot_vector3 */
func (gdt *Vector3) OperatorDivideVector(
	p_b Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_vector3_operator_divide_vector(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_operator_divide_vector(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_operator_divide_scalar -> godot_vector3 */
func (gdt *Vector3) OperatorDivideScalar(
	p_b float32, /* else case */
) Vector3 {

	/* go_godot_vector3_operator_divide_scalar(API_STRUCT,godot_real) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_real)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_operator_divide_scalar(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_operator_equal -> godot_bool */
func (gdt *Vector3) OperatorEqual(
	p_b Vector3, /* godot_vector3 */
) bool {

	/* go_godot_vector3_operator_equal(API_STRUCT, *godot_vector3) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_operator_equal(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_operator_less -> godot_bool */
func (gdt *Vector3) OperatorLess(
	p_b Vector3, /* godot_vector3 */
) bool {

	/* go_godot_vector3_operator_less(API_STRUCT, *godot_vector3) ->godot_bool */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_b))

	ret := C.go_godot_vector3_operator_less(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*bool)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_operator_neg -> godot_vector3 */
func (gdt *Vector3) OperatorNeg() Vector3 {

	/* go_godot_vector3_operator_neg(API_STRUCT) ->godot_vector3 */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))

	ret := C.go_godot_vector3_operator_neg(
		api,
		rcv,
	)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Setter Method: godot_vector3_set_axis -> void */
func (gdt *Vector3) SetAxis(
	p_axis Vector3Axis /* else case */, p_val float32, /* else case */
) {

	/* go_godot_vector3_set_axis(API_STRUCT,godot_vector3_axis,godot_real) ->void */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_vector3_axis)(unsafe.Pointer(&p_axis))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_val))

	C.go_godot_vector3_set_axis(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)
}

/* Getter Method: godot_vector3_get_axis -> godot_real */
func (gdt *Vector3) GetAxis(
	p_axis Vector3Axis, /* else case */
) float32 {

	/* go_godot_vector3_get_axis(API_STRUCT,godot_vector3_axis) ->godot_real */

	api := CoreApi
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := *(*C.godot_vector3_axis)(unsafe.Pointer(&p_axis))

	ret := C.go_godot_vector3_get_axis(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*float32)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_move_toward -> godot_vector3 */
func (gdt *Vector3) MoveToward(
	p_to Vector3 /* godot_vector3 */, p_delta float32, /* else case */
) Vector3 {

	/* go_godot_vector3_move_toward(API_STRUCT, *godot_vector3,godot_real) ->godot_vector3 */

	api := Core12Api
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_to))
	in1 := *(*C.godot_real)(unsafe.Pointer(&p_delta))

	ret := C.go_godot_vector3_move_toward(
		api,
		rcv,
		in0,
		in1,
	)
	runtime.KeepAlive(in0)
	runtime.KeepAlive(in1)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

/* Getter Method: godot_vector3_direction_to -> godot_vector3 */
func (gdt *Vector3) DirectionTo(
	p_to Vector3, /* godot_vector3 */
) Vector3 {

	/* go_godot_vector3_direction_to(API_STRUCT, *godot_vector3) ->godot_vector3 */

	api := Core12Api
	rcv := (*C.godot_vector3)(unsafe.Pointer(gdt))
	in0 := (*C.godot_vector3)(unsafe.Pointer(&p_to))

	ret := C.go_godot_vector3_direction_to(
		api,
		rcv,
		in0,
	)
	runtime.KeepAlive(in0)

	return *(*Vector3)(unsafe.Pointer(&ret))
}

type Vector3Axis C.godot_vector3_axis

func InitVector3AxisGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Vector3Axis"] = 0
	RegisterState.Stats.GodotTypeFrees["Vector3Axis"] = 0
}

/* Enum Vector3Axis */
const (
	GODOT_VECTOR3_AXIS_X Vector3Axis = iota
	GODOT_VECTOR3_AXIS_Y
	GODOT_VECTOR3_AXIS_Z
)

type GdnativeCore11ApiStruct C.godot_gdnative_core_1_1_api_struct

func InitGdnativeCore11ApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeCore11ApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeCore11ApiStruct"] = 0
}

type GdnativeCore12ApiStruct C.godot_gdnative_core_1_2_api_struct

func InitGdnativeCore12ApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeCore12ApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeCore12ApiStruct"] = 0
}

type GdnativeCoreApiStruct C.godot_gdnative_core_api_struct

func InitGdnativeCoreApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeCoreApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeCoreApiStruct"] = 0
}

type GdnativeExtAndroidApiStruct C.godot_gdnative_ext_android_api_struct

func InitGdnativeExtAndroidApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeExtAndroidApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeExtAndroidApiStruct"] = 0
}

type GdnativeExtArvrApiStruct C.godot_gdnative_ext_arvr_api_struct

func InitGdnativeExtArvrApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeExtArvrApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeExtArvrApiStruct"] = 0
}

type GdnativeExtNativescript11ApiStruct C.godot_gdnative_ext_nativescript_1_1_api_struct

func InitGdnativeExtNativescript11ApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeExtNativescript11ApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeExtNativescript11ApiStruct"] = 0
}

type GdnativeExtNativescriptApiStruct C.godot_gdnative_ext_nativescript_api_struct

func InitGdnativeExtNativescriptApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeExtNativescriptApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeExtNativescriptApiStruct"] = 0
}

type GdnativeExtNet32ApiStruct C.godot_gdnative_ext_net_3_2_api_struct

func InitGdnativeExtNet32ApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeExtNet32ApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeExtNet32ApiStruct"] = 0
}

type GdnativeExtNetApiStruct C.godot_gdnative_ext_net_api_struct

func InitGdnativeExtNetApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeExtNetApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeExtNetApiStruct"] = 0
}

type GdnativeExtPluginscriptApiStruct C.godot_gdnative_ext_pluginscript_api_struct

func InitGdnativeExtPluginscriptApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeExtPluginscriptApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeExtPluginscriptApiStruct"] = 0
}

type GdnativeExtVideodecoderApiStruct C.godot_gdnative_ext_videodecoder_api_struct

func InitGdnativeExtVideodecoderApiStructGodotType() {
	RegisterState.Stats.GodotTypeAllocs["GdnativeExtVideodecoderApiStruct"] = 0
	RegisterState.Stats.GodotTypeFrees["GdnativeExtVideodecoderApiStruct"] = 0
}

type InstanceBindingFunctions C.godot_instance_binding_functions

func InitInstanceBindingFunctionsGodotType() {
	RegisterState.Stats.GodotTypeAllocs["InstanceBindingFunctions"] = 0
	RegisterState.Stats.GodotTypeFrees["InstanceBindingFunctions"] = 0
}

type MethodArg C.godot_method_arg

func InitMethodArgGodotType() {
	RegisterState.Stats.GodotTypeAllocs["MethodArg"] = 0
	RegisterState.Stats.GodotTypeFrees["MethodArg"] = 0
}

type MethodRpcMode C.godot_method_rpc_mode

func InitMethodRpcModeGodotType() {
	RegisterState.Stats.GodotTypeAllocs["MethodRpcMode"] = 0
	RegisterState.Stats.GodotTypeFrees["MethodRpcMode"] = 0
}

/* Enum MethodRpcMode */
const (
	GODOT_METHOD_RPC_MODE_DISABLED MethodRpcMode = iota
	GODOT_METHOD_RPC_MODE_REMOTE
	GODOT_METHOD_RPC_MODE_MASTER
	GODOT_METHOD_RPC_MODE_PUPPET
	GODOT_METHOD_RPC_MODE_SLAVE
	GODOT_METHOD_RPC_MODE_REMOTESYNC
	GODOT_METHOD_RPC_MODE_SYNC
	GODOT_METHOD_RPC_MODE_MASTERSYNC
	GODOT_METHOD_RPC_MODE_PUPPETSYNC
)

type PropertyAttributes C.godot_property_attributes

func InitPropertyAttributesGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PropertyAttributes"] = 0
	RegisterState.Stats.GodotTypeFrees["PropertyAttributes"] = 0
}

type PropertyHint C.godot_property_hint

func InitPropertyHintGodotType() {
	RegisterState.Stats.GodotTypeAllocs["PropertyHint"] = 0
	RegisterState.Stats.GodotTypeFrees["PropertyHint"] = 0
}

/* Enum PropertyHint */
const (
	GODOT_PROPERTY_HINT_NONE PropertyHint = iota
	GODOT_PROPERTY_HINT_RANGE
	GODOT_PROPERTY_HINT_EXP_RANGE
	GODOT_PROPERTY_HINT_ENUM
	GODOT_PROPERTY_HINT_EXP_EASING
	GODOT_PROPERTY_HINT_LENGTH
	GODOT_PROPERTY_HINT_SPRITE_FRAME
	GODOT_PROPERTY_HINT_KEY_ACCEL
	GODOT_PROPERTY_HINT_FLAGS
	GODOT_PROPERTY_HINT_LAYERS_2D_RENDER
	GODOT_PROPERTY_HINT_LAYERS_2D_PHYSICS
	GODOT_PROPERTY_HINT_LAYERS_3D_RENDER
	GODOT_PROPERTY_HINT_LAYERS_3D_PHYSICS
	GODOT_PROPERTY_HINT_FILE
	GODOT_PROPERTY_HINT_DIR
	GODOT_PROPERTY_HINT_GLOBAL_FILE
	GODOT_PROPERTY_HINT_GLOBAL_DIR
	GODOT_PROPERTY_HINT_RESOURCE_TYPE
	GODOT_PROPERTY_HINT_MULTILINE_TEXT
	GODOT_PROPERTY_HINT_PLACEHOLDER_TEXT
	GODOT_PROPERTY_HINT_COLOR_NO_ALPHA
	GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSY
	GODOT_PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS
	GODOT_PROPERTY_HINT_OBJECT_ID
	GODOT_PROPERTY_HINT_TYPE_STRING
	GODOT_PROPERTY_HINT_NODE_PATH_TO_EDITED_NODE
	GODOT_PROPERTY_HINT_METHOD_OF_VARIANT_TYPE
	GODOT_PROPERTY_HINT_METHOD_OF_BASE_TYPE
	GODOT_PROPERTY_HINT_METHOD_OF_INSTANCE
	GODOT_PROPERTY_HINT_METHOD_OF_SCRIPT
	GODOT_PROPERTY_HINT_PROPERTY_OF_VARIANT_TYPE
	GODOT_PROPERTY_HINT_PROPERTY_OF_BASE_TYPE
	GODOT_PROPERTY_HINT_PROPERTY_OF_INSTANCE
	GODOT_PROPERTY_HINT_PROPERTY_OF_SCRIPT
	GODOT_PROPERTY_HINT_MAX
)

type Signal C.godot_signal

func InitSignalGodotType() {
	RegisterState.Stats.GodotTypeAllocs["Signal"] = 0
	RegisterState.Stats.GodotTypeFrees["Signal"] = 0
}

type SignalArgument C.godot_signal_argument

func InitSignalArgumentGodotType() {
	RegisterState.Stats.GodotTypeAllocs["SignalArgument"] = 0
	RegisterState.Stats.GodotTypeFrees["SignalArgument"] = 0
}

type NetMultiplayerPeer C.godot_net_multiplayer_peer

func InitNetMultiplayerPeerGodotType() {
	RegisterState.Stats.GodotTypeAllocs["NetMultiplayerPeer"] = 0
	RegisterState.Stats.GodotTypeFrees["NetMultiplayerPeer"] = 0
}

type NetPacketPeer C.godot_net_packet_peer

func InitNetPacketPeerGodotType() {
	RegisterState.Stats.GodotTypeAllocs["NetPacketPeer"] = 0
	RegisterState.Stats.GodotTypeFrees["NetPacketPeer"] = 0
}

type NetStreamPeer C.godot_net_stream_peer

func InitNetStreamPeerGodotType() {
	RegisterState.Stats.GodotTypeAllocs["NetStreamPeer"] = 0
	RegisterState.Stats.GodotTypeFrees["NetStreamPeer"] = 0
}

type NetWebrtcDataChannel C.godot_net_webrtc_data_channel

func InitNetWebrtcDataChannelGodotType() {
	RegisterState.Stats.GodotTypeAllocs["NetWebrtcDataChannel"] = 0
	RegisterState.Stats.GodotTypeFrees["NetWebrtcDataChannel"] = 0
}

type NetWebrtcLibrary C.godot_net_webrtc_library

func InitNetWebrtcLibraryGodotType() {
	RegisterState.Stats.GodotTypeAllocs["NetWebrtcLibrary"] = 0
	RegisterState.Stats.GodotTypeFrees["NetWebrtcLibrary"] = 0
}

type NetWebrtcPeerConnection C.godot_net_webrtc_peer_connection

func InitNetWebrtcPeerConnectionGodotType() {
	RegisterState.Stats.GodotTypeAllocs["NetWebrtcPeerConnection"] = 0
	RegisterState.Stats.GodotTypeFrees["NetWebrtcPeerConnection"] = 0
}

type VideodecoderInterfaceGdnative C.godot_videodecoder_interface_gdnative

func InitVideodecoderInterfaceGdnativeGodotType() {
	RegisterState.Stats.GodotTypeAllocs["VideodecoderInterfaceGdnative"] = 0
	RegisterState.Stats.GodotTypeFrees["VideodecoderInterfaceGdnative"] = 0
}

//revive:enable
