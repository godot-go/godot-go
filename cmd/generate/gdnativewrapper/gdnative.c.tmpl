{{ $view := . -}}
/*------------------------------------------------------------------------------
//   This code was generated by template gdnative.c.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "gdnative.c.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
#include <gdnative.wrapper.gen.h>
#include <gdnative/aabb.h>
#include <gdnative/array.h>
#include <gdnative/basis.h>
#include <gdnative/color.h>
#include <gdnative/dictionary.h>
#include <gdnative/gdnative.h>
#include <gdnative/node_path.h>
#include <gdnative/plane.h>
#include <gdnative/pool_arrays.h>
#include <gdnative/quat.h>
#include <gdnative/rect2.h>
#include <gdnative/rid.h>
#include <gdnative/string.h>
#include <gdnative/string_name.h>
#include <gdnative/transform.h>
#include <gdnative/transform2d.h>
#include <gdnative/variant.h>
#include <gdnative/vector2.h>
#include <gdnative/vector3.h>
#include <gdnative_api_struct.gen.h>

/* Go cannot call C function pointers directly, so we must generate C wrapper code to call the functions. */
{{ range $i, $apiVersion := $view.ApiVersions -}}
/* GDNative {{ $apiVersion.Type }} {{ $apiVersion.Version.Major }}.{{ $apiVersion.Version.Minor }} */
{{ range $i, $api := $apiVersion.API -}}
	{{ $api.ReturnType }} go_{{ $api.Name }}(godot_gdnative_{{ $apiVersion.StructTypeAndVersion $view.StructType }}_api_struct * p_api{{ if ($view.HasArgs $api.Arguments) }}, {{ end }}{{ range $j, $arg := $api.Arguments }}{{ $arg.FunctionArgument }}{{ if ($view.NotLastElement $j $api.Arguments) }}, {{ end }}{{ end }}) {
	{{ if ($view.NotVoid $api.ReturnType) }}return {{ end }}p_api->{{ $api.Name }}({{ range $j, $arg := $api.Arguments }}{{ index $arg 1 }}{{ if ($view.NotLastElement $j $api.Arguments) }}, {{ end }}{{ end }});
}
{{ end -}}
{{ end -}}
