/*------------------------------------------------------------------------------
//   This code was generated by template gdnative_wrapper.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "gdnative.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
{{ $view := . -}}

package gdnative

//revive:disable

// #include <godot/gdnative_interface.h>
// #include "gdnative_wrapper.gen.h"
// #include <stdint.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
	"unsafe"
)

// aliases
type Uint64T C.uint64_t
type Uint32T C.uint32_t
type Uint16T C.uint16_t
type Uint8T C.uint8_t
type Int32T C.int32_t
type Int16T C.int16_t
type Int8T C.int8_t
type Char C.char
type WcharT C.wchar_t
{{ range $i, $t := $view.CollectAliases -}}
	type {{ camelCase $t.Name }} C.{{ $t.Name }}
{{ end -}}

// enums
{{ range $i, $e := $view.CollectEnums -}}
type {{ $e.Name }} C.{{ $e.Name }}
const (
	{{ range $j, $v := $e.Values -}}
	{{ $v.Name }} {{ if eq $j 0 }}{{ $e.Name }}{{ end }} {{ with $z := (goEnumValue $v $j) -}} = {{ $z }} {{- end }}
	{{ end -}}
)
{{ end }}

// functions
{{ range $i, $f := $view.CollectFunctions -}}
	type {{ $f.Name }} C.{{ $f.Name }}
{{ end -}}

// custom functions
func CallFunc_GDNativePtrConstructor(
	cb GDNativePtrConstructor,
	p_base GDNativeTypePtr,
	p_args *GDNativeTypePtr,
) {
	C.cgo_callfn_GDNativePtrConstructor(
		(C.GDNativePtrConstructor)(cb),
		(C.GDNativeTypePtr)(p_base),
		(*C.GDNativeTypePtr)(p_args),
	)
}

func CallFunc_GDNativePtrDestructor(
	cb GDNativePtrDestructor,
	ptr GDNativeTypePtr,
) {
	C.cgo_callfn_GDNativePtrDestructor(
		(C.GDNativePtrDestructor)(cb),
		(C.GDNativeTypePtr)(ptr),
	)
}

func CallFunc_GDNativePtrOperatorEvaluator(
	cb GDNativePtrOperatorEvaluator,
	p_left GDNativeTypePtr,
	p_right GDNativeTypePtr,
	r_result GDNativeTypePtr,
) {
	C.cgo_callfn_GDNativePtrOperatorEvaluator(
		(C.GDNativePtrOperatorEvaluator)(cb),
		(C.GDNativeTypePtr)(p_left),
		(C.GDNativeTypePtr)(p_right),
		(C.GDNativeTypePtr)(r_result),
	)
}

func CallFunc_GDNativePtrBuiltInMethod(
	cb GDNativePtrBuiltInMethod,
	p_base GDNativeTypePtr,
	p_args *GDNativeTypePtr,
	r_return GDNativeTypePtr,
	p_argument_count int32,
) {
	C.cgo_callfn_GDNativePtrBuiltInMethod(
		(C.GDNativePtrBuiltInMethod)(cb),
		(C.GDNativeTypePtr)(p_base),
		(*C.GDNativeTypePtr)(p_args),
		(C.GDNativeTypePtr)(r_return),
		(C.int)(p_argument_count),
	);
}

func CallFunc_GDNativePtrUtilityFunction(
	cb GDNativePtrUtilityFunction,
	r_return GDNativeTypePtr,
	p_arguments *GDNativeTypePtr,
	p_argument_count int32,
) {
	C.cgo_callfn_GDNativePtrUtilityFunction(
		(C.GDNativePtrUtilityFunction)(cb),
		(C.GDNativeTypePtr)(r_return),
		(*C.GDNativeTypePtr)(p_arguments),
		(C.int)(p_argument_count),
	)
}

func CallFunc_GDNativePtrGetter(
	cb GDNativePtrGetter,
	p_base GDNativeTypePtr,
	r_value GDNativeTypePtr,
) {
	C.cgo_callfn_GDNativePtrGetter(
		(C.GDNativePtrGetter)(cb),
		(C.GDNativeTypePtr)(p_base),
		(C.GDNativeTypePtr)(r_value),
	)
}

func CallFunc_GDNativePtrSetter(
	cb GDNativePtrSetter,
	p_base GDNativeTypePtr,
	p_value GDNativeTypePtr,
) {
	C.cgo_callfn_GDNativePtrSetter(
		(C.GDNativePtrSetter)(cb),
		(C.GDNativeTypePtr)(p_base),
		(C.GDNativeTypePtr)(p_value),
	)
}

func CallFunc_GDNativePtrIndexedGetter(
	cb GDNativePtrIndexedGetter,
	p_base GDNativeTypePtr,
	p_index GDNativeInt,
	r_value GDNativeTypePtr,
) {
	C.cgo_callfn_GDNativePtrIndexedGetter(
		(C.GDNativePtrIndexedGetter)(cb),
		(C.GDNativeTypePtr)(p_base),
		(C.GDNativeInt)(p_index),
		(C.GDNativeTypePtr)(r_value),
	)
}

func CallFunc_GDNativePtrIndexedSetter(
	cb GDNativePtrIndexedSetter,
	p_base GDNativeTypePtr,
	p_index GDNativeInt,
	p_value GDNativeTypePtr,
) {
	C.cgo_callfn_GDNativePtrIndexedSetter(
		(C.GDNativePtrIndexedSetter)(cb),
		(C.GDNativeTypePtr)(p_base),
		(C.GDNativeInt)(p_index),
		(C.GDNativeTypePtr)(p_value),
	)
}

func CallFunc_GDNativeVariantFromTypeConstructorFunc(
	cb GDNativeVariantFromTypeConstructorFunc,
	arg_0 GDNativeVariantPtr,
    arg_1 GDNativeTypePtr,
) {
	C.cgo_callfn_GDNativeVariantFromTypeConstructorFunc(
		(C.GDNativeVariantFromTypeConstructorFunc)(cb),
		(C.GDNativeVariantPtr)(arg_0),
		(C.GDNativeTypePtr)(arg_1),
	)
}

func CallFunc_GDNativeTypeFromVariantConstructorFunc(
	cb GDNativeTypeFromVariantConstructorFunc,
	arg_0 GDNativeTypePtr,
    arg_1 GDNativeVariantPtr,
) {
	C.cgo_callfn_GDNativeTypeFromVariantConstructorFunc(
		(C.GDNativeTypeFromVariantConstructorFunc)(cb),
		(C.GDNativeTypePtr)(arg_0),
		(C.GDNativeVariantPtr)(arg_1),
	)
}

{{/*
	func Call{{ $f.Name }}(cb {{ $f.Name }}
		{{- range $j, $arg := $f.Arguments -}}
			, {{ if $arg.Name }}{{ $arg.Name }}{{ else }}arg_{{ $j }}{{ end }} {{ goArgumentType $arg.Type $arg.Name }}
		{{- end -}}
	) {{ goReturnType $f.ReturnType }} {
		{{ if (gt (len (goReturnType $f.ReturnType)) 0) }}return {{ end }}  C.cgo_{{ $f.Name -}}
			((C.{{ $f.Name }})(cb)
			{{- range $j, $arg := $f.Arguments -}}
				, (C.{{ goArgumentType $arg.Type $arg.Name }})({{ if $arg.Name }}{{ $arg.Name }}{{ else }}arg_{{ $j }}{{ end }})
			{{- end -}}
		)
	}
*/}}

// structs
{{ range $i, $t := $view.CollectStructs -}}
	type {{ $t.Name }} C.{{ $t.Name }}
{{ end -}}

// struct functions
{{ range $i, $t := $view.CollectStructs -}}
	{{- $fns := $t.CollectFunctions -}}

	{{- if gt (len $fns) 0 -}}
		/* struct ({{ $i }}) {{ $t.Name }} */
		{{ range $j, $f := $fns -}}
			{{ $rt := goReturnType $f.ReturnType }}
			func {{ $t.Name }}_{{ $f.Name }}(p_struct *{{ $t.Name }}
				{{- range $j, $arg := $f.Arguments -}}
					, {{ $arg.Name }} {{ goArgumentType $arg.Type $arg.Name }}
				{{- end -}}
			) {{ $rt }} {
				arg0 := (*C.{{ $t.Name }})(p_struct) // {{ $t.Name }}
				{{ range $j, $arg := $f.Arguments -}}
					arg{{ add $j 1 }} := {{ cgoCastArgument $arg }} // {{ $arg.Type.String }}
				{{ end }}

				{{ if $rt }}ret := {{ end -}}
				C.cgo_callfn_{{ $t.Name }}_{{ $f.Name }}(arg0
					{{- range $j, $arg := $f.Arguments -}}
						, arg{{ add $j 1 }}
					{{- end -}}
				)

				{{ range $j, $arg := $f.Arguments -}}
					{{ cgoCleanUpArgument $arg (add $j 1) }}
				{{ end }}

				{{- if $rt }}

				// {{ $f.ReturnType.String }}
				return {{ cgoCastReturnType $f.ReturnType "ret" }}
				{{ end -}}
			}
		{{ end -}}
	{{ end -}}
{{ end -}}
